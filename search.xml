<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Blog】Mac上搭建基于GitHub的Hexo博客</title>
      <link href="/2020/06/01/hexo-blog/"/>
      <url>/2020/06/01/hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>先前书写CSDN、简书等平台，到后来购买云虚拟主机、ECS、也都尝试搭建自己的一套Blog系统，Wordpress、自己打包上传build包等形式都已尝试过。越往后越觉得累，也觉得没有这个必要了。主要原因还是自己的服务器需要各种安全防御，否则各种病毒和蛀虫就开始肆虐了，有段时间因为工作忙，等准备写文章的时候发现，服务器已经宕机了。更有意思的是，有一次因为自己忘记续费，也没有快照，然后……你懂得……，所以后来就想着用Github托管可能会好一点。</p><a id="more"></a><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网</a>对环境配置已经描述的很清楚了，我就不搬砖了</p><h3 id="初见Hexo"><a href="#初见Hexo" class="headerlink" title="初见Hexo"></a>初见Hexo</h3><h4 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><p>有的文章命令是<code>$ sudo npm install -g hexo</code>，都可以安装，没有影响。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>终端cd到一个你选定的目录，执行初始化命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init blog</span></span><br></pre></td></tr></table></figure><p><code>blog</code>是最终建立的文件夹名称。<code>cd</code>到<code>blog</code>文件夹下，安装对应的<code>node</code>包：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p>开启hexo服务器</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/assets/ifmjk.png@normal" alt=""><br><em>补充：<code>hexo s</code>是<code>hexo server</code>的一种简写</em></p><p>打开<code>http://localhost:4000</code>在本地预览界面<br><img src="http://blog.idbeny.com/assets/57fka.png@normal" alt=""></p><h3 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h3><ol><li>使用<code>vim</code>或者直接用编辑器打开blog根目录下的<code>_config.yml</code>文件，修改如下配置（在文件最下方）<br><img src="http://blog.idbeny.com/assets/qg97x.png@normal" alt=""></li></ol><p><em>注意：repository是在github上已经初始化的项目地址</em></p><ol start="2"><li>在blog文件夹下生成静态页面<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span>或者：hexo g</span><br></pre></td></tr></table></figure></li></ol><p><em>补充：<code>hexo g</code>是<code>hexo generate</code>的一种简写</em></p><ol start="3"><li>配置/部署<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo deploy</span></span><br></pre></td></tr></table></figure></li></ol><p><em>补充：<code>hexo d</code>是<code>hexo deploy</code>的一种简写</em></p><blockquote><p>注意：若执行命令报错：无法连接git或找不到git，则执行如下命令来安装<code>hexo-deployer-git</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save        </span></span><br></pre></td></tr></table></figure><p>再次执行<code>hexo d</code>即可</p></blockquote><ol start="4"><li>鉴权github<br><img src="http://blog.idbeny.com/assets/f0m3c.png@normal" alt=""></li></ol><h3 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h3><ol><li>在blog文件夹下，执行新建文章命令<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"helloworld"</span></span><br></pre></td></tr></table></figure></li></ol><p><em>文件类型是<code>markdown</code>，文件地址在<code>/blog/source/_posts</code>目录下</em></p><ol start="2"><li><p>发布文章</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure><p>以上基本上就完成了博客的搭建和生产内容的基本设施。</p></li></ol><p>补充：新建-部署文章三步走</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> hexo clean<span class="comment">//清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line"><span class="symbol">$</span> hexo g<span class="comment">//生成缓存和静态文件</span></span><br><span class="line"><span class="symbol">$</span> hexo d<span class="comment">//重新部署到服务器</span></span><br></pre></td></tr></table></figure><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>要想页面漂亮并规范一点，可以配置个主题。我们一般在Hexo官网中搜索喜欢的主题，我们以<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT主题</a>为例。<br><img src="http://blog.idbeny.com/assets/mxyfe.png@normal" alt=""></p><p>把主题下载到<code>blog/themes/next</code>目录下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/iissnan/</span>hexo-theme-<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>修改<code>_config.yml</code>里的<code>theme</code>为<code>next</code><br><img src="http://blog.idbeny.com/assets/si4gm.png@normal" alt=""></p><p>主题的名称、描述等属性修改在<code>blog/themes/next/_config.yml</code>文件中，具体可参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">文档</a>。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>如果觉得github的二级域名使用不方便，我们可以通过绑定自己的一级域名来直接访问（实际上就是做了一次CDN跳转）</p><ul><li><p>在<code>/blog/themes/next/source</code>目录下新建文件名为<code>CNAME</code>的文件（注意没有后缀名），直接将自己的域名如：idbeny.com写入。</p></li><li><p>和发布文章一样，三步走即可（clean - g - d）</p></li><li><p>添加解析</p></li></ul><table><thead><tr><th align="center">记录类型</th><th align="center">主机记录</th><th align="center">解析线路</th><th align="center">记录值</th><th align="center">TTL</th></tr></thead><tbody><tr><td align="center">CNAME</td><td align="center">@</td><td align="center">默认</td><td align="center">idbeny.github.io.</td><td align="center">10分钟</td></tr></tbody></table><p><em>注意：记录值<code>idbeny.github.io.</code>结尾有一个点<code>.</code></em></p><h3 id="快速访问"><a href="#快速访问" class="headerlink" title="快速访问"></a>快速访问</h3><p>Github是国外网站，所以我们在天朝访问的时候总是有点慢，甚至有时候打不开，这时候我们就可以把文章同时部署到国内的托管平台（<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a> | <a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>等）。同时也能够保证突然某一天其中一个平台的大变动（当然，不管是哪一种，一定要在本地备份，一定要在本地备份，血的教训……）。</p><ol><li><p>首先到码云上注册并新建一个项目（步骤同<code>Github</code>），项目名称和用户个性后缀相同（方便二级域名访问博客），然后配置<code>Gitee Pages</code>服务；<br><img src="http://blog.idbeny.com/assets/jf23y.png@normal" alt=""></p></li><li><p>直接点击启动即可（需要绑定手机号，如果没有绑定，不能启动）<br><img src="http://blog.idbeny.com/assets/b0yeu.png@normal" alt=""></p></li><li><p>启动完成后，会提示已开启服务<br><img src="http://blog.idbeny.com/assets/fij4q.png@normal" alt=""></p></li></ol><ol start="4"><li><p>打开本地<code>blog</code>目录下的<code>_config.yml</code>文件，修改如下（之后的步骤和Github一致）：<br><img src="http://blog.idbeny.com/assets/nydar.png@normal" alt=""></p></li><li><p>部署三步走（<code>clean - d - g</code>）</p></li><li><p>域名解析</p></li></ol><table><thead><tr><th align="center">记录类型</th><th align="center">主机记录</th><th align="center">解析线路</th><th align="center">记录值</th><th align="center">TTL</th></tr></thead><tbody><tr><td align="center">CNAME</td><td align="center">@</td><td align="center">海外</td><td align="center">idbeny.github.io.</td><td align="center">10分钟</td></tr><tr><td align="center">CNAME</td><td align="center">@</td><td align="center">默认</td><td align="center">idbeny.gitee.io.</td><td align="center">10分钟</td></tr></tbody></table><p>如果是<code>Coding</code>平台，还需要到<code>blog/source</code>目录下新建<code>Staticfile</code>文件（名字必须是<code>Staticfile</code>），其他步骤都基本一致。</p><p>至此，<code>Blog</code>系统搭建完毕。</p><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官网</a> | <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网</a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Flutter】图片组件注意事项</title>
      <link href="/2020/03/23/flutter-widget-image-note/"/>
      <url>/2020/03/23/flutter-widget-image-note/</url>
      
        <content type="html"><![CDATA[<h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><ul><li>在<code>lib</code>同级文件夹新建<code>assets</code>资源文件夹</li><li><code>assets</code>文件夹通常包含<code>fonts</code>和<code>images</code>两个文件夹</li><li>如果有@2x或@3x图片怎么办？<ul><li>新建两个文件夹，文件名称分别为2.0x和3.0x，把对应尺寸的图片放到文件夹中，flutter会自动识别并找到对应图片的</li></ul></li><li>必须在<code>pubspec.yaml</code>配置文件中配置<code>assets</code>，如下：<a id="more"></a><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">assets:</span></span><br><span class="line">    - assets<span class="meta-keyword">/images/</span></span><br></pre></td></tr></table></figure></li><li>新建工程时，系统默认把assets相关配置注释掉，我们只需要把注释打开然后修改为我们需要的路径即可；</li><li>注意点：assets前面一定不要有空格，否则打包会报错；</li><li>最后点击<code>Android Studio</code>上面的<code>Packages get</code><br><img src="http://blog.idbeny.com/7gk7s.png@normal" alt=""></li></ul><p>使用图片Widget有时候让传ImageProvider类型，有时候让传一个Widget，怎么区分呢？</p><h4 id="ImageProvider"><a href="#ImageProvider" class="headerlink" title="ImageProvider"></a>ImageProvider</h4><p>NetworkImage<br>AssetImage<br>FileImage<br>…</p><h4 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h4><p>Image.network<br>Image.asset<br>…</p><ul><li>可以看出Image.*基本上都是继承自Widge</li><li>*Image基本上是ImageProvider类型</li></ul><p><strong>图片占位图（FadeInImage）</strong><br><img src="http://blog.idbeny.com/v4w8s.gif@normal" alt=""></p><ul><li>当网络图片加载完成前优先显示一张默认图片；</li><li>使用<code>FadeInImage</code>进行图片显示的时候会有一个动画过程，可以通过属性设置动画时间；</li><li><code>fadeOutDuration</code>动画时间默认300毫秒，<code>fadeInDuration</code>动画时间默认700毫秒；<br><img src="http://blog.idbeny.com/hlaf0.png@normal" alt=""></li></ul><h4 id="图片缓存"><a href="#图片缓存" class="headerlink" title="图片缓存"></a>图片缓存</h4><ul><li>参考：<a href="https://api.flutter.dev/flutter/widgets/image-class.html" target="_blank" rel="noopener">https://api.flutter.dev/flutter/widgets/image-class.html</a></li><li>flutter默认会对图片进行缓存的；</li><li>注意：图片默认最多缓存1000张，总大小100MB（可以调整）</li></ul><h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><ul><li>Icon继承自<code>StatelessWidget</code>，所以Icon是一个Widget；</li><li>Icon是字体图标（是一个矢量图，前端开发经常会用到），可以设置颜色和大小，用法和字体几乎无差别；</li><li>在创建的时候，开发工具可以帮助我们显示对应的图标样式；<br><img src="http://blog.idbeny.com/g76ew.png@normal" alt=""></li></ul><p>既然Icon是一个字体图标，那么可以用<code>Text组件</code>显示么？当然可以。</p><ul><li><p>Icons.people是一个16进制的IconData<br><img src="http://blog.idbeny.com/xynvl.png@normal" alt=""></p></li><li><p>Text组件本质也是让传入一个data，我们把<code>Icons.people</code>的十六进制转换成Unicode编码试下（0xe7fb =&gt; \ue7fb）<br><img src="http://blog.idbeny.com/kci5l.png@normal" alt=""></p></li><li><p>表明：在一个字体库、同一个编码下IconData就能使用Text显示</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Dart】Dart基本语法（二）</title>
      <link href="/2020/03/06/dart-syntax-02/"/>
      <url>/2020/03/06/dart-syntax-02/</url>
      
        <content type="html"><![CDATA[<h3 id="一、运算符"><a href="#一、运算符" class="headerlink" title="一、运算符"></a>一、运算符</h3><p>Dart中的基本运算符和其他语言无差异，但有几个运算符是其他平台没有的</p><a id="more"></a><h4 id="1-1-除法、整除、取模运算"><a href="#1-1-除法、整除、取模运算" class="headerlink" title="1.1. 除法、整除、取模运算"></a>1.1. 除法、整除、取模运算</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span> / <span class="number">3</span>); <span class="comment">// 除法操作, 结果2.3333..</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span> ~/ <span class="number">3</span>); <span class="comment">// 整除操作, 结果2;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span> % <span class="number">3</span>); <span class="comment">// 取模操作, 结果1;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-赋值运算"><a href="#1-2-赋值运算" class="headerlink" title="1.2. ??=赋值运算"></a>1.2. ??=赋值运算</h4><ul><li>当变量有值时，使用自己原来的值。</li><li>当变量为null时，使用后面的内容进行赋值。<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'idbeny'</span>;</span><br><span class="line">  name ??= <span class="string">'1024星球'</span>; </span><br><span class="line">  <span class="built_in">print</span>(name); <span class="comment">// 当name初始化有值时（idbeny），结果为初始化值，当初始化为null时，取后面的值（1024星球）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-3-条件运算符"><a href="#1-3-条件运算符" class="headerlink" title="1.3. 条件运算符"></a>1.3. 条件运算符</h4><ul><li>如果expr1非null，直接使用expr1的结果。</li><li>如果expr1是null，则返回expr2的结果;<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">name</span> = null;</span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">name</span> ?? <span class="string">'1024星球'</span>;</span><br><span class="line">print(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure></li></ul><p>赋值运算符和条件运算符很容易混淆；</p><ul><li><code>??=</code>类似于三目运算符；</li><li><code>??</code>就是一个条件判断</li></ul><h4 id="1-4-级联语法（-）"><a href="#1-4-级联语法（-）" class="headerlink" title="1.4. 级联语法（..）"></a>1.4. 级联语法（..）</h4><p>场景：不需要新创建对象，直接连续操作对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">$name</span> is running"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="comment">// 常规操作</span></span><br><span class="line">  <span class="keyword">final</span> p1 = Person();</span><br><span class="line">  p1.name = <span class="string">'idbeny'</span>;</span><br><span class="line">  p1.run();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 级联语法</span></span><br><span class="line">  <span class="keyword">final</span> p2 = Person()</span><br><span class="line">              ..name = <span class="string">"idbeny"</span></span><br><span class="line">              ..run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、逻辑判断"><a href="#二、逻辑判断" class="headerlink" title="二、逻辑判断"></a>二、逻辑判断</h3><p>和其他语言用法一样，但是<code>if else</code>语句和其他平台不一样：<strong>不存在非空即真或者非0即真，必须有明确的bool类型</strong></p><h3 id="三、类和对象"><a href="#三、类和对象" class="headerlink" title="三、类和对象"></a>三、类和对象</h3><h4 id="3-1-定义类和对象"><a href="#3-1-定义类和对象" class="headerlink" title="3.1. 定义类和对象"></a>3.1. 定义类和对象</h4><p>格式：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">  类型 成员名;</span><br><span class="line">  返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    方法体</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建对象</span></span><br><span class="line"><span class="comment">// var p = new Person();</span></span><br><span class="line"><span class="keyword">var</span> p = Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.属性赋值</span></span><br><span class="line">p.name = <span class="string">'idbeny'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.调用方法</span></span><br><span class="line">p.run();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'<span class="subst">$name</span>在奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>在方法中使用成员变量并没有加this；</li><li>在方法中通常使用成员变量时，会省略this，但是有命名冲突时，this不能省略；</li><li>从Dart2开始，new关键字可以省略。</li></ul><h4 id="3-2-构造方法"><a href="#3-2-构造方法" class="headerlink" title="3.2. 构造方法"></a>3.2. 构造方法</h4><p>普通构造方法</p><ul><li>当通过类创建一个对象时，会调用这个类的构造方法。没有明确指定构造方法时，将默认拥有一个无参的构造方法。</li><li>当自定义构造方法时，默认的构造方法将会失效；</li><li>Dart不支持函数的重载。</li><li>参数赋值的语法糖：<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">Person(String <span class="params">name</span>, <span class="params">int</span> <span class="params">age</span>)</span> &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="constructor">Person(<span class="params">this</span>.<span class="params">name</span>, <span class="params">this</span>.<span class="params">age</span>)</span>;</span><br></pre></td></tr></table></figure></li></ul><p>命名构造方法（解决函数重载问题）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  final String name;</span><br><span class="line">  final <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span><span class="keyword">with</span><span class="constructor">Params(<span class="params">this</span>.<span class="params">name</span>, <span class="params">this</span>.<span class="params">age</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化列表</p><p>官方很多示例程序及源码大量使用了初始化列表，在创建一个构造方法时经常用到</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultAge = <span class="number">28</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Person</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误写法</span></span><br><span class="line">  <span class="comment">// Point(this.name) &#123;</span></span><br><span class="line">  <span class="comment">//   age = 28;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正确的写法</span></span><br><span class="line">  Point(<span class="keyword">this</span>.name) : age = defaultAge;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重定向构造方法</p><p>在一个构造方法中去调用另外一个构造方法, 这个时候可以使用重定向构造方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="constructor">Person(<span class="params">this</span>.<span class="params">name</span>, <span class="params">this</span>.<span class="params">age</span>)</span>;</span><br><span class="line">  <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>from<span class="constructor">Name(String <span class="params">name</span>)</span> : this(name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：冒号后面使用this调用</strong></p><p>常量构造方法</p><p>场景：相同的参数创建相同的对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = <span class="keyword">const</span> Person(<span class="string">'idbeny'</span>);</span><br><span class="line">  <span class="keyword">var</span> p2 = <span class="keyword">const</span> Person(<span class="string">'idbeny'</span>);</span><br><span class="line">  <span class="built_in">print</span>(identical(p1, p2)); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Person(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法用const修饰，那么可以保证同一个参数，创建出来的对象是相同的</li><li>常量构造方法的类中，所有的成员变量必须是final修饰的.</li><li>变量用const修饰时，对象const可以省略.</li></ul><p>工厂构造方法（常量构造方法升级版）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = Person(<span class="string">'idbeny'</span>);</span><br><span class="line">  <span class="keyword">var</span> p2 = Person(<span class="string">'idbeny'</span>);</span><br><span class="line">  <span class="built_in">print</span>(identical(p1, p2)); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Person&gt; _cache = &lt;<span class="built_in">String</span>, Person&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Person(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_cache.containsKey(name)) &#123;</span><br><span class="line">      <span class="keyword">return</span> _cache[name];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> p = Person._internal(name);</span><br><span class="line">      _cache[name] = p;</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person._internal(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-setter和getter"><a href="#3-3-setter和getter" class="headerlink" title="3.3. setter和getter"></a>3.3. setter和getter</h4><ul><li>默认情况下，Dart中类定义的属性是可以直接被外界访问的。</li><li>如果要监听类的属性变化，使用set和get</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;<span class="keyword">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">final</span> p = Person(<span class="string">"idbeny"</span>);</span><br><span class="line">  p.setName = <span class="string">"1024星球"</span>;</span><br><span class="line">  <span class="built_in">print</span>(p.getName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">  <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">String</span> <span class="built_in">get</span> getName &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="built_in">set</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-类的继承"><a href="#3-4-类的继承" class="headerlink" title="3.4. 类的继承"></a>3.4. 类的继承</h4><ul><li>使用extends关键字，子类中使用super访问父类。</li><li>父类中的所有成员变量和方法都会被继承（构造方法除外）。</li><li>子类可以拥有自己的成员变量, 并且可以对父类的方法进行重写：</li><li>子类的构造方法在执行前，将隐含调用父类的默认构造方法（无参）</li><li>如果父类没有默认构造方法，则子类的构造方法必须在初始化列表中通过super显式调用父类的某个构造方法。<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">  p.age = <span class="number">28</span>;</span><br><span class="line">  p.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'继承在奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  Person(<span class="built_in">String</span> name, <span class="built_in">int</span> age) : name=name, <span class="keyword">super</span>(age);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'<span class="subst">$name</span>在奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5-抽象类"><a href="#3-5-抽象类" class="headerlink" title="3.5. 抽象类"></a>3.5. 抽象类</h4><p>父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法，我们可以定义为抽象方法。</p><ul><li>抽象方法定义：没有具体实现的方法。</li><li>抽象方法必须存在于抽象类中。</li><li>抽象类是使用abstract声明的类。</li></ul><p>下面的代码中, Shape类就是一个抽象类, 其中包含一个抽象方法.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  getArea();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  double r;</span><br><span class="line"></span><br><span class="line">  <span class="type">Circle</span>(<span class="keyword">this</span>.r);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> r * r * <span class="number">3.14</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reactangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  double w;</span><br><span class="line">  double h;</span><br><span class="line"></span><br><span class="line">  <span class="type">Reactangle</span>(<span class="keyword">this</span>.w, <span class="keyword">this</span>.h);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> w * h;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项:</p><ul><li>抽象类不能实例化；</li><li>抽象类中的抽象方法必须被子类实现，抽象类中的已经被实现方法，可以不被子类重写。</li></ul><h4 id="3-6-隐式接口"><a href="#3-6-隐式接口" class="headerlink" title="3.6. 隐式接口"></a>3.6. 隐式接口</h4><p>Dart中没有关键字来声明接口，在默认情况下，定义的每个类都相当于默认也声明了一个接口，可以由其他的类来实现(因为Dart不支持多继承)</p><ul><li>在开发中，我们通常将用于给别人实现的类声明为抽象类:</li><li>用implements实现某个类时，类中所有的方法都必须被重新实现</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> </span>&#123;</span><br><span class="line">  run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Runner</span>, <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'超人在奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  fly() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'超人在飞'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-Mixin混入"><a href="#3-7-Mixin混入" class="headerlink" title="3.7. Mixin混入"></a>3.7. Mixin混入</h4><p>但是某些情况下，一个类可能希望直接复用之前类的原有实现方案，怎么做呢?</p><ul><li>Dart只支持单继承，那么意味着你只能复用一个类的实现。</li><li>Dart提供了另外一种方案: Mixin混入的方式<ul><li>除了可以通过class定义类之外，也可以通过mixin关键字来定义一个类。</li><li>只是通过mixin定义的类用于被其他类混入使用，通过with关键字来进行混入。<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  var superMan = SuperMain();</span><br><span class="line">  superMan.run();</span><br><span class="line">  superMan.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mixin</span> Runner &#123;</span><br><span class="line">  run() &#123;</span><br><span class="line">    print(<span class="string">'在奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mixin</span> Flyer &#123;</span><br><span class="line">  fly() &#123;</span><br><span class="line">    print(<span class="string">'在飞翔'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implements的方式要求必须对其中的方法进行重新实现</span></span><br><span class="line"><span class="comment">// class SuperMan implements Runner, Flyer &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">SuperMain</span> <span class="symbol">with</span> <span class="symbol">Runner, <span class="symbol">Flyer</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-8-类的成员和方法"><a href="#3-8-类的成员和方法" class="headerlink" title="3.8. 类的成员和方法"></a>3.8. 类的成员和方法</h4><p>用static关键字来定义:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = Person();</span><br><span class="line">  p.name = <span class="string">'idbeny'</span>;</span><br><span class="line">  p.age = <span class="number">28</span>;</span><br><span class="line">  p.eat();</span><br><span class="line"></span><br><span class="line">  Person.food = <span class="string">'米饭'</span>;</span><br><span class="line">  Person.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> food;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'<span class="subst">$name</span>在吃饭'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-9-枚举类型"><a href="#3-9-枚举类型" class="headerlink" title="3.9. 枚举类型"></a>3.9. 枚举类型</h4><p>枚举在开发中也非常常见, 枚举也是一种特殊的类, 通常用于表示固定数量的常量值。</p><h5 id="3-9-1-枚举"><a href="#3-9-1-枚举" class="headerlink" title="3.9.1. 枚举"></a>3.9.1. 枚举</h5><ul><li>用enum关键字</li><li>仅支持字符串类型</li><li>枚举类型中有两个比较常见的属性:<ul><li>index: 用于表示每个枚举常量的索引, 从0开始.</li><li>values: 包含每个枚举值的List.<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  print(NetworkCode.success);</span><br><span class="line">  print(NetworkCode.success.index);</span><br><span class="line">  print(NetworkCode.values);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">NetworkCode</span> &#123;</span></span><br><span class="line">  success,</span><br><span class="line">  failure,</span><br><span class="line">  redirect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>注意事项：枚举不能子类化、混合或实现枚举。</p><h3 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h3><p>如果类型只能是字符串类型可以使用继承</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="type">List</span>&lt;<span class="type">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="comment">// 不成立</span></span><br><span class="line">  <span class="type">Person</span> p1 = <span class="type">Person</span>&lt;int&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  print(p1.x.runtimeType);</span><br><span class="line"></span><br><span class="line">  <span class="type">Person</span> p2 = <span class="type">Person</span>&lt;<span class="type">String</span>&gt;(<span class="symbol">'idben</span>y', <span class="symbol">'1024</span>星球');</span><br><span class="line">  print(p2.x.runtimeType); <span class="comment">// String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person&lt;T</span> <span class="keyword">extends</span> <span class="title">String&gt;</span> </span>&#123;</span><br><span class="line">  <span class="type">T</span> name;</span><br><span class="line">  <span class="type">T</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="type">Person</span>(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、库的使用"><a href="#五、库的使用" class="headerlink" title="五、库的使用"></a>五、库的使用</h3><p>Dart中任何一个dart文件都是一个库</p><h4 id="5-1-库的导入"><a href="#5-1-库的导入" class="headerlink" title="5.1. 库的导入"></a>5.1. 库的导入</h4><p>语法：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> '库所在的uri';</span></span><br></pre></td></tr></table></figure><p>URI有三种不同的形式</p><ul><li><p>前缀表示Dart的标准库</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'dart:io';</span></span><br></pre></td></tr></table></figure></li><li><p>相对路径</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">import</span></span> <span class="string">'../test/test.dart'</span>;</span><br></pre></td></tr></table></figure></li><li><p>Pub包管理第三方的库用前缀package</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'package:flutter/material.dart';</span></span><br></pre></td></tr></table></figure></li></ul><p>库文件中内容的显示和隐藏<br>如果希望只导入库中某些内容，或者刻意隐藏库里面某些内容，可以使用show和hide关键字</p><ul><li>show：导入需要的函数</li><li>hide：隐藏相关函数<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lib/test/test.dart'</span> <span class="keyword">show</span> Sum, Mul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib/test/test.dart'</span> <span class="keyword">hide</span> Sum;</span><br></pre></td></tr></table></figure></li></ul><p>当各个库有命名冲突的时候，使用as关键字来使用命名空间</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import 'lib/<span class="keyword">test</span>/<span class="keyword">test</span>.dart' <span class="keyword">as</span> <span class="keyword">Test</span>;</span><br><span class="line"></span><br><span class="line">final <span class="keyword">sum</span> = new <span class="keyword">Test</span>.<span class="built_in">Sum</span>();</span><br></pre></td></tr></table></figure><h4 id="5-2-库的定义"><a href="#5-2-库的定义" class="headerlink" title="5.2. 库的定义"></a>5.2. 库的定义</h4><h5 id="library"><a href="#library" class="headerlink" title="library"></a>library</h5><p>使用library关键字给库起一个名字。</p><p>但目前我发现，库的名字并不影响导入，因为import语句用的是字符串URI</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">library math<span class="comment">;</span></span><br></pre></td></tr></table></figure><h5 id="part"><a href="#part" class="headerlink" title="part"></a>part</h5><p>在之前我们使用student.dart作为演练的时候，只是将该文件作为一个库。</p><p>在开发中，如果一个库文件太大，将所有内容保存到一个文件夹是不太合理的，我们有可能希望将这个库进行拆分，这个时候就可以使用part关键字了</p><p>不过官方已经不建议使用这种方式了：</p><ul><li><a href="https://dart.dev/guides/libraries/create-library-packages" target="_blank" rel="noopener">https://dart.dev/guides/libraries/create-library-packages</a></li></ul><p>mathUtils.dart文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">part of <span class="string">"utils.dart"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dateUtils.dart文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">"utils.dart"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> dateFormat(<span class="built_in">DateTime</span> date) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"2020-12-12"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>utils.dart文件</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">part <span class="string">"mathUtils.dart"</span><span class="comment">;</span></span><br><span class="line">part <span class="string">"dateUtils.dart"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>test_libary.dart文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"lib/utils.dart"</span>;</span><br><span class="line"></span><br><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="built_in">print</span>(sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">  <span class="built_in">print</span>(dateFormat(<span class="built_in">DateTime</span>.now()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="export关键字"><a href="#export关键字" class="headerlink" title="export关键字"></a>export关键字</h5><p>官方不推荐使用part关键字，那如果库非常大，如何进行管理呢？</p><ul><li>将每一个dart文件作为库文件，使用export关键字在某个库文件中单独导入</li></ul><p>mathUtils.dart文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dateUtils.dart文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">String</span> <span class="title">dateFormat</span><span class="params">(DateTime date)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"2020-12-12"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>utils.dart文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">library utils;</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="string">"mathUtils.dart"</span>;</span><br><span class="line"><span class="builtin-name">export</span> <span class="string">"dateUtils.dart"</span>;</span><br></pre></td></tr></table></figure><p>test_libary.dart文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"lib/utils.dart"</span>;</span><br><span class="line"></span><br><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="built_in">print</span>(sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">  <span class="built_in">print</span>(dateFormat(<span class="built_in">DateTime</span>.now()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Dart】Dart基本语法（一）</title>
      <link href="/2020/03/05/dart-syntax-01/"/>
      <url>/2020/03/05/dart-syntax-01/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Dart介绍和安装"><a href="#一、Dart介绍和安装" class="headerlink" title="一、Dart介绍和安装"></a>一、Dart介绍和安装</h3><h4 id="1-1-认识Dart"><a href="#1-1-认识Dart" class="headerlink" title="1.1. 认识Dart"></a>1.1. 认识Dart</h4><p>Flutter的实现是基于Dart语言的，学习一门新的语言，主要是学习他的语法。Dart的语法对前端开发更友好一些，但如果仅有iOS或Android开发经验，学习Dart的时候其实也能够很快上手。之前有Java、Swift、Objective-C、C++、React、Vue等开发经验的同学，会在Dart中看到很多你熟悉的影子，因为Dart借鉴了各种语言的特性，甚至有点像大杂烩。</p><a id="more"></a><h4 id="1-2-安装Dart"><a href="#1-2-安装Dart" class="headerlink" title="1.2. 安装Dart"></a>1.2. 安装Dart</h4><blockquote><p>如果仅仅是单独学习和运行Dart，我们需要安装Dart SDK。但在正常开发Flutter项目时是不需要安装的，因为在安装Flutter SDK的时候，已经内置了Dart SDK</p></blockquote><p>下载Dart SDK（安装方式参照官网即可）：<a href="https://dart.dev/get-dart" target="_blank" rel="noopener">https://dart.dev/get-dart</a></p><h4 id="1-3-开发工具配置"><a href="#1-3-开发工具配置" class="headerlink" title="1.3. 开发工具配置"></a>1.3. 开发工具配置</h4><p><strong>VSCode</strong>建议安装的三个插件：Dart、Flutter、Code Runner</p><ul><li>Dart：为编写Dart代码提供支持；</li><li>Flutter：编写Flutter的环境支持；</li><li>Code Runner：运行和调试Flutter代码使用</li></ul><p><strong>Android Studio</strong>建议安装两个插件：Dart、Flutter</p><h3 id="二、体验Dart"><a href="#二、体验Dart" class="headerlink" title="二、体验Dart"></a>二、体验Dart</h3><p>新建一个helloworld.dart文件，添加下面的内容：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端：<code>dart helloworld.dart</code>，就能看到执行结果了。</p><p><em>从上面一个简单的main函数即可看出Dart和大部分语言一样都需要一个入口main函数，在函数体内即可执行相关代码；同时每个语句结束也是以分号结尾。</em></p><h3 id="三-定义变量"><a href="#三-定义变量" class="headerlink" title="三. 定义变量"></a>三. 定义变量</h3><h4 id="3-1-明确声明"><a href="#3-1-明确声明" class="headerlink" title="3.1. 明确声明"></a>3.1. 明确声明</h4><p>格式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量类型 变量名称 = 赋值<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> name = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="built_in">int</span> age = <span class="number">28</span>;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">height</span> = <span class="number">1.80</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项: 已经定义的变量可以修改值, 但是不能赋值其他类型</p></blockquote><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line">content = <span class="string">'1024星球'</span>; <span class="comment">// 正确的</span></span><br><span class="line">content = <span class="number">1234</span>; <span class="comment">// 错误的, 将一个int值赋值给一个String变量</span></span><br></pre></td></tr></table></figure><p>以上代码中，变量name已经指定为字符串类型了，这时候如果修改name为其他字符串类型是可以的，如果赋值其他类型（如浮点型、整形）就会报错。</p><h4 id="3-2-类型推导"><a href="#3-2-类型推导" class="headerlink" title="3.2. 类型推导"></a>3.2. 类型推导</h4><p>格式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var 变量名称 = 赋值<span class="comment">;</span></span><br><span class="line">dynamic 变量名称 = 赋值<span class="comment">;</span></span><br><span class="line">const 变量名称 = 赋值<span class="comment">;</span></span><br><span class="line">final 变量名称 = 赋值<span class="comment">;</span></span><br></pre></td></tr></table></figure><h5 id="3-2-1-var的使用"><a href="#3-2-1-var的使用" class="headerlink" title="3.2.1. var的使用"></a>3.2.1. var的使用</h5><p>示例：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="keyword">name</span> = <span class="string">'1024星球'</span>;</span><br><span class="line">print(<span class="keyword">name</span>.runtimeType); <span class="comment">// String</span></span><br></pre></td></tr></table></figure><p>错误用法：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">28</span>;</span><br><span class="line">age = <span class="string">'idbeny'</span>; <span class="comment">// 不能把String赋值给一个int类型</span></span><br></pre></td></tr></table></figure><ul><li>因为变量在初始化的时候已经确定了该变量的类型，所以在后续使用的时候是不能再赋值其他类型的。</li><li>用var修饰的变量不能赋值不同类型的值,但是可以使用dynamic来修饰。</li></ul><h5 id="3-2-2-dynamic的使用"><a href="#3-2-2-dynamic的使用" class="headerlink" title="3.2.2. dynamic的使用"></a>3.2.2. dynamic的使用</h5><p>示例：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dynamic</span> <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line">print(<span class="keyword">name</span>.runtimeType); <span class="comment">// String</span></span><br><span class="line"><span class="keyword">name</span> = <span class="number">28</span>;</span><br><span class="line">print(<span class="keyword">name</span>.runtimeType); <span class="comment">// int</span></span><br></pre></td></tr></table></figure><p><em>dynamic在开发中也会经常遇到，但建议谨慎使用，因为是运行时判断，所以会引发一些未知的错误</em></p><h5 id="3-2-3-final和const的使用"><a href="#3-2-3-final和const的使用" class="headerlink" title="3.2.3. final和const的使用"></a>3.2.3. final和const的使用</h5><p>final和const都是用于定义常量的（定义之后值都不可以修改）</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">final <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="keyword">name</span> = <span class="string">'1024星球'</span>; <span class="comment">// 错误做法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">28</span>;</span><br><span class="line">age = <span class="number">18</span>; <span class="comment">// 错误做法</span></span><br></pre></td></tr></table></figure><p>final和const的区别?</p><ul><li><p>const在赋值时, 赋值的内容必须是在编译期间就确定下来的；</p></li><li><p>final在赋值时, 可以动态获取， 但是final一旦被赋值后就有确定的结果, 不会再次赋值；</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="comment">// const time = DateTime.now(); // 错误的赋值方式</span></span><br><span class="line">  <span class="keyword">final</span> time = <span class="built_in">DateTime</span>.now();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>const可以修饰创建的对象。</p></li></ul><h3 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h3><h4 id="4-1-数字类型（int-double）"><a href="#4-1-数字类型（int-double）" class="headerlink" title="4.1. 数字类型（int/double）"></a>4.1. 数字类型（int/double）</h4><p>整形和浮点型</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">28</span>; <span class="comment">// 整形</span></span><br><span class="line"><span class="built_in">print</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> <span class="built_in">height</span> = <span class="number">1.80</span>; <span class="comment">// 浮点型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">height</span>);</span><br></pre></td></tr></table></figure><p>字符串和数字之间的转化:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.字符串转数字</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">int</span>.parse(<span class="string">'1234'</span>);</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">double</span>.parse(<span class="string">'12.34'</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$&#123;num1&#125;</span> <span class="subst">$&#123;num1.runtimeType&#125;</span>'</span>); <span class="comment">// 1234 int</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$&#123;num2&#125;</span> <span class="subst">$&#123;num2.runtimeType&#125;</span>'</span>); <span class="comment">// 12.34 double</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.数字转字符串</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">12.345</span>;</span><br><span class="line"><span class="keyword">var</span> num1Str = num1.toString();</span><br><span class="line"><span class="keyword">var</span> num2Str = num2.toString();</span><br><span class="line"><span class="keyword">var</span> num2PointStr = num2.toStringAsFixed(<span class="number">2</span>); <span class="comment">// 保留两位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$num1Str</span> <span class="subst">$&#123;num1Str.runtimeType&#125;</span>'</span>); <span class="comment">// 1234 String</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$num2Str</span> <span class="subst">$&#123;num2Str.runtimeType&#125;</span>'</span>); <span class="comment">// 12.345 String</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$num2PointStr</span> <span class="subst">$&#123;num2PointStr.runtimeType&#125;</span>'</span>); <span class="comment">// 12.35 String</span></span><br></pre></td></tr></table></figure><h4 id="4-2-布尔类型（Bool）"><a href="#4-2-布尔类型（Bool）" class="headerlink" title="4.2. 布尔类型（Bool）"></a>4.2. 布尔类型（Bool）</h4><p>布尔类型中,Dart提供了一个bool的类型, 取值为true和false</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$isFlag</span> <span class="subst">$&#123;isFlag.runtimeType&#125;</span>'</span>); <span class="comment">// true bool</span></span><br></pre></td></tr></table></figure><p>注意: Dart中不能判断非0即真, 或者非空即真</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">name</span>) &#123; // <span class="keyword">name</span>不会打印</span><br><span class="line">  <span class="built_in">print</span>(<span class="keyword">name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-字符串类型（String）"><a href="#4-3-字符串类型（String）" class="headerlink" title="4.3. 字符串类型（String）"></a>4.3. 字符串类型（String）</h4><p>创建一个字符串：单引号或双引号</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">'Hello World'</span>;</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">"Hello'World"</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"idbeny"</span>;</span><br></pre></td></tr></table></figure><p>多行字符串：三个单引号或者双引号</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var message1 = <span class="string">'''</span></span><br><span class="line"><span class="string">  你好啊</span></span><br><span class="line"><span class="string">  很高兴</span></span><br><span class="line"><span class="string">  认识你'''</span>;</span><br></pre></td></tr></table></figure><h4 id="4-4-集合类型（List-Set-Map）"><a href="#4-4-集合类型（List-Set-Map）" class="headerlink" title="4.4. 集合类型（List/Set/Map）"></a>4.4. 集合类型（List/Set/Map）</h4><p>List</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.类型推导</span></span><br><span class="line"><span class="keyword">var</span> words = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.明确类型</span></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>Set</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.类型推导</span></span><br><span class="line"><span class="keyword">var</span> words = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.明确类型</span></span><br><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>Set和List最大的区别：Set是无序的，并且元素是不重复的。</li><li>常见操作<ul><li>length（获取集合的长度）</li><li>add（添加元素）</li><li>remove（移除元素）</li><li>contains（包含元素）</li><li>removeAt（根据索引未知删除元素–List持有，Set没有）<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers.length<span class="comment">;</span></span><br><span class="line">numbers.add(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">numbers.remove(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">numbers.contains(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">numbers.removeAt(<span class="number">1</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>Map（字典）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.类型推导</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="string">'name'</span>: <span class="string">'idbeny'</span>, <span class="string">'age'</span>: <span class="number">28</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.明确类型</span></span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map = &#123;<span class="string">'name'</span>: <span class="string">'idbeny'</span>, <span class="string">'address'</span>: <span class="string">'www.idbeny.com'</span>, <span class="string">'age'</span>: <span class="number">28</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>常见操作<ul><li>根据key获取value <code>map[&#39;name&#39;]</code></li><li>获取所有的entries <code>map.entries</code></li><li>获取所有的keys <code>map.keys</code></li><li>获取所有的values <code>map.values</code></li><li>判断是否包含某个key或者value <code>map.containsKey(&#39;name&#39;); map.containsValue(28)</code></li><li>根据key删除元素 <code>map.remove(&#39;name&#39;)</code></li></ul></li></ul><h3 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h3><h4 id="5-1-函数的定义"><a href="#5-1-函数的定义" class="headerlink" title="5.1. 函数的定义"></a>5.1. 函数的定义</h4><p>Dart是面向对象语言，函数也是对象，所有也有类型, 类型就是Function，并且函数可以作为变量定义或者作为其他函数的参数或者返回值使用。</p><p>格式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回值 函数的名称(参数列表) &#123;</span><br><span class="line">  函数体</span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> sum(<span class="built_in">num</span> num1, <span class="built_in">num</span> num2) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果我们省略函数返回类型，函数依然是可以运行的，但是如果是公共函数，建议把类型加上</li><li>如果函数中只有一个表达式, 那么可以使用箭头函数</li><li>注意, 这里面只能是一个表达式, 不能是一个语句<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum<span class="comment">(num1, num2)</span> =&gt; <span class="symbol">num1</span> + <span class="symbol">num2</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-2-函数的参数"><a href="#5-2-函数的参数" class="headerlink" title="5.2. 函数的参数"></a>5.2. 函数的参数</h4><h5 id="参数（必传和可选）"><a href="#参数（必传和可选）" class="headerlink" title="参数（必传和可选）"></a>参数（必传和可选）</h5><ul><li>位置可选参数：使用中括号包裹<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：位置可选参数: [param1, param2, ...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">Person(<span class="built_in">String</span> name, [<span class="built_in">int</span> age, <span class="built_in">double</span> height]) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'name=<span class="subst">$name</span> age=<span class="subst">$age</span> height=<span class="subst">$height</span>'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="string">'idbeny'</span>, <span class="number">28</span>);</span><br><span class="line">Person(<span class="string">'idbeny'</span>, <span class="number">28</span>, <span class="number">1.80</span>);</span><br></pre></td></tr></table></figure></li><li>命名可选参数：使用大括号包裹。可以指定某个参数是必传的（使用@required）<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：&#123;param1, param2, ...&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="constructor">Person(String <span class="params">name</span>, &#123;<span class="params">int</span> <span class="params">age</span>, <span class="params">double</span> <span class="params">height</span>, @<span class="params">required</span> String <span class="params">address</span>&#125;)</span> &#123;</span><br><span class="line">  print('name=$name age=$age height=$height address=$address');</span><br><span class="line">&#125;</span><br><span class="line"><span class="constructor">Person('<span class="params">idbeny</span>', <span class="params">age</span>: 28, <span class="params">address</span>: '<span class="params">www</span>.<span class="params">idbeny</span>.<span class="params">com</span>')</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h5><p>只有可选参数才可以有默认值, 必传参数不能有默认值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数的默认值</span></span><br><span class="line">Person(<span class="built_in">String</span> name, &#123;<span class="built_in">int</span> age = <span class="number">28</span>, <span class="built_in">String</span> address=<span class="string">"www.idbeny.com"</span>&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'name=<span class="subst">$name</span> age=<span class="subst">$age</span> address=<span class="subst">$address</span>'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-匿名函数"><a href="#5-3-匿名函数" class="headerlink" title="5.3. 匿名函数"></a>5.3. 匿名函数</h4><p>JS中有匿名函数，Dart其实也是支持匿名函数的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="keyword">List</span>&lt;String&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> words = [<span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>, <span class="string">'ddd'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 有名字的函数</span></span><br><span class="line">  readWords(item) &#123;</span><br><span class="line">    <span class="keyword">print</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">  words.<span class="keyword">forEach</span>(readWords);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 匿名函数</span></span><br><span class="line">  words.<span class="keyword">forEach</span>((item) &#123;</span><br><span class="line">    <span class="keyword">print</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  words.<span class="keyword">forEach</span>((item) =&gt; <span class="keyword">print</span>(item));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-作用域"><a href="#5-4-作用域" class="headerlink" title="5.4. 作用域"></a>5.4. 作用域</h3><ul><li>Dart是根据代码的结构<code>({})</code>来决定作用域范围的</li><li>和大部分语言类似，优先使用自己作用域中的变量，如果没有找到，则一级级向外查找。</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li><p><code>runtimeType</code>：获取变量当前的类型；</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> name = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="built_in">print</span>(name.runtimeType); <span class="comment">// String</span></span><br></pre></td></tr></table></figure></li><li><p><code>identical</code>：比较两个对象是否相同；</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">final p1 = Person()<span class="comment">;</span></span><br><span class="line">final p2 = Person()<span class="comment">;</span></span><br><span class="line">print(<span class="name">identical</span>(<span class="name">p1</span>, p2))<span class="comment">; // false</span></span><br></pre></td></tr></table></figure></li><li><p><code>${expression}</code>：字符串拼接，如果只是一个标识符，不需要加{}，如果是表达式，则必须加{}；</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> name = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="keyword">final</span> age = <span class="number">28</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;name.runtimeType&#125;</span>'</span>); <span class="comment">// idbeny String</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$age</span> <span class="subst">$&#123;age.runtimeType&#125;</span>'</span>); <span class="comment">// 28 int</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Flutter】初识Flutter</title>
      <link href="/2020/03/03/flutter-first/"/>
      <url>/2020/03/03/flutter-first/</url>
      
        <content type="html"><![CDATA[<p><img src="http://blog.idbeny.com/7ybl8.png@origin" alt=""></p><h3 id="一、Flutter是什么？"><a href="#一、Flutter是什么？" class="headerlink" title="一、Flutter是什么？"></a>一、Flutter是什么？</h3><p><strong>官网介绍：</strong><br>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。</p><a id="more"></a><ul><li>官网：<a href="https://flutter.dev/" target="_blank" rel="noopener">https://flutter.dev/</a></li><li>中文网站：<a href="https://flutterchina.club/" target="_blank" rel="noopener">https://flutterchina.club/</a></li></ul><p><strong>总结：</strong></p><ul><li>Flutter是一个UI SDK（Software Development Kit）</li><li>可以进行移动端（iOS、Android），Web端（Beta），桌面（technical preview），跨平台解决方案；</li><li>到Flutter的几个特点：美观、快速、高效、开放。</li></ul><h3 id="二、Flutter的特点"><a href="#二、Flutter的特点" class="headerlink" title="二、Flutter的特点"></a>二、Flutter的特点</h3><p><strong>快速开发</strong></p><ul><li>毫秒级的热重载，修改后，您的应用界面会立即更新。使用丰富的、完全可定制的widget在几分钟内构建原生界面。</li><li>Flutter的热重载可帮助您快速地进行测试、构建UI、添加功能并更快地修复错误。在iOS和Android模拟器或真机上可以在亚秒内重载，并且不会丢失状态。</li></ul><p><img src="http://blog.idbeny.com/kp9xi.gif@normal" alt=""></p><p><strong>美观：富有表现力和灵活的UI</strong></p><ul><li>使用Flutter内置美丽的Material Design和Cupertino（iOS风格）widget、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。</li></ul><p><img src="http://blog.idbeny.com/lnbno.png@normal" alt=""><br><img src="http://blog.idbeny.com/08ove.png@normal" alt=""><br><img src="http://blog.idbeny.com/rzptn.png@normal" alt=""><br><img src="http://blog.idbeny.com/5u88d.png@normal" alt=""></p><p><strong>原生性能</strong></p><ul><li>Flutter包含了许多核心的widget，如滚动、导航、图标和字体等，这些都可以在iOS和Android上达到原生应用一样的性能。</li><li>Hot Reload (热重载) ，在前端已经不是什么新鲜的东西，但在移动端之前一直是没有的</li><li>Flutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度；</li><li>Flutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库；</li></ul><p><strong>响应式框架</strong></p><ul><li>使用Flutter的现代、响应式框架，和一系列基础widget，轻松构建您的用户界面。使用功能强大且灵活的API（针对2D、动画、手势、效果等）解决艰难的UI挑战。<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterState</span> <span class="keyword">extends</span> <span class="title">State&lt;Counter&gt;</span> </span>&#123;</span><br><span class="line">  int counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  void increment() &#123;</span><br><span class="line">    <span class="comment">// 告诉Flutter state已经改变, Flutter会调用build()，更新显示</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="comment">// 当 setState 被调用时，这个方法都会重新执行.</span></span><br><span class="line">    <span class="comment">// Flutter 对此方法做了优化，使重新执行变的很快</span></span><br><span class="line">    <span class="comment">// 所以你可以重新构建任何需要更新的东西，而无需分别去修改各个widget</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Row</span>(</span><br><span class="line">      children: &lt;<span class="type">Widget</span>&gt;[</span><br><span class="line">        <span class="keyword">new</span> <span class="type">RaisedButton</span>(</span><br><span class="line">          onPressed: increment,</span><br><span class="line">          child: <span class="keyword">new</span> <span class="type">Text</span>(<span class="symbol">'Incremen</span>t'),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> <span class="type">Text</span>(<span class="symbol">'Count</span>: $counter'),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>开放</strong></p><ul><li>Flutter 是开放的，它是一个完全开源的项目。</li></ul><h3 id="三、跨平台解决方案"><a href="#三、跨平台解决方案" class="headerlink" title="三、跨平台解决方案"></a>三、跨平台解决方案</h3><p><strong>WebView</strong></p><ul><li>基于 JavaScript 和 WebView的跨平台</li><li>主要是通过HTML来构建自己的界面，再将其显示在各个<br>平台的WebView中。</li><li>但是它默认是不能调用本地的一些服务的（比如自定义相机、<br>蓝牙等），所以需要通过JavaScript进行桥接调用Native<br>的一些代码来完成某些功能。</li><li>但是，它本身的体验、性能都并不理想，而且开发过程<br>中的坑非常多。</li></ul><p><strong>ReactNative（简称：RN）</strong></p><ul><li>ReactNative在移动端一直备受欢迎，在Flutter出现之前，很多跨平台项目都在使用，最著名的Airbnb对RN的社区贡献特别大，但是在18年突然宣布停止使用RN，改用Native；</li><li>RN使用JavaScript语言，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。</li><li>并且在保留基本渲染能力的基础上，用原生自带的UI组件实现核<br>心的渲染引擎，从而保证了良好的渲染性能。</li><li>但是，由于RN的本质是通过JavaScript VM调用原生接口，通信<br>相对比较低效，而且框架本身不负责渲染，而是是间接通过原生<br>进行渲染的，所以很多项目开发也在寻找其他的跨平台解决方案。</li></ul><p><strong>Flutter</strong></p><ul><li>目前性能和体验最好的跨平台解决方案；</li><li>Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件</li><li>Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高 于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）</li><li>而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。</li></ul><h3 id="四、Flutter环境配置及安装"><a href="#四、Flutter环境配置及安装" class="headerlink" title="四、Flutter环境配置及安装"></a>四、Flutter环境配置及安装</h3><p><strong>Flutter SDK下载地址</strong></p><ul><li><a href="https://flutter.dev/docs/development/tools/sdk/releases" target="_blank" rel="noopener">https://flutter.dev/docs/development/tools/sdk/releases</a></li></ul><p><strong>环境变量配置（以Mac为例）</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">FLUTTER_HOME</span>=/Applications/flutter</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$FLUTTER_HOME/bin</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$FLUTTER_HOME/bin/cache/dart-sdk/bin</span><br></pre></td></tr></table></figure><p><strong>配置镜像</strong></p><ul><li>由于在国内访问Flutter有时可能会受到限制，Flutter官方为中国开发者搭建了临时镜像，大家可以将如下环境变量加入到用户环境变量中<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PUB_HOSTED_URL=https:<span class="comment">//pub.flutter-io.cn</span></span><br><span class="line"><span class="keyword">export</span> FLUTTER_STORAGE_BASE_URL= https:<span class="comment">//storage.flutter-io.cn</span></span><br></pre></td></tr></table></figure></li><li>参考：<a href="https://flutterchina.club/get-started/install/" target="_blank" rel="noopener">https://flutterchina.club/get-started/install/</a></li></ul><p>可参考本机环境变量配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=/Users/Developer/Applications/flutter/flutter/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#android sdk目录，替换为你自己的即可</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ANDROID_HOME</span>=<span class="string">"/Users/Developer/Applications/android_sdk"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$&#123;PATH&#125;</span>:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$&#123;PATH&#125;</span>:$&#123;ANDROID_HOME&#125;/platform-tools</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PUB_HOSTED_URL</span>=https://pub.flutter-io.cn</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">FLUTTER_STORAGE_BASE_URL</span>=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><h3 id="五、开发工具选择"><a href="#五、开发工具选择" class="headerlink" title="五、开发工具选择"></a>五、开发工具选择</h3><ul><li>官方推荐：Android Studio 和 VSCode</li><li>不管选择哪一个开发工具，把对应的插件安装即可–<strong>Flutter</strong>和<strong>Dart</strong></li></ul><h3 id="六、创建Flutter项目"><a href="#六、创建Flutter项目" class="headerlink" title="六、创建Flutter项目"></a>六、创建Flutter项目</h3><ul><li>有两种方式创建Flutter应用：终端或编辑器（我们以终端为例）</li></ul><p><strong>创建：</strong><br><code>flutter create helloflutter</code></p><ul><li>项目名称不支持驼峰</li><li>如果需要，名字之间可以使用下划线<code>_</code>分割（hello_flutter）</li></ul><p><strong>运行：</strong><br><code>flutter run –d 模拟器id</code></p><ul><li>如果有多个模拟器同时运行，需要指定模拟器的id，</li><li>如果只有一个模拟器在运行，则不需要指定id，直接运行<code>flutter run</code>即可</li></ul><p><strong>诊断：</strong><code>flutter doctor</code></p><ul><li>运行此命令查看是否需要安装其它依赖项来完成安装：</li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开发小记】Mac工具使用</title>
      <link href="/2019/10/19/dev-any/"/>
      <url>/2019/10/19/dev-any/</url>
      
        <content type="html"><![CDATA[<p>Mac端好用的工具记录。</p><a id="more"></a><h2 id="Markdown风格编辑器"><a href="#Markdown风格编辑器" class="headerlink" title="Markdown风格编辑器"></a>Markdown风格编辑器</h2><p>简约的风格非常清爽，支持一键复制到公众号、掘金、知乎等平台。<br><a href="https://www.mdnice.com/" target="_blank" rel="noopener">点击前往</a></p><h2 id="创客贴"><a href="#创客贴" class="headerlink" title="创客贴"></a>创客贴</h2><p>可以在线编辑设计图片和文字，制作公众号或博客封面非常好用。<br><a href="https://www.chuangkit.com/" target="_blank" rel="noopener">点击前往</a></p><h2 id="开发者文档在线浏览器-Dash"><a href="#开发者文档在线浏览器-Dash" class="headerlink" title="开发者文档在线浏览器-Dash"></a>开发者文档在线浏览器-Dash</h2><p>几乎涵盖所有语言，非常强大，自动更新新版API文档。<br><img src="http://blog.idbeny.com/s7kyd.png@origin" alt=""><br><img src="http://blog.idbeny.com/wjo2i.png@normal" alt=""></p><h2 id="Gif录制-Annotate"><a href="#Gif录制-Annotate" class="headerlink" title="Gif录制-Annotate"></a>Gif录制-Annotate</h2><p>可以自定义绘制区域，是目前用过最简洁的Gif录制软件了。但是有一个小缺点，录制完成后保存时间有点久（期间应该是在生成Gif），有时候会以为电脑卡了。<br><img src="http://blog.idbeny.com/mx4ks.png@origin" alt=""></p><h2 id="截屏-Snipaste"><a href="#截屏-Snipaste" class="headerlink" title="截屏-Snipaste"></a>截屏-Snipaste</h2><p>个人用过最好用的截屏软件了。<br><img src="http://blog.idbeny.com/pzwx6.png@origin" alt=""><br><img src="http://blog.idbeny.com/kcwzf.png@origin" alt=""></p><h2 id="图床软件-iPic破解"><a href="#图床软件-iPic破解" class="headerlink" title="图床软件-iPic破解"></a>图床软件-iPic破解</h2><p>支持多个平台，快捷键绑定后，一键即可上传，并自动把MD格式的上传地址复制到剪切板。<br><img src="http://blog.idbeny.com/o1xda.png@normal" alt=""><br><a href="https://toolinbox.net/" target="_blank" rel="noopener">iPic</a>仅支持试用7天，试用期校验采取的是本地验证。</p><p>打开如下位置plist文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Users/y</span>ourname<span class="regexp">/Library/</span>Containers<span class="regexp">/net.toolinbox.ipic/</span>Data<span class="regexp">/Library/</span>SyncedPreferences<span class="regexp">/net.toolinbox.ipic.plist</span></span><br></pre></td></tr></table></figure><p>将<code>values</code> -&gt; <code>Markdown Flag</code> -&gt; <code>value</code>更换为七天之内的时间戳即可实现无限试用。</p><p>强烈建议购买使用，支持作者才会有更好的功能输出。</p><h2 id="FileMerge-文件比较"><a href="#FileMerge-文件比较" class="headerlink" title="FileMerge-文件比较"></a>FileMerge-文件比较</h2><p>Xcode自带的工具，用于文件比较、合并等。可以单独打开，也可以在Xcode的工具箱中找到。<br><img src="http://blog.idbeny.com/lzclr.png@normal" alt=""></p><h2 id="数学编辑软件"><a href="#数学编辑软件" class="headerlink" title="数学编辑软件"></a>数学编辑软件</h2><h3 id="Grapher"><a href="#Grapher" class="headerlink" title="Grapher"></a>Grapher</h3><p>Mac自带的工具，可以编写2D、3D等常用数学方程。而且有动画自动演示功能。<br><img src="http://blog.idbeny.com/l1f2p.png@normal" alt=""></p><h3 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h3><p>WPS的Word中包含<em>LaTeX</em>公式，常用数学运算和函数公式基本覆盖。而且支持Markdown，直接复制粘贴就可以，非常便捷。<br><img src="http://blog.idbeny.com/6smkl.png@normal" alt=""></p><h3 id="常用LaTeX公式"><a href="#常用LaTeX公式" class="headerlink" title="常用LaTeX公式"></a>常用LaTeX公式</h3><h4 id="1-起止符"><a href="#1-起止符" class="headerlink" title="1. 起止符"></a>1. 起止符</h4><p>1.1. 行内公式（不会换行）使用$作为起止符：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$a</span>$</span></span><br></pre></td></tr></table></figure><p>示例：$m+n$</p><p>1.2. 块级公式（单独一行）使用$$作为起止符：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>a<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>示例：$$m+n$$</p><h4 id="2-角标"><a href="#2-角标" class="headerlink" title="2. 角标"></a>2. 角标</h4><p>2.1. 上标使用^表示，上标长度大于一时，使用{}包围：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>a^<span class="number">2</span><span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span>a^&#123;<span class="number">1</span>+<span class="number">1</span>&#125;<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>示例：$a^2$、$a^{m+n}$</p><p>2.2. 下标使用_表示，下标长度大于一时，使用{}包围：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>a_2<span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span>a_&#123;<span class="number">1</span>+<span class="number">1</span>&#125;<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>示例：$a_2$、$a_{m+n}$</p><p>2.3. 上下标可以同时使用，相互嵌套：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>a_2^<span class="number">2</span><span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span>a^<span class="number">2</span>_2<span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span>a^&#123;b^<span class="number">2</span>&#125;<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>示例：$a_2^2$、$a_{m+n}^{i+j}$、$a^{b^2}_{m+n}$</p><h4 id="3-符号"><a href="#3-符号" class="headerlink" title="3. 符号"></a>3. 符号</h4><p>符号一般由\和英文缩写组成<br>3.1. 根式使用\sqrt[指数]{表达式}表示：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>\<span class="built-in">sqrt</span>[<span class="number">2</span>]&#123;a+b&#125;<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>示例：$\sqrt[3]{6+3}$、$\sqrt[3]{(6+3)^2}^3$</p><p>3.2. 分式使用\frac{分子}{分母}表示：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>\<span class="built-in">frac</span>&#123;dy&#125;&#123;dx&#125;<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>示例：$\frac{4}{5}$、$({\frac{i+j}{(m+n)^2}})^2$</p><p>3.3. 求和使用\sum_{下限}^{上限}表示：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>\sum_&#123;i=<span class="number">1</span>&#125;^&#123;i=<span class="number">10</span>&#125;a_i<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>示例：$\sum$、$\sum_{i=1}^{i=10}a_i$</p><p>3.4. 负无穷使用-\infty表示，正无穷使用+\infty表示：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>\sum_&#123;i=-\infty&#125;^&#123;i=+\infty&#125;a_i<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>示例：$\infty$、$\sum_{i=-\infty}^{i=+\infty}a_i$</p><p>3.5. 积分使用\int_{下限}^{上限}表示：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>\int_&#123;-\infty&#125;^<span class="number">0</span>\<span class="built-in">frac</span>&#123;<span class="number">1</span>&#125;&#123;x&#125;dx<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>示例：$\int$、$\int_{10}^0\frac{1}{x}dx$</p><h4 id="4-矩阵"><a href="#4-矩阵" class="headerlink" title="4. 矩阵"></a>4. 矩阵</h4><p>4.1. 矩阵使用\begin{matrix}和\end{matrix}作为起止符，使用&amp;表示空格，使用\表示换行：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">   <span class="number">1</span> &amp; <span class="number">0</span> &amp; <span class="number">0</span> \\</span><br><span class="line">   <span class="number">0</span> &amp; <span class="number">1</span> &amp; <span class="number">0</span> \\</span><br><span class="line">   <span class="number">0</span> &amp; <span class="number">0</span> &amp; <span class="number">1</span></span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>示例：$<br>\begin{matrix}<br>   1 &amp; 0 &amp; 0 \<br>   0 &amp; 1 &amp; 0 \<br>   0 &amp; 0 &amp; 1<br>\end{matrix}<br>$</p><p>4.2. 使用\left符号 和\right符号 作为起止符，包围矩阵，可以为矩阵添加括号：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\left[</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">   <span class="number">1</span> &amp; <span class="number">0</span> &amp; <span class="number">0</span> \\</span><br><span class="line">   <span class="number">0</span> &amp; <span class="number">1</span> &amp; <span class="number">0</span> \\</span><br><span class="line">   <span class="number">0</span> &amp; <span class="number">0</span> &amp; <span class="number">1</span></span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right]</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>示例：$\left[ a \right]$、$<br>\left[<br>\begin{matrix}<br>   1 &amp; 0 &amp; 0 \<br>   0 &amp; 1 &amp; 0 \<br>   0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$</p><p>4.3. 需要注意的是，如果想使用{}括号，需要在其前面添加反斜杠：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="formula">$$</span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">left</span></span><span class="tag">\<span class="name">&#123;</span></span></span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">begin</span><span class="string">&#123;matrix&#125;</span></span></span></span><br><span class="line"><span class="formula">   1 &amp; 0 &amp; 0 <span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula">   0 &amp; 1 &amp; 0 <span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula">   0 &amp; 0 &amp; 1</span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">end</span><span class="string">&#123;matrix&#125;</span></span></span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">right</span></span><span class="tag">\<span class="name">&#125;</span></span></span></span><br><span class="line"><span class="formula">$$</span></span><br></pre></td></tr></table></figure><p>示例：$\left{ a \right}$、$<br>\left[<br>\begin{matrix}<br>   1 &amp; 0 &amp; 0 \<br>   0 &amp; 1 &amp; 0 \<br>   0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$</p><h4 id="5-公式号"><a href="#5-公式号" class="headerlink" title="5. 公式号"></a>5. 公式号</h4><p>5.1. 我们可能需要给块级公式末尾添加公式号，只需要使用\tag{编号}即可，仅在块级有效，行内会报错：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="formula">$$</span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">left</span></span><span class="tag">\<span class="name">&#123;</span></span></span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">begin</span><span class="string">&#123;matrix&#125;</span></span></span></span><br><span class="line"><span class="formula">   1 &amp; 0 &amp; 0 <span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula">   0 &amp; 1 &amp; 0 <span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula">   0 &amp; 0 &amp; 1</span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">end</span><span class="string">&#123;matrix&#125;</span></span></span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">right</span></span><span class="tag">\<span class="name">&#125;</span></span> <span class="tag">\<span class="name">tag</span><span class="string">&#123;1&#125;</span></span></span></span><br><span class="line"><span class="formula">$$</span></span><br></pre></td></tr></table></figure><p>示例：$$<br>\left[<br>\begin{matrix}<br>   1 &amp; 0 &amp; 0 \<br>   0 &amp; 1 &amp; 0 \<br>   0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right] \tag{1.1}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 开发小记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 日常开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CocoaPods】CDN trunk URL couldn’t be downloaded:https://raw.githubusercontent.com/CocoaPods/</title>
      <link href="/2019/10/15/pod-download-issues/"/>
      <url>/2019/10/15/pod-download-issues/</url>
      
        <content type="html"><![CDATA[<p>首次遇到Pods的<code>CDN</code>问题，后来才知道是1.8版本后<code>CocoaPods</code>为了开发者更快速的体验，进行了<code>CDN</code>加速处理，同时也让<code>Podfile</code>更加规范了。</p><a id="more"></a><p>使用<code>pod install</code>后出现报错<br><img src="http://blog.idbeny.com/6trvm.png@normal" alt=""></p><p>怎么办呢？根据报错原因猜想是CDN没找到对应的仓库地址，然后将<code>Podfile</code>指定了源地址<code>source &#39;https://github.com/CocoaPods/Specs.git&#39;</code>，之后继续<code>install</code>，依然报错，无奈之下手动将<code>Specs</code>的仓库clone到本地Pods目录下<code>cd ~/.cocoapods/repos/</code><br><img src="http://blog.idbeny.com/p4vjm.png@normal" alt=""></p><p>完成上面操作后，继续<code>pod install</code>，出现了我们熟悉的颜色，等待安装就行了<br><img src="http://blog.idbeny.com/k9plq.png@normal" alt=""></p><p>如果搜索某一个库的时候，例 <code>pod search AFNetworking</code>，出现文章刚开始的错误，只需要<code>pod repo remove trunk</code>即可。</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CocoaPods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列十九 - 泛型</title>
      <link href="/2019/08/20/swift-syntax-generics/"/>
      <url>/2019/08/20/swift-syntax-generics/</url>
      
        <content type="html"><![CDATA[<p>泛型在<code>Java</code>,<code>C++</code>等多个语言中都有，<code>C#</code>把泛型发挥的淋漓尽致，<code>OC</code>中也有泛型（比如<code>OC</code>中的数组，你可以限制他里面装的是<code>NSString</code>类型），<code>Swift</code>中泛型的使用范围更加多元化。</p><a id="more"></a><h2 id="一、泛型函数"><a href="#一、泛型函数" class="headerlink" title="一、泛型函数"></a>一、泛型函数</h2><h3 id="1-1-泛型可以将类型参数化，提高代码复用率，减少代码量"><a href="#1-1-泛型可以将类型参数化，提高代码复用率，减少代码量" class="headerlink" title="1.1. 泛型可以将类型参数化，提高代码复用率，减少代码量"></a>1.1. 泛型可以将类型参数化，提高代码复用率，减少代码量</h3><p>示例代码：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var n1 = <span class="number">10</span></span><br><span class="line">var n2 = <span class="number">20</span></span><br><span class="line">func swapValues(_ a: <span class="keyword">inout</span> Int, _ b: <span class="keyword">inout</span> Int) &#123;</span><br><span class="line">    (a, b) = (b, a)</span><br><span class="line">&#125;</span><br><span class="line">swapValues(&amp;n1, &amp;n2)</span><br><span class="line">print(<span class="string">"a=\(n1), b=\(n2)"</span>) <span class="comment">// 输出：a=20, b=10</span></span><br></pre></td></tr></table></figure><p>如果上面示例代码中<code>swapValues</code>让传入的是其他类型参数就无法使用了。这时候就要考虑使用泛型。</p><p>在函数名后面加上<code>&lt;T&gt;</code>就可以表示该函数接收的是泛型参数，参数类型也是用<code>T</code>修饰（<code>T</code>不是固定写法，也可以是<code>S</code>、<code>ABC</code>等其他任意标识，仅仅代表不确定类型）。</p><p>泛型示例代码：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func swapValues&lt;T&gt;(_ a: <span class="keyword">inout</span> T, _ b: <span class="keyword">inout</span> T) &#123;</span><br><span class="line">    (a, b) = (b, a)</span><br><span class="line">&#125;</span><br><span class="line">swapValues(&amp;n1, &amp;n2)</span><br></pre></td></tr></table></figure><p>这时候就可以传入任意类型的参数了，但参数类型必须保持一致。</p><p>调用<code>swapValues</code>函数时后面不能写成<code>swapValues&lt;Int&gt;(&amp;n1, &amp;n2)</code>，因为参数已经明确了要传入的是什么类型。<br><img src="http://blog.idbeny.com/1fe2t.png@normal" alt=""></p><p>声明泛型函数时，函数后面的泛型标识也不能省略，否则就是一个普通函数，编译器无法识别泛型。<br><img src="http://blog.idbeny.com/mrf2b.png@normal" alt=""></p><h3 id="1-2-泛型函数赋值给变量"><a href="#1-2-泛型函数赋值给变量" class="headerlink" title="1.2. 泛型函数赋值给变量"></a>1.2. 泛型函数赋值给变量</h3><p>普通函数是可以直接赋值给变量的：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var n1 = <span class="number">10</span></span><br><span class="line">var n2 = <span class="number">20</span></span><br><span class="line">func swapValues(_ a: <span class="keyword">inout</span> Int, _ b: <span class="keyword">inout</span> Int) &#123;</span><br><span class="line">    (a, b) = (b, a)</span><br><span class="line">&#125;</span><br><span class="line">var fn = swapValues</span><br><span class="line">fn(&amp;n1, &amp;n2)</span><br></pre></td></tr></table></figure><p>但是泛型函数是不能向普通韩式一样直接赋值给变量的，否则直接报错。</p><p><img src="http://blog.idbeny.com/vm4ff.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/a5dkq.png@normal" alt=""></p><p>正确做法（变量后面明确泛型的类型）：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var n1 = <span class="number">10</span></span><br><span class="line">var n2 = <span class="number">20</span></span><br><span class="line">func swapValues&lt;T&gt;(_ a: <span class="keyword">inout</span> T, _ b: <span class="keyword">inout</span> T) &#123;</span><br><span class="line">    (a, b) = (b, a)</span><br><span class="line">&#125;</span><br><span class="line">var fn: (<span class="keyword">inout</span> Int, <span class="keyword">inout</span> Int) -&gt; () = swapValues</span><br><span class="line">fn(&amp;n1, &amp;n2)</span><br></pre></td></tr></table></figure><p>多个泛型示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span>&lt;T1, T2&gt;<span class="params">(<span class="number">_</span> a: T1, <span class="number">_</span> b: T2)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a=\(a), b=\(b)"</span>)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>, <span class="number">20.0</span>)</span><br></pre></td></tr></table></figure><h2 id="二、泛型类型"><a href="#二、泛型类型" class="headerlink" title="二、泛型类型"></a>二、泛型类型</h2><p>结构体和类也是可以增加泛型的，这种类型叫做泛型类型。</p><h3 id="2-1-类"><a href="#2-1-类" class="headerlink" title="2.1. 类"></a>2.1. 类</h3><p>示例代码（栈：先入后出）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elements = [<span class="type">E</span>]()</span><br><span class="line">    <span class="comment">// 入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element: E)</span></span> &#123;</span><br><span class="line">        elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">E</span> &#123;</span><br><span class="line">        elements.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">E?</span> &#123;</span><br><span class="line">        elements.last</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 栈内元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 元素是Int类型</span></span><br><span class="line"><span class="keyword">var</span> intStack = <span class="type">Stack</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"><span class="comment">// 元素是String类型</span></span><br><span class="line"><span class="keyword">var</span> stringStack = <span class="type">Stack</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"><span class="comment">// 元素是任意类型</span></span><br><span class="line"><span class="keyword">var</span> anyStack = <span class="type">Stack</span>&lt;<span class="type">Any</span>&gt;()</span><br></pre></td></tr></table></figure><p>为什么使用类的时候就可以在类名后面加上类型，函数就不可以呢？因为函数在入参的时候，参数已经明确了泛型的类型。</p><h3 id="2-2-继承"><a href="#2-2-继承" class="headerlink" title="2.2. 继承"></a>2.2. 继承</h3><p>继承泛型类型的类，子类也必须是泛型类型。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">SubStack</span>&lt;<span class="symbol">E</span>&gt;: <span class="symbol">Stack</span>&lt;<span class="symbol">E</span>&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-结构体"><a href="#2-3-结构体" class="headerlink" title="2.3. 结构体"></a>2.3. 结构体</h3><p>如果结构体内函数需要修改结构体的内存（修改存储属性），则必须在函数前面加上<code>mutating</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elements = [<span class="type">E</span>]()</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element: E)</span></span> &#123;</span><br><span class="line">        elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">E</span> &#123;</span><br><span class="line">        elements.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">E?</span> &#123;</span><br><span class="line">        elements.last</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-枚举"><a href="#2-4-枚举" class="headerlink" title="2.4. 枚举"></a>2.4. 枚举</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Score</span>&lt;<span class="title">T</span>&gt; &#123;</span></span><br><span class="line">    <span class="keyword">case</span> point(T)</span><br><span class="line">    <span class="keyword">case</span> grade(String)</span><br><span class="line">&#125;</span><br><span class="line">/<span class="regexp">/ 完整写法</span></span><br><span class="line"><span class="regexp">let score0 = Score&lt;Int&gt;.point(100)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 忽略枚举后面的类型声明（参数已经明确的泛型类型）</span></span><br><span class="line"><span class="regexp">let score1 = Score.point(100.0)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 必须指定泛型（此时并不知道T什么类型）</span></span><br><span class="line"><span class="regexp">let score2 = Score&lt;Double&gt;.grade("A")</span></span><br></pre></td></tr></table></figure><h2 id="三、泛型本质"><a href="#三、泛型本质" class="headerlink" title="三、泛型本质"></a>三、泛型本质</h2><p>示例代码：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func swapValues&lt;T&gt;(_ a: <span class="keyword">inout</span> T, _ b: <span class="keyword">inout</span> T) &#123;</span><br><span class="line">    (a, b) = (b, a)</span><br><span class="line">&#125;</span><br><span class="line">var i1 = <span class="number">10</span></span><br><span class="line">var i2 = <span class="number">20</span></span><br><span class="line">swapValues(&amp;i1, &amp;i2)</span><br><span class="line"></span><br><span class="line">var d1 = <span class="number">10.0</span></span><br><span class="line">var d2 = <span class="number">20.0</span></span><br><span class="line">swapValues(&amp;d1, &amp;d2)</span><br></pre></td></tr></table></figure><p><strong>猜想：</strong> 同一个函数可以传入不同类型的参数，是不是像<code>C++</code>一样生成了很多不同类型参数的重载函数？如果是这样的话，不同参数类型的函数内存地址肯定是不一样的，我们通过汇编看下。</p><p><img src="http://blog.idbeny.com/idlxv.png@normal" alt=""><br><img src="http://blog.idbeny.com/ymc80.png@normal" alt=""></p><p>通过汇编发现，两个函数地址是一样的。</p><p><strong>疑问：</strong> 传入的参数类型不一样（内存布局不一样），是如何做到参数交互赋值呢？</p><p><img src="http://blog.idbeny.com/cucsf.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/1vte4.png@normal" alt=""></p><p>通过上面汇编可以看出，函数传入的参数除了两个外界传入的参数外，还传入另外一个元类型信息参数。函数内部就是根据这个元类型参数获取参数真正的类型是什么。</p><h2 id="四、关联类型"><a href="#四、关联类型" class="headerlink" title="四、关联类型"></a>四、关联类型</h2><p>关联类型（Associated Type）的作用：给协议中用到的类型定义一个占位名称。</p><p>示例代码（栈）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element: Element)</span></span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">Element</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">Element</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>associatedtype Element</code>代表的意思就是定义一个名称为<code>Element</code>的泛型。</p><p>使用关联类型时，有两种方法可以让编译器知道关联类型的确定类型：</p><ul><li>格式：<code>typealias 关联类型 = 真实类型</code><br>  示例：<code>typealias Element = String</code></li><li>第二种方式就是直接把实现协议参数修改为确定类型。</li></ul><p>使用关联类型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringStack</span>: <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// typealias Element = String</span></span><br><span class="line">    <span class="keyword">var</span> elements = [<span class="type">String</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element: String)</span></span> &#123;</span><br><span class="line">        elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        elements.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">        elements.last</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当实现协议的类也无法确定关联类型时：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt;: <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// typealias Element = E</span></span><br><span class="line">    <span class="keyword">var</span> elements = [<span class="type">E</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element: E)</span></span> &#123;</span><br><span class="line">        elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">E</span> &#123;</span><br><span class="line">        elements.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">E?</span> &#123;</span><br><span class="line">        elements.last</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>协议中可以拥有多个关联类型：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element2</span></span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element3</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element: Element)</span></span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">Element</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">Element</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能把关联类型拼接在一起声明，否则报错。</p><h2 id="五、类型约束"><a href="#五、类型约束" class="headerlink" title="五、类型约束"></a>五、类型约束</h2><p>可以对泛型进行限制/约束。</p><p>示例代码一：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Person</span> &#123; &#125;</span><br><span class="line">func swapValues&lt;T: Person &amp; Runnable&gt;(_ a: <span class="keyword">inout</span> T, _ b: <span class="keyword">inout</span> T) &#123;</span><br><span class="line">    (a, b) = (b, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的示例代码中<code>T</code>就被<code>Person</code>和<code>Runnable</code>做了约束，意思是<code>T</code>只能是<code>Person</code>类并且需要遵守<code>Runnable</code>协议。</p><p>示例代码二：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span>: <span class="type">Equatable</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>: <span class="title">Equatable</span>&gt; : <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">E</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">equal</span>&lt;S1: Stackable, S2: Stackable&gt;<span class="params">(<span class="number">_</span> s1: S1, <span class="number">_</span> s2: S2)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">where</span> <span class="type">S1</span>.<span class="type">Element</span> == <span class="type">S2</span>.<span class="type">Element</span>, <span class="type">S1</span>.<span class="type">Element</span>: <span class="type">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="type">Stack</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="type">Stack</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="type">Stack</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"><span class="built_in">equal</span>(s1, s2)</span><br><span class="line"><span class="built_in">equal</span>(s2, s3)</span><br></pre></td></tr></table></figure><p>示例代码二就稍微有点复杂了，约束泛型后还添加了其他条件。<code>S1</code>和<code>S2</code>不仅要遵守<code>Stackable</code>协议，而且<code>S1</code>和<code>S2</code>还要相等，<code>S1</code>必须遵守<code>Hashable</code>协议（可哈希）。</p><p><code>equal(s1, s2)</code>可以编译通过，因为泛型都是<code>Int</code>类型。但是<code>equal(s2, s3)</code>就会编译报错，因为<code>s2</code>泛型类型是<code>Int</code>类型，而<code>s3</code>泛型类型是<code>String</code>类型，不符合条件，所以编译报错。</p><blockquote><p>扩展：<code>Int</code>和<code>String</code>都是遵守<code>Hashable</code>协议的。</p></blockquote><p><strong>注意点：</strong></p><p>示例代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable &#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="type">Runnable &#123; &#125;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>: <span class="type">Runnable &#123; &#125;</span></span></span><br><span class="line">func <span class="keyword">get</span>(_ type: <span class="built_in">Int</span>) -&gt; Runnable &#123;</span><br><span class="line">    <span class="keyword">if</span> type == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Car()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> r1 = <span class="keyword">get</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> r2 = <span class="keyword">get</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/s8qpp.png@normal" alt=""></p><p>当使用<code>r1</code>的时候，编译器会认为<code>r1</code>是<code>Runnable</code>类型。因为返回的具体类型是程序运行中才知道的。</p><p>如果协议中有<code>associatedtype</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable &#123;</span><br><span class="line">    associatedtype Speed</span><br><span class="line">    <span class="keyword">var</span> speed: Speed &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="type">Runnable &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> speed: <span class="built_in">Double</span> &#123; <span class="number">0.0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>: <span class="type">Runnable &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> speed: <span class="built_in">Int</span> &#123; <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">func <span class="keyword">get</span>(_ type: <span class="built_in">Int</span>) -&gt; Runnable &#123;</span><br><span class="line">    <span class="keyword">if</span> type == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Car()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译就会报错：<br><em>协议<code>Runnable</code>不能用作泛型约束，因为他有<code>Self</code>或关联类型约束</em><br><img src="http://blog.idbeny.com/w0543.png@normal" alt=""></p><p>报错的原因就是程序在编译期间并不知道协议中的关联类型<code>Speed</code>具体是什么类型。</p><p>解决方案有两种：<br><strong>方案一：使用泛型</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable &#123;</span><br><span class="line">    associatedtype Speed</span><br><span class="line">    <span class="keyword">var</span> speed: Speed &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="type">Runnable &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> speed: <span class="built_in">Double</span> &#123; <span class="number">0.0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>: <span class="type">Runnable &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> speed: <span class="built_in">Int</span> &#123; <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="keyword">get</span>&lt;T: Runnable&gt;(_ type: <span class="built_in">Int</span>) -&gt; T &#123;</span><br><span class="line">    <span class="keyword">if</span> type == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person() <span class="keyword">as</span>! T</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Car() <span class="keyword">as</span>! T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r1: Person = <span class="keyword">get</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> r2: Car = <span class="keyword">get</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>返回值是泛型，定义变量的时候把变量类型确定好，所以函数返回值就随之确定。</p><p><strong>方案二：不透明类型</strong><br>使用<code>some</code>关键字声明一个不透明类型。</p><p><img src="http://blog.idbeny.com/so35d.png@normal" alt=""></p><p>即使在函数返回值前面限定了不透明类型还是报错，那是因为<strong>不透明类型限制函数只能返回一种类型</strong>。</p><blockquote><p>思考一：为什么只需要限定不透明类型就可以了？</p><blockquote><p>因为不透明类型限制函数只能返回一种类型，所以函数内部已经知道返回的类型是什么。</p></blockquote></blockquote><blockquote><p>思考二：既然只能返回一种类型，为什么不直接返回具体类型？</p><blockquote><p>可以避免外界知道返回值的具体类型（即屏蔽真实类型）。</p></blockquote></blockquote><p><strong>应用场景：</strong> 当需要返回一个遵守某个协议的对象时，如果不希望外界知道返回的具体对象类型，仅对外公开协议中定义的接口时，可以使用不透明类型。</p><p><code>some</code>除了用在返回值类型上，一般还可以用在属性类型上。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable &#123;</span><br><span class="line">    associatedtype Speed</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="type">Runnable &#123;</span></span></span><br><span class="line">    <span class="keyword">typealias</span> Speed = <span class="built_in">Double</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pet: some Runnable &#123;</span><br><span class="line">        <span class="keyword">return</span> Dog()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中属性<code>pet</code>就对外隐藏了返回值真实类型（如果没有关联类型，就可以不加<code>some</code>，也能够达到隐藏真实类型的目的）。</p><h2 id="六、可选项的本质"><a href="#六、可选项的本质" class="headerlink" title="六、可选项的本质"></a>六、可选项的本质</h2><p>可选项的本质是枚举类型。</p><p><strong>枚举定义：</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Optional</span>&lt;<span class="title">Wrapped</span>&gt; : <span class="title">ExpressibleByNilLiteral</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> none</span><br><span class="line">    <span class="keyword">case</span> some(Wrapped)</span><br><span class="line">    public init(_ <span class="symbol">some:</span> Wrapped)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">var</span> <span class="string">age: Int? = 10</span></span><br><span class="line"><span class="attr">age</span> = <span class="string">20</span></span><br><span class="line"><span class="attr">age</span> = <span class="string">nil</span></span><br></pre></td></tr></table></figure><p>上面示例代码的完整代码形式：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var age: <span class="keyword">Optional</span>&lt;<span class="built_in">Int</span>&gt; = <span class="keyword">Optional</span>(<span class="number">10</span>)</span><br><span class="line">// var age: <span class="keyword">Optional</span>&lt;<span class="built_in">Int</span>&gt; = .some(<span class="number">10</span>)</span><br><span class="line">age = .some(<span class="number">20</span>)</span><br><span class="line">age = .<span class="keyword">none</span></span><br></pre></td></tr></table></figure><p><code>?</code>其实就是可选项的语法糖。</p><p><strong>可选项在switch中的注意点：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age: <span class="type">Int?</span> = <span class="number">10</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">age = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> age &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> v?:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下，<code>case let v</code>，<code>v</code>一定是一个可选类型，和<code>if</code>不一样（<code>if</code>会自动解包）。</p><p>如果把<code>v</code>后面加上<code>?</code>，最终得到的<code>v</code>是<code>Int</code>类型：<br><img src="http://blog.idbeny.com/s2ey8.png@normal" alt=""></p><p>等价代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> let v = age &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"1"</span>, v)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多重可选性的示例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例一</span></span><br><span class="line"><span class="keyword">var</span> age_: <span class="type">Int?</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="type">Int?</span>? = age_</span><br><span class="line">age = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例一本质</span></span><br><span class="line"><span class="comment">// 写法一：</span></span><br><span class="line"><span class="keyword">var</span> age0 = <span class="type">Optional</span>.some(<span class="type">Optional</span>.some(<span class="number">10</span>))</span><br><span class="line">age0 = .<span class="keyword">none</span></span><br><span class="line"><span class="comment">// 写法二：</span></span><br><span class="line"><span class="keyword">var</span> age1: <span class="type">Optional</span>&lt;<span class="type">Optional</span>&gt; = .some(.some(<span class="number">10</span>))</span><br><span class="line">age1 = .<span class="keyword">none</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例二</span></span><br><span class="line"><span class="comment">//var age: Int?? = 10</span></span><br><span class="line"><span class="comment">//// 示例二本质</span></span><br><span class="line"><span class="comment">//var age0: Optional&lt;Optional&gt; = 10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列十八 - 错误处理</title>
      <link href="/2019/08/15/swift-syntax-error/"/>
      <url>/2019/08/15/swift-syntax-error/</url>
      
        <content type="html"><![CDATA[<p>在其他编程语言中有异常（Exception）处理，但是Swift官方使用的是错误（Error）来描述的。但两者定义本质是一样的。</p><a id="more"></a><h2 id="一、定义错误"><a href="#一、定义错误" class="headerlink" title="一、定义错误"></a>一、定义错误</h2><p>开发过程中常见的错误：</p><ul><li>语法错误（编译报错）</li><li>逻辑错误</li><li>运行时错误（可能会导致闪退，一般也叫做异常）</li><li>……</li></ul><p>示例代码一：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1: Int, <span class="number">_</span> num2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(divide(<span class="number">20</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment">// 输出：2</span></span><br></pre></td></tr></table></figure><p>上面示例代码正常运行，但是如果把<code>num2</code>传值为<code>0</code>，系统就会报错（除数不能为0）：<br><img src="http://blog.idbeny.com/50od3.png@normal" alt=""></p><p>这种情况有<strong>两种解决办法：</strong></p><ol><li><p><strong>返回类型修改为可选类型</strong>，如果被除数<code>num2</code>为<code>0</code>，就返回<code>nil</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1: Int, <span class="number">_</span> num2: Int)</span></span> -&gt; <span class="type">Int?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(divide(<span class="number">20</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment">// 输出：nil</span></span><br></pre></td></tr></table></figure></li><li><p><strong>自定义错误信息</strong>，当传入<code>num2</code>的值为<code>0</code>时报错（相比1，这样可以详细地告知开发者哪里出了错误）。</p></li></ol><p><strong>自定义错误信息步骤：</strong></p><ul><li><p>Swift中可以通过<code>Error</code>协议自定义运行时的错误信息（<code>Error</code>是协议，也就是说枚举、结构体、类都可以定义错误信息）。</p></li><li><p>函数内部通过<code>throw</code>抛出自定义自定义<code>Error</code>，可能会抛出<code>Error</code>的函数必须加上<code>throws</code>声明</p></li><li><p>需要使用<code>try</code>调用可能会抛出<code>Error</code>的函数</p></li></ul><p>示例代码二：<br><img src="http://blog.idbeny.com/fdsrs.png@normal" alt=""></p><p>上面代码抛出的异常提示信息时我们自定义的，但是依然报错了，是因为我们只是让编译器能够抛出异常，我们并没有处理异常，程序运行过程中依旧会崩溃。要想程序正常运行，就需要捕获并处理异常。</p><h2 id="二、处理Error"><a href="#二、处理Error" class="headerlink" title="二、处理Error"></a>二、处理Error</h2><p>处理<code>Error</code>有两种方式：</p><ul><li>通过<code>do-catch</code>捕捉<code>Error</code></li><li>不捕捉<code>Error</code>，在当前函数增加<code>throws</code>声明，<code>Error</code>将自动抛给上层函数</li></ul><h3 id="2-1-do-catch"><a href="#2-1-do-catch" class="headerlink" title="2.1. do-catch"></a>2.1. do-catch</h3><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"2"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="keyword">try</span> divide(<span class="number">20</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"3"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> <span class="type">SomeError</span>.illegalArg(msg) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"参数异常："</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> <span class="type">SomeError</span>.outOfBounds(size, index) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"下标越界："</span>, <span class="string">"size=\(size)"</span>, <span class="string">"index=\(index)"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="type">SomeError</span>.outOfMemory &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"内存溢出"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"其他错误"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> 参数异常： 0不能作为除数</span></span><br><span class="line"><span class="comment"> 4</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>把可能抛出异常的代码放到<code>do</code>函数体内，后面的<code>catch</code>类似于<code>switch</code>的<code>case</code>。</p><p>如果抛出异常后，调用<code>try</code>异常函数的作用域内后面的代码都不会执行。直接进入<code>catch</code>的匹配流程。</p><h3 id="2-2-throws"><a href="#2-2-throws" class="headerlink" title="2.2. throws"></a>2.2. throws</h3><p>如果最顶层函数（<code>main</code>函数）依然没有捕捉<code>Error</code>，那么程序将终止。</p><p>示例代码一（程序崩溃）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">try</span> divide(<span class="number">200</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> test()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> Fatal error: Error raised at top level: SwiftTestDemo.SomeError.illegalArg("0不能作为除数")</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>示例代码二（程序正常）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"2"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="keyword">try</span> divide(<span class="number">200</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"3"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">SomeError</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> test()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> illegalArg("0不能作为除数")</span></span><br><span class="line"><span class="comment"> 4</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>示例代码三（catch不够详细）：<br><img src="http://blog.idbeny.com/c0oy7.png@normal" alt=""></p><p><code>catch</code>一定要能够处理所有情况，所以系统报错提示。</p><p>如下正常：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="keyword">try</span> divide(<span class="number">200</span>, <span class="number">0</span>))</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">is</span> <span class="type">SomeError</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"This is error"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Other"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">// 输出：This is error</span></span><br></pre></td></tr></table></figure><h3 id="2-3-try-、try"><a href="#2-3-try-、try" class="headerlink" title="2.3. try?、try!"></a>2.3. try?、try!</h3><p>可以使用<code>try?、try!</code>调用可能会抛出<code>Error</code>的函数，这样就不用去处理<code>Error</code>。</p><p>示例代码一：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func test() &#123;</span><br><span class="line">    var result1 = <span class="keyword">try</span>? divide(<span class="number">200</span>, <span class="number">10</span>) <span class="comment">// Optional(20), 返回类型是Int?</span></span><br><span class="line">    var result2 = <span class="keyword">try</span>? divide(<span class="number">200</span>, <span class="number">0</span>) <span class="comment">// nil</span></span><br><span class="line">    var result3 = <span class="keyword">try</span>! divide(<span class="number">200</span>, <span class="number">10</span>) <span class="comment">// 2, 返回值类型是Int</span></span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p><code>try?</code>返回可选类型，<code>try!</code>会隐式解包。</p><p>示例代码二：<br>下面代码a和b是等价的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">try</span>? divide(<span class="number">200</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Int?</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  b = <span class="keyword">try</span> divide(<span class="number">200</span>, <span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  b = <span class="literal">nil</span> <span class="comment">// 可以忽略不写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-rethrows"><a href="#2-4-rethrows" class="headerlink" title="2.4. rethrows"></a>2.4. rethrows</h3><p><code>rethrows</code>声明：函数本身不会抛出错误，但调用闭包参数抛出错误，那么它会将错误向上抛。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exec</span><span class="params">(<span class="number">_</span> fn:<span class="params">(Int, Int)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span>, <span class="number">_</span> num1: <span class="type">Int</span>, <span class="number">_</span> num2: <span class="type">Int</span>) <span class="keyword">rethrows</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">try</span> fn(num1, num2))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> exec(divide, <span class="number">20</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 输出：Fatal error: Error raised at top level: SwiftTestDemo.SomeError.illegalArg("0不能作为除数"):</span></span><br></pre></td></tr></table></figure><p><code>throws</code>表示<strong>函数内部</strong>可能会抛出异常，<code>rethrows</code>表示<strong>函数参数</strong>可能会抛出异常。</p><p>空合并运算符<code>??</code>的源码用到了<code>rethrows</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ?? &lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span></span><br></pre></td></tr></table></figure><blockquote><p>区别：<code>rethrows</code>换成<code>throws</code>也是可以的，<code>rethrows</code>的描述更加精确而已，开发者看到该标记会立即想到是函数参数（函数/闭包表达式）调用可能会抛出异常。</p></blockquote><h3 id="2-5-defer"><a href="#2-5-defer" class="headerlink" title="2.5. defer"></a>2.5. defer</h3><p><code>defer</code>语句：用来定义以任何形式（抛错误、<code>return</code>等）离开代码块前必须要执行的代码。</p><p><strong>特点：</strong> <code>defer</code>语句将延迟至当前作用域结束之前执行。</p><p>通过文件管理案例看下如何使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开文件（文件名）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">open</span><span class="params">(<span class="number">_</span> filename: String)</span></span> -&gt; (<span class="type">Int</span>, <span class="type">Data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>, <span class="type">Data</span>(<span class="built_in">count</span>: <span class="number">1024</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭文件（文件id）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">close</span><span class="params">(<span class="number">_</span> fileId: Int)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"close"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processFile</span><span class="params">(<span class="number">_</span> filename: String)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> (fileId, file) = <span class="keyword">open</span>(filename)</span><br><span class="line">    <span class="comment">// 使用file</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> divide(<span class="number">20</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    close(fileId)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> processFile(<span class="string">"test.txt"</span>)</span><br></pre></td></tr></table></figure><p>上面的示例正常情况下没有问题，如果抛出异常就无法执行<code>close</code>，代码有可能会<code>OOM</code>，这时候就需要在抛出异常前执行<code>close</code>。总之在退出<code>processFile</code>函数之前必须执行<code>close</code>。</p><p><strong>使用<code>defer</code>:</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processFile</span><span class="params">(<span class="number">_</span> filename: String)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> (fileId, file) = <span class="keyword">open</span>(filename)</span><br><span class="line">    <span class="keyword">defer</span> &#123;</span><br><span class="line">        close(fileId)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用file</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> divide(<span class="number">20</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> open</span></span><br><span class="line"><span class="comment"> close</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>注意：所有代码一定不要写到异常代码之后，否则抛出异常后不会执行。</p><p><code>defer</code>语句的执行顺序与定义顺序相反：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fn1</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"fn1"</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fn2</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"fn2"</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> &#123; fn1() &#125;</span><br><span class="line">    <span class="keyword">defer</span> &#123; fn2() &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> fn2</span></span><br><span class="line"><span class="comment"> fn1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="三、assert（断言）"><a href="#三、assert（断言）" class="headerlink" title="三、assert（断言）"></a>三、assert（断言）</h2><p>很多编程语言都有断言机制：不符合指定条件就抛出运行时错误，常用于调试（<strong>Debug</strong>）阶段的条件判断。</p><p>默认情况下，Swift的断言只会在<strong>Debug</strong>模式下生效，<strong>Release</strong>模式下会忽略。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1: Int, <span class="number">_</span> num2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="built_in">assert</span>(num2 != <span class="number">0</span>, <span class="string">"0不能作为除数"</span>)</span><br><span class="line">    <span class="keyword">return</span> num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(divide(<span class="number">20</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment">// Assertion failed: 0不能作为除数: file SwiftTestDemo/main.swift, line 13</span></span><br></pre></td></tr></table></figure><p>增加<strong>Swift Flags</strong>修改断言的默认行为：</p><ul><li><code>-assert-config Release</code>：强制关闭断言</li><li><code>-assert-config Debug</code>：强制开启断言</li></ul><p><img src="http://blog.idbeny.com/j7ht1.png@normal" alt=""></p><h2 id="四、fatalError（致命错误）"><a href="#四、fatalError（致命错误）" class="headerlink" title="四、fatalError（致命错误）"></a>四、fatalError（致命错误）</h2><p>如果遇到严重问题，希望结束程序运行时，可以直接使用<code>fatalError</code>函数抛出错误（这是无法通过<code>do-catch</code>捕捉的错误）。</p><p>使用了<code>fatalError</code>函数，就不需要再写<code>return</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">"num不能小于0"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在某些不得不实现、但不希望别人调用的方法，可以考虑内部使用<code>fatalError</code>函数。<br><img src="http://blog.idbeny.com/5zpxo.png@normal" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 错误处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列十七 - 任意类型</title>
      <link href="/2019/08/12/swift-syntax-any/"/>
      <url>/2019/08/12/swift-syntax-any/</url>
      
        <content type="html"><![CDATA[<p>任意类型、泛型、强制类型转换在开发中也是经常用到。</p><a id="more"></a><h2 id="一、Any、AnyObject"><a href="#一、Any、AnyObject" class="headerlink" title="一、Any、AnyObject"></a>一、Any、AnyObject</h2><p>Swift提供了2种特殊的类型：<code>Any</code>，<code>AnyObject</code>。</p><p><strong>Any：</strong> 可以代表任意类型（枚举、结构体、类，也包括函数类型）</p><p><strong>AnyObject：</strong> 可以代表任意<strong>类</strong>类型（在协议后面写上：<code>AnyObject</code>代表只有类能遵守这个协议）</p><p>示例代码一：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123; &#125;</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">p</span>: Any = <span class="number">10</span></span><br><span class="line"><span class="selector-tag">p</span> = <span class="string">"idbeny"</span></span><br><span class="line"><span class="selector-tag">p</span> = Person()</span><br></pre></td></tr></table></figure><p>如果变量<code>p</code>后面是具体类型或不写类型就不能编译通过。</p><p>示例代码二（存放任意类型的数组）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var data = Array<span class="xml"><span class="tag">&lt;<span class="name">Any</span>&gt;</span></span>()</span><br><span class="line">// 数组的另外一种写法</span><br><span class="line">// var data = [<span class="string">Any</span>](<span class="link"></span>)</span><br><span class="line">data.append(1)</span><br><span class="line">data.append(1.01)</span><br><span class="line">data.append(Person())</span><br><span class="line">data.append("idbeny")</span><br><span class="line">data.append(&#123; 10 &#125;)</span><br></pre></td></tr></table></figure><p>示例代码三：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable: AnyObject &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Person: <span class="symbol">Runnable</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果上面的示例代码三使用<code>struct</code>：<br><img src="http://blog.idbeny.com/sgdc4.png@normal" alt=""></p></li><li><p>改用<code>Any</code>即可正常使用：</p>  <figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable: <span class="keyword">Any</span> &#123; &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="keyword">Person</span>: <span class="keyword">Runnable</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、is、as-、as-、as"><a href="#二、is、as-、as-、as" class="headerlink" title="二、is、as?、as!、as"></a>二、is、as?、as!、as</h2><p><code>is</code>用来判断是否为某种类型，<code>as</code>用来做强制类型转换。</p><p>示例代码一（<code>is</code>的使用）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span>, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Student run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">study</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Student study"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu: <span class="type">Any</span> = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">Int</span>) <span class="comment">// 输出：true</span></span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">Double</span>) <span class="comment">// 输出：false</span></span><br><span class="line"></span><br><span class="line">stu = <span class="string">"idbeny"</span></span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">String</span>) <span class="comment">// 输出：true</span></span><br><span class="line"></span><br><span class="line">stu = <span class="type">Student</span>()</span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">Person</span>) <span class="comment">// 输出：true</span></span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">Student</span>) <span class="comment">// 输出：true</span></span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">Runnable</span>) <span class="comment">// 输出：true</span></span><br></pre></td></tr></table></figure><p>示例代码二（<code>as</code>的使用）：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(stu <span class="keyword">as</span>? Student)?.study<span class="literal">()</span> <span class="comment">// 没有输出</span></span><br><span class="line"></span><br><span class="line">stu = <span class="constructor">Student()</span></span><br><span class="line">(stu <span class="keyword">as</span>? Student)?.study<span class="literal">()</span> <span class="comment">// 输出：Student study</span></span><br><span class="line">(stu <span class="keyword">as</span>! Student).study<span class="literal">()</span> <span class="comment">// 输出：Student study</span></span><br><span class="line">(stu <span class="keyword">as</span>? Student)?.run<span class="literal">()</span> <span class="comment">// 输出：Student run</span></span><br></pre></td></tr></table></figure><ul><li><code>as?</code>：转换为可选类型</li><li><code>as!</code>：强制转换类型（失败后会报错）</li><li><code>as</code>：一定能够强制转换成功的时候使用。</li></ul><p><code>as</code>的应用场景一：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var data = [<span class="string">Any</span>](<span class="link"></span>)</span><br><span class="line">data.append(Int("123") as Any)</span><br></pre></td></tr></table></figure><p><code>as</code>的应用场景二：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> d = <span class="number">10</span> as Double</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(d)</span></span> <span class="comment">// 输出：10.0</span></span><br></pre></td></tr></table></figure><h2 id="三、X-self、X-Type、AnyClass"><a href="#三、X-self、X-Type、AnyClass" class="headerlink" title="三、X.self、X.Type、AnyClass"></a>三、X.self、X.Type、AnyClass</h2><p><code>X.self</code>是一个元类型（<code>metadata</code>）的指针，<code>metadata</code>存放着类型相关信息。<code>AnyClass</code>是<code>AnyObject.Type</code>类型，表示任意元类型。</p><p><strong>示例代码一：</strong><br><code>X.self</code>属于<code>X.Type</code>类型。<code>Person.self</code>类似于OC中的<code>Person.class</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = Person()</span><br><span class="line"><span class="keyword">var</span> pType: Person.<span class="built_in">Type</span> = Person.self</span><br></pre></td></tr></table></figure><p><strong>汇编分析：</strong><br><img src="http://blog.idbeny.com/ysds5.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/8oh8s.png@normal" alt=""></p><p><code>Person.self</code>代表的是指针<code>p</code>指向的实例对象在堆空间存放的前8个字节（元类型信息地址）。</p><p><strong>示例代码二：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">var</span> perType: <span class="type">Person</span>.<span class="type">Type</span> = <span class="type">Person</span>.<span class="keyword">self</span></span><br><span class="line"><span class="keyword">var</span> stuType: <span class="type">Student</span>.<span class="type">Type</span> = <span class="type">Student</span>.<span class="keyword">self</span></span><br><span class="line">perType = <span class="type">Student</span>.<span class="keyword">self</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anyType: <span class="type">AnyObject</span>.<span class="type">Type</span> = <span class="type">Person</span>.<span class="keyword">self</span></span><br><span class="line">anyType = <span class="type">Student</span>.<span class="keyword">self</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">AnyClass</span> = <span class="type">AnyObject</span>.<span class="type">Type</span></span><br><span class="line"><span class="keyword">var</span> anyType2: <span class="type">AnyClass</span> = <span class="type">Person</span>.<span class="keyword">self</span></span><br><span class="line">anyType2 = <span class="type">Student</span>.<span class="keyword">self</span></span><br></pre></td></tr></table></figure><p>上面的代码简单描述就是：父类指针可以指向子类实例。</p><p><strong>示例代码三：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var per = <span class="constructor">Person()</span></span><br><span class="line">print(<span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>self<span class="operator"> == </span><span class="keyword">type</span>(<span class="keyword">of</span>: per)) <span class="comment">// 输出：true</span></span><br></pre></td></tr></table></figure><p><code>type(of: per)</code>本质就是把对象的前8个字节取出来。</p><h2 id="四、元类型的应用"><a href="#四、元类型的应用" class="headerlink" title="四、元类型的应用"></a>四、元类型的应用</h2><p><strong>示例代码一：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>: <span class="title">Animal</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(<span class="number">_</span> clses: [Animal.<span class="keyword">Type</span>])</span></span> -&gt; [<span class="type">Animal</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="type">Animal</span>]()</span><br><span class="line">    <span class="keyword">for</span> cls <span class="keyword">in</span> clses &#123;</span><br><span class="line">        arr.append(cls.<span class="keyword">init</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(create([<span class="type">Cat</span>.<span class="keyword">self</span>, <span class="type">Dog</span>.<span class="keyword">self</span>, <span class="type">Pig</span>.<span class="keyword">self</span>]))</span><br></pre></td></tr></table></figure><p><code>Animal()</code>和<code>Animal.self.init()</code>效果一致。类似OC中<code>[[Animal.class alloc] init]</code>。</p><blockquote><p>上面代码中基类<code>Animal</code>的初始化方法加了<code>required</code>，为什么呢？<br>因为子类初始化器必须实现父类的初始化器，否则有可能找不到<code>init</code>方法导致程序崩溃。</p></blockquote><p><strong>示例代码二：</strong><br>Swift支持部分<code>runtime</code>函数。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> no: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(class_getInstanceSize(<span class="type">Student</span>.<span class="keyword">self</span>)) <span class="comment">// 输出：32</span></span><br><span class="line"><span class="built_in">print</span>(class_getSuperclass(<span class="type">Student</span>.<span class="keyword">self</span>)!) <span class="comment">// 输出：Person</span></span><br><span class="line"><span class="built_in">print</span>(class_getSuperclass(<span class="type">Person</span>.<span class="keyword">self</span>)!) <span class="comment">// 输出：_TtCs12_SwiftObject</span></span><br></pre></td></tr></table></figure><p>从结果可以看出来，Swift还有个隐藏的基类：<strong>Swift.SwiftObject</strong></p><p>可以参考Swift源码：<a href="https://github.com/apple/swift/blob/master/stdlib/public/runtime/SwiftObject.h" target="_blank" rel="noopener">https://github.com/apple/swift/blob/master/stdlib/public/runtime/SwiftObject.h</a></p><h2 id="五、Self"><a href="#五、Self" class="headerlink" title="五、Self"></a>五、Self</h2><ol><li><p><code>Self</code>代表当前类型。<br>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">1</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="keyword">self</span>.age) <span class="comment">// 输出：1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="type">Self</span>.<span class="built_in">count</span>) <span class="comment">// 输出：2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="type">Person</span>()</span><br><span class="line">p.run()</span><br></pre></td></tr></table></figure></li><li><p><code>Self</code>一般用作返回值类型（也可以作为参数类型），限定返回值跟方法调用者必须是同一类型。类似于OC中的<code>instancetype</code>。</p></li></ol><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> -&gt; <span class="type">Self</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        type(of: <span class="keyword">self</span>).<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="type">Person</span>()</span><br><span class="line">p.test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="type">Student</span>()</span><br><span class="line">stu.test()</span><br></pre></td></tr></table></figure><p>结果：谁调用就返回谁的实例。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 任意类型 </tag>
            
            <tag> 强制类型转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列十六 - 协议</title>
      <link href="/2019/08/08/swift-syntax-protocol/"/>
      <url>/2019/08/08/swift-syntax-protocol/</url>
      
        <content type="html"><![CDATA[<p>协议在Swift中极其重要，可以说任何项目开发都会用到协议。</p><a id="more"></a><h2 id="一、协议（Protocol）的定义"><a href="#一、协议（Protocol）的定义" class="headerlink" title="一、协议（Protocol）的定义"></a>一、协议（Protocol）的定义</h2><p>协议可以用来定义方法、属性、下标的声明，协议可以被枚举、结构体、类遵守（多个协议之间用逗号隔开）。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义协议</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Test1</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Test2</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Test3</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遵守协议</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>: <span class="title">Test1</span>, <span class="title">Test2</span>, <span class="title">Test3</span>, <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>协议中定义方法时不能有默认参数值；</li><li>默认情况下，协议中定义的内容必须全部都实现。</li></ul><h2 id="二、协议中的属性"><a href="#二、协议中的属性" class="headerlink" title="二、协议中的属性"></a>二、协议中的属性</h2><p>协议中定义属性时必须用<code>var</code>关键字。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例代码中协议属性<code>x</code>和<code>y</code>并不是计算属性的意思，它的意思仅仅是表达该属性是具备可读/可写/可读写功能。</p><p><strong>协议属性的实现：</strong><br>实现协议时的属性权限要【不小于】协议中定义的属性权限：</p><ul><li>协议定义<code>get</code>、<code>set</code>，用<code>var</code>存储属性 或 <code>get</code>、<code>set</code>计算属性去实现；</li><li>协议定义<code>get</code>，用任何属性都可以实现。</li></ul><p>场景一：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可读写的存储属性</span></span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 只读的存储属性</span></span><br><span class="line">    <span class="keyword">let</span> y: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Person draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; index &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景二：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="type">Drawable &#123;</span></span></span><br><span class="line">    <span class="comment">// 可读写的计算属性</span></span><br><span class="line">    <span class="keyword">var</span> x: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只读的计算属性</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="built_in">Int</span> &#123; <span class="number">0</span> &#125;</span><br><span class="line">    func draw() &#123;</span><br><span class="line">        print(<span class="string">"Person draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    subscript(index: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; index &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、static、class、mutating、init在协议中的使用"><a href="#三、static、class、mutating、init在协议中的使用" class="headerlink" title="三、static、class、mutating、init在协议中的使用"></a>三、static、class、mutating、init在协议中的使用</h2><h3 id="3-1-static、class"><a href="#3-1-static、class" class="headerlink" title="3.1. static、class"></a>3.1. static、class</h3><p>为了保证通用，协议中必须用<code>static</code>定义类型方法，类型属性、类型下标。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现协议的时候既可以使用<code>static</code>，也可以使用<code>class</code>，取决于子类是否需要重写。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Person1: <span class="symbol">Drawable</span></span> &#123;</span><br><span class="line">    static func draw() &#123;</span><br><span class="line">        print(<span class="string">"Person1 draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Person2: <span class="symbol">Drawable</span></span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="symbol">func</span> <span class="symbol">draw</span>() &#123;</span><br><span class="line">        print(<span class="string">"Person2 draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-mutating"><a href="#3-2-mutating" class="headerlink" title="3.2. mutating"></a>3.2. mutating</h3><p>只有将协议中的实例方法标记为<code>mutating</code>，才允许结构体、枚举的具体实现修改自身内存。</p><p>类在实现方法时不加<code>mutating</code>（加了会报错），枚举、结构体才需要加<code>mutating</code>（不加会报错）。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span>: <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        width = <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>: <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        x = <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果协议中没有加<code>mutating</code>，不影响<code>class</code>修改属性值。但是值类型实现协议函数时也不能加<code>mutating</code>，否则报错。</p></blockquote><h3 id="3-3-init"><a href="#3-3-init" class="headerlink" title="3.3. init"></a>3.3. init</h3><ol><li>协议中还可以定义初始化器<code>init</code>，非<code>final</code>类实现时必须加上<code>required</code>。</li></ol><p>示例代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protocol Drawable &#123;</span><br><span class="line">    <span class="keyword">init</span>(x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>: <span class="type">Drawable &#123;</span></span></span><br><span class="line">    required <span class="keyword">init</span>(x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Size</span>: <span class="type">Drawable &#123;</span></span></span><br><span class="line">    <span class="keyword">init</span>(x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>思考：为什么协议限制非<code>final</code>类必须加上<code>required</code>？因为协议肯定希望定义的初始化器被遵守协议的类及其子类都能实现，所以需要加上<code>required</code>，遵守协议的子类也必须实现该协议。但是加上<code>final</code>的类是不能被继承的，所以也就没必要加<code>required</code>。</p></blockquote><ol start="2"><li>如果从协议实现的初始化器，刚好是重写了父类的指定初始化器，那么这个初始化必须同时加上<code>required</code>、<code>override</code>。</li></ol><p>示例代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protocol Animal &#123;</span><br><span class="line">    <span class="keyword">init</span>(age: <span class="built_in">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="type">Person</span>, <span class="type">Animal &#123;</span></span></span><br><span class="line">    required <span class="keyword">override</span> <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：子类重写父类的<code>required</code>指定初始化器，子类不用加<code>override</code>，和是否遵守协议无关。上面的示例中<code>required</code>代表遵守协议，<code>override</code>代表重写父类。</p></blockquote><p><strong>init、init？、init！的使用：</strong></p><ul><li>协议中定义的<code>init?</code>、<code>init!</code>，可以用<code>init</code>、<code>init?</code>、<code>init!</code>去实现；</li><li>协议中定义的<code>init</code>，可以用<code>init</code>、<code>init!</code>去实现。</li></ul><p>示例代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">protocol Animal &#123;</span><br><span class="line">    <span class="keyword">init</span>()</span><br><span class="line">    <span class="keyword">init</span>?(age: <span class="built_in">Int</span>)</span><br><span class="line">    <span class="keyword">init</span>!(height: <span class="built_in">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="type">Animal &#123;</span></span></span><br><span class="line">    required <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">    <span class="comment">// required init!() &#123; &#125;</span></span><br><span class="line">    </span><br><span class="line">    required <span class="keyword">init</span>?(age: <span class="built_in">Int</span>) &#123; &#125;</span><br><span class="line">    <span class="comment">// required init!(age: Int) &#123; &#125;</span></span><br><span class="line">    <span class="comment">// required init(age: Int) &#123; &#125;</span></span><br><span class="line">    </span><br><span class="line">    required <span class="keyword">init</span>!(height: <span class="built_in">Int</span>) &#123; &#125;</span><br><span class="line">    <span class="comment">// required init?(height: Int) &#123; &#125;</span></span><br><span class="line">    <span class="comment">// required init(height: Int) &#123; &#125;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在继承关系中，可以用一个非可失败初始化器重写一个可失败初始化器，但反过来是不行的。但是实现协议初始化器时，可以用且只能用隐式解包的可失败初始化器。</p></blockquote><h2 id="四、协议的继承和组合"><a href="#四、协议的继承和组合" class="headerlink" title="四、协议的继承和组合"></a>四、协议的继承和组合</h2><h3 id="4-1-协议继承"><a href="#4-1-协议继承" class="headerlink" title="4.1. 协议继承"></a>4.1. 协议继承</h3><p>一个协议可以继承其他协议（也可以说是遵守）。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Livable</span>: <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">breath</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Livable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">breath</span><span class="params">()</span></span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-协议组合"><a href="#4-2-协议组合" class="headerlink" title="4.2. 协议组合"></a>4.2. 协议组合</h3><ul><li>协议组合最多可以包含1个类类型</li><li>多个协议和类类型用<code>&amp;</code>连接</li></ul><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义协议和类</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Livable</span>: <span class="title">Runnable</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Livable</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收Person或者其子类的实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fn0</span><span class="params">(obj: Person)</span></span> &#123; &#125;</span><br><span class="line"><span class="comment">// 接收遵守Livable协议的实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fn1</span><span class="params">(obj: Livable)</span></span> &#123; &#125;</span><br><span class="line"><span class="comment">// 接收同时遵守Livable、Runnable协议的实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fn2</span><span class="params">(obj: Livable &amp; Runnable)</span></span> &#123; &#125;</span><br><span class="line"><span class="comment">// 接收同时遵守Livable、Runnable协议、并且是Person或者其子类的实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fn3</span><span class="params">(obj: Person &amp; Livable &amp; Runnable)</span></span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>上面示例代码中<code>fn2</code>和<code>fn3</code>就是协议组合。</p><p><code>fn3</code>还可以使用下面的方式：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">RealPerson</span> = <span class="type">Person</span> &amp; <span class="type">Livable</span> &amp; <span class="type">Runnable</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fn4</span><span class="params">(obj: RealPerson)</span></span> &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="五、常用协议"><a href="#五、常用协议" class="headerlink" title="五、常用协议"></a>五、常用协议</h2><h3 id="5-1-CaseIterable协议（枚举迭代器）"><a href="#5-1-CaseIterable协议（枚举迭代器）" class="headerlink" title="5.1. CaseIterable协议（枚举迭代器）"></a>5.1. CaseIterable协议（枚举迭代器）</h3><p>让枚举遵守<code>CaseIterable</code>协议，可以实现遍历枚举值。</p><p>示例代码：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span>: <span class="title">CaseIterable</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> spring, summer, autumn, winter</span><br><span class="line">&#125;</span><br><span class="line">let seasons = Season.allCases</span><br><span class="line">print(<span class="keyword">type</span>(<span class="symbol">of:</span> seasons))</span><br><span class="line">/<span class="regexp">/ 输出：Array&lt;Season&gt;</span></span><br><span class="line"><span class="regexp">print(seasons.count)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 输出：4</span></span><br><span class="line"><span class="regexp">for season in seasons &#123;</span></span><br><span class="line"><span class="regexp">    print(season)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span>*</span><br><span class="line"> 输出：</span><br><span class="line"> spring</span><br><span class="line"> summer</span><br><span class="line"> autumn</span><br><span class="line"> winter</span><br><span class="line"> *<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p><code>CaseIterable</code>提供了一个<code>allCases</code>的类型属性，返回一个数组，数组包含了枚举的所有值。</p><blockquote><p>扩展：<code>let seasons = Season.allCases</code>等价于<code>let seasons = [Season.spring, Season.summer, Season.autumn, Season.winter]</code></p></blockquote><h3 id="5-2-CustomStringConvertible-CustomDebugStringConvertible"><a href="#5-2-CustomStringConvertible-CustomDebugStringConvertible" class="headerlink" title="5.2. CustomStringConvertible/CustomDebugStringConvertible"></a>5.2. CustomStringConvertible/CustomDebugStringConvertible</h3><p>遵守<code>CustomStringConvertible</code>、<code>CustomDebugStringConvertible</code>协议，都可以自定义实例的打印字符串。</p><p>示例代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person: CustomStringConvertible, CustomDebugStringConvertible &#123;</span><br><span class="line">    <span class="selector-tag">var</span> age = <span class="number">0</span></span><br><span class="line">    <span class="selector-tag">var</span> description: String &#123;</span><br><span class="line">        <span class="string">"person_\(age)"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">var</span> debugDescription: String &#123;</span><br><span class="line">        <span class="string">"debug_person_\(age)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">p</span> = Person()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(p)</span></span> <span class="comment">// 输出：person_0</span></span><br><span class="line"><span class="function"><span class="title">debugPrint</span><span class="params">(p)</span></span> <span class="comment">// 输出：debug_person_0</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/4ho2o.png@normal" alt=""></p><ul><li><code>print</code>调用的是<code>CustomStringConvertible</code>协议的<code>description</code></li><li><code>debugPrint</code>、<code>po</code>调用的是<code>CustomDebugStringConvertible</code>协议的<code>debugDescription</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列十五 - 可选链</title>
      <link href="/2019/08/06/swift-syntax-optionalchaining/"/>
      <url>/2019/08/06/swift-syntax-optionalchaining/</url>
      
        <content type="html"><![CDATA[<p>多个可选类型组合在一起调用就会形成可选链条。</p><a id="more"></a><h2 id="可选链（Optional-Chaining）"><a href="#可选链（Optional-Chaining）" class="headerlink" title="可选链（Optional Chaining）"></a>可选链（Optional Chaining）</h2><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123; <span class="keyword">var</span> price = <span class="number">0</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123; <span class="keyword">var</span> weight = <span class="number">0</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> dog: <span class="type">Dog</span> = <span class="type">Dog</span>()</span><br><span class="line">    <span class="keyword">var</span> car: <span class="type">Car?</span> = <span class="type">Car</span>()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">age</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; <span class="number">30</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"Person eat"</span>) &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; index &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常调用：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">person</span>: <span class="keyword">Person</span> = <span class="keyword">Person</span>()</span><br><span class="line"><span class="keyword">person</span>.name = <span class="string">"idbeny"</span></span><br><span class="line"><span class="keyword">person</span>.age()</span><br></pre></td></tr></table></figure><ol><li><p>如果把<code>person</code>对象修改为可选类型：<br><img src="http://blog.idbeny.com/8c7b4.png@normal" alt=""></p></li><li><p>系统提示要想用可选类型对象引用成员必须强制解包或添加<code>?</code>：<br><img src="http://blog.idbeny.com/ub2ax.png@normal" alt=""></p></li><li><p>按照提示修改代码，编译通过：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">person</span>: <span class="keyword">Person</span>? = <span class="keyword">Person</span>()</span><br><span class="line">var age = <span class="keyword">person</span>?.age()</span><br><span class="line">var age1 = <span class="keyword">person</span>!.age()</span><br><span class="line">var name = <span class="keyword">person</span>!.name = <span class="string">"idbeny"</span></span><br><span class="line">var index = <span class="keyword">person</span>?<span class="comment">[6]</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><code>age</code>是可选类型<code>Int?</code>，打印<code>Optional(30)</code></li><li><code>age1</code>是<code>Int</code>类型，打印<code>18</code></li><li><code>name</code>是可选类型<code>String?</code>，打印<code>Optional(&quot;idbeny&quot;)</code></li><li><code>index</code>是可选类型<code>Int?</code>，打印<code>Optional(6)</code></li></ul><ol start="5"><li>函数返回值：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getName</span><span class="params">()</span> -&gt; <span class="title">String</span></span> &#123; <span class="string">"idbeny"</span> &#125;</span><br><span class="line">person?.name = getName()</span><br></pre></td></tr></table></figure>如果<code>person</code>是<code>nil</code>，就不会调用函数<code>getName()</code>。</li></ol><p><strong>总结：</strong></p><ul><li>如果可选项为<code>nil</code>，调用方法、下标、属性失败，结果为<code>nil</code></li><li>如果可选项不为<code>nil</code>，调用方法、下标、属性成功，结果会被包装成可选项</li><li>如果结果本来就是可选项，不会进行再次包装</li></ul><p><strong>可选项绑定：</strong><br>对象调用函数，是可以用一个变量去接受的，即使函数没有返回值：</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = person?.eat()</span><br></pre></td></tr></table></figure><p><code>result</code>是什么呢？如果<code>person</code>是<code>nil</code>，<code>result</code>就是<code>nil</code>；如果<code>person</code>不为<code>nil</code>，则返回一个空元祖（因为<code>Void</code>本质就是一个空元祖）。</p><p>怎样知道<code>eat</code>函数是否调用成功？可以使用可选项绑定进行解包判断：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">let</span> <span class="symbol">_</span> = person?.eat() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"调用成功"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"调用失败"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可选链：</strong><br>多个<code>?</code>可以链接在一起形成可选链代码：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> dog = person?.dog // Dog?</span><br><span class="line"><span class="built_in">var</span> weight = person?.dog.weight // <span class="built_in">Int</span>?</span><br><span class="line"><span class="built_in">var</span> <span class="built_in">price</span> = person?.car?.<span class="built_in">price</span> // <span class="built_in">Int</span>?</span><br></pre></td></tr></table></figure><p>如果链中任何一个节点是<code>nil</code>，那么整个链就会调用失败。可选链最终返回的都是可选类型（不强制解包的情况下）。</p><h2 id="可选链应用"><a href="#可选链应用" class="headerlink" title="可选链应用"></a>可选链应用</h2><p>示例代码一：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var scores = [<span class="string">"idbeny"</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">"1024星球"</span>: [<span class="number">66</span>, <span class="number">88</span>, <span class="number">99</span>]]</span><br><span class="line">scores[<span class="string">"idbeny"</span>]?[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">print(scores) // 输出：[<span class="string">"idbeny"</span>: [<span class="number">100</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">"1024星球"</span>: [<span class="number">66</span>, <span class="number">88</span>, <span class="number">99</span>]]</span><br><span class="line"></span><br><span class="line">scores[<span class="string">"1024星球"</span>]?[<span class="number">2</span>] += <span class="number">11</span></span><br><span class="line">print(scores) // 输出：[<span class="string">"idbeny"</span>: [<span class="number">100</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">"1024星球"</span>: [<span class="number">66</span>, <span class="number">88</span>, <span class="number">110</span>]]</span><br><span class="line"></span><br><span class="line">scores[<span class="string">"test"</span>]?[<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line">print(scores) // 输出：[<span class="string">"idbeny"</span>: [<span class="number">100</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">"1024星球"</span>: [<span class="number">66</span>, <span class="number">88</span>, <span class="number">110</span>]]</span><br></pre></td></tr></table></figure><p>字典取值都是可选类型，因为<code>key</code>有可能为<code>nil</code>。所以字典取值一般加上一个<code>?</code>，尽量不要使用<code>!</code>强制解包，防止取出的值是<code>nil</code>。</p><p>示例代码二：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1: <span class="type">Int?</span> = <span class="number">5</span></span><br><span class="line">num1? = <span class="number">10</span> <span class="comment">// Optional(10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line">num2? = <span class="number">10</span> <span class="comment">// nil</span></span><br></pre></td></tr></table></figure><p><code>num1? = 10</code>意思是如果<code>num1</code>不为<code>nil</code>，就把10赋值给<code>num1</code>，并且包装为可选类型。</p><p><code>num2? = 10</code>意思是如果<code>num2</code>为<code>nil</code>，后面的代码就不会执行。</p><p>示例代码三：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dict: <span class="type"></span>[<span class="keyword">String</span>: <span class="type"></span>(<span class="keyword">Int</span>, <span class="keyword">Int</span>) -&gt; <span class="keyword">Int</span>] = [</span><br><span class="line">    <span class="string">"sum"</span>: <span class="type"></span>(+),</span><br><span class="line">    <span class="string">"diff"</span>: <span class="type"></span>(-)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> result = dict[<span class="string">"sum"</span>]?(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">print(result) <span class="comment">// 输出：Optional(30)</span></span><br></pre></td></tr></table></figure><p><code>(+)</code>是把两个参数相加并返回的意思，是编译器的语法糖。字典取值如果是函数，该函数也会被包装成可选类型，所以需要<code>?</code>调用函数，但是最终函数返回值是可选类型。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 可选链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列十四 - 初始化器</title>
      <link href="/2019/08/03/swift-syntax-init/"/>
      <url>/2019/08/03/swift-syntax-init/</url>
      
        <content type="html"><![CDATA[<p>类、结构体、枚举都可以定义初始化器。但是枚举一般很少用来手动定义初始化器。</p><a id="more"></a><h2 id="一、初始化器"><a href="#一、初始化器" class="headerlink" title="一、初始化器"></a>一、初始化器</h2><p>类有2中初始化器：指定初始化器（designated initializer）、便捷初始化器（convenience initializer）。</p><p><strong>格式：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定初始化器</span></span><br><span class="line"><span class="function"><span class="title">init</span><span class="params">(parameters)</span></span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 便捷初始化器</span></span><br><span class="line">convenience init(parameters) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码一：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Size &#123;</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">width</span>: Double = <span class="number">0</span></span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">height</span>: Double = <span class="number">0</span></span><br><span class="line">    init(<span class="built_in">width</span>: Double, <span class="built_in">height</span>: Double) &#123;</span><br><span class="line">        self.<span class="built_in">width</span> = <span class="built_in">width</span></span><br><span class="line">        self.<span class="built_in">height</span> = <span class="built_in">height</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">var</span> s = Size(<span class="built_in">width</span>: <span class="number">10</span>, <span class="built_in">height</span>: <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>如果把上面的示例代码一修改为便捷初始化器，编译报错：<br><img src="http://blog.idbeny.com/ut2sp.png@normal" alt=""></p><p>按照提示，加上<code>self.init</code>后，编译正常：<br><img src="http://blog.idbeny.com/88p5x.png@normal" alt=""></p><p><strong>分析：</strong><br>如果使用指定初始化器，默认的初始化器就不存在了。但是使用便捷初始化器后，默认的初始化器还存在。</p><p><strong>特点：</strong></p><ul><li>每个类至少有一个指定初始化器，指定初始化器是类的主要初始化器；</li><li>默认初始化器总是类的指定初始化器；</li><li>类偏向于少量指定初始化器，一个类通常只有一个指定初始化器。</li></ul><p><strong>初始化器的相互调用规则：</strong></p><ol><li>指定初始化器必须从它的直系父类调用指定初始化器；</li></ol><p><img src="http://blog.idbeny.com/3gzhk.png@normal" alt=""></p><p>为什么会报错？因为指定初始化器必须从它的直系父类调用指定初始化器，这样做的目的就是防止父类定义的初始化器代码没有执行，无法保证数据安全。</p><p>正确代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    convenience <span class="keyword">init</span>() &#123;</span><br><span class="line">        self.<span class="keyword">init</span>(age: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="type">Person &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> score: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="built_in">Int</span>, score: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.score = score</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：子类调用父类初始化器必须放在最后执行。</p><ol start="2"><li>便捷初始化器必须从相同的类里调用另一个初始化器；</li><li>便捷初始化器最终必须调用一个指定初始化器。</li></ol><p>示例代码二：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Size &#123;</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">width</span>: Double</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">height</span>: Double</span><br><span class="line">    // 指定初始化器（主要初始化器）</span><br><span class="line">    init(<span class="built_in">width</span>: Double, <span class="built_in">height</span>: Double) &#123;</span><br><span class="line">        self.<span class="built_in">width</span> = <span class="built_in">width</span></span><br><span class="line">        self.<span class="built_in">height</span> = <span class="built_in">height</span></span><br><span class="line">    &#125;</span><br><span class="line">    // 便捷初始化器必须调用指定初始化器</span><br><span class="line">    convenience init(<span class="built_in">width</span>: Double) &#123;</span><br><span class="line">        self.init(<span class="built_in">width</span>: <span class="built_in">width</span>, <span class="built_in">height</span>: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    convenience init(<span class="built_in">height</span>: Double) &#123;</span><br><span class="line">        self.init(<span class="built_in">width</span>: <span class="number">0</span>, <span class="built_in">height</span>: <span class="built_in">height</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    convenience init() &#123;</span><br><span class="line">        self.init(<span class="built_in">width</span>: <span class="number">0</span>, <span class="built_in">height</span>: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">var</span> s1 = Size(<span class="built_in">width</span>: <span class="number">10</span>, <span class="built_in">height</span>: <span class="number">20</span>)</span><br><span class="line"><span class="built_in">var</span> s2 = Size(<span class="built_in">width</span>: <span class="number">10</span>)</span><br><span class="line"><span class="built_in">var</span> s3 = Size(<span class="built_in">height</span>: <span class="number">20</span>)</span><br><span class="line"><span class="built_in">var</span> s4 = Size()</span><br></pre></td></tr></table></figure><p>这样写的好处就是，当别人调用类的初始化器时，会强制调用主要初始化器。这样代码更加安全便捷。</p><p>总结一条：便捷初始化器调用自己的初始化器；指定初始化器调用父类的初始化器；便捷初始化器可以调用便捷初始化器（最终调用指定初始化器）。</p><p><strong><a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html" target="_blank" rel="noopener">官网图示</a>：</strong><br><img src="http://blog.idbeny.com/t99im.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/3fln2.png@normal" alt=""></p><p>这一套规则保证了使用任意初始化器，都可以完整地初始化实例。</p><h2 id="二、两段式初始化及安全检查"><a href="#二、两段式初始化及安全检查" class="headerlink" title="二、两段式初始化及安全检查"></a>二、两段式初始化及安全检查</h2><p>Swift为了保证初始化过程的安全，设定了<strong>两段式初始化、安全检查</strong>。</p><h3 id="2-1-两段式初始化"><a href="#2-1-两段式初始化" class="headerlink" title="2.1. 两段式初始化"></a>2.1. 两段式初始化</h3><h4 id="2-1-1-第1阶段：初始化所有存储属性"><a href="#2-1-1-第1阶段：初始化所有存储属性" class="headerlink" title="2.1.1. 第1阶段：初始化所有存储属性"></a>2.1.1. 第1阶段：初始化所有存储属性</h4><ol><li>外层调用指定/便捷初始化器</li><li>分配内存给实例，但未初始化</li><li>指定初始化器确保当前类定义的存储属性都初始化</li><li>指定初始化器调用父类的指定初始化器，不断向上调用，形成初始化器链</li></ol><h4 id="2-1-2-第2阶段：设置新的存储属性值"><a href="#2-1-2-第2阶段：设置新的存储属性值" class="headerlink" title="2.1.2. 第2阶段：设置新的存储属性值"></a>2.1.2. 第2阶段：设置新的存储属性值</h4><ol><li>从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例</li><li>初始化器现在能够使用self（访问、修改它的属性，调用它的实例方法等）</li><li>最终，链中任何便捷初始化器都有机会定制实例以及使用self</li></ol><h3 id="2-2-安全检查"><a href="#2-2-安全检查" class="headerlink" title="2.2. 安全检查"></a>2.2. 安全检查</h3><ul><li>指定初始化器必须保证在调用父类初始化器之前，其所在类定义的所有存储属性都要初始化完成</li><li>指定初始化器必须先调用父类初始化器，然后才能为继承的属性设置新值</li><li>便捷初始化器必须先调用同类中的其它初始化器，然后再为任意属性设置新值</li><li>初始化器在第1阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用self</li><li>直到第1阶段结束，实例才算完全合法</li></ul><h2 id="三、重写"><a href="#三、重写" class="headerlink" title="三、重写"></a>三、重写</h2><ul><li>当重写父类的指定初始化器时，必须加上<code>override</code>（即使子类的实现是便捷初始化器）</li></ul><p>示例代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="type">Person &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> score: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="built_in">Int</span>, score: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.score = score</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重写父类指定初始化器</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    override init(age: Int) &#123;</span></span><br><span class="line"><span class="comment">        self.score = 0</span></span><br><span class="line"><span class="comment">        super.init(age: age)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> convenience <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.<span class="keyword">init</span>(age: age, score: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果子类写了一个匹配父类便捷初始化器的初始化器，不用加上<code>override</code>。因为父类的便捷初始化器永远不会通过子类直接调用，因此，严格来说，子类无法重写父类的便捷初始化器。</li></ul><p>示例代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    convenience <span class="keyword">init</span>() &#123;</span><br><span class="line">        self.<span class="keyword">init</span>(age: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="type">Person &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> score: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="built_in">Int</span>, score: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.score = score</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、自动继承"><a href="#四、自动继承" class="headerlink" title="四、自动继承"></a>四、自动继承</h2><ol><li>如果子类没有自定义任何指定初始化器，它会自动继承父类所有的指定初始化器</li></ol><p>示例代码一：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">var</span> name: String</span><br><span class="line">    <span class="keyword">init</span>(age: <span class="built_in">Int</span>, name: String) &#123;</span><br><span class="line">        self.age = age</span><br><span class="line">        self.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.age = age</span><br><span class="line">        self.name = <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="type">Person &#123;</span></span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 = Student(age: <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> stu2 = Student(age: <span class="number">0</span>, name: <span class="string">"idbeny"</span>)</span><br></pre></td></tr></table></figure><p>示例代码二：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="type">Int</span>, name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(age: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.name = <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="type">Student</span>()</span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="type">Student</span>(age: <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> stu3 = <span class="type">Student</span>(age: <span class="number">0</span>, name: <span class="string">"idbeny"</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>如果子类提供了父类所有指定初始化器的实现（要么通过方式1继承，要么重写），子类自动继承所有的父类便捷初始化器</li></ol><p>示例代码一：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="type">Int</span>, name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(age: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age: age, name: <span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age: <span class="number">0</span>, name: name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="type">Student</span>(age: <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="type">Student</span>(name: <span class="string">"idbeny"</span>)</span><br><span class="line"><span class="keyword">var</span> stu3 = <span class="type">Student</span>(age: <span class="number">0</span>, name: <span class="string">"idbeny"</span>)</span><br></pre></td></tr></table></figure><p>示例代码二：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="type">Int</span>, name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(age: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age: age, name: <span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age: <span class="number">0</span>, name: name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: <span class="number">0</span>, name: <span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(age: <span class="type">Int</span>, name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: age, name: name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="type">Student</span>()</span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="type">Student</span>(age: <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> stu3 = <span class="type">Student</span>(name: <span class="string">"idbeny"</span>)</span><br><span class="line"><span class="keyword">var</span> stu4 = <span class="type">Student</span>(age: <span class="number">0</span>, name: <span class="string">"idbeny"</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>就算子类添加了更多的便捷初始化器，这些规则仍然适用</p></li><li><p>子类以便捷初始化器的形式重写父类的指定初始化器，也可以作为满足规则2的一部分</p></li></ol><h2 id="五、required"><a href="#五、required" class="headerlink" title="五、required"></a>五、required</h2><ul><li>用<code>required</code>修饰指定初始化器，表明其所有子类都必须实现该初始化器（通过继承或者重写实现）</li><li>如果子类重写了<code>required</code>初始化器，也必须加上<code>required</code>，不用加<code>override</code></li></ul><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(age: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、属性观察器"><a href="#六、属性观察器" class="headerlink" title="六、属性观察器"></a>六、属性观察器</h2><p>父类的属性在它自己的初始化器中赋值不会触发属性观察器，但在子类的初始化器中赋值会触发属性观察器。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"willSet"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"didSet"</span>, oldValue, age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">self</span>.age = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="type">Student</span>()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> willSet 1</span></span><br><span class="line"><span class="comment"> didSet 0 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="七、可失败初始化器"><a href="#七、可失败初始化器" class="headerlink" title="七、可失败初始化器"></a>七、可失败初始化器</h2><ol><li>类、结构体、枚举都可以使用<code>init?</code>定义可失败初始化器。可失败初始化器返回的是可选类型。</li></ol><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>?(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> name.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="type">Person</span>(name: <span class="string">""</span>)</span><br><span class="line"><span class="built_in">print</span>(p1) <span class="comment">// 输出：nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="type">Person</span>(name: <span class="string">"idbeny"</span>)</span><br><span class="line"><span class="built_in">print</span>(p2) <span class="comment">// 输出：Optional(SwiftTestDemo.Person)</span></span><br></pre></td></tr></table></figure><ol start="2"><li>不允许同时定义参数标签、参数个数、参数类型相同的可失败初始化器和非可失败初始化器</li></ol><p><img src="http://blog.idbeny.com/ss5jl.png@normal" alt=""></p><ol start="3"><li><p>可以用<code>init!</code>定义隐式解包的可失败初始化器</p></li><li><p>可失败初始化器可以调用非可失败初始化器，非可失败初始化器调用可失败初始化器需要进行解包</p></li></ol><p>示例代码一：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>?(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">if</span> name.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码二：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>?(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> name.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: <span class="string">""</span>)!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>如果初始化器调用一个可失败初始化器导致初始化失败，那么整个初始化过程都失败，并且之后的代码都停止执行</p></li><li><p>可以用一个非可失败初始化器重写一个可失败初始化器，但反过来是不行的</p></li></ol><h2 id="八、反初始化器（deinit）"><a href="#八、反初始化器（deinit）" class="headerlink" title="八、反初始化器（deinit）"></a>八、反初始化器（deinit）</h2><p><code>deinit</code>叫做反初始化器，类似于<code>C++</code>的析构函数、OC中的<code>dealloc</code>方法。</p><ol><li><p>当类的实例对象被释放内存时，就会调用实例对象的<code>deinit</code>方法。</p></li><li><p><code>deinit</code>不接受任何参数，不能写小括号，不能自行调用。</p></li><li><p>父类的<code>deinit</code>能被子类继承。</p></li><li><p>子类的<code>deinit</code>实现执行完毕后会调用父类的<code>deinit</code>。</p></li></ol><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Person对象销毁"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Student对象销毁"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stu = <span class="type">Student</span>()</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Student对象销毁</span></span><br><span class="line"><span class="comment"> Person对象销毁</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 初始化器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列十三 - 多态及实现原理</title>
      <link href="/2019/07/28/swift-syntax-polymorphism/"/>
      <url>/2019/07/28/swift-syntax-polymorphism/</url>
      
        <content type="html"><![CDATA[<p>面向对象语言三大特性：封装、继承、多态。在<strong>OC</strong>中多态是用<code>Runtime</code>实现的，在<strong>C++</strong>中用虚表实现多态，今天我们了解一下<strong>Swift</strong>中的多态及其原理（和<strong>C++</strong>类似，都是使用虚表）。</p><a id="more"></a><p>什么是多态？父类指针指向子类对象就是多态。</p><h2 id="一、结构体和类函数调用比较"><a href="#一、结构体和类函数调用比较" class="headerlink" title="一、结构体和类函数调用比较"></a>一、结构体和类函数调用比较</h2><h3 id="1-1-结构体"><a href="#1-1-结构体" class="headerlink" title="1.1. 结构体"></a>1.1. 结构体</h3><p><img src="http://blog.idbeny.com/lo3ra.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/owj8c.png@normal" alt=""></p><p>通过汇编分析可以看到，因为不存在继承重写行为，调用的函数地址都是在编译时期确定的。</p><h3 id="1-2-类"><a href="#1-2-类" class="headerlink" title="1.2. 类"></a>1.2. 类</h3><p><img src="http://blog.idbeny.com/xu844.png@normal" alt=""></p><p><code>speak</code>函数调用栈：<br><img src="http://blog.idbeny.com/swbbw.png@normal" alt=""></p><p><code>eat</code>函数调用栈：<br><img src="http://blog.idbeny.com/g9oz1.png@normal" alt=""></p><p><code>sleep</code>函数调用栈：<br><img src="http://blog.idbeny.com/upqdv.png@normal" alt=""></p><p>类生成的汇编代码非常多，相比结构体复杂了很多，并且通过函数调用发现，函数地址是动态变化的。所以，<strong>如果没有继承行为或简单的类，建议使用结构体，效率更高。</strong></p><p>类的函数调用地址之所以变化是为因为子类继承父类会导致函数实际调用地址发生变化，这也是<strong>多态</strong>的体现。</p><h2 id="二、继承类汇编分析"><a href="#二、继承类汇编分析" class="headerlink" title="二、继承类汇编分析"></a>二、继承类汇编分析</h2><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Animal speak"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Animal eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Animal sleep"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Dog speak"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Dog eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Dog run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> animal = <span class="type">Animal</span>()</span><br><span class="line">animal.speak()</span><br><span class="line">animal.eat()</span><br><span class="line">animal.sleep()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Animal speak</span></span><br><span class="line"><span class="comment"> Animal eat</span></span><br><span class="line"><span class="comment"> Animal sleep</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">animal = <span class="type">Dog</span>()</span><br><span class="line">animal.speak()</span><br><span class="line">animal.eat()</span><br><span class="line">animal.sleep()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Dog speak</span></span><br><span class="line"><span class="comment"> Dog eat</span></span><br><span class="line"><span class="comment"> Animal sleep</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>汇编分析：<br><img src="http://blog.idbeny.com/gn7n1.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/qlf2s.png@normal" alt=""></p><p><strong>分析：</strong> 类的实例前8个字节保存的是类的信息，所以上面的汇编代码会一值围绕着实例<code>animal</code>的前8个字节去查找函数地址。而<code>animal</code>最后一次指向的是对象<code>Dog</code>在堆空间的内存，所以最终调用的是<code>Dog</code>中的<code>speak</code>函数。</p><p>其实就是虚表：<br><img src="http://blog.idbeny.com/wkyvt.png@normal" alt=""></p><p><code>callq *0x50(%rcx)</code>中的<code>0x50</code>就是偏移量，跳过<code>0x50</code>就是函数<code>speak</code>的地址。</p><p>总结起来其实很简单：</p><ul><li>先找到全局变量<code>animal</code>的地址；</li><li><code>animal</code>地址保存的是堆空间<code>Dog</code>对象的内存地址；</li><li><code>Dog</code>对象前8个字节保存的是对象类型信息地址；</li><li>对象类型信息地址保存着类中函数的地址。</li></ul><blockquote><p><strong>注意：</strong> 无论创建多少个同类型对象，对象的类型信息都指向同一块内存地址。对象类型信息保存在全局区。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列十二 - 继承</title>
      <link href="/2019/07/21/swift-syntax-inherit/"/>
      <url>/2019/07/21/swift-syntax-inherit/</url>
      
        <content type="html"><![CDATA[<p>继承是面向对象语言的三大特性之一。</p><a id="more"></a><h2 id="一、继承特性"><a href="#一、继承特性" class="headerlink" title="一、继承特性"></a>一、继承特性</h2><ul><li><p>值类型（枚举、结构体）不支持继承，只有类支持继承。</p></li><li><p>没有父类的类，称为<strong>基类</strong></p><ul><li>Swift并没有像OC、Java那样的规定：任何类最终都要继承自某个基类</li></ul></li><li><p>子类可以重写父类的下标、方法、属性，重写必须加上<code>override</code>关键字</p></li></ul><h2 id="二、内存结构"><a href="#二、内存结构" class="headerlink" title="二、内存结构"></a>二、内存结构</h2><p>示例代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    var age = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="constructor">Animal()</span></span><br><span class="line">a.age = <span class="number">10</span></span><br><span class="line">print(<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>size(ofRef: a)) <span class="comment">// 输出：32</span></span><br><span class="line">print(<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>mem<span class="constructor">Str(<span class="params">ofRef</span>: <span class="params">a</span>)</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 0x000000010000c478</span></span><br><span class="line"><span class="comment"> 0x0000000000000002</span></span><br><span class="line"><span class="comment"> 0x000000000000000a</span></span><br><span class="line"><span class="comment"> 0x00027fff84bb8630</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>如果定义一个继承<code>Animal</code>的类，内存有什么变化呢？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Dog: <span class="symbol">Animal</span></span> &#123;</span><br><span class="line">    var weight = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">let d = Dog()</span><br><span class="line">d.age = <span class="number">10</span></span><br><span class="line">d.weight = <span class="number">20</span></span><br><span class="line">print(Mems.size(ofRef: d)) <span class="comment">// 输出：32</span></span><br><span class="line">print(Mems.memStr(ofRef: d))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 0x000000010000c528</span></span><br><span class="line"><span class="comment"> 0x0000000000000002</span></span><br><span class="line"><span class="comment"> 0x000000000000000a</span></span><br><span class="line"><span class="comment"> 0x0000000000000014</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码等价于下面的代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Dog</span> &#123;</span><br><span class="line">    var age = <span class="number">0</span></span><br><span class="line">    var weight = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般从父类继承过来的成员内存放在前面，自己的成员内存放在后面。</p><h2 id="三、重写"><a href="#三、重写" class="headerlink" title="三、重写"></a>三、重写</h2><h3 id="3-1-重写实例方法、下标"><a href="#3-1-重写实例方法、下标" class="headerlink" title="3.1. 重写实例方法、下标"></a>3.1. 重写实例方法、下标</h3><p>基类示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Animal eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; index &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> animal: <span class="type">Animal</span></span><br><span class="line">animal = <span class="type">Animal</span>()</span><br><span class="line">animal.eat()</span><br><span class="line"><span class="built_in">print</span>(animal[<span class="number">0</span>])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Animal eat</span></span><br><span class="line"><span class="comment"> 0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>继承重写示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.eat()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Dog eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        index + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">animal = <span class="type">Dog</span>()</span><br><span class="line">animal.eat()</span><br><span class="line"><span class="built_in">print</span>(animal[<span class="number">0</span>])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Animal eat</span></span><br><span class="line"><span class="comment"> Dog eat</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>分析：<code>animal = Dog()</code>父类指针指向子类对象，体现了多态。重写父类方法使用关键字<code>override</code>，如果需要执行父类的行为，使用<code>super</code>。</p><h3 id="3-2-重写类型方法、下标"><a href="#3-2-重写类型方法、下标" class="headerlink" title="3.2. 重写类型方法、下标"></a>3.2. 重写类型方法、下标</h3><ul><li>被<code>class</code>修饰的类型方法、下标，<strong>允许</strong>被子类重写</li><li>被<code>static</code>修饰的类型方法、下标，<strong>不允许</strong>被子类重写</li></ul><p>示例代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">eat</span></span>() &#123;</span><br><span class="line">        print(<span class="string">"Animal eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">subscript</span></span>(index: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123; index &#125;</span><br><span class="line">&#125;</span><br><span class="line">Animal.eat()</span><br><span class="line">print(Animal[<span class="number">0</span>])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Animal eat</span></span><br><span class="line"><span class="comment"> 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="type">Animal &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">eat</span></span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.eat()</span><br><span class="line">        print(<span class="string">"Dog eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">subscript</span></span>(index: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>[index] + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Dog.eat()</span><br><span class="line">print(Dog[<span class="number">0</span>])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Animal eat</span></span><br><span class="line"><span class="comment"> Dog eat</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>如果子类和父类都使用<code>static</code>修饰，直接报错：<br><img src="http://blog.idbeny.com/1rh6p.png@normal" alt=""></p><p>如果父类用<code>class</code>修饰，子类用<code>static</code>修饰，是可以正常运行的：<br><img src="http://blog.idbeny.com/szr75.png@normal" alt=""></p><h3 id="3-3-重写属性"><a href="#3-3-重写属性" class="headerlink" title="3.3. 重写属性"></a>3.3. 重写属性</h3><h4 id="3-3-1-重写实例属性"><a href="#3-3-1-重写实例属性" class="headerlink" title="3.3.1 重写实例属性"></a>3.3.1 重写实例属性</h4><ul><li><p>子类可以将父类的属性（存储、计算）重写为计算属性</p></li><li><p>子类不可以将父类属性重写为存储属性</p></li><li><p>只能重写<code>var</code>属性，不能重写<code>let</code>属性</p></li><li><p>重写时，属性名、类型要一致</p></li><li><p>子类重写后的属性权限【不能小于】父类属性的权限</p><ul><li>如果父类属性是只读的，那么子类重写后的属性可以是只读的，也可以是可读写的</li><li>如果父类属性是可读写的，那么子类重写后的属性也必须是可读写的</li></ul></li></ul><p>示例代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line">    var radius: Int = <span class="number">0</span></span><br><span class="line">    var diameter: Int &#123;</span><br><span class="line">        <span class="built_in">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle setDiameter"</span>)</span><br><span class="line">            radius = newValue / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle getDiameter"</span>)</span><br><span class="line">            <span class="keyword">return</span> radius * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var <span class="built_in">circle</span>: Circle</span><br><span class="line"><span class="built_in">circle</span> = Circle()</span><br><span class="line"><span class="built_in">circle</span>.radius = <span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">circle</span>.diameter)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Circle getDiameter</span></span><br><span class="line"><span class="comment"> 12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">circle</span>.diameter = <span class="number">20</span></span><br><span class="line"><span class="comment">// 输出：Circle setDiameter</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">circle</span>.radius)</span><br><span class="line"><span class="comment">// 输出：10</span></span><br></pre></td></tr></table></figure><p>子类继承示例代码：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span>: <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> radius: <span class="type">Int </span>&#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            print(<span class="string">"SubCircle setRadius"</span>)</span><br><span class="line">            <span class="keyword">super</span>.radius = <span class="keyword">new</span><span class="type">Value</span> &gt; <span class="number">0</span> ? <span class="keyword">new</span><span class="type">Value</span> : <span class="type">0</span></span><br><span class="line"><span class="type">        </span>&#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            print(<span class="string">"SubCircle getRadius"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.radius</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> diameter: <span class="type">Int </span>&#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            print(<span class="string">"SubCircle setDiameter"</span>)</span><br><span class="line">            <span class="keyword">super</span>.diameter = <span class="keyword">new</span><span class="type">Value</span> &gt; <span class="number">0</span> ? <span class="keyword">new</span><span class="type">Value</span> : <span class="type">0</span></span><br><span class="line"><span class="type">        </span>&#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            print(<span class="string">"SubCircle getDiameter"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.diameter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">circle = SubCircle()</span><br><span class="line">circle.radius = <span class="number">12</span></span><br><span class="line"><span class="comment">// 输出：SubCircle setRadius</span></span><br><span class="line"></span><br><span class="line">print(circle.diameter)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> SubCircle getDiameter</span></span><br><span class="line"><span class="comment"> Circle getDiameter</span></span><br><span class="line"><span class="comment"> SubCircle getRadius</span></span><br><span class="line"><span class="comment"> 24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">circle.diameter = <span class="number">30</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> SubCircle setDiameter</span></span><br><span class="line"><span class="comment"> Circle setDiameter</span></span><br><span class="line"><span class="comment"> SubCircle setRadius</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">print(circle.radius)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> SubCircle getRadius</span></span><br><span class="line"><span class="comment"> 15</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>分析：子类调用父类时，本质还是子类在调用，所以父类中的属性<code>set</code>方法会在子类中查找。</p><h4 id="3-3-2-重写类型属性"><a href="#3-3-2-重写类型属性" class="headerlink" title="3.3.2 重写类型属性"></a>3.3.2 重写类型属性</h4><ul><li>被<code>class</code>修饰的计算类型属性，可以被子类重写</li><li>被<code>static</code>修饰的类型属性（存储、计算），不可以被子类重写</li></ul><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> radius: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">diameter</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle setDiameter"</span>)</span><br><span class="line">            radius = newValue / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle getDiameter"</span>)</span><br><span class="line">            <span class="keyword">return</span> radius * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Circle</span>.radius = <span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Circle</span>.diameter)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Circle getDiameter</span></span><br><span class="line"><span class="comment"> 12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span>: <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">static</span> <span class="keyword">var</span> diameter: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle setDiameter"</span>)</span><br><span class="line">            <span class="keyword">super</span>.diameter = newValue &gt; <span class="number">0</span> ? newValue : <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle getDiameter"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.diameter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="type">SubCircle</span>.diameter)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> SubCircle getDiameter</span></span><br><span class="line"><span class="comment"> Circle getDiameter</span></span><br><span class="line"><span class="comment"> 12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SubCircle</span>.radius)</span><br><span class="line"><span class="comment">// 输出：6</span></span><br></pre></td></tr></table></figure><h3 id="3-4-属性观察器"><a href="#3-4-属性观察器" class="headerlink" title="3.4 属性观察器"></a>3.4 属性观察器</h3><p>可以在子类中为父类属性（除了只读计算属性、<code>let</code>属性）增加属性观察器。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radius: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span>: <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> radius: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle didSetRadius"</span>, oldValue, radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> circle = <span class="type">SubCircle</span>()</span><br><span class="line">circle.radius = <span class="number">10</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> SubCircle willSetRadius 10</span></span><br><span class="line"><span class="comment"> SubCircle didSetRadius 0 10</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>如果父类属性已经添加了属性观察器，子类同样也可以为父类属性添加观察器:</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radius: <span class="type">Int</span> = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle didSetRadius"</span>, oldValue, radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span>: <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> radius: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle didSetRadius"</span>, oldValue, radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> circle = <span class="type">SubCircle</span>()</span><br><span class="line">circle.radius = <span class="number">10</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> SubCircle willSetRadius 10</span></span><br><span class="line"><span class="comment"> Circle willSetRadius 10</span></span><br><span class="line"><span class="comment"> Circle didSetRadius 0 10</span></span><br><span class="line"><span class="comment"> SubCircle didSetRadius 0 10</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>子类可以为父类计算属性添加属性观察器：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">radius</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle setRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle getRadius"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span>: <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">static</span> <span class="keyword">var</span> radius: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle didSetRadius"</span>, oldValue, radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">SubCircle</span>.radius = <span class="number">10</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Circle getRadius</span></span><br><span class="line"><span class="comment"> SubCircle willSetRadius 10</span></span><br><span class="line"><span class="comment"> Circle setRadius 10</span></span><br><span class="line"><span class="comment"> Circle getRadius</span></span><br><span class="line"><span class="comment"> SubCircle didSetRadius 20 20</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么首次会输出<code>Circle getRadius</code>？<br>其实<code>Circle getRadius</code>获取的就是<code>oldValue</code>，因为只有拿到之前的值，才能设置观察新值的变化。</p></blockquote><h3 id="3-5-final"><a href="#3-5-final" class="headerlink" title="3.5 final"></a>3.5 final</h3><ul><li>被<code>final</code>修饰的方法、下标、属性，禁止被重写；</li><li>被<code>final</code>修饰的类，禁止被继承。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列十一 - 方法</title>
      <link href="/2019/07/18/swift-syntax-method/"/>
      <url>/2019/07/18/swift-syntax-method/</url>
      
        <content type="html"><![CDATA[<p>枚举、结构体、类都可以定义方法。</p><a id="more"></a><h2 id="一、方法"><a href="#一、方法" class="headerlink" title="一、方法"></a>一、方法</h2><p>方法分为：实例方法、类型方法。</p><ul><li>实例方法：通过实例调用</li><li>类型方法：通过类型调用，用<code>static</code>或者<code>class</code>关键字定义</li></ul><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="type">Car</span>.<span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">getCount</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; <span class="built_in">count</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c1 = <span class="type">Car</span>()</span><br><span class="line"><span class="keyword">let</span> c2 = <span class="type">Car</span>()</span><br><span class="line"><span class="keyword">let</span> c3 = <span class="type">Car</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="type">Car</span>.getCount()) <span class="comment">// 输出：3</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>self</code>在实例方法中代表实例，在类型方法中代表类型。</p><p>在上面示例代码中，类型方法<code>getCount</code>返回的<code>count</code>等价于<code>self.count、Car.self.count、Car.count</code>。</p><h2 id="二、mutating"><a href="#二、mutating" class="headerlink" title="二、mutating"></a>二、mutating</h2><p>结构体和枚举是值类型，默认情况下，值类型的属性不能被自身的实例方法修改。</p><p>在<code>func</code>关键字前加<code>mutating</code>可以允许这种修改行为。</p><p>示例代码（结构体）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">moveBy</span><span class="params">(deltaX: Double, deltaY: Double)</span></span> &#123;</span><br><span class="line">        x += deltaX</span><br><span class="line">        y += deltaY</span><br><span class="line">        <span class="comment">// 等价下面的代码 </span></span><br><span class="line">        <span class="comment">// self = Point(x: x + deltaX, y: y + deltaY)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不加<code>mutating</code>会报错：<br><img src="http://blog.idbeny.com/d2cay.png@normal" alt=""></p><p>示例代码（枚举）：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">StateSwitch</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> low, middle, high</span><br><span class="line">    mutating func <span class="keyword">next</span>() &#123;</span><br><span class="line">        switch <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="symbol">low:</span></span><br><span class="line">            <span class="keyword">self</span> = .middle</span><br><span class="line">        <span class="keyword">case</span> .<span class="symbol">middle:</span></span><br><span class="line">            <span class="keyword">self</span> = .high</span><br><span class="line">        <span class="keyword">case</span> .<span class="symbol">high:</span></span><br><span class="line">            <span class="keyword">self</span> = .low</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不加<code>mutating</code>会报错：<br><img src="http://blog.idbeny.com/zxavj.png@normal" alt=""></p><h2 id="三、-discardableResult"><a href="#三、-discardableResult" class="headerlink" title="三、@discardableResult"></a>三、@discardableResult</h2><p>在<code>func</code>前面加个<code>@discardableResult</code>，可以消除函数调用后返回值未被使用的警告。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span></span><br><span class="line">    <span class="meta">@discardableResult</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">moveX</span><span class="params">(deltaX: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        x += deltaX</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="type">Point</span>()</span><br><span class="line">p.moveX(deltaX: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>如果不加<code>@discardableResult</code>会警告：<br><img src="http://blog.idbeny.com/kw5n2.png@normal" alt=""></p><h2 id="下标（subscript）"><a href="#下标（subscript）" class="headerlink" title="下标（subscript）"></a>下标（subscript）</h2><p>在<code>html</code>中有标签元素：上标<code>&lt;sup&gt;&lt;/sup&gt;</code>下标<code>&lt;sub&gt;&lt;/sub&gt;</code>，经常用来表示数学符号。</p><p>在<strong>Swift</strong>中使用<code>subscript</code>可以给任意类型（枚举、结构体、类）增加下标功能，有些地方也翻译为<strong>下标脚本</strong>。</p><p><code>subscript</code>的语法类似于实例方法和计算属性的结合体，本质就是方法（函数）。</p><p>示例代码：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Point</span> &#123;</span><br><span class="line">    var x = <span class="number">0.0</span>, y = <span class="number">0.0</span></span><br><span class="line">    subscript(index: Int) -&gt; Double &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">                x = newValue</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> index == <span class="number">1</span> &#123;</span><br><span class="line">                y = newValue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> index == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> y</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p = Point()</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">11.1</span></span><br><span class="line">p[<span class="number">1</span>] = <span class="number">22.2</span></span><br><span class="line">print(p.x)  <span class="comment">// 输出：11.1</span></span><br><span class="line">print(p.y)  <span class="comment">// 输出：22.2</span></span><br><span class="line">print(p[<span class="number">0</span>]) <span class="comment">// 输出：11.1</span></span><br><span class="line">print(p[<span class="number">1</span>]) <span class="comment">// 输出：22.2</span></span><br></pre></td></tr></table></figure><p>如果不写<code>subscript</code>会报错：<br><img src="http://blog.idbeny.com/o2g7z.png@normal" alt=""></p><p><strong>特点：</strong></p><ul><li><code>subscript</code>中定义的返回值类型决定了：<ul><li><code>get</code>方法的返回值类型；</li><li><code>set</code>方法中<code>newValue</code>的类型</li></ul></li><li><code>subscript</code>可以接受多个参数，并且类型是任意的</li></ul><p><strong>细节：</strong></p><ol><li><p><code>subscript</code>可以没有<code>set</code>方法，但必须要有<code>get</code>方法。</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span></span><br><span class="line">    subscript(index: <span class="built_in">Int</span>) -&gt; <span class="built_in">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> index == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> y</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果只有<code>get</code>方法，可以省略<code>get</code>。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Point</span> &#123;</span><br><span class="line">    var x = <span class="number">0.0</span>, y = <span class="number">0.0</span></span><br><span class="line">    subscript(index: Int) -&gt; Double &#123;</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> index == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> y</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以设置参数标签（设置标签后，标签名一定要带上，不能省略）。</p> <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Point</span> &#123;</span><br><span class="line">    var x = <span class="number">0.0</span>, y = <span class="number">0.0</span></span><br><span class="line">    subscript(index i: Int) -&gt; Double &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> y</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print(p[index: <span class="number">1</span>])</span><br></pre></td></tr></table></figure></li><li><p>下标可以是类型方法。</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="type">Point</span> &#123;</span><br><span class="line">    static subscript(<span class="keyword">row</span>: <span class="type">Int</span>, <span class="keyword">column</span>: <span class="type">Int</span>) -&gt; String &#123;</span><br><span class="line">        <span class="keyword">return</span> "\(row)-\(column)"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="type">Point</span>[<span class="number">2</span>, <span class="number">3</span>]) // 输出：<span class="number">2</span><span class="number">-3</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>结构体、类作为返回值对比：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">10</span>, y = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> point = <span class="type">Point</span>()</span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Point</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; point &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pm = <span class="type">PointManager</span>()</span><br><span class="line"><span class="built_in">print</span>(pm[<span class="number">0</span>].x) <span class="comment">// 输出：10</span></span><br><span class="line"><span class="built_in">print</span>(pm.point) <span class="comment">// 输出：Point(x: 10, y: 10)</span></span><br></pre></td></tr></table></figure><p>上面的代码，如果要对下标赋值，则需要添加<code>set</code>方法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class PointManager &#123;</span><br><span class="line">    <span class="selector-tag">var</span> point = Point()</span><br><span class="line">    subscript(index: Int) -&gt; Point &#123;</span><br><span class="line">        set &#123; point = newValue &#125;</span><br><span class="line">        get &#123; point &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> pm = PointManager()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(pm[<span class="number">0</span>].x)</span></span> <span class="comment">// 输出：10</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(pm.point)</span></span> <span class="comment">// 输出：Point(x: 10, y: 10)</span></span><br><span class="line">pm[<span class="number">0</span>]<span class="selector-class">.x</span> = <span class="number">11</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(pm[<span class="number">0</span>].x)</span></span> <span class="comment">// 输出：11</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(pm.point)</span></span> <span class="comment">// 输出：Point(x: 11, y: 10)</span></span><br></pre></td></tr></table></figure><p>注意：<code>pm[0].x = 11</code>等价于<code>pm[0] = Point(x: 11, y: pm[0].y)</code></p><p>如果把上面的<code>Point</code>由结构体（Struct）修改为类（Class），并且不写<code>set</code>方法，会发生什么变化呢？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Point</span> &#123;</span><br><span class="line">    var x = <span class="number">10</span>, y = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">PointManager</span> &#123;</span><br><span class="line">    var point = Point()</span><br><span class="line">    subscript(index: Int) -&gt; Point &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; point &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var pm = PointManager()</span><br><span class="line">pm[<span class="number">0</span>].x = <span class="number">11</span></span><br></pre></td></tr></table></figure><p>编译完美通过，为什么呢？</p><ul><li>如果是值类型，<code>pm[0]</code>返回的是临时变量，内部肯定无法修改外面的变量，所以如果要修改值就需要加上<code>set</code>方法。</li><li>如果是引用类型，<code>pm[0]</code>返回的就是<code>point</code>指针变量，<code>pm[0].x</code>变为<code>point.x</code>，所以可以直接修改值。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列十 - inout的本质</title>
      <link href="/2019/07/05/swift-syntax-inout/"/>
      <url>/2019/07/05/swift-syntax-inout/</url>
      
        <content type="html"><![CDATA[<p><code>inout</code>是可以用来在函数内部修改外部属性内存的。</p><a id="more"></a><h2 id="一、inout回顾"><a href="#一、inout回顾" class="headerlink" title="一、inout回顾"></a>一、inout回顾</h2><p>示例代码：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func test(_ num: <span class="keyword">inout</span> Int) &#123;</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">var a = <span class="number">10</span></span><br><span class="line">test(&amp;a)</span><br><span class="line">print(a) <span class="comment">// 输出：20</span></span><br><span class="line">test(&amp;a)</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/gzp4r.png@normal" alt=""></p><p>通过汇编分析，全局变量<code>a</code>的地址<code>0x6c52(%rip)</code>传递给了寄存器<code>rdi</code>，<code>rdi</code>作为参数传递给了<code>test</code>函数，所以<strong>inout</strong>的本质就是引用传递（地址传递）。</p><h2 id="二、inout本质"><a href="#二、inout本质" class="headerlink" title="二、inout本质"></a>二、inout本质</h2><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> side: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"willSet"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"didSet"</span>, oldValue, side)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> girth: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"setGirth"</span>)</span><br><span class="line">            width = newValue / side</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"getGirth"</span>)</span><br><span class="line">            <span class="keyword">return</span> width * side</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"width=\(width), side=\(side), girth=\(girth)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(<span class="number">_</span> num: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"test"</span>)</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="type">Shape</span>(width: <span class="number">10</span>, side: <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="2-1-存储属性"><a href="#2-1-存储属性" class="headerlink" title="2.1. 存储属性"></a>2.1. 存储属性</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">test</span><span class="params">(&amp;s.width)</span></span></span><br><span class="line">s.show()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> test</span></span><br><span class="line"><span class="comment"> getGirth</span></span><br><span class="line"><span class="comment"> width=20, side=4, girth=80</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/dfl8a.png@normal" alt=""></p><p><strong>分析：</strong> </p><ul><li><code>0x6c9d(%rip)</code>是全局变量<code>s</code>的地址值；</li><li><code>s</code>的内存地址和结构体<code>Shape</code>中第一个存储属性的地址是相同的（值类型）；</li><li>相当于把实例<code>s</code>中存储属性<code>width</code>的内存地址传给了<code>test</code>函数；</li><li>所以结构体的存储属性使用<code>inout</code>的本质和全局/局部变量都一样。</li></ul><p><strong>结论：</strong><br>由于存储属性有自己的内存地址，所以直接把存储属性的地址传递给需要修改的函数，在函数内部修改存储属性的值。</p><h3 id="2-2-计算属性"><a href="#2-2-计算属性" class="headerlink" title="2.2. 计算属性"></a>2.2. 计算属性</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">test</span><span class="params">(&amp;s.girth)</span></span></span><br><span class="line">s.show()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> getGirth</span></span><br><span class="line"><span class="comment"> test</span></span><br><span class="line"><span class="comment"> setGirth</span></span><br><span class="line"><span class="comment"> getGirth</span></span><br><span class="line"><span class="comment"> width=5, side=4, girth=20</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>思考：上面的代码中<code>s.girth</code>也是地址传递么？答案：不是，因为<code>girth</code>不是存储属性，所以不占用结构体的内存，但是使用<code>&amp;s.girth</code>不会报错，并且正常读写值，所以编译器是允许我们这么做的。那它是如何传递修改值的呢？</p></blockquote><p><img src="http://blog.idbeny.com/zk8i3.png@normal" alt=""></p><p><strong>分析：</strong> </p><ul><li>执行代码<code>test(&amp;s.girth)</code>首先调用了<code>girth</code>的<code>getter</code>方法；</li><li>然后<code>getter</code>方法会返回一个值，这个值放在临时空间内（局部变量）；</li><li>调用<code>test</code>方法时是把<code>getter</code>返回的临时变量作为参数传递的（传递的还是地址值），这时候在<code>test</code>方法内部修改的是临时变量内存的值；</li><li>当修改局部变量内存时，会调用<code>girth</code>的<code>setter</code>方法，把局部变量的值作为参数传递；</li><li>最终的结果就是值被修改了。</li></ul><p><strong>结论：</strong><br>由于计算属性没有自己的地址值，所以会调用<code>getter</code>方法获取一个局部变量，把局部变量的值传递给需要修改的函数，在函数内部修改局部变量的值，最后把局部变量的值传递给<code>setter</code>方法。</p><h3 id="2-3-属性观察器"><a href="#2-3-属性观察器" class="headerlink" title="2.3. 属性观察器"></a>2.3. 属性观察器</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">test</span><span class="params">(&amp;s.side)</span></span></span><br><span class="line">s.show()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> test</span></span><br><span class="line"><span class="comment"> willSet 20</span></span><br><span class="line"><span class="comment"> didSet 4 20</span></span><br><span class="line"><span class="comment"> getGirth</span></span><br><span class="line"><span class="comment"> width=10, side=20, girth=200</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/i1vai.png@normal" alt=""><br><img src="http://blog.idbeny.com/b0bbe.png@normal" alt=""><br><img src="http://blog.idbeny.com/y03h2.png@normal" alt=""><br><strong>分析：</strong></p><ul><li>取出<code>0x6cc3(%rip)</code>的前8个字节给<code>rax</code>，而<code>0x6cc3(%rip)</code>的本质就是存储属性<code>side</code>（通过汇编注释可以看出<code>s</code>偏移8个字节，而<code>width</code>占用8个字节，跳过<code>width</code>就是<code>side</code>）；</li><li><code>rax</code>的值又给了局部变量<code>-0x28(%rbp)</code>；</li><li>然后把局部变量<code>rdi</code>的值传递给了<code>test</code>函数，通过打印发现<code>rdi</code>保存的值就是20；</li><li><code>test</code>函数执行完成后，开始执行<code>side</code>的<code>setter</code>方法，并把之前的局部变量<code>rdi</code>作为参数传递过去；</li><li><code>willset</code>之前没有修改<code>rdi</code>，所以<code>rdi</code>保存的还是20，并且作为第一个参数传递给了<code>willset</code>；</li><li>由于<code>willset</code>之后才会真正修改属性值，并且<code>didset</code>之前已经知道修改过的属性值，所以真正修改属性值是在<code>willset</code>和<code>didset</code>之间；</li></ul><p><strong>结论：</strong><br>修改带有属性观察器的存储属性值时，和计算属性的过程有点类似。先拿到属性的值给局部变量，然后把局部变量的地址值传递给需要修改的函数，函数内部会修改局部变量的值。函数执行完成后把已经修改过的局部变量的值赋值给属性。赋值时，优先执行属性的<code>willset</code>方法，<code>willset</code>执行结束后，才会真正修改属性的值，最后调用<code>didset</code>。</p><blockquote><p>小技巧：需要传递<code>inout</code>参数的函数，业务逻辑是非常独立的，目的仅仅是修改传递过来的参数值，不会影响计算属性/存储属性（属性观察器）的逻辑，所以除了计算属性可以直接传地址，其他属性都需要一个局部变量做一个中转。</p></blockquote><h3 id="2-4-inout的本质总结"><a href="#2-4-inout的本质总结" class="headerlink" title="2.4. inout的本质总结"></a>2.4. inout的本质总结</h3><ol><li><p>如果实参有物理内存地址，且没有设置属性观察器</p><ul><li>直接将实参的内存地址传入函数（实参进行引用传递）</li></ul></li><li><p>如果实参是计算属性或设置了属性观察器，采取<strong>Copy In Copy Out</strong>的做法：</p><ul><li>调用该函数时，先复制实参的值，产生一个副本（局部变量-执行<code>get</code>方法）</li><li>将副本的内存地址传入函数（副本进行引用传递），在函数内部可以修改副本的值</li><li>函数返回后，再将副本的值覆盖实参的值（执行<code>set</code>方法）</li></ul></li></ol><p><strong>总结：<code>inout</code>的本质就是引用传递（地址传递）。</strong></p><blockquote><p>什么是<strong>Copy In Copy Out</strong>？先Copy到函数里，修改后再Copy到外面。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> inout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列九 - 属性</title>
      <link href="/2019/07/01/swift-syntax-property/"/>
      <url>/2019/07/01/swift-syntax-property/</url>
      
        <content type="html"><![CDATA[<p>任何一门语言都有属性的概念。Swift中的属性是怎么的呢？</p><a id="more"></a><h2 id="一、属性"><a href="#一、属性" class="headerlink" title="一、属性"></a>一、属性</h2><p>Swift中跟实例相关的属性可以分为2大类：存储属性和计算属性。</p><h3 id="1-1-存储属性（Stored-Property）"><a href="#1-1-存储属性（Stored-Property）" class="headerlink" title="1.1. 存储属性（Stored Property）"></a>1.1. 存储属性（<em>Stored Property</em>）</h3><p><strong>特点：</strong></p><ul><li>类似于成员变量的概念；</li><li>存储在实例的内存中；</li><li>结构体、类可以定义存储属性；</li><li>枚举不可以定义存储属性。</li></ul><p>示例代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct Circle &#123;</span><br><span class="line">    <span class="keyword">var</span> radius: <span class="built_in">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classCircle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radius: <span class="built_in">Double</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于存储属性，Swift有个明确的规定：<br>在创建类或结构体的实例时，必须为所有的存储属性设置一个合适的初始值。</p><ul><li>可以在初始化器里为存储属性设置一个初始值；</li><li>可以分配一个默认的属性值作为属性定义的一部分。</li></ul><h3 id="1-2-计算属性（Computed-Property）"><a href="#1-2-计算属性（Computed-Property）" class="headerlink" title="1.2. 计算属性（Computed Property）"></a>1.2. 计算属性（<em>Computed Property</em>）</h3><p><strong>特点：</strong></p><ul><li>本质就是方法（函数）；</li><li>不占用实例的内存；</li><li>枚举、结构体、类都可以定义计算属性。</li></ul><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 存储属性</span></span><br><span class="line">    <span class="keyword">var</span> radius: <span class="type">Double</span></span><br><span class="line">    <span class="comment">// 计算属性</span></span><br><span class="line">    <span class="keyword">var</span> diameter: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"set"</span>)</span><br><span class="line">            radius = newValue / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"get"</span>)</span><br><span class="line">            <span class="keyword">return</span> radius * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = <span class="type">Circle</span>(radius: <span class="number">10</span>)</span><br><span class="line"><span class="built_in">c</span>.radius = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"--1--"</span>)</span><br><span class="line"><span class="built_in">c</span>.diameter = <span class="number">40</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"--2--"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">c</span>.diameter)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> set</span></span><br><span class="line"><span class="comment"> get</span></span><br><span class="line"><span class="comment"> 20.0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>输出分析：</strong> 上面代码如果执行<code>c.diameter = 40</code>，<code>radius</code>的值就会变为20。因为这样会执行<code>diameter</code>的<code>set</code>方法(40作为参数)，上面的案例看到变量<code>newValue</code>，但是代码中没有定义这个变量，其实<code>newValue</code>是<code>set</code>方法提供的形参，只不过省略没有写而已，完整的<code>set</code>方法代码应该是<code>set(newValue) {...}</code>，<code>newValue</code>是默认值，可以按照自己的规范修改（建议使用默认的形参命名）。<code>c.diameter</code>调用的是<code>diameter</code>的<code>get</code>方法。</p><p><strong>内存分析：</strong><br>上面示例代码中结构体<code>Circle</code>占用多少内存呢？</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;Circle&gt;.stride)</span></span></span><br><span class="line"><span class="comment">// 输出：8</span></span><br></pre></td></tr></table></figure><p>结果显示占用8个字节。因为计算属性的本质是方法。</p><p><strong>补充说明：</strong></p><ol><li><p><code>set</code>传入的新值默认叫做<code>newValue</code>，也可以自定义。</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct Circle &#123;</span><br><span class="line">    var radius: Double</span><br><span class="line">    var diameter: Double &#123;</span><br><span class="line">        <span class="builtin-name">set</span>(newDiameter) &#123;</span><br><span class="line">           <span class="built_in"> radius </span>= newDiameter / 2</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="builtin-name">get</span> &#123;</span><br><span class="line">            return<span class="built_in"> radius </span>* 2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>只读计算属性：只有<code>get</code>，没有<code>set</code>。<br><img src="http://blog.idbeny.com/ic5yt.png@normal" alt=""></p><p> 如果是只读属性，<code>get</code>可以省略不写:</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct Circle &#123;</span><br><span class="line">    var radius: Double</span><br><span class="line">    var diameter: Double &#123;<span class="built_in"> radius </span>* 2 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义计算属性只能用<code>var</code>，不能用<code>let</code>。<br><img src="http://blog.idbeny.com/wckla.png@normal" alt=""></p></li><li><p>有<code>set</code>就必须有<code>get</code>。<br><img src="http://blog.idbeny.com/rs8av.png@normal" alt=""></p></li></ol><blockquote><p><strong>扩展：</strong> 枚举<code>rawValue</code>的本质就是只读的计算属性。</p></blockquote><h3 id="1-3-属性观察器（Property-Observer）"><a href="#1-3-属性观察器（Property-Observer）" class="headerlink" title="1.3. 属性观察器（Property Observer）"></a>1.3. 属性观察器（Property Observer）</h3><p>通过名字就可以联想到<code>OC</code>中的<code>KVO</code>，是的，两者确实有相似之处。在<code>Swift</code>中可以为非<code>lazy</code>的 <strong><code>var</code>存储属性</strong> 设置属性观察器。</p><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radius: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"willSet"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"didSet"</span>, oldValue, radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.radius = <span class="number">2.0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Circle Init"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = <span class="type">Circle</span>()</span><br><span class="line"><span class="comment">// 输出：Circle Init</span></span><br><span class="line"><span class="built_in">c</span>.radius = <span class="number">3.0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> willSet 3.0</span></span><br><span class="line"><span class="comment"> didSet 2.0 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong> </p><ul><li><code>willSet</code>会传递新值，默认叫做<code>newValue</code>；</li><li><code>didSet</code>会传递旧值，默认叫做<code>oldValue</code>；</li><li>在初始化器中设置属性值不会触发<code>willSet</code>和<code>didSet</code>。同样在属性定义时设置初始值也不会触发。</li></ul><h2 id="二、延迟存储属性（Lazy-Stored-Property）"><a href="#二、延迟存储属性（Lazy-Stored-Property）" class="headerlink" title="二、延迟存储属性（Lazy Stored Property）"></a>二、延迟存储属性（Lazy Stored Property）</h2><p>使用<code>lazy</code>可以定义一个延迟存储属性，在第一次用到属性的时候才会进行初始化。</p><p><strong>特点：</strong></p><ul><li><code>lazy</code>属性必须是<code>var</code>，不能是<code>let</code>(<code>let</code>必须在实例的初始化方法完成之前就拥有值)；</li><li>如果多条线程同时第一次访问<code>lazy</code>属性，无法保证属性只被初始化1次（非线程安全）。</li></ul><p>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Car init"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"car run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> car = <span class="type">Car</span>()</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Person init"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">goOut</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Person goOut"</span>)</span><br><span class="line">        car.run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="type">Person</span>()</span><br><span class="line"><span class="comment">// 输出：Person init</span></span><br><span class="line">p.goOut()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> Person goOut</span></span><br><span class="line"><span class="comment"> Car init</span></span><br><span class="line"><span class="comment"> car run</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong> 如果<code>Person</code>中的存储属性<code>car</code>没有<code>lazy</code>修饰，在创建<code>Person</code>对象<code>p</code>的时候就会调用存储属性<code>car</code>的初始化方法。添加<code>lazy</code>修饰后，只会在第一次使用<code>car</code>属性(对象)时进行初始化。</p><p><strong>注意点：</strong> 当结构体包含一个延迟存储属性时，只有<code>var</code>才能访问延迟存储属性。因为延迟属性初始化时需要改变结构体的内存，而结构体如果使用<code>let</code>修饰后就不能修改所在内存。<br><img src="http://blog.idbeny.com/38oh6.png@normal" alt=""></p><h2 id="三、类型属性（Type-Property）"><a href="#三、类型属性（Type-Property）" class="headerlink" title="三、类型属性（Type Property）"></a>三、类型属性（Type Property）</h2><p>严格来说，属性可以分为：</p><ul><li><p>实例属性（Instance Property）：只能通过实例去访问</p><ul><li>存储实例属性（Stored Instance Property）：存储在实例的内存中，每个实例都有1份；</li><li>计算实例属性（Computed Instance Property）</li></ul></li><li><p>类型属性（Type Property）：只能通过类型去访问</p><ul><li>存储类型属性（Stored Type Property）：整个程序运行过程中，就只有1份内存（类似于全局变量）</li><li>计算实例属性（Computed Type Property）</li></ul></li></ul><p>可以通过<code>static</code>定义类型属性。如果是类，也可以用关键字<code>class</code>。</p><p>示例代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct Shape &#123;</span><br><span class="line">    <span class="selector-tag">var</span> <span class="attribute">width</span>: Int</span><br><span class="line">    static <span class="selector-tag">var</span> count: Int = <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> s = Shape(<span class="attribute">width</span>: <span class="number">10</span>)</span><br><span class="line">s<span class="selector-class">.width</span> = <span class="number">20</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"before count:\(Shape.count)"</span>)</span></span> <span class="comment">// 输出：before count:30</span></span><br><span class="line">Shape<span class="selector-class">.count</span> = <span class="number">40</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"after count:\(Shape.count)"</span>)</span></span> <span class="comment">// 输出：after count:40</span></span><br></pre></td></tr></table></figure><h3 id="3-1-类型属性细节"><a href="#3-1-类型属性细节" class="headerlink" title="3.1. 类型属性细节"></a>3.1. 类型属性细节</h3><ol><li><p>不同于存储实例属性，存储类型属性必须进行初始化，否则报错（因为类型没有像实例那样的<code>init</code>初始化器来初始化存储属性）：<br><img src="http://blog.idbeny.com/6y181.png@normal" alt=""></p></li><li><p>存储类型属性默认就是<code>lazy</code>，会在第一次使用的时候才初始化，就算被多个线程同时访问，保证只会初始化一次（线程安全）。</p></li><li><p>存储类型属性可以是<code>let</code>。</p></li><li><p>枚举类型也可以定义类型属性（存储类型属性，计算类型属性）。</p></li></ol><h3 id="3-2-单例模式"><a href="#3-2-单例模式" class="headerlink" title="3.2. 单例模式"></a>3.2. 单例模式</h3><p>使用类型属性可以创建单例模式。<br>示例代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">FileManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> shared = FileHandle()</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">init</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = FileManager.shared;</span><br></pre></td></tr></table></figure><p>把初始化器设为<code>private</code>，这样就无法让外界使用<code>init</code>创建实例。把类型属性设为<code>public</code>，在其他文件中也可以访问，存储类型属性再用<code>let</code>修饰，这样就能保证实例只能指向一块固定内存。</p><h3 id="3-2-类型存储属性的本质"><a href="#3-2-类型存储属性的本质" class="headerlink" title="3.2. 类型存储属性的本质"></a>3.2. 类型存储属性的本质</h3><p>第一步：示例代码<br><img src="http://blog.idbeny.com/lb19t.png@normal" alt=""></p><p>第二步：查看全局变量内存地址<br><img src="http://blog.idbeny.com/20evf.png@normal" alt=""></p><p>分析：<br><code>num1</code>内存地址：<code>0x1000013f1 + 0x5df7 = 0x1000071E8</code>；<br><code>num2</code>内存地址：<code>0x1000013fc + 0x5df4 = 0x1000071F0</code>；<br><code>num3</code>内存地址：<code>0x100001407 + 0x5df1 = 0x1000071F8</code>。</p><p>结论：<br><code>num1</code>,<code>num2</code>,<code>num3</code>三个变量的内存地址是连续的。</p><p>第三步：查看类型存储属性地址<br><img src="http://blog.idbeny.com/gm21r.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/s9i73.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/m0f1g.png@normal" alt=""></p><p>分析：<br><code>num1</code>内存地址：<code>0x100001013 + 0x631d = 0x100007330</code>；<br><code>Car.count</code>内存地址：<code>0x100007338</code>；<br><code>num3</code>内存地址：<code>0x10000105c + 0x62e4 = 0x100007340</code>。</p><p>结论：<br><code>num1</code>,<code>Car.count</code>,<code>num3</code>三个变量的内存地址是连续的。</p><p>从内寸角度看，类型存储属性写在外面和里面没有什么区别，写在类里面只是代表该属性有一定访问权限。</p><p>类型存储属性默认是<code>lazy</code>，所以在第一次访问的时候做了很多操作。而且只被初始化一次。</p><p>通过汇编查看类型存储属性初始化：<br><img src="http://blog.idbeny.com/m5ams.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/c1c9t.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/xfo11.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/benrd.png@normal" alt=""></p><p>发现，类型属性初始化最终调用的是<code>GCD</code>中的<code>dispatch_once</code>，这样就保证了属性只被初始化一次。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 属性 </tag>
            
            <tag> 存储属性 </tag>
            
            <tag> 计算属性 </tag>
            
            <tag> 属性观察器 </tag>
            
            <tag> 类型属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列八 - 闭包</title>
      <link href="/2019/06/12/swift-syntax-closure/"/>
      <url>/2019/06/12/swift-syntax-closure/</url>
      
        <content type="html"><![CDATA[<p>什么是闭包？闭包表达式又是什么？</p><a id="more"></a><h2 id="一、闭包表达式（Closure-Expression）"><a href="#一、闭包表达式（Closure-Expression）" class="headerlink" title="一、闭包表达式（Closure Expression）"></a>一、闭包表达式（Closure Expression）</h2><p>在Swift中，可以通过<code>func</code>定义一个函数，也可以通过闭包表达式定义一个函数。</p><h3 id="1-1-闭包表达式的格式"><a href="#1-1-闭包表达式的格式" class="headerlink" title="1.1. 闭包表达式的格式"></a>1.1. 闭包表达式的格式</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="params">(参数列表)</span> -&gt;</span> 返回值类型 <span class="keyword">in</span></span><br><span class="line">  函数体代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-闭包表达式和函数的比较"><a href="#1-2-闭包表达式和函数的比较" class="headerlink" title="1.2. 闭包表达式和函数的比较"></a>1.2. 闭包表达式和函数的比较</h3><p>定义一个普通的函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(<span class="number">_</span> v1: Int, <span class="number">_</span> v2: Int)</span></span> -&gt; <span class="type">Int</span> &#123; v2 + v2 &#125;</span><br><span class="line"><span class="keyword">let</span> result = sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><p>定义闭包：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = &#123;</span><br><span class="line">    (v1: <span class="keyword">Int</span>, v2: <span class="keyword">Int</span>) -&gt; <span class="keyword">Int</span> in</span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">print</span>(result)</span><br><span class="line"><span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><h3 id="1-3-闭包表达式的简写"><a href="#1-3-闭包表达式的简写" class="headerlink" title="1.3. 闭包表达式的简写"></a>1.3. 闭包表达式的简写</h3><p>定义函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exec</span><span class="params">(v1: Int, v2: Int, fn: <span class="params">(Int, Int)</span></span></span> -&gt; <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(fn(v1, v2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想使用<code>exec</code>函数，则必须传入两个<code>Int</code>类型的参数和一个返回<code>Int</code>类型的函数，然后<code>exec</code>内部执行了传入的函数。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">sum</span>(_ <span class="attribute">a</span>: Int, _ <span class="attribute">b</span>: Int) <span class="selector-tag">-</span>&gt; <span class="selector-tag">Int</span> &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">a</span> + <span class="selector-tag">b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">exec</span>(<span class="attribute">v1</span>: <span class="number">10</span>, <span class="attribute">v2</span>: <span class="number">20</span>, <span class="attribute">fn</span>: sum)</span><br><span class="line"><span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><p>按照以往的知识，我们需要定义一个函数，然后把函数传给<code>exec</code>就行了。其实我们也可以使用闭包表达式。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">exec</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>, <span class="meta">fn</span>: &#123;</span><br><span class="line">    (<span class="built_in">v1</span>: Int, <span class="built_in">v2</span>: Int) -&gt; Int in</span><br><span class="line">    return <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;)</span><br><span class="line">// 输出：<span class="number">30</span></span><br></pre></td></tr></table></figure><p>上面的闭包表达式还可以简写：</p><h4 id="1-3-1-简写一"><a href="#1-3-1-简写一" class="headerlink" title="1.3.1. 简写一"></a>1.3.1. 简写一</h4><ul><li>省略参数类型和返回值；</li><li>编译器会自动推断闭包表达式中参数类型和返回值类型。<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">exec</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>, <span class="meta">fn</span>: &#123;</span><br><span class="line">    <span class="built_in">v1</span>, <span class="built_in">v2</span> in return <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;)</span><br><span class="line">// 输出：<span class="number">30</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-3-2-简写二"><a href="#1-3-2-简写二" class="headerlink" title="1.3.2. 简写二"></a>1.3.2. 简写二</h4><p>如果函数的返回值是一个单一表达式，可以省略<code>return</code>。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">exec</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>, <span class="meta">fn</span>: &#123;</span><br><span class="line">    <span class="built_in">v1</span>, <span class="built_in">v2</span> in <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;)</span><br><span class="line">// 输出：<span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-简写三"><a href="#1-3-3-简写三" class="headerlink" title="1.3.3. 简写三"></a>1.3.3. 简写三</h4><p>如果闭包表达式不想写参数，可以使用美元符<code>$序号</code>代替，序号从0开始，代表参数位置。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec(v1: <span class="number">10</span>, v2: <span class="number">20</span>, fn: &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;)</span><br><span class="line"><span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><h4 id="1-3-4-简写四（不建议）"><a href="#1-3-4-简写四（不建议）" class="headerlink" title="1.3.4. 简写四（不建议）"></a>1.3.4. 简写四（不建议）</h4><p>简单的闭包表达式还可以直接使用运算符代替。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">exec</span>(<span class="attribute">v1</span>: <span class="number">10</span>, <span class="attribute">v2</span>: <span class="number">20</span>, <span class="attribute">fn</span>: +)</span><br><span class="line"><span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><h2 id="二、尾随闭包"><a href="#二、尾随闭包" class="headerlink" title="二、尾随闭包"></a>二、尾随闭包</h2><h3 id="2-1-特点一（最后一个实参）"><a href="#2-1-特点一（最后一个实参）" class="headerlink" title="2.1. 特点一（最后一个实参）"></a>2.1. 特点一（最后一个实参）</h3><p>如果将一个很长的闭包表达式作为函数的<strong>最后一个实参</strong>，使用尾随闭包可以增强函数的可读性。</p><p>尾随闭包是一个被书写在函数调用括号外面（后面）的闭包表达式。</p><p>以调用上面的<code>exec</code>函数为例：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exec(v1: <span class="number">10</span>, v2: <span class="number">20</span>) &#123;</span><br><span class="line">  $<span class="number">0</span> + $<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><h3 id="2-2-特点二（唯一实参）"><a href="#2-2-特点二（唯一实参）" class="headerlink" title="2.2. 特点二（唯一实参）"></a>2.2. 特点二（唯一实参）</h3><p>如果闭包表达式是函数的<strong>唯一实参</strong>，而且使用了尾随闭包的语法，那就不需要在函数名后边写圆括号。</p><p>定义函数：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func exec<span class="function"><span class="params">(fn: (Int, Int) -&gt; Int)</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(fn(<span class="number">10</span>, <span class="number">20</span>))</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>调用方式：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：</span></span><br><span class="line"><span class="keyword">exec</span>(fn: &#123; $0 + $1 &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line"><span class="keyword">exec</span>() &#123; $0 + $1 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三：</span></span><br><span class="line"><span class="keyword">exec</span> &#123; $0 + $1 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 30</span></span><br><span class="line"><span class="comment"> 30</span></span><br><span class="line"><span class="comment"> 30</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="三、闭包（Closure）"><a href="#三、闭包（Closure）" class="headerlink" title="三、闭包（Closure）"></a>三、闭包（Closure）</h2><p>闭包和闭包表达式严格意义上来讲并不是同一个概念。</p><p>一个<strong>函数</strong>和它所捕获的<strong>变量/常量</strong>环境组合起来，称为闭包。</p><ul><li>一般指定义在函数内部的函数；</li><li>一般它捕获的是外层函数的局部变量/常量。</li></ul><p>示例代码：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">typealias <span class="function"><span class="keyword">Fn</span> </span>= (Int) -&gt; Int</span><br><span class="line">func <span class="built_in">getFn</span>() -&gt; <span class="function"><span class="keyword">Fn</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">var</span> <span class="title">num</span> </span>= <span class="number">0</span></span><br><span class="line">    func <span class="built_in">plus</span>(_ i: Int) -&gt; Int &#123;</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plus</span><br><span class="line">&#125;</span><br><span class="line">var <span class="function"><span class="keyword">fn</span> </span>= <span class="built_in">getFn</span>()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">fn</span>(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">fn</span>(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">fn</span>(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">fn</span>(<span class="number">4</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 3</span></span><br><span class="line"><span class="comment"> 6</span></span><br><span class="line"><span class="comment"> 10</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><em>为什么<code>var num = 0</code>作为局部变量还能一直累加？不是应该在函数执行完成后就被释放了么？我们通过汇编一探究竟。</em></p><h3 id="3-1-汇编分析闭包"><a href="#3-1-汇编分析闭包" class="headerlink" title="3.1. 汇编分析闭包"></a>3.1. 汇编分析闭包</h3><h4 id="3-1-1-如果内部函数没有捕获外部变量："><a href="#3-1-1-如果内部函数没有捕获外部变量：" class="headerlink" title="3.1.1. 如果内部函数没有捕获外部变量："></a>3.1.1. 如果内部函数没有捕获外部变量：</h4><p><img src="http://blog.idbeny.com/u6h7w.png@normal" alt=""><br><img src="http://blog.idbeny.com/pcsv0.png@normal" alt=""><br>通过分析可以看到，函数返回的是一个地址，也就是<code>变量fn</code>里面存放的是函数地址。</p><h4 id="3-1-2-如果内部函数捕获外部变量："><a href="#3-1-2-如果内部函数捕获外部变量：" class="headerlink" title="3.1.2. 如果内部函数捕获外部变量："></a>3.1.2. 如果内部函数捕获外部变量：</h4><p><img src="http://blog.idbeny.com/q4q7i.png@normal" alt=""><br><img src="http://blog.idbeny.com/ahgr7.png@normal" alt=""><br>汇编代码就变得复杂一点了，并且出现了<code>swift_allocObject</code>关键字，也就意味着在堆空间申请了一块内存，内存存放的是<code>num</code>的值。每次调用<code>fn</code>，访问的<code>num</code>都是同一块内存地址，所以才会出现局部变量也能一直累加的效果。</p><h4 id="3-1-3-证明swift-allocObject存放的是num："><a href="#3-1-3-证明swift-allocObject存放的是num：" class="headerlink" title="3.1.3. 证明swift_allocObject存放的是num："></a>3.1.3. 证明<code>swift_allocObject</code>存放的是<code>num</code>：</h4><p>第一步：源代码断点：<br><img src="http://blog.idbeny.com/qgkax.png@normal" alt=""></p><p>第二步：查看<code>swift_allocObject</code>返回的地址：<br><img src="http://blog.idbeny.com/04ami.png@normal" alt=""></p><p>第三步：查看<code>rax</code>地址存放的初始化值：<br><img src="http://blog.idbeny.com/68wa6.png@normal" alt=""><br><img src="http://blog.idbeny.com/ezq7v.png@normal" alt=""></p><p>第四步：执行<code>fn(1)</code>后：<br><img src="http://blog.idbeny.com/5qetc.png@normal" alt=""></p><p>第五步：执行<code>fn(2)</code>后：<br><img src="http://blog.idbeny.com/lyvum.png@normal" alt=""></p><p><strong>结论：</strong> 内部函数一旦捕获了外部的局部变量，要想持续使用这个变量，就需要延迟变量的生命周期，所以在堆空间分配一块内存来存放局部变量的值。</p><blockquote><p>思考：为什么可以访问同一块内存空间？<br><code>var fn = getFn()</code>fn占用16个字节，前8个字节存放返回的函数地址（<code>plus的封装</code>），后8个字节存放堆空间（<code>num</code>）的地址。如果<code>var fn2 = getFn()</code>，<code>fn1</code>和<code>fn2</code>前8个字节可能相同，不同的是后面的8个字节。</p></blockquote><h3 id="3-2-闭包和类的比较"><a href="#3-2-闭包和类的比较" class="headerlink" title="3.2. 闭包和类的比较"></a>3.2. 闭包和类的比较</h3><p>可以把闭包想象成是一个类的实例对象。</p><ul><li>内存在堆空间；</li><li>捕获的局部变量/常量就是对象的成员（存储属性）；</li><li>组成闭包的函数就是类内部定义的方法。<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Closure &#123;</span><br><span class="line">    <span class="selector-tag">var</span> num = <span class="number">0</span></span><br><span class="line">    func plus(_ <span class="selector-tag">i</span>: Int) -&gt; Int &#123;</span><br><span class="line">        num += i</span><br><span class="line">        return num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> cs = Closure()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(cs.plus(<span class="number">1</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(cs.plus(<span class="number">2</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(cs.plus(<span class="number">3</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(cs.plus(<span class="number">4</span>)</span></span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 3</span></span><br><span class="line"><span class="comment"> 6</span></span><br><span class="line"><span class="comment"> 10</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="四、自动闭包"><a href="#四、自动闭包" class="headerlink" title="四、自动闭包"></a>四、自动闭包</h2><p>示例代码：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果第一个数大于0，返回第一个数，否则返回第二个数</span></span><br><span class="line">func getFirst(_ v1: Int, _ v2: Int) -&gt; Int &#123;</span><br><span class="line">    <span class="keyword">return</span> v1 &gt; <span class="number">0</span> ? v1 : v2</span><br><span class="line">&#125;</span><br><span class="line">getFirst(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 10</span></span><br><span class="line">getFirst(<span class="number">-2</span>, <span class="number">20</span>) <span class="comment">// 20</span></span><br><span class="line">getFirst(<span class="number">0</span>, <span class="number">-4</span>) <span class="comment">// -4</span></span><br></pre></td></tr></table></figure><p>把上面的代码修改如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">func getNumber<span class="function"><span class="params">()</span> -&gt;</span> Int &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"getNumber"</span>)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result1 = getFirst(<span class="number">10</span>, getNumber())</span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> getNumber</span></span><br><span class="line"><span class="comment"> 10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result2 = getFirst(-<span class="number">1</span>, getNumber())</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> getNumber</span></span><br><span class="line"><span class="comment"> 20</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>分析：不管第一个数是否大于0，都会执行第二个参数传入的函数，这样整体有点浪费（性能/空间）。我们可以尝试把函数第二个入参类型修改为函数类型。</p><p>优化代码：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">typealias <span class="function"><span class="title">VoidFunc</span> = <span class="params">()</span> -&gt;</span> Int</span><br><span class="line">func getFirst<span class="function"><span class="params">(_ v1: Int, _ v2: VoidFunc)</span> -&gt;</span> Int &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"getFirst"</span>)</span><br><span class="line">    <span class="keyword">return</span> v1 &gt; <span class="number">0</span> ? v1 : v2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getNumber<span class="function"><span class="params">()</span> -&gt;</span> Int &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"getNumber"</span>)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">getFirst(<span class="number">10</span>, getNumber)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> getFirst</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">getFirst(-<span class="number">1</span>, getNumber)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> getFirst</span></span><br><span class="line"><span class="comment"> getNumber</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>结果：只有需要的时候才会执行对应的代码。</p><p>但是，如果这样修改后，每次都需要传入一个函数会有点麻烦。Swift提供了自动闭包功能，可以把普通变量自动包裹成闭包，这样就能满足上面代码的所有的功能了。</p><p><strong>关键字：</strong> <code>@autoclosure</code><br>用法：在函数前面加上<code>@autoclosure</code>关键字即可。</p><p>自动闭包代码：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typealias <span class="function"><span class="title">VoidFunc</span> = <span class="params">()</span> -&gt;</span> Int</span><br><span class="line">func getFirst<span class="function"><span class="params">(_ v1: Int, _ v2: @autoclosure VoidFunc)</span> -&gt;</span> Int &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"getFirst"</span>)</span><br><span class="line">    <span class="keyword">return</span> v1 &gt; <span class="number">0</span> ? v1 : v2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getFirst(<span class="number">10</span>, <span class="number">20</span>) <span class="regexp">// 10</span></span><br><span class="line"><span class="regexp">getFirst(-1, 10) //</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>自动闭包<strong>特点</strong>：</p><ul><li><code>@autoclosure</code>会将普通参数（例如，<code>20</code>）封装成闭包<code>{ 参数 }</code>（例如，<code>{ 20 }</code>）；</li><li><code>@autoclosure</code>只支持<code>() -&gt; T</code>（无参有返回值）格式的参数；</li><li><code>@autoclosure</code>并非只支持最后一个参数，和位置没有任何关系；</li><li>有<code>@autoclosure</code>、无<code>@autoclosure</code>，构成函数重载；</li><li>为了避免与期望冲突，使用了有<code>@autoclosure</code>的地方最好明确注释清楚：这个值会被延迟执行（有可能不执行）。</li></ul><p><strong>延伸：</strong> 空合并运算符<code>??</code>使用了<code>@autoclosure</code>技术。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ?? &lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T?</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T?</span></span><br></pre></td></tr></table></figure><h2 id="五、应用"><a href="#五、应用" class="headerlink" title="五、应用"></a>五、应用</h2><p>通过数组的排序看下闭包表达式是如何使用的。</p><p>定义函数：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="number">20</span>, <span class="number">52</span>, <span class="number">19</span>, <span class="number">3</span>, <span class="number">80</span>, <span class="number">72</span>]</span><br></pre></td></tr></table></figure><h3 id="3-1-系统排序"><a href="#3-1-系统排序" class="headerlink" title="3.1. 系统排序"></a>3.1. 系统排序</h3><p>在Swift中，<code>Array</code>为开发者提供了<code>sort()</code>排序函数，开发者可以直接使用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">arr.sort()</span></span><br><span class="line"><span class="string">print(arr)</span></span><br><span class="line"><span class="string">//</span> <span class="string">输出：[3,</span> <span class="number">19</span><span class="string">,</span> <span class="number">20</span><span class="string">,</span> <span class="number">52</span><span class="string">,</span> <span class="number">72</span><span class="string">,</span> <span class="number">80</span><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="3-2-自定义排序"><a href="#3-2-自定义排序" class="headerlink" title="3.2. 自定义排序"></a>3.2. 自定义排序</h3><p><code>sort()</code>是升序的，如果要降序呢？我们可以使用另外一个函数进行自定义排序。</p><p><code>Array</code>提供的函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sort</span><span class="params">(by areInIncreasingOrder: <span class="params">(Element, Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>) <span class="keyword">rethrows</span></span><br></pre></td></tr></table></figure><p>可以看到，该函数让传入一个闭包表达式。使用规则如下：</p><ul><li>返回true：第一个元素排在第二个元素前面；</li><li>返回false：第一个元素排在第二个元素后面。</li></ul><p>调用方式一（普通函数）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(i1: Int, i2: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> i1 &gt; i2</span><br><span class="line">&#125;</span><br><span class="line">arr.<span class="built_in">sort</span>(by: compare)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="comment">// 输出：[80, 72, 52, 20, 19, 3]</span></span><br></pre></td></tr></table></figure><p>调用方式二（闭包表达式）：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="keyword">sort</span>(<span class="keyword">by</span>: &#123;</span><br><span class="line">    (i1: Int, i2: Int) -&gt; Bool <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> i1 &gt; i2</span><br><span class="line">&#125;)</span><br><span class="line">arr.<span class="keyword">sort</span>(<span class="keyword">by</span>: &#123; i1, i2 <span class="keyword">in</span> <span class="keyword">return</span> i1 &gt; i2 &#125;)</span><br><span class="line">arr.<span class="keyword">sort</span>(<span class="keyword">by</span>: &#123; i1, i2 <span class="keyword">in</span> i1 &gt; i2 &#125;)</span><br><span class="line">arr.<span class="keyword">sort</span>(<span class="keyword">by</span>: &#123; <span class="variable">$0</span> &gt; <span class="variable">$1</span> &#125;)</span><br><span class="line">arr.<span class="keyword">sort</span>(<span class="keyword">by</span>: &gt;)</span><br><span class="line">arr.<span class="keyword">sort</span>() &#123; <span class="variable">$0</span> &gt; <span class="variable">$1</span> &#125;</span><br><span class="line">arr.<span class="keyword">sort</span> &#123; <span class="variable">$0</span> &gt; <span class="variable">$1</span> &#125;</span><br><span class="line"><span class="comment">// 输出：[80, 72, 52, 20, 19, 3]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 闭包表达式 </tag>
            
            <tag> 数组排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列七 - 汇编分析值类型</title>
      <link href="/2019/06/08/swift-syntax-assembly-value-type/"/>
      <url>/2019/06/08/swift-syntax-assembly-value-type/</url>
      
        <content type="html"><![CDATA[<p>通过汇编分下值类型的本质。</p><a id="more"></a><h2 id="一、值类型"><a href="#一、值类型" class="headerlink" title="一、值类型"></a>一、值类型</h2><p>值类型赋值给<code>var</code>，<code>let</code>或者给参数传参，是直接将所有内容拷贝一份。类似于对文件进行复制粘贴操作，产生了全新的文件副本，属于深拷贝（deep copy）。</p><p>示例：</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">func testStruct() &#123;</span><br><span class="line">    <span class="attribute">struct Point &#123;</span></span><br><span class="line"><span class="attribute">        var x</span>: Int</span><br><span class="line">        var y: Int</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var p1 = Point(x: 10, y: 20)</span><br><span class="line">    print("before:p1<span class="variable">.x</span>:\(p1<span class="variable">.x</span>),p1<span class="variable">.y</span>:\(p1<span class="variable">.y</span>)")</span><br><span class="line">    var p2 = p1</span><br><span class="line">    print("before:p2<span class="variable">.x</span>:\(p2<span class="variable">.x</span>),p2<span class="variable">.y</span>:\(p2<span class="variable">.y</span>)")</span><br><span class="line">    p2<span class="variable">.x</span> = 30</span><br><span class="line">    p2<span class="variable">.y</span> = 40</span><br><span class="line">    print("after:p1<span class="variable">.x</span>:\(p1<span class="variable">.x</span>),p1<span class="variable">.y</span>:\(p1<span class="variable">.y</span>)")</span><br><span class="line">    print("after:p2<span class="variable">.x</span>:\(p2<span class="variable">.x</span>),p2<span class="variable">.y</span>:\(p2<span class="variable">.y</span>)")</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line"> 输出：</span><br><span class="line"> before:p1<span class="variable">.x</span>:10,p1<span class="variable">.y</span>:20</span><br><span class="line"> before:p2<span class="variable">.x</span>:10,p2<span class="variable">.y</span>:20</span><br><span class="line"> after:p1<span class="variable">.x</span>:10,p1<span class="variable">.y</span>:20</span><br><span class="line"> after:p2<span class="variable">.x</span>:30,p2<span class="variable">.y</span>:40</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>通过上面的示例可以看出，给<code>p2</code>重新赋值确实没有影响到<code>p1</code>的值。</p><h3 id="1-1-内存分析"><a href="#1-1-内存分析" class="headerlink" title="1.1. 内存分析"></a>1.1. 内存分析</h3><p>我们也可以通过内存看下上面示例中变量地址是否发生改变，如果生成了新的地址值，则说明是深拷贝。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testStruct</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x: <span class="type">Int</span></span><br><span class="line">        <span class="keyword">var</span> y: <span class="type">Int</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="type">Point</span>(x: <span class="number">10</span>, y: <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">var</span> p2 = p1    </span><br><span class="line">    <span class="built_in">print</span>(<span class="type">Mems</span>.ptr(ofVal: &amp;p1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="type">Mems</span>.ptr(ofVal: &amp;p2))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 0x00007ffeefbff4c0</span></span><br><span class="line"><span class="comment"> 0x00007ffeefbff490</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>打印结果显示：<code>p2</code>和<code>p1</code>的内存地址是不同的，所以修改<code>p2</code>不会影响<code>p1</code>。</p><h3 id="1-2-汇编分析（局部变量）"><a href="#1-2-汇编分析（局部变量）" class="headerlink" title="1.2. 汇编分析（局部变量）"></a>1.2. 汇编分析（局部变量）</h3><p>第一步：示例代码：<br><img src="http://blog.idbeny.com/kr0p6.png@normal" alt=""></p><p>第二步：进入汇编代码后先查找立即数：<br><img src="http://blog.idbeny.com/74yuw.png@normal" alt=""></p><p>第三步：进入p1的初始化方法中：<br><img src="http://blog.idbeny.com/lx5gr.png@normal" alt=""></p><p>第四步：继第三步<code>finish</code>后，继续回到之前的汇编：<br><img src="http://blog.idbeny.com/1i9dy.png@normal" alt=""></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">movq   <span class="symbol">%rax</span>, <span class="number">-0</span><span class="keyword">x</span><span class="number">10</span>(<span class="symbol">%rbp</span>)</span><br><span class="line">movq   <span class="symbol">%rdx</span>, <span class="number">-0</span><span class="keyword">x</span><span class="number">8</span>(<span class="symbol">%rbp</span>)</span><br><span class="line">movq   <span class="symbol">%rax</span>, <span class="number">-0</span><span class="keyword">x</span><span class="number">20</span>(<span class="symbol">%rbp</span>)</span><br><span class="line">movq   <span class="symbol">%rdx</span>, <span class="number">-0</span><span class="keyword">x</span><span class="number">18</span>(<span class="symbol">%rbp</span>)</span><br><span class="line">movq   $<span class="number">0x1e</span>, <span class="number">-0</span><span class="keyword">x</span><span class="number">20</span>(<span class="symbol">%rbp</span>)</span><br><span class="line">movq   $<span class="number">0x28</span>, <span class="number">-0</span><span class="keyword">x</span><span class="number">18</span>(<span class="symbol">%rbp</span>)</span><br></pre></td></tr></table></figure><p>通过上面分析得出：</p><ul><li><p>p1的变量x内存地址：<code>rbp-0x10</code>；</p></li><li><p>p1的变量y内存地址：<code>rbp-0x8</code>；</p></li><li><p>且p1的两个变量相差<code>rbp-0x8-(rbp-0x10) = 8</code>个字节；</p></li><li><p>p1的内存地址是<code>rbp-0x10</code>。</p></li><li><p><code>0x1e</code>赋值给<code>rbp-0x20</code>的地址，和上面的<code>rax</code>赋值给<code>rbp-0x20</code>是同一个地址，并且仅仅修改了一次。</p></li></ul><p>所以，通过汇编也可以有力的证明值类型传递是深拷贝。</p><blockquote><p>扩展：<code>%edi</code>和<code>%esi</code>是局部变量，将来传给形参后会变成<code>%rdi</code>和<code>%rsi</code>。</p></blockquote><h3 id="1-3-汇编分析（全局变量）"><a href="#1-3-汇编分析（全局变量）" class="headerlink" title="1.3. 汇编分析（全局变量）"></a>1.3. 汇编分析（全局变量）</h3><p>第一步：示例代码：<br><img src="http://blog.idbeny.com/x2mma.png@normal" alt=""></p><p>第二步：查看汇编：<br><img src="http://blog.idbeny.com/x6667.png@normal" alt=""></p><p>进入<code>init</code>方法发现和上面的1.2分析基本一致，<code>rdi</code>给了<code>rax</code>，<code>rsi</code>给了<code>rdx</code>：<br><img src="http://blog.idbeny.com/8ws76.png@normal" alt=""></p><p>第三步：继续往后面看<code>call</code>之后的代码：<br><img src="http://blog.idbeny.com/ewc2i.png@normal" alt=""></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">rip就是下一条指令的地址。</span><br><span class="line">rax：<span class="number">10</span></span><br><span class="line">rdx：<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x100000ba4</span> &lt;+<span class="number">52</span>&gt;:  movq   %rax, <span class="number">0x664d</span>(%rip)</span><br><span class="line">把rax给了地址：<span class="number">0x100000bab</span> + <span class="number">0x664d</span> = <span class="number">0x1000071f8</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x100000bab</span> &lt;+<span class="number">59</span>&gt;:  movq   %rdx, <span class="number">0x664e</span>(%rip) </span><br><span class="line">把rdx给了地址：<span class="number">0x100000bb2</span> + <span class="number">0x664e</span> = <span class="number">0x100007200</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x100000bb2</span> &lt;+<span class="number">66</span>&gt;:  movq   %rcx, %rdi</span><br><span class="line"></span><br><span class="line">观察发现：rdx和rax刚好相差了<span class="number">0x100007200</span> - <span class="number">0x1000071f8</span> = <span class="number">8</span>个字节。</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">0x100000bce</span> &lt;+<span class="number">94</span>&gt;:  movq   <span class="number">0x6623</span>(%rip), %rax</span><br><span class="line">把地址 <span class="number">0x100000bd5</span> + <span class="number">0x6623</span> = <span class="number">0x1000071f8</span> 给了rax</span><br><span class="line"></span><br><span class="line"><span class="number">0x100000bd5</span> &lt;+<span class="number">101</span>&gt;: movq   %rax, <span class="number">0x662c</span>(%rip)</span><br><span class="line">把rax给了地址：<span class="number">0x100000bdc</span> + <span class="number">0x662c</span> = <span class="number">0x100007208</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x100000bdc</span> &lt;+<span class="number">108</span>&gt;: movq   <span class="number">0x661d</span>(%rip), %rax </span><br><span class="line">把地址 <span class="number">0x100000be3</span> + <span class="number">0x661d</span> = <span class="number">0x100007200</span> 给了rax</span><br><span class="line"></span><br><span class="line"><span class="number">0x100000be3</span> &lt;+<span class="number">115</span>&gt;: movq   %rax, <span class="number">0x6626</span>(%rip)</span><br><span class="line">把rax给了地址：<span class="number">0x100000bea</span> + <span class="number">0x6626</span> = <span class="number">0x100007210</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x100000bea</span> &lt;+<span class="number">122</span>&gt;: leaq   <span class="number">-0x18</span>(%rbp), %rdi</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------</span><br><span class="line">观察发现：</span><br><span class="line"><span class="number">0x1000071f8</span>就是上面的<span class="number">10</span>，<span class="number">0x100007200</span>就是上面的<span class="number">20</span></span><br><span class="line">就是说，</span><br><span class="line">把<span class="number">0x1000071f8</span>里面的值（<span class="number">10</span>）取出来赋值给了另外一块内存地址</span><br><span class="line"><span class="number">0x100007208</span>；</span><br><span class="line">把<span class="number">0x100007200</span>里面的值（<span class="number">20</span>）取出来赋值给了另外一块内存地址<span class="number">0x100007210</span></span><br><span class="line">并且，</span><br><span class="line"><span class="number">0x100007210</span>和<span class="number">0x100007208</span>相差<span class="number">8</span>个字节。</span><br></pre></td></tr></table></figure><p>通过上面的分析可以得出，p1的内存地址就是0x1000071f8，p2的内存地址是0x100007208。也可以证明值类型是深拷贝。</p><p><strong>经验：</strong></p><ul><li>内存地址格式为：<code>0x486f(%rip)</code>，一般是全局变量，全局区（数据段）；</li><li>内存地址格式为：<code>-0x8(%rbp)</code>，一般是局部变量，栈空间。</li><li>内存地址格式为：<code>0x10(%rax)</code>，一般是堆空间。</li></ul><p><strong>规律：</strong></p><ul><li>全局变量意味着内存地址是固定的；</li><li>局部变量的地址依赖<code>rbp</code>，而rbp右依赖于<code>rsp</code>，<code>rsp</code>是外部传进来的（即函数调用）。</li></ul><h3 id="1-4-赋值操作"><a href="#1-4-赋值操作" class="headerlink" title="1.4. 赋值操作"></a>1.4. 赋值操作</h3><p>在<strong>Swift</strong>标准库中，为了提升性能，<code>String</code>、<code>Array</code>、<code>Dictionary</code>、<code>Set</code>采取了<strong>Copy On Write</strong>的技术。</p><p><strong>Copy On Write：</strong> 当需要进行内存操作（写）时，才会进行深度拷贝。</p><p>对于标准库值类型的赋值操作，Swift能确保最佳性能，所以没必要为了保证最佳性能来避免赋值。</p><blockquote><p>建议：不需要修改的，尽量定义为<code>let</code>。</p></blockquote><h4 id="1-4-1-示例代码一（字符串）："><a href="#1-4-1-示例代码一（字符串）：" class="headerlink" title="1.4.1. 示例代码一（字符串）："></a>1.4.1. 示例代码一（字符串）：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> str1 = <span class="string">"idbeny"</span></span><br><span class="line"><span class="selector-tag">var</span> str2 = str1</span><br><span class="line">str2.append(<span class="string">"1024星球"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(str1)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(str2)</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> idbeny</span></span><br><span class="line"><span class="comment"> idbeny1024星球</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="1-4-2-示例代码二（数组）："><a href="#1-4-2-示例代码二（数组）：" class="headerlink" title="1.4.2. 示例代码二（数组）："></a>1.4.2. 示例代码二（数组）：</h4><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1</span><br><span class="line">arr2.append(<span class="string">"4"</span>)</span><br><span class="line">arr1[<span class="number">0</span>] = <span class="string">"one"</span></span><br><span class="line"><span class="keyword">print</span>(arr1)</span><br><span class="line"><span class="keyword">print</span>(arr2)</span><br><span class="line">/*</span><br><span class="line"> 输出：</span><br><span class="line"> [<span class="string">"one"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]</span><br><span class="line"> [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>]</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h4 id="1-4-3-示例代码三（字典）："><a href="#1-4-3-示例代码三（字典）：" class="headerlink" title="1.4.3. 示例代码三（字典）："></a>1.4.3. 示例代码三（字典）：</h4><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dict1 = [<span class="string">"name"</span>: <span class="string">"大奔"</span>, <span class="string">"age"</span>: <span class="number">20</span>] as [String : Any]</span><br><span class="line"><span class="keyword">var</span> dict2 = dict1</span><br><span class="line">dict1[<span class="string">"name"</span>] = <span class="string">"idbeny"</span></span><br><span class="line">dict2[<span class="string">"age"</span>] = <span class="number">30</span></span><br><span class="line"><span class="keyword">print</span>(dict1)</span><br><span class="line"><span class="keyword">print</span>(dict2)</span><br><span class="line">/*</span><br><span class="line"> 输出：</span><br><span class="line"> [<span class="string">"name"</span>: <span class="string">"idbeny"</span>, <span class="string">"age"</span>: <span class="number">20</span>]</span><br><span class="line"> [<span class="string">"name"</span>: <span class="string">"大奔"</span>, <span class="string">"age"</span>: <span class="number">30</span>]</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h2 id="二、引用类型"><a href="#二、引用类型" class="headerlink" title="二、引用类型"></a>二、引用类型</h2><p>引用赋值给<code>var</code>、<code>let</code>或者给函数传参，是将内存地址拷贝一份。</p><p>类似于制作一个文件的替身（快捷方式），指向的是同一个文件。属于浅拷贝（shallow copy）。</p><h3 id="2-1-内存分析"><a href="#2-1-内存分析" class="headerlink" title="2.1. 内存分析"></a>2.1. 内存分析</h3><p>示例代码：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Size &#123;</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">width</span>: Int</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">height</span>: Int</span><br><span class="line">    init(<span class="built_in">width</span>: Int, <span class="built_in">height</span>: Int) &#123;</span><br><span class="line">        self.<span class="built_in">width</span> = <span class="built_in">width</span></span><br><span class="line">        self.<span class="built_in">height</span> = <span class="built_in">height</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func test() &#123;</span><br><span class="line">    <span class="built_in">var</span> s1 = Size(<span class="built_in">width</span>: <span class="number">10</span>, <span class="built_in">height</span>: <span class="number">20</span>)</span><br><span class="line">    <span class="built_in">var</span> s2 = s1</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"s1指针的内存地址："</span>,Mems.ptr(ofVal: &amp;s1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"s1指针指向的内存地址："</span>,Mems.ptr(ofRef: s1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"s2指针的内存地址："</span>,Mems.ptr(ofVal: &amp;s2))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"s2指针指向的内存地址："</span>,Mems.ptr(ofRef: s2))</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> s1指针的内存地址： 0x00007ffeefbff478</span></span><br><span class="line"><span class="comment"> s1指针指向的内存地址： 0x000000010061fe80</span></span><br><span class="line"><span class="comment"> s2指针的内存地址： 0x00007ffeefbff470</span></span><br><span class="line"><span class="comment"> s2指针指向的内存地址： 0x000000010061fe80</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>示例代码在内存中的表现：<br><img src="http://blog.idbeny.com/p2874.png@normal" alt=""></p><blockquote><p>思考: <code>s2.width = 11; s2.height = 22</code>，代码执行后，<code>s1.width</code>和<code>s1.height</code>分别是多少？<br><code>s2.width == 11, s2.height == 22</code>，因为修改的是指针指向的内存地址保存的数据，而<code>s1</code>和<code>s2</code>指向的是同一块内存。</p></blockquote><h3 id="2-2-汇编分析"><a href="#2-2-汇编分析" class="headerlink" title="2.2. 汇编分析"></a>2.2. 汇编分析</h3><p>第一步：示例代码：<br><img src="http://blog.idbeny.com/ejyyz.png@normal" alt=""></p><p>第二步：查看初始化方法函数的返回值：<br><img src="http://blog.idbeny.com/zij6b.png@normal" alt=""></p><p>通过<code>lldb</code>指令得到<code>rax</code>的地址：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) <span class="keyword">register</span> <span class="built_in">read</span> rax</span><br><span class="line">输出：rax = <span class="number">0x0000000100599840</span></span><br></pre></td></tr></table></figure><p>再通过<strong>View Memory</strong>查看rax保存的数据有哪些：<br><img src="http://blog.idbeny.com/q82g1.png@normal" alt=""></p><p>第三步：找到<code>p1</code>和<code>p2</code>：<br><img src="http://blog.idbeny.com/hhier.png@normal" alt=""></p><p>函数地址<code>rax</code>给了局部变量<code>-0x10(%rbp)</code>，所以<code>-0x10(%rbp)</code>就是p1，同理<code>-0x28(%rbp)</code>是p2。</p><p>第四步：查看<code>s2</code>的<code>width</code>和<code>height</code>是如何被修改的：<br><img src="http://blog.idbeny.com/k36l8.png@normal" alt=""></p><ul><li>前面通过<code>movq   %rax, -0x28(%rbp)</code>把函数返回值<code>rax</code>给了<code>-0x28(%rbp)</code>；</li><li>之后又通过<code>movq   -0x28(%rbp), %rdx</code>把函数返回值给了<code>rdx</code>；</li><li>经过<code>(%rdx), %rsi</code>和<code>0x68(%rsi), %rsi</code>中转后，把<code>rdx</code>给了<code>rsi</code>；</li><li><code>$0xb, %edi</code>其实是把值11给了<code>edi</code>(即<code>rdx</code>)。</li></ul><p>所以，width和height其实修改的是同一块内存地址。</p><h3 id="2-3-赋值操作"><a href="#2-3-赋值操作" class="headerlink" title="2.3. 赋值操作"></a>2.3. 赋值操作</h3><p>示例代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span> &#123;</span></span><br><span class="line">    var <span class="built_in">width</span>: Int</span><br><span class="line">    var <span class="built_in">height</span>: Int</span><br><span class="line">    init(<span class="built_in">width</span>: Int, <span class="built_in">height</span>: Int) &#123;</span><br><span class="line">        self.<span class="built_in">width</span> = <span class="built_in">width</span></span><br><span class="line">        self.<span class="built_in">height</span> = <span class="built_in">height</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var s1 = Size(<span class="built_in">width</span>: <span class="number">10</span>, <span class="built_in">height</span>: <span class="number">20</span>)</span><br><span class="line">s1 = Size(<span class="built_in">width</span>: <span class="number">11</span>, <span class="built_in">height</span>: <span class="number">22</span>)</span><br></pre></td></tr></table></figure><p>在内存中的表现：<br><img src="http://blog.idbeny.com/d7wie.png@normal" alt=""></p><p>s1刚开始指向堆空间02，后又指向堆空间01。当堆空间02没有强指针指向时就会被销毁。</p><h2 id="三、值类型、引用类型的let"><a href="#三、值类型、引用类型的let" class="headerlink" title="三、值类型、引用类型的let"></a>三、值类型、引用类型的let</h2><p><img src="http://blog.idbeny.com/i02r0.png@normal" alt=""></p><p>使用let时，<br>结构体：</p><ul><li>结构体整体不能被覆盖；</li><li>结构体成员值也不能修改。</li></ul><p>引用类型：</p><ul><li>指针是不能重新指向新内存的。</li><li>指针指向的内存数据是可以修改的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 值类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VSCode】如何使用Vue的template模板</title>
      <link href="/2019/06/02/vscode-vuetemplate/"/>
      <url>/2019/06/02/vscode-vuetemplate/</url>
      
        <content type="html"><![CDATA[<p>使用Vue开发项目的时候经常会用到template模板，在webstorm中新建文件有VueComponent模板，那么VSCode是否也有这样的模板呢？有的，不过不像webstorm插件那样方便，在VSCode中需要自己配置，本质其实就是代码片段。</p><a id="more"></a><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p><img src="http://blog.idbeny.com/zdj9b.png@normal" alt="第一种"></p><p><img src="http://blog.idbeny.com/e7xtd.png@normal" alt="第二种"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>选择新建代码片段<br><img src="http://blog.idbeny.com/y48w2.png@normal" alt="创建代码片段"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>输入代码片段名称（例：VueTemplate）<br><img src="http://blog.idbeny.com/ul53p.png@normal" alt="创建代码片段"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>创建完成后看到一个空的模板文件<br><img src="http://blog.idbeny.com/z5ldf.png@normal" alt="创建代码片段"><br>把需要的模板代码写入到该文件即可</p><ul><li><code>/t</code>：一个<code>tab</code>缩进–具体看VSCode配置；</li><li><code>\n</code>：换行</li><li><code>prefix</code>：快捷键（创建代码的时候用到）<br><img src="http://blog.idbeny.com/ao82p.png@normal" alt="创建代码片段"></li></ul><p>具体代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Vue-Template"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"vuetem"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [</span><br><span class="line"><span class="string">"&lt;template&gt;\n"</span>,</span><br><span class="line"><span class="string">"&lt;/template&gt;\n"</span>,</span><br><span class="line"><span class="string">"&lt;script&gt;"</span>,</span><br><span class="line"><span class="string">"\texport default &#123;"</span>,</span><br><span class="line">  <span class="string">"\t\tname: 'App'"</span>,</span><br><span class="line"><span class="string">"\t&#125;"</span>,</span><br><span class="line"><span class="string">"&lt;/script&gt;\n"</span>,</span><br><span class="line"><span class="string">"&lt;style scoped&gt;\n"</span>,</span><br><span class="line"><span class="string">"&lt;/style&gt;"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"快速创建vue组件模板"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后，新建Vue文件后，在代码区输入之前定义的<code>prefix</code>快捷键然后按下<code>tab</code>即可（本例快捷键：<code>vuetem</code>）。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列六 - 结构体与类的本质区别</title>
      <link href="/2019/06/02/swift-syntax-struct-class/"/>
      <url>/2019/06/02/swift-syntax-struct-class/</url>
      
        <content type="html"><![CDATA[<p>在Swift标准库中，绝大多数的公开类型都是结构体，而枚举和类只占很小一部分。</p><a id="more"></a><h2 id="一、结构体"><a href="#一、结构体" class="headerlink" title="一、结构体"></a>一、结构体</h2><p>常见的Bool、Int、Double、String、Array、Dictionary等常见类型都是结构体。</p><p>自定义结构体：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="built_in">Date</span> &#123;</span><br><span class="line">    var <span class="built_in">year</span>: <span class="built_in">Int</span>;</span><br><span class="line">    var <span class="built_in">month</span>: <span class="built_in">Int</span>;</span><br><span class="line">    var <span class="built_in">day</span>: <span class="built_in">Int</span>;</span><br><span class="line">&#125;</span><br><span class="line">var <span class="built_in">date</span> = <span class="built_in">Date</span>(<span class="built_in">year</span>: <span class="number">2019</span>, <span class="built_in">month</span>: <span class="number">06</span>, <span class="built_in">day</span>: <span class="number">02</span>)</span><br></pre></td></tr></table></figure><p>所有结构体都有一个编译器自动生成的初始化器（initializer、初始化方法、构造器、构造方法）。</p><p><code>Date(year: 2019, month: 06, day: 02)</code>传入的是所有成员值，用来初始化所有成员（叫做存储属性）。</p><h3 id="1-1-结构体的初始化器"><a href="#1-1-结构体的初始化器" class="headerlink" title="1.1. 结构体的初始化器"></a>1.1. 结构体的初始化器</h3><p>编译器会根据情况，可能会为结构体生成多个初始化器，宗旨是：保证所有成员都有初始值。</p><p><img src="http://blog.idbeny.com/xcce0.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/kgazq.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/qnjwb.png@normal" alt=""></p><p>从上面案例可以看出，编译器帮助生成初始化器的条件就是：让所有存储属性都有值。</p><blockquote><p>思考：下面的代码能否编译通过？<br><img src="http://blog.idbeny.com/r2mz8.png@normal" alt=""><br>可选项都有个默认值<code>nil</code>，所以可以编译通过。</p></blockquote><h3 id="1-2-自定义初始化器"><a href="#1-2-自定义初始化器" class="headerlink" title="1.2. 自定义初始化器"></a>1.2. 自定义初始化器</h3><p>一旦在定义结构体时自定义了初始化器，编译器就不会再帮它自动生成其他初始化器。</p><p><img src="http://blog.idbeny.com/nxulr.png@normal" alt=""></p><h3 id="1-3-探究结构体初始化器的本质"><a href="#1-3-探究结构体初始化器的本质" class="headerlink" title="1.3. 探究结构体初始化器的本质"></a>1.3. 探究结构体初始化器的本质</h3><p>下面的两段代码是等效的：</p><p>代码一：</p><p><img src="http://blog.idbeny.com/8s4ml.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/unfbb.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/851pe.png@normal" alt=""></p><p>代码二：</p><p><img src="http://blog.idbeny.com/lifjq.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/p1s0d.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/a3f4c.png@normal" alt=""></p><p>经过对比发现，代码一和代码二的<code>init</code>方法完全一样。也就是说，存储属性的初始化是在初始化构造方法中完成的。</p><h3 id="1-4-结构体的内存结构"><a href="#1-4-结构体的内存结构" class="headerlink" title="1.4. 结构体的内存结构"></a>1.4. 结构体的内存结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct Point &#123;</span><br><span class="line">    <span class="selector-tag">var</span> x = <span class="number">10</span></span><br><span class="line">    <span class="selector-tag">var</span> y = <span class="number">20</span></span><br><span class="line">    <span class="selector-tag">var</span> <span class="selector-tag">b</span> = true</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">p</span> = Point()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.memStr(ofVal: &amp;p)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;Point&gt;.size)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;Point&gt;.stride)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;Point&gt;.alignment)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 0x000000000000000a 0x0000000000000014 0x0000000000000001</span></span><br><span class="line"><span class="comment"> 17</span></span><br><span class="line"><span class="comment"> 24</span></span><br><span class="line"><span class="comment"> 8</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>因为存储属性<code>x</code>和<code>y</code>各占8个字节（连续内存地址），<code>Bool</code>在内存中占用1个字节，所以<code>Point</code>一共占用17个字节，由于内存对齐是8，所以一共分配了24个字节。</p><h2 id="二、类"><a href="#二、类" class="headerlink" title="二、类"></a>二、类</h2><p>类的定义和结构体类似，但编译器并没有为类自动生成可以传入成员值的初始化器。</p><p>定义类：<br><img src="http://blog.idbeny.com/8iulq.png@normal" alt=""></p><p>如果存储属性没有初始值，无参的初始化器也不会自动生成：<br><img src="http://blog.idbeny.com/ll7cg.png@normal" alt=""></p><p>如果把上面的类换成结构体（<code>struct</code>）类型就不会报错：<br><img src="http://blog.idbeny.com/end2t.png@normal" alt=""></p><h3 id="2-1-类的初始化器"><a href="#2-1-类的初始化器" class="headerlink" title="2.1. 类的初始化器"></a>2.1. 类的初始化器</h3><p>如果类的所有成员都在定义的时候指定了初始值，编译器会为类生成无参的初始化器。</p><p>成员的初始化是在这个初始化器中完成的。</p><p>下面的两段代码是等效的：<br>代码一：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = Point()</span><br></pre></td></tr></table></figure><p>代码二：</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="symbol">x</span>: Int</span><br><span class="line">    <span class="keyword">var</span> <span class="symbol">y</span>: Int</span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="literal">self</span>.<span class="symbol">x</span> = <span class="number">0</span></span><br><span class="line">        <span class="literal">self</span>.<span class="symbol">y</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = Point()</span><br></pre></td></tr></table></figure><h2 id="三、结构体与类的本质区别"><a href="#三、结构体与类的本质区别" class="headerlink" title="三、结构体与类的本质区别"></a>三、结构体与类的本质区别</h2><p>结构体时值类型（枚举也是值类型），类是引用类型（指针类型）。</p><h3 id="3-1-内存分析结构体与类"><a href="#3-1-内存分析结构体与类" class="headerlink" title="3.1. 内存分析结构体与类"></a>3.1. 内存分析结构体与类</h3><p>示例代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Size &#123;</span><br><span class="line">    var width: Int = <span class="number">1</span></span><br><span class="line">    var height: Int = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Point &#123;</span><br><span class="line">    var x: Int = <span class="number">3</span></span><br><span class="line">    var y: Int = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func test<span class="literal">()</span> &#123;</span><br><span class="line">    var size = <span class="constructor">Size()</span></span><br><span class="line">    print(<span class="string">"class-size对象的内存"</span>,<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>mem<span class="constructor">Str(<span class="params">ofRef</span>: <span class="params">size</span>)</span>)</span><br><span class="line">    print(<span class="string">"class-size指针的内存地址"</span>,<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>ptr(ofVal: &amp;size))</span><br><span class="line">    print(<span class="string">"class-size对象的内存地址"</span>,<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>ptr(ofRef: size))</span><br><span class="line">    print(<span class="string">"class-size.width的内存地址"</span>,<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>ptr(ofVal: &amp;size.width))</span><br><span class="line">    print(<span class="string">"class-size.height的内存地址"</span>,<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>ptr(ofVal: &amp;size.height))</span><br><span class="line">    var point = <span class="constructor">Point()</span></span><br><span class="line">    print(<span class="string">"struct-point对象的内存"</span>,<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>mem<span class="constructor">Str(<span class="params">ofVal</span>: &amp;<span class="params">point</span>)</span>)</span><br><span class="line">    print(<span class="string">"struct-point的内存地址"</span>,<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>ptr(ofVal: &amp;point))</span><br><span class="line">    print(<span class="string">"struct-point.x的内存地址"</span>,<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>ptr(ofVal: &amp;point.x))</span><br><span class="line">    print(<span class="string">"struct-point.y的内存地址"</span>,<span class="module-access"><span class="module"><span class="identifier">Mems</span>.</span></span>ptr(ofVal: &amp;point.y))</span><br><span class="line">&#125;</span><br><span class="line">test<span class="literal">()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> class-size对象的内存 0x00000001000092a8 0x0000000200000002 0x0000000000000001 0x0000000000000002</span></span><br><span class="line"><span class="comment"> class-size指针的内存地址 0x00007ffeefbff4d0</span></span><br><span class="line"><span class="comment"> class-size对象的内存地址 0x000000010061fe80</span></span><br><span class="line"><span class="comment"> class-size.width的内存地址 0x000000010061fe90</span></span><br><span class="line"><span class="comment"> class-size.height的内存地址 0x000000010061fe98</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> struct-point对象的内存 0x0000000000000003 0x0000000000000004</span></span><br><span class="line"><span class="comment"> struct-point的内存地址 0x00007ffeefbff470</span></span><br><span class="line"><span class="comment"> struct-point.x的内存地址 0x00007ffeefbff470</span></span><br><span class="line"><span class="comment"> struct-point.y的内存地址 0x00007ffeefbff478</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>示例代码的在内存中：<br><img src="http://blog.idbeny.com/6om9p.png@normal" alt=""></p><p>经过分析可以看到，结构体的数据是直接存到栈空间的，类的实例是用指针指向堆空间的内存，指针在栈空间。上面示例代码中类的实例占用32个字节，其中前面16个字节分别存储指向类型信息和引用计数，后面16个字节才是真正用来存储数据的。而结构体占用的内存大小等于存储属性所占内存大小之和。</p><blockquote><p>注意：在<code>C</code>语言中，结构体是不能定义方法的，但是在<code>C++</code>和<code>Swift</code>中，可以在结构体和类中定义方法。在64bit环境中，指针占用8个字节。</p><blockquote><p>扩展：值类型（结构体、枚举）的内存根据所处的位置不同，内存的位置也不一样。例如，定义一个全局的结构体，内存在数据段（全局区）中；如果在函数中定义，内存存放在栈空间；如果在类中定义一个结构体，内存跟随对象在堆空间。</p></blockquote></blockquote><h3 id="3-2-汇编分析结构体与类"><a href="#3-2-汇编分析结构体与类" class="headerlink" title="3.2. 汇编分析结构体与类"></a>3.2. 汇编分析结构体与类</h3><p>在<code>Swift</code>中，创建类的实例对象，要向堆空间申请内存，大概流程如下：</p><ul><li><code>Class.__allocating_init()</code></li><li><code>libswiftCore.dylib:_swift_allocObject_</code></li><li><code>libswiftCore.dylib:swift_slowAlloc</code></li><li><code>libsystem_malloc.dylib:malloc</code></li></ul><p>在Mac，iOS中的<code>malloc</code>函数分配的内存大小总是16的倍数（为了做内存优化）。</p><p>通过<code>class_getInstanceSize</code>可以得知类的对象真正使用的内存大小。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="keyword">Int</span> = <span class="number">3</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="keyword">Int</span> = <span class="number">4</span></span><br><span class="line">    <span class="keyword">var</span> b: <span class="keyword">Bool</span> = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = Point()</span><br><span class="line"><span class="keyword">print</span>(class_getInstanceSize(type(of: p)))</span><br><span class="line"><span class="keyword">print</span>(class_getInstanceSize(Point.<span class="keyword">self</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 40</span></span><br><span class="line"><span class="comment"> 40</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>内存占用大小</strong> = 8(指向类型信息) + 8(引用计数) + 8(存储属性x) + 8(存储属性y) + 1(存储属性b) = 33；</p><p><strong>内存分配大小</strong> = 8(指向类型信息) + 8(引用计数) + 8(存储属性x) + 8(存储属性y) + Max(1(存储属性b), 8(内存对齐数)) = 40；</p><blockquote><p>扩展：如果底层调用了alloc或malloc函数，说明该对象存在堆空间，否则就是在栈空间。</p></blockquote><h4 id="3-2-1-汇编分析结构体"><a href="#3-2-1-汇编分析结构体" class="headerlink" title="3.2.1. 汇编分析结构体"></a>3.2.1. 汇编分析结构体</h4><p>第一步：创建结构体，打断点进入汇编：<br><img src="http://blog.idbeny.com/51dq2.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/5b0zy.png@normal" alt=""></p><p>第二步：在<code>callq...init()</code>函数处进入函数实现体（<code>lldb进入函数体指令:si</code>）：<br><img src="http://blog.idbeny.com/d8j20.png@normal" alt=""></p><p>结论：<code>rbp</code>就是局部变量，所以结构体创建的对象是在栈中存储的。</p><blockquote><p>扩展：一般情况下，<code>rbp</code>就是局部变量，<code>rip</code>是全局变量，<code>ret</code>是函数返回。</p></blockquote><h4 id="3-2-2-汇编分析类"><a href="#3-2-2-汇编分析类" class="headerlink" title="3.2.2. 汇编分析类"></a>3.2.2. 汇编分析类</h4><p>第一步：创建结构体，打断点进入汇编：<br><img src="http://blog.idbeny.com/9nokm.png@normal" alt=""></p><p>第二步：在<code>callq...__allocating_init()...</code>函数处打断点，进入函数体：<br><img src="http://blog.idbeny.com/2n4eo.png@normal" alt=""></p><p>第三步：在<code>callq...swift_allocObject</code>函数处打断点，进入函数体：<br><img src="http://blog.idbeny.com/r9b39.png@normal" alt=""></p><p>第四步：一直进入到<code>libswiftCore.dylib swift_allocObject:</code>中，在<code>callq...swift_slowAlloc</code>处打断点进入：<br><img src="http://blog.idbeny.com/tvgun.png@normal" alt=""></p><p>第五步：<code>malloc</code>出现了，这时候继续进入函数体：<br><img src="http://blog.idbeny.com/fx08o.png@normal" alt=""></p><p>第六步：最终，对象是在<code>libsystem_malloc.dylib</code>库中执行的<code>malloc</code>：<br><img src="http://blog.idbeny.com/tez95.png@normal" alt=""></p><p>经过上面分析，可以清晰的看到，对象是在堆空间存储的。</p><blockquote><p>扩展：在Mac、iOS中，创建对象都是调用的<code>libsystem_malloc.dylib</code>动态库。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift结构体 </tag>
            
            <tag> Swift类 </tag>
            
            <tag> 结构体和类的内存结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列五 - 可选项</title>
      <link href="/2019/05/20/swift-syntax-optional/"/>
      <url>/2019/05/20/swift-syntax-optional/</url>
      
        <content type="html"><![CDATA[<p>可选项，一般也叫可选类型，它允许将值设为<code>nil</code>。</p><a id="more"></a><h2 id="一、定义可选项"><a href="#一、定义可选项" class="headerlink" title="一、定义可选项"></a>一、定义可选项</h2><p>平时开发中，如果我们需要把一个变量置空时只需要把变量赋值一个<code>nil</code>即可：<br><img src="http://blog.idbeny.com/izl5l.png@normal" alt=""></p><p>上面尝试后不行，那怎么把一个变量置空呢？<br>答案：把变量设置可选类型即可</p><p>如何定义可选类型（可选项）？</p><ul><li>在类型后面加个问号<code>?</code>；</li><li>定义可选项后变量默认就是<code>nil</code>。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age: <span class="type">Int?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="type">Int?</span> = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure><p>案例：数组越界</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Int?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> || array.<span class="built_in">count</span> &lt;= index &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array[index]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">get</span>(<span class="number">4</span>)) <span class="comment">// 输出：nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">get</span>(<span class="number">2</span>)) <span class="comment">// 输出：Optional(20)</span></span><br></pre></td></tr></table></figure><p>注意：上面代码最后一行输入<code>Optional(20)</code>， 为什么会被加上<code>Optional</code>，这样还能作为一个<code>Int</code>进行运算么？当然不可以，因为被加上<code>Optional</code>后就是可选类型了，如果要使用里面的值，需要进行强制解包。</p><h2 id="二、强制解包"><a href="#二、强制解包" class="headerlink" title="二、强制解包"></a>二、强制解包</h2><p>可选项是对其他类型的一层包装，可以将它理解为一个盒子：</p><ul><li>如果为<code>nil</code>，那么它就是个空盒子；</li><li>如果不为<code>nil</code>，那么盒子里装的就是<strong>被包装类型的数据</strong>；</li><li>如果要从可选项中取出被包装的数据（将盒子里装的东西取出来），需要使用<strong>感叹号</strong>(<code>!</code>)进行强制解包；</li><li>在取出的可选类型的变量后面加上<code>!</code>即可。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Int?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> || array.<span class="built_in">count</span> &lt;= index &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array[index]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> num1 = <span class="keyword">get</span>(<span class="number">1</span>)! </span><br><span class="line"><span class="keyword">let</span> num2 = <span class="keyword">get</span>(<span class="number">2</span>)!</span><br><span class="line"><span class="keyword">let</span> result = num1 + num2</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment">// 输出：35</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="keyword">get</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="keyword">get</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> result = num1! + num2!</span><br></pre></td></tr></table></figure><p>如果对值为<code>nil</code>的可选项（空盒子）进行强制解包，将会产生运行时错误</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> age: Int?</span><br><span class="line"><span class="built_in">let</span> <span class="built_in">num</span> = age!</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://blog.idbeny.com/tbfpa.png@normal" alt=""></p><p>解决办法：</p><ul><li>判断可选项是否为<code>nil</code>；</li><li>使用可选项绑定来判断可选项是否包含值。</li></ul><h2 id="三、可选项绑定"><a href="#三、可选项绑定" class="headerlink" title="三、可选项绑定"></a>三、可选项绑定</h2><p>如果包含值就自动解包，把值赋给一个临时的常量（<code>let</code>）或变量（<code>var</code>），并返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为nil</span></span><br><span class="line"><span class="variable">let</span> <span class="variable">number</span> = <span class="function"><span class="title">Int</span>(<span class="string">"123kkk"</span>)</span></span><br><span class="line"><span class="variable"><span class="keyword">if</span></span> <span class="variable">number</span> <span class="variable">!</span>= <span class="variable"><span class="literal">nil</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="string">"转换成功：\(number!)"</span>)</span></span><br><span class="line">&#125; <span class="variable"><span class="keyword">else</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="string">"转换失败"</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：转换失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用可选项绑定</span></span><br><span class="line"><span class="variable"><span class="keyword">if</span></span> <span class="variable">let</span> <span class="variable">number</span> = <span class="function"><span class="title">Int</span>(<span class="string">"123"</span>) &#123;</span></span><br><span class="line"><span class="function">    <span class="title">print</span>(<span class="string">"转换成功：\(number)"</span>)</span></span><br><span class="line">&#125; <span class="variable"><span class="keyword">else</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="string">"转换失败"</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：转换成功：123</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>注意：<code>number</code>的作用域仅限后面紧跟的大括号。</p><p>当一个变量是可选项时，Xcode会提示：<br><img src="http://blog.idbeny.com/nf1yd.png@normal" alt=""></p><p>示例一：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">let</span> <span class="built_in">first</span> = Int(<span class="string">"12"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">let</span> <span class="built_in">second</span> = Int(<span class="string">"34"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">first</span> &lt; <span class="built_in">second</span> &amp;&amp; <span class="built_in">second</span> &lt; <span class="number">100</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"\(first) &lt; \(second) &lt; 100"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：12 &lt; 34 &lt; 100</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>示例一的等价写法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">let</span> <span class="built_in">first</span> = Int(<span class="string">"12"</span>),</span><br><span class="line">   <span class="built_in">let</span> <span class="built_in">second</span> = Int(<span class="string">"34"</span>),</span><br><span class="line">   <span class="built_in">first</span> &lt; <span class="built_in">second</span> &amp;&amp; <span class="built_in">second</span> &lt; <span class="number">100</span>  &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(first) &lt; \(second) &lt; 100"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：12 &lt; 34 &lt; 100</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>注意：可选项绑定在if条件中，只能使用逗号进行隔开。</p><p><strong>while循环中使用可选项绑定</strong><br>场景：遍历数组，将遇到的整数都加起来，如果遇到负数或者非数字，停止遍历。</p><p>示例：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> strs = [<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"-20"</span>, <span class="string">"ab"</span>, <span class="string">"30"</span>]</span><br><span class="line"><span class="built_in">var</span> index = <span class="number">0</span></span><br><span class="line"><span class="built_in">var</span> <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">let</span> <span class="built_in">num</span> = Int(strs[index]), <span class="built_in">num</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">sum</span> += <span class="built_in">num</span></span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>);</span><br></pre></td></tr></table></figure><p>输出：30</p><h2 id="四、空合并运算符"><a href="#四、空合并运算符" class="headerlink" title="四、空合并运算符??"></a>四、空合并运算符??</h2><p>Swift对空合并运算符的定义：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ?? &lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T?</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T?</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ?? &lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span></span><br></pre></td></tr></table></figure><p><strong>格式：</strong> <code>a ?? b</code></p><ul><li>a是可选项；</li><li>b是可选项或者不是可选项；</li><li>b和a的存储类型必须相同；</li><li>如果a不为nil，就返回a；<br>如果a为nil，就返回b；<br>如果b不是可选项，返回a时会自动解包。</li></ul><p>示例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a ?? b</span><br><span class="line"><span class="comment">// c是Int?, Optional(1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a ?? b</span><br><span class="line"><span class="comment">// c是Int?, Optional(2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a ?? b</span><br><span class="line"><span class="comment">// c是Int?, nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a ?? b</span><br><span class="line"><span class="comment">// c是Int, 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a ?? b</span><br><span class="line"><span class="comment">// c是Int, 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价写法</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span>: <span class="type">Int</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tmp = a &#123;</span><br><span class="line">    <span class="built_in">c</span> = tem</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">c</span> = b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面示例可以看到，空合并运算符返回什么类型，取决于运算符后面的类型。</p><h3 id="4-1-多个-一起使用"><a href="#4-1-多个-一起使用" class="headerlink" title="4.1. 多个??一起使用"></a>4.1. 多个??一起使用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a ?? b ?? <span class="number">3</span></span><br><span class="line"><span class="comment">// c是Int, 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a ?? b ?? <span class="number">3</span></span><br><span class="line"><span class="comment">// c是Int, 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a ?? b ?? <span class="number">3</span></span><br><span class="line"><span class="comment">// c是Int, 3</span></span><br></pre></td></tr></table></figure><h3 id="4-2-根if-let配合使用"><a href="#4-2-根if-let配合使用" class="headerlink" title="4.2. ??根if let配合使用"></a>4.2. ??根if let配合使用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="built_in">c</span> = a ?? b &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类似于if a != nil || b != nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="built_in">c</span> = a,</span><br><span class="line">   <span class="keyword">let</span> d = b &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">c</span>);</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类似于if a != nil &amp;&amp; b != nil</span></span><br></pre></td></tr></table></figure><h2 id="五、guard的使用"><a href="#五、guard的使用" class="headerlink" title="五、guard的使用"></a>五、guard的使用</h2><p>格式：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">guard 条件 <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="regexp">// ToDo</span></span><br><span class="line"><span class="regexp">    退出当前作用域</span></span><br><span class="line"><span class="regexp">    //</span> <span class="keyword">return</span>、<span class="keyword">break</span>、<span class="keyword">continue</span>、<span class="keyword">throw</span> error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>当条件为<code>false</code>时，执行大括号里面的代码；当条件为<code>true</code>时，就会跳过<code>guard</code>语句；</li><li><code>guard</code>语句必须有退出指令；</li><li><code>guard</code>语句适合用来”提前退出“；</li><li>当使用<code>guard</code>语句进行可选项绑定时，绑定的常量（let）、变量（var）也能在外层作用域中使用。</li></ul><p>简单登录案例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(<span class="number">_</span> info: [String : String])</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> username: <span class="type">String</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> tmp = info[<span class="string">"username"</span>] &#123;</span><br><span class="line">        username = tmp</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请输入用户名"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> password: <span class="type">String</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> tmp = info[<span class="string">"password"</span>] &#123;</span><br><span class="line">        password = tmp</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请输入密码"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"用户名：\(username), 密码：\(password), 登陆ing"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">login([<span class="string">"username"</span>: <span class="string">"idbeny"</span>, <span class="string">"password"</span>: <span class="string">"123456"</span>])</span><br><span class="line">login([<span class="string">"password"</span>: <span class="string">"123456"</span>])</span><br><span class="line">login([<span class="string">"username"</span>: <span class="string">"idbeny"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 用户名：idbeny, 密码：123456, 登陆ing</span></span><br><span class="line"><span class="comment"> 请输入用户名</span></span><br><span class="line"><span class="comment"> 请输入密码</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>使用<strong>guard</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(<span class="number">_</span> info: [String : String])</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> username = info[<span class="string">"username"</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请输入用户名"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> password = info[<span class="string">"password"</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请输入密码"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"用户名：\(username), 密码：\(password), 登陆ing"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">login([<span class="string">"username"</span>: <span class="string">"idbeny"</span>, <span class="string">"password"</span>: <span class="string">"123456"</span>])</span><br><span class="line">login([<span class="string">"password"</span>: <span class="string">"123456"</span>])</span><br><span class="line">login([<span class="string">"username"</span>: <span class="string">"idbeny"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 用户名：idbeny, 密码：123456, 登陆ing</span></span><br><span class="line"><span class="comment"> 请输入用户名</span></span><br><span class="line"><span class="comment"> 请输入密码</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>分析：通过上面的<code>if</code>和<code>guard</code>案例可以看出，某些场景下<code>guard</code>更简洁。</p><blockquote><p>扩展：字典取值如果key存在返回可选类型的value，不存在就返回nil；数组取值如果下标存在返回对应的值（不是可选类型），否则直接报错（越界）。</p></blockquote><h2 id="六、隐式解包"><a href="#六、隐式解包" class="headerlink" title="六、隐式解包"></a>六、隐式解包</h2><p>在某些情况下，可选项一旦被设定值之后，就会一直拥有值。在这种情况下，可以去掉检查，也不必每次访问的时候都进行解包，因为他能确定每次访问的时候都有值。</p><p>可以在类型后面加个感叹号<code>!</code>定义一个隐式解包的可选项。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1: Int! = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> num2: Int = num1</span><br><span class="line"><span class="keyword">if</span> num1 != nil &#123;</span><br><span class="line">    <span class="keyword">print</span>(num1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> num3 = num1 &#123;</span><br><span class="line">    <span class="keyword">print</span>(num3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 10</span></span><br><span class="line"><span class="comment"> 10</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>在类型后面加上<code>!</code>也代表是可选类型，同<code>?</code>一样，只是加上感叹号后会自动解包，不需要强制解包。</p><p>如果<code>num1</code>有值，就会返回<code>10</code>，而不是<code>Optional(10)</code>；如果<code>num1</code>为空，就会报错，因为对空的可选类型进行强制解包是会报错的。</p><p>所以，如果能够隐式解包的应用场景就是能够确保可选项一定是有值的，否则就会容易出错。同时建议少用隐式解包（既然不能非空，直接赋值就可以了，不需要包装成可选类型）。</p><h2 id="七、字符串插值"><a href="#七、字符串插值" class="headerlink" title="七、字符串插值"></a>七、字符串插值</h2><p>可选项在字符串插值或者直接打印时，编译器会发出警告。</p><p><img src="http://blog.idbeny.com/9ksgs.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/ahmxg.png@normal" alt=""></p><p>至少有3种方法消除警告（编译器有给出相关提示）：</p><ul><li><p>强制解包</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"age：\(age!)"</span>)</span></span></span><br><span class="line"><span class="comment">// 输出：age：10</span></span><br></pre></td></tr></table></figure></li><li><p>字符串描述（不会解包）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"age：\(String(describing: age))"</span>)</span></span></span><br><span class="line"><span class="comment">// 输出：age：Optional(10)</span></span><br></pre></td></tr></table></figure></li><li><p>空合并运算符</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"age：\(age ?? 0)"</span>)</span></span></span><br><span class="line"><span class="comment">// 输出：age：10</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="八、多重可选项"><a href="#八、多重可选项" class="headerlink" title="八、多重可选项"></a>八、多重可选项</h2><p>格式：<code>类型后面多个?</code><br>案例一：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">n</span><span class="symbol">um1:</span> <span class="built_in">Int</span>? = <span class="number">10</span></span><br><span class="line"><span class="built_in">var</span> <span class="built_in">n</span><span class="symbol">um2:</span> <span class="built_in">Int</span>?? = num1</span><br><span class="line"><span class="built_in">var</span> <span class="built_in">n</span><span class="symbol">um3:</span> <span class="built_in">Int</span>?? = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(num2 == num3) // <span class="built_in">true</span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> num1结构：</span><br><span class="line"> —— <span class="built_in">Int</span>?</span><br><span class="line">     —— <span class="built_in">Int</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> num2结构：</span><br><span class="line"> —— <span class="built_in">Int</span>??</span><br><span class="line">     —— <span class="built_in">Int</span>?</span><br><span class="line">         —— <span class="built_in">Int</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> num3结构：</span><br><span class="line"> —— <span class="built_in">Int</span>??</span><br><span class="line">     —— <span class="built_in">Int</span>?</span><br><span class="line">         —— <span class="built_in">Int</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> num2和num3是等效的</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>案例二：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">n</span><span class="symbol">um1:</span> <span class="built_in">Int</span>? = nil</span><br><span class="line"><span class="built_in">var</span> <span class="built_in">n</span><span class="symbol">um2:</span> <span class="built_in">Int</span>?? = num1</span><br><span class="line"><span class="built_in">var</span> <span class="built_in">n</span><span class="symbol">um3:</span> <span class="built_in">Int</span>?? = nil</span><br><span class="line"></span><br><span class="line">print(num2 == num3) // <span class="built_in">false</span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> num1结构：</span><br><span class="line"> —— <span class="built_in">Int</span>?</span><br><span class="line"></span><br><span class="line"> num2结构：</span><br><span class="line"> —— <span class="built_in">Int</span>??</span><br><span class="line">     —— <span class="built_in">Int</span>?</span><br><span class="line"></span><br><span class="line"> num3结构：</span><br><span class="line"> —— <span class="built_in">Int</span>??</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>可以使用<code>lldb</code>指令查看上面案例的区别：<code>frame variable -R</code> 或 <code>fr v -R</code>。</p><p>查看案例一：<br><img src="http://blog.idbeny.com/mcjw6.png@normal" alt=""></p><p>查看案例二：<br><img src="http://blog.idbeny.com/an936.png@normal" alt=""></p><p>如果是<code>none</code>，就代表是一个空盒子，后面的内容就不需要关心了。<br>如果是<code>some</code>，代表装有值的盒子。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift可选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列四 - 枚举</title>
      <link href="/2019/05/11/swift-syntax-enum/"/>
      <url>/2019/05/11/swift-syntax-enum/</url>
      
        <content type="html"><![CDATA[<p>适度给类型起别名能够让代码更加易懂，开发效率更高，可维护性更好。</p><a id="more"></a><h2 id="一、typealias-别名"><a href="#一、typealias-别名" class="headerlink" title="一、typealias(别名)"></a>一、typealias(别名)</h2><p><code>typealias</code>用来给类型起别名。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> Byte = <span class="built_in">Int8</span></span><br><span class="line"><span class="keyword">typealias</span> Short = <span class="built_in">Int16</span></span><br><span class="line"><span class="keyword">typealias</span> Long = <span class="built_in">Int64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="built_in">Date</span> = (year: <span class="built_in">Int</span>, month: <span class="built_in">Int</span>, day: <span class="built_in">Int</span>)</span><br><span class="line">func test(_ date: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    print(date.year)</span><br><span class="line">&#125;</span><br><span class="line">test((<span class="number">2019</span>, <span class="number">6</span>, <span class="number">25</span>))</span><br><span class="line">// 输出：<span class="number">2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> IntFn = (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span></span><br><span class="line">func diff(v1: <span class="built_in">Int</span>, v2: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">    v1 - v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn: IntFn = diff</span><br><span class="line">fn(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">// 输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Void</code>的本质就是空元祖的别名：<code>public typealias Void = ()</code></p></blockquote><h2 id="二、枚举"><a href="#二、枚举" class="headerlink" title="二、枚举"></a>二、枚举</h2><p>Swift枚举和C/OC语言不一样，以前写OC的时候枚举本质是<code>int</code>类型，但Swift中枚举可以是多类型的。</p><p>官方建议：枚举名称使用大写，成员使用小写。</p><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1. 基本用法"></a>2.1. 基本用法</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义枚举</span></span><br><span class="line"><span class="keyword">enum</span> YBColor &#123;</span><br><span class="line">    <span class="keyword">case</span> white</span><br><span class="line">    <span class="keyword">case</span> black</span><br><span class="line">    <span class="keyword">case</span> gray</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于上面的代码</span></span><br><span class="line"><span class="comment">//enum YBColor &#123;</span></span><br><span class="line"><span class="comment">//    case white, black, gray</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">var <span class="built_in">color</span> = YBColor.white</span><br><span class="line"><span class="built_in">color</span> = YBColor.black</span><br><span class="line"><span class="built_in">color</span> = .gray <span class="comment">// 简写（因为此时已经确定变量color是YBColor类型）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">color</span>) <span class="comment">// 输出：gray</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环控制</span></span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">color</span> &#123;</span><br><span class="line"><span class="keyword">case</span> .white:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"white"</span>)</span><br><span class="line"><span class="keyword">case</span> .black:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"black"</span>)</span><br><span class="line"><span class="keyword">case</span> .gray:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"gray"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-关联值"><a href="#2-2-关联值" class="headerlink" title="2.2. 关联值"></a>2.2. 关联值</h3><p>有时将<strong>枚举的成员值</strong>跟<strong>其他类型的值</strong>关联存储在一起，会非常有用.</p><p>案例：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Score &#123;</span><br><span class="line">    <span class="keyword">case</span> points(Int)</span><br><span class="line">    <span class="keyword">case</span> grade(Character)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值表达</span></span><br><span class="line">var score = Score.points(<span class="number">96</span>)</span><br><span class="line"><span class="comment">// 等级/字符表达</span></span><br><span class="line">score = .grade(<span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Date &#123;</span><br><span class="line">    <span class="keyword">case</span> digit(<span class="built_in">year</span>: Int, <span class="built_in">month</span>: Int, <span class="built_in">day</span>: Int)</span><br><span class="line">    <span class="keyword">case</span> string(<span class="keyword">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var date = Date.digit(<span class="built_in">year</span>: <span class="number">2019</span>, <span class="built_in">month</span>: <span class="number">06</span>, <span class="built_in">day</span>: <span class="number">25</span>)</span><br><span class="line">date = .string(<span class="string">"2019-06-25"</span>)</span><br><span class="line"><span class="keyword">switch</span> date &#123;</span><br><span class="line"><span class="keyword">case</span> .digit(let <span class="built_in">year</span>, let <span class="built_in">month</span>, let <span class="built_in">day</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">year</span>, <span class="built_in">month</span>, <span class="built_in">day</span>, separator:<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">case</span> let .string(value):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 2019-06-25</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p><code>let</code>写在枚举成员前面意味着枚举成员形参只能是常量，放在形参里面可以自定义选择是<code>var</code>还是<code>let</code>。</p></blockquote><h3 id="2-2-原始值"><a href="#2-2-原始值" class="headerlink" title="2.2. 原始值"></a>2.2. 原始值</h3><p>枚举成员可以使用相同类型的默认值预先关联，这个默认值叫做：原始值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> : <span class="title">Character</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> up = <span class="string">"w"</span></span><br><span class="line">    <span class="keyword">case</span> down = <span class="string">"s"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">left</span> = <span class="string">"a"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span> = <span class="string">"d"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> direction = <span class="type">Direction</span>.up</span><br><span class="line"><span class="built_in">print</span>(direction) <span class="comment">// 输出：up</span></span><br><span class="line"><span class="built_in">print</span>(direction.rawValue) <span class="comment">// 输出：w</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Direction</span>.down.rawValue) <span class="comment">// 输出：s</span></span><br></pre></td></tr></table></figure><p>如果枚举的原始值类型是<code>Int</code>、<code>String</code>，Swift会自动分配原始值：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> : <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> up = <span class="string">"up"</span></span><br><span class="line">    <span class="keyword">case</span> down = <span class="string">"down"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">left</span> = <span class="string">"left"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span> = <span class="string">"right"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> direction = <span class="type">Direction</span>.up</span><br><span class="line"><span class="built_in">print</span>(direction) <span class="comment">// 输出：up</span></span><br><span class="line"><span class="built_in">print</span>(direction.rawValue) <span class="comment">// 输出：up</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Direction</span>.down.rawValue) <span class="comment">// 输出：down</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> : <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> up, down, <span class="keyword">left</span>, <span class="keyword">right</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> direction = <span class="type">Direction</span>.up</span><br><span class="line"><span class="built_in">print</span>(direction) <span class="comment">// 输出：up</span></span><br><span class="line"><span class="built_in">print</span>(direction.rawValue) <span class="comment">// 输出：up</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Direction</span>.down.rawValue) <span class="comment">// 输出：down</span></span><br></pre></td></tr></table></figure><p>Int类型，成员值自增（类似C/OC枚举）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enum Season : Int &#123;</span><br><span class="line">    case spring, summer, autumn, winter</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.spring.rawValue)</span></span> <span class="comment">// 输出：0</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.summer.rawValue)</span></span> <span class="comment">// 输出：1</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.autumn.rawValue)</span></span> <span class="comment">// 输出：2</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.winter.rawValue)</span></span> <span class="comment">// 输出：3</span></span><br><span class="line"></span><br><span class="line">enum Season : Int &#123;</span><br><span class="line">    case spring = <span class="number">1</span>, summer, autumn = <span class="number">4</span>, winter</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.spring.rawValue)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.summer.rawValue)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.autumn.rawValue)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.winter.rawValue)</span></span></span><br></pre></td></tr></table></figure><h3 id="2-3-递归枚举"><a href="#2-3-递归枚举" class="headerlink" title="2.3. 递归枚举"></a>2.3. 递归枚举</h3><ul><li>关键字：<code>indirect</code>；</li><li>可以把需要递归枚举的成员前面加<code>indirect</code>，也可以为了方便直接加到枚举定义前面。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">indirect</span> <span class="class"><span class="keyword">enum</span> <span class="title">ArithExpr</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> sum(<span class="type">ArithExpr</span>, <span class="type">ArithExpr</span>)</span><br><span class="line">    <span class="keyword">case</span> diff(<span class="type">ArithExpr</span>, <span class="type">ArithExpr</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//enum ArithExpr &#123;</span></span><br><span class="line"><span class="comment">//    case number(Int)</span></span><br><span class="line"><span class="comment">//    indirect case sum(ArithExpr, ArithExpr)</span></span><br><span class="line"><span class="comment">//    indirect case diff(ArithExpr, ArithExpr)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> five = <span class="type">ArithExpr</span>.number(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> four = <span class="type">ArithExpr</span>.number(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> two = <span class="type">ArithExpr</span>.number(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> sum = <span class="type">ArithExpr</span>.sum(five, four)</span><br><span class="line"><span class="keyword">let</span> diff = <span class="type">ArithExpr</span>.diff(sum, two)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(<span class="number">_</span> expr: ArithExpr)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> expr &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .number(value):</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .sum(<span class="keyword">left</span>, <span class="keyword">right</span>):</span><br><span class="line">        <span class="keyword">return</span> cal(<span class="keyword">left</span>) + cal(<span class="keyword">right</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .diff(<span class="keyword">left</span>, <span class="keyword">right</span>):</span><br><span class="line">        <span class="keyword">return</span> cal(<span class="keyword">left</span>) - cal(<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cal(diff) <span class="comment">// 输出：7</span></span><br></pre></td></tr></table></figure><h2 id="三、枚举的内存布局"><a href="#三、枚举的内存布局" class="headerlink" title="三、枚举的内存布局"></a>三、枚举的内存布局</h2><p>在Swift中查看内存占用大小及对齐方式使用枚举：<code>MemoryLayout</code>：</p><ul><li>size：实际用到的空间大小</li><li>stride：分配占用的空间大小</li><li>alignment：内存对齐方式</li></ul><p>下面的意思是，<code>Int</code>在内存中占用8个字节，内存对齐数是8：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MemoryLayout&lt;<span class="keyword">Int</span>&gt;.<span class="keyword">size</span> <span class="comment">// 输出：8</span></span><br><span class="line">MemoryLayout&lt;<span class="keyword">Int</span>&gt;.stride <span class="comment">// 输出：8</span></span><br><span class="line">MemoryLayout&lt;<span class="keyword">Int</span>&gt;.alignment <span class="comment">// 输出：8</span></span><br></pre></td></tr></table></figure><p>查看枚举占用内存：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Password</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> number(Int, Int, Int, Int)</span><br><span class="line">    <span class="keyword">case</span> other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var pwd = Password.number(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">MemoryLayout.size(<span class="symbol">ofValue:</span> pwd) /<span class="regexp">/ 输出：33</span></span><br><span class="line"><span class="regexp">MemoryLayout.stride(ofValue: pwd) /</span><span class="regexp">/ 输出：40</span></span><br><span class="line"><span class="regexp">MemoryLayout.alignment(ofValue: pwd) /</span><span class="regexp">/ 输出：8</span></span><br></pre></td></tr></table></figure><p><strong>为什么是占用内存大小是33，而分配了40？</strong></p><ul><li><code>number(Int, Int, Int, Int)</code>占用32个字节，<code>other</code>占用1个字节，所以一共只需要占用33个字节就够用了</li><li>因为内存对齐数是8，所以分配内存的时候只能是8的倍数，而33个字节不够8的倍数，所以往高位补齐后就是40了</li></ul><p><strong>为什么<code>other</code>占用1个字节呢？</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> spring, summer, autumn, winter</span><br><span class="line">&#125;</span><br><span class="line">MemoryLayout&lt;Season&gt;.size /<span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.stride /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.alignment /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 限定类型</span></span><br><span class="line"><span class="regexp">enum Season: String &#123;</span></span><br><span class="line"><span class="regexp">    case spring, summer, autumn, winter</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.size /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.stride /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.alignment /</span><span class="regexp">/ 输出：1</span></span><br></pre></td></tr></table></figure><ul><li>上面代码可以看出不管类型是什么占用的内存大小都是1个字节；</li><li>其实本质上是关联值和原始值的区别。</li></ul><p><strong>结论一：</strong> 把传进去的关联值直接存储到枚举变量内存里面的，所以枚举变量是关联值的话，内存是一定和将要存储的关联值大小有关。</p><p>为了证实结论一，比较下面的两个不同类型的关联值：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Password</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> number(<span class="keyword">Int</span>, <span class="keyword">Int</span>, <span class="keyword">Int</span>, <span class="keyword">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MemoryLayout&lt;Password&gt;.size <span class="comment">// 输出：33</span></span><br><span class="line">MemoryLayout&lt;Password&gt;.stride <span class="comment">// 输出：40</span></span><br><span class="line">MemoryLayout&lt;Password&gt;.alignment <span class="comment">// 输出：8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Password</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> number(<span class="keyword">String</span>, <span class="keyword">String</span>, <span class="keyword">String</span>, <span class="keyword">String</span>)</span><br><span class="line">    <span class="keyword">case</span> other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MemoryLayout&lt;Password&gt;.size <span class="comment">// 输出：65</span></span><br><span class="line">MemoryLayout&lt;Password&gt;.stride <span class="comment">// 输出：72</span></span><br><span class="line">MemoryLayout&lt;Password&gt;.alignment <span class="comment">// 输出：8</span></span><br></pre></td></tr></table></figure><p><strong>结论二：</strong> 原始值固定后是不能修改的，内存中只会把对应的成员值（序号）存下来，这时候1个字节足够用了，和枚举类型无关（不管是Int还是String枚举都是占用一个字节）。</p><p>分析下面代码：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span>: <span class="title">Int</span> &#123;</span></span><br><span class="line">    /<span class="regexp">/ 序号0            序号1       序号2        序号3</span></span><br><span class="line"><span class="regexp">    case spring = 1, summer = 2, autumn = 3, winter = 4</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var season1 = Season.spring</span></span><br><span class="line"><span class="regexp">var season2 = Season.spring</span></span><br><span class="line"><span class="regexp">var season3 = Season.spring</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.size /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.stride /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.alignment /</span><span class="regexp">/ 输出：1</span></span><br></pre></td></tr></table></figure><blockquote><p>疑问：成员值在内存中只占用1个字节，Int或String的原始值是怎么存下的？rawValue其实是另外一块地址。</p></blockquote><ul><li>关联值才会存储到枚举变量中，原始值不会占用枚举变量内存</li><li>我们可以通过内存地址看到前面的字节被关联值占用，关联值后面有一个字节是保存成员值<ul><li>1个字节存储成员值（如果只有一个枚举成员则不占用内存）</li><li>N个字节存储关联值（N取占用内存最大的关联值），任何一个case的关联值都共用这N个字节（共用体）</li><li>剩余字节按照对齐数补齐</li></ul></li></ul><blockquote><p><code>Switch</code>的<code>case</code>其实是比较枚举的成员值的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列三 - 函数</title>
      <link href="/2019/05/10/swift-syntax-function/"/>
      <url>/2019/05/10/swift-syntax-function/</url>
      
        <content type="html"><![CDATA[<p>函数在任何语言中都是存在的，Swift中函数更加灵活。</p><a id="more"></a><h2 id="一、函数的定义"><a href="#一、函数的定义" class="headerlink" title="一、函数的定义"></a>一、函数的定义</h2><h3 id="1-1-有返回值（形参默认是let，也只能是let）"><a href="#1-1-有返回值（形参默认是let，也只能是let）" class="headerlink" title="1.1. 有返回值（形参默认是let，也只能是let）"></a>1.1. 有返回值（形参默认是let，也只能是let）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pi</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(pi()) <span class="comment">// 输出：3.14</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1: Int, v2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(sum(v1: <span class="number">10</span>, v2: <span class="number">20</span>)) <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><h3 id="1-2-无返回值"><a href="#1-2-无返回值" class="headerlink" title="1.2. 无返回值"></a>1.2. 无返回值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span> -&gt; <span class="title">Void</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span> -&gt; <span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line">hello() <span class="comment">// 输出：hello</span></span><br></pre></td></tr></table></figure><h3 id="1-3-如果整个函数体是一个单一表达式，那么函数会隐式返回这个表达式"><a href="#1-3-如果整个函数体是一个单一表达式，那么函数会隐式返回这个表达式" class="headerlink" title="1.3. 如果整个函数体是一个单一表达式，那么函数会隐式返回这个表达式"></a>1.3. 如果整个函数体是一个单一表达式，那么函数会隐式返回这个表达式</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">sum</span>(<span class="attribute">v1</span>: Int, <span class="attribute">v2</span>: Int) <span class="selector-tag">-</span>&gt; <span class="selector-tag">Int</span> &#123;</span><br><span class="line">    <span class="selector-tag">v1</span> + <span class="selector-tag">v2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">print</span>(sum(<span class="attribute">v1</span>: <span class="number">10</span>, <span class="attribute">v2</span>: <span class="number">10</span>)) <span class="comment">// 输出：20</span></span><br></pre></td></tr></table></figure><h3 id="1-4-返回元组：实现多返回值"><a href="#1-4-返回元组：实现多返回值" class="headerlink" title="1.4. 返回元组：实现多返回值"></a>1.4. 返回元组：实现多返回值</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func calculate(v1: <span class="built_in">Int</span>, v2: <span class="built_in">Int</span>) -&gt; (<span class="built_in">sum</span>: <span class="built_in">Int</span>, difference: <span class="built_in">Int</span>, average: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    let <span class="built_in">sum</span> = v1 + v2</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">sum</span>, v1 - v2, <span class="built_in">sum</span> &gt;&gt; <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">let result = calculate(v1: <span class="number">10</span>, v2: <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(result.<span class="built_in">sum</span>, result.difference, result.average) // 输出：<span class="number">30</span> -<span class="number">10</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><h3 id="1-5-参数标签"><a href="#1-5-参数标签" class="headerlink" title="1.5. 参数标签"></a>1.5. 参数标签</h3><p>函数可以修改参数标签：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// <span class="built_in">at</span>是外面调用的，<span class="built_in">time</span>是函数内部使用的</span><br><span class="line">func goToWord(<span class="built_in">at</span> <span class="built_in">time</span>: String) &#123;</span><br><span class="line">    <span class="built_in">print</span>("<span class="built_in">time</span> is \(<span class="built_in">time</span>)")</span><br><span class="line">&#125;</span><br><span class="line">goToWord(<span class="built_in">at</span>: "<span class="number">8</span>:<span class="number">00</span>")</span><br></pre></td></tr></table></figure><p>可以使用下划线<code>_</code>省略参数标签：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func <span class="built_in">sum</span>(_ <span class="symbol">v1</span>: <span class="built_in">Int</span>, _ <span class="symbol">v2</span>: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123; <span class="symbol">v1</span> + <span class="symbol">v2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="1-6-默认参数值"><a href="#1-6-默认参数值" class="headerlink" title="1.6. 默认参数值"></a>1.6. 默认参数值</h3><ul><li>参数可以有默认值<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">check</span>(<span class="attribute">name</span>: String = <span class="string">"nobody"</span>, <span class="attribute">age</span>: Int, <span class="attribute">job</span>: String = <span class="string">"none"</span>) &#123;</span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">"name=\(name), age=\(age), job=\(job)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">age</span>: <span class="number">10</span>)</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">name</span>: <span class="string">"Jack"</span>, <span class="attribute">age</span>: <span class="number">20</span>, <span class="attribute">job</span>: <span class="string">"Programmer"</span>)</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">name</span>: <span class="string">"Eve"</span>, <span class="attribute">age</span>: <span class="number">18</span>)</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">age</span>: <span class="number">10</span>, <span class="attribute">job</span>: <span class="string">"Superman"</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> name=nobody, age=10, job=none</span></span><br><span class="line"><span class="comment"> name=Jack, age=20, job=Programmer</span></span><br><span class="line"><span class="comment"> name=Eve, age=18, job=none</span></span><br><span class="line"><span class="comment"> name=nobody, age=10, job=Superman</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li>C++的默认参数有个限制：必须从右往左设置，而且不能跨标签；Swift拥有参数标签，因此没有此类限制</li><li>省略参数标签时，需要特别注意，避免出错</li><li>没有默认值的参数标签不能省略（如上面代码age就不能省略）</li></ul><h3 id="1-7-可变参数"><a href="#1-7-可变参数" class="headerlink" title="1.7. 可变参数"></a>1.7. 可变参数</h3><ul><li><p>一个函数最多只能有1个可变参数</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func <span class="built_in">sum</span>(_ numbers: Int...) -&gt; Int &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">total</span> = 0</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        <span class="keyword">total</span> += number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">total</span></span><br><span class="line">&#125;</span><br><span class="line">let result = <span class="built_in">sum</span>(10, 20, 30, 40)</span><br><span class="line"><span class="keyword">print</span>(result) <span class="comment">// 输出：100</span></span><br></pre></td></tr></table></figure></li><li><p>紧跟在可变参数后面的参数不能省略参数标签（思考：如果省略了会怎么样？）</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func <span class="keyword">test</span>(_ numbers: Int..., <span class="keyword">string</span>: <span class="keyword">String</span>, _ other: <span class="keyword">String</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">test</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="keyword">string</span>: <span class="string">"idbeny"</span>, <span class="string">"1024星球"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-8-输入输出参数"><a href="#1-8-输入输出参数" class="headerlink" title="1.8. 输入输出参数"></a>1.8. 输入输出参数</h3><ul><li>可以用inout定义一个输入输出参数：可以在函数内部修改外部实参的值</li><li><code>inout</code>必须和<code>&amp;</code>配合使用</li><li>本质上是地址传递</li><li>可变参数不能标记为<code>inout</code></li><li><code>inout</code>参数不能有默认值</li><li><code>inout</code>参数只能传入可以被多次赋值的</li></ul><p>如下修改会报错（因为形参是用let修饰的）<br><img src="http://blog.idbeny.com/zj3ze.png@normal" alt=""></p><p>使用<code>inout</code>和<code>&amp;</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var number = <span class="number">10</span></span><br><span class="line">func add(_ num: <span class="keyword">inout</span> Int) &#123;</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">add(&amp;number)</span><br><span class="line">print(number) <span class="comment">// 输出：20</span></span><br></pre></td></tr></table></figure><p>通过这种方式也可以交换两个变量的值（其实官方有提供交换函数<code>swap</code>）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一（使用临时变量）</span></span><br><span class="line">func swapValues(_ v1: <span class="keyword">inout</span> Int, _ v2: <span class="keyword">inout</span> Int) &#123;</span><br><span class="line">    let temp = v1</span><br><span class="line">    v1 = v2</span><br><span class="line">    v2 = temp</span><br><span class="line">&#125;</span><br><span class="line">var num1 = <span class="number">10</span></span><br><span class="line">var num2 = <span class="number">20</span></span><br><span class="line">swapValues(&amp;num1, &amp;num2)</span><br><span class="line">print(<span class="string">"num1=\(num1), num2=\(num2)"</span>) <span class="comment">// 输出：num1=20, num2=10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二（使用元组）</span></span><br><span class="line">var num3 = <span class="number">30</span></span><br><span class="line">var num4 = <span class="number">40</span></span><br><span class="line">func swapValues1(_ v1: <span class="keyword">inout</span> Int, _ v2: <span class="keyword">inout</span> Int) &#123;</span><br><span class="line">    (v1, v2) = (v2, v1)</span><br><span class="line">&#125;</span><br><span class="line">swap(&amp;num3, &amp;num4)</span><br><span class="line">print(<span class="string">"num3=\(num3), num4=\(num4)"</span>) <span class="comment">// 输出：num3=40, num4=30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三（系统提供的swap函数）</span></span><br><span class="line">var num5 = <span class="number">50</span></span><br><span class="line">var num6 = <span class="number">60</span></span><br><span class="line">swap(&amp;num5, &amp;num6)</span><br><span class="line">print(<span class="string">"num5=\(num5), num6=\(num6)"</span>) <span class="comment">// 输出：num5=60, num6=50</span></span><br></pre></td></tr></table></figure><h2 id="二、函数的文档注释"><a href="#二、函数的文档注释" class="headerlink" title="二、函数的文档注释"></a>二、函数的文档注释</h2><p>官网介绍：<a href="https://swift.org/documentatior/api-design-guidelines" target="_blank" rel="noopener">https://swift.org/documentatior/api-design-guidelines</a></p><p>光标放到对应函数名称上，按下<code>Option</code>即可查看函数相关描述文档<br><img src="http://blog.idbeny.com/3tg7i.png@normal" alt=""></p><ul><li>上图看到sum的函数描述都是空的，如何填写描述信息呢？</li><li>添加文档快捷键(光标一定要在函数上或函数上方)：<code>Command + Option + /</code></li></ul><p>默认的文档注释</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;#Description#&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> - Parameters:</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   - v1: <span class="doctag">&lt;#v1 description#&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   - v2: <span class="doctag">&lt;#v2 description#&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> - Returns: <span class="doctag">&lt;#description#&gt;</span></span></span><br><span class="line"><span class="function">func <span class="title">sum</span>(<span class="params">v1: Int, v2: Int</span>) -&gt; Int</span> &#123; v1 + v2&#125;</span><br></pre></td></tr></table></figure><p>更详细的文档注释（概述和详述一定要隔开，否则会默认为详述）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 将2个整数相加【概述】</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 将2个整数相加【详细的描述】</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - v1: 第一个参数</span></span><br><span class="line"><span class="comment">///   - v2: 第二个参数</span></span><br><span class="line"><span class="comment">/// - Returns: 2个参数的和</span></span><br><span class="line"><span class="comment">/// - Note:传入2个整数【批注】</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1: Int, v2: Int)</span></span> -&gt; <span class="type">Int</span> &#123; v1 + v2&#125;</span><br></pre></td></tr></table></figure><p>效果<br><img src="http://blog.idbeny.com/5odsn.png@normal" alt=""></p><h2 id="三、函数重载"><a href="#三、函数重载" class="headerlink" title="三、函数重载"></a>三、函数重载</h2><ul><li>OC是不支持函数重载的，但Swift支持函数重载</li><li>规则<ul><li>函数名相同</li><li>参数个数不同 || 参数类型不同 || 参数标签不同</li></ul></li></ul><p>以下函数都构成了函数重载，都是可以正常调用的，且函数没有冲突：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参照</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1: Int, v2: Int)</span></span> &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数个数不同</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1: Int, v2: Int, v3: Int)</span></span> &#123;</span><br><span class="line">    v1 + v2 + v3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数类型不同</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1: Int, v2: Double)</span></span> &#123;</span><br><span class="line">    <span class="type">Double</span>(v1) + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数标签不同（忽略标签）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(<span class="number">_</span> v1: Int, <span class="number">_</span> v2: Int)</span></span> &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数标签不同（标签名不同）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a: Int, b: Int)</span></span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>返回值类型与函数重载无关<br><img src="http://blog.idbeny.com/x7h3k.png@normal" alt=""></p></li><li><p>默认参数值和函数重载一起使用产生二义性时，编译器不会报错（在C++中会报错）</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">func</span> sum(<span class="built_in">v1</span>: Int, <span class="built_in">v2</span>: Int) -&gt; Int &#123;</span><br><span class="line">    <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">func</span> sum(<span class="built_in">v1</span>: Int, <span class="built_in">v2</span>: Int, <span class="built_in">v3</span>: Int = <span class="number">30</span>) -&gt; Int &#123;</span><br><span class="line">    <span class="built_in">v1</span> + <span class="built_in">v2</span> + <span class="built_in">v3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">sum</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>) // 输出：<span class="number">30</span></span><br></pre></td></tr></table></figure></li><li><p>可变参数、省略参数标签，函数重载一起使用产生二义性时，编译器有<strong>可能会</strong>报错<br><img src="http://blog.idbeny.com/69q6s.png@normal" alt=""></p></li></ul><p>为什么是可能会报错？（下面代码可以正常执行，所以平时开发中也不建议这样写）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(<span class="number">_</span> v1: Int, <span class="number">_</span> v2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(<span class="number">_</span> numbers: Int...)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        total += num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><h2 id="四、函数类型"><a href="#四、函数类型" class="headerlink" title="四、函数类型"></a>四、函数类型</h2><p>每一个函数都是有类型的，函数类型由形式参数类型，返回值类型组成：</p><ul><li>函数类型可以作为函数参数传递；</li><li>函数类型可以作为函数返回值；</li><li>返回值是函数类型的函数，叫做<strong>高阶函数</strong>。</li></ul><h2 id="五、嵌套函数"><a href="#五、嵌套函数" class="headerlink" title="五、嵌套函数"></a>五、嵌套函数</h2><p>将函数定义在函数内部：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foward</span><span class="params">(<span class="number">_</span> forward: Bool)</span></span> -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">(<span class="number">_</span> input: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        input + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previous</span><span class="params">(<span class="number">_</span> input: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        input - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> forward ? next : previous</span><br><span class="line">&#125;</span><br><span class="line">foward(<span class="literal">true</span>)(<span class="number">1</span>) <span class="comment">// 输出：2</span></span><br><span class="line">foward(<span class="literal">false</span>)(<span class="number">2</span>) <span class="comment">// 输出：1</span></span><br></pre></td></tr></table></figure><h2 id="六、内联函数"><a href="#六、内联函数" class="headerlink" title="六、内联函数"></a>六、内联函数</h2><p>如果开启了编译器优化（Release模式默认开启），编译器会自动将某些函数变成内联函数：</p><ul><li>Release默认按照快速运行方式优化；</li><li>Debug也可以手动开启，但是为了开发中方便调试，一般都会关闭。</li></ul><p><img src="http://blog.idbeny.com/ibl4w.png@normal" alt=""></p><p>内联函数的作用？</p><ul><li>内联函数在C++中的经常出现，如果某一个函数是内联函数，编译器在编译的时候会把适当的代码块中的代码放到对应位置，提高代码执行的效率</li><li>将函数调用展开成函数体<figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">func</span> <span class="function"><span class="title">test</span>() &#123;</span></span><br><span class="line"><span class="function">    <span class="title">print</span>(<span class="string">"test"</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">test</span>()</span></span><br></pre></td></tr></table></figure></li><li>以上代码如果开启编译器优化，<code>test()</code>会替换为<code>print(&quot;test&quot;)</code>。</li></ul><p>不是所有的内联函数都会被编译器展开函数体，那些函数不会被内联？</p><ul><li>函数体比较长</li><li>包含递归调用</li><li>包含动态派发</li></ul><p><strong>@inline</strong>：<br>永远不会被内联（即使开启了编译器优化）</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">@inline</span>(never) <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> &#123;</span></span><br><span class="line">    print(<span class="string">"test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启编译器优化后，及时代码很长，也会被内联（递归调用、动态派发的函数除外）：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">@inline</span>(__always) <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span> &#123;</span></span><br><span class="line">    print(<span class="string">"test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在Release模式下，编译器已经开启优化，会自动决定哪些函数需要内联，因此没必要使用<code>@inline</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列二 - 循环控制</title>
      <link href="/2019/05/08/swift-syntax-loop/"/>
      <url>/2019/05/08/swift-syntax-loop/</url>
      
        <content type="html"><![CDATA[<h2 id="一、if-else"><a href="#一、if-else" class="headerlink" title="一、if-else"></a>一、if-else</h2><ul><li><p>if后面的条件可以省略小括号</p></li><li><p>条件后面的大括号不可以省略</p><a id="more"></a><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">let</span> <span class="variable">age</span> = <span class="number">10</span></span><br><span class="line"><span class="variable"><span class="keyword">if</span></span> <span class="variable">age</span> &gt;= <span class="number">18</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="string">"大学"</span>)</span></span><br><span class="line">&#125; <span class="variable"><span class="keyword">else</span></span> <span class="variable"><span class="keyword">if</span></span> <span class="variable">age</span> &gt;= <span class="number">16</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="string">"高中"</span>)</span></span><br><span class="line">&#125; <span class="variable"><span class="keyword">else</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="string">"义务"</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if后面的条件只能是Bool类型<br><img src="http://blog.idbeny.com/mxekd.png@normal" alt=""></p></li></ul><h2 id="二、while"><a href="#二、while" class="headerlink" title="二、while"></a>二、while</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">num</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"num is \(num)"</span>)</span><br><span class="line">    <span class="built_in">num</span> -= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> num is 3</span></span><br><span class="line"><span class="comment"> num is 2</span></span><br><span class="line"><span class="comment"> num is 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>swift中没有<code>do-while</code>，相同逻辑的是<code>repeat-while</code></li><li>swift3开始，去除了自增（++），自减（–）运算符<ul><li>不要再使用<code>num++</code>，<code>num--</code>，<code>++num</code>，<code>--num</code>等运算符了</li><li>自增自减运算符在不同平台有不一样的效果，所以swift放弃了使用</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">-1</span></span><br><span class="line">repeat &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"num is \(num)"</span>)</span><br><span class="line">&#125; <span class="keyword">while</span> <span class="built_in">num</span> &gt; <span class="number">0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：num is -1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="三、for"><a href="#三、for" class="headerlink" title="三、for"></a>三、for</h2><h3 id="3-1-区间运算符"><a href="#3-1-区间运算符" class="headerlink" title="3.1. 区间运算符"></a>3.1. 区间运算符</h3><p>格式：<code>a...b</code>（a &lt;= 取值 &lt;= b）</p><ul><li>变量默认是let修饰，可以自己根据情况修改为var</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规用法</span></span><br><span class="line"><span class="keyword">let</span> words = [<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"ddd"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> words &#123;</span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> aaa</span></span><br><span class="line"><span class="comment"> bbb</span></span><br><span class="line"><span class="comment"> ccc</span></span><br><span class="line"><span class="comment"> ddd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间用法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">3</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i, words[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1 bbb</span></span><br><span class="line"><span class="comment"> 2 ccc</span></span><br><span class="line"><span class="comment"> 3 ddd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var修饰</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">3</span> &#123;</span><br><span class="line">    i += <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 6</span></span><br><span class="line"><span class="comment"> 7</span></span><br><span class="line"><span class="comment"> 8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间定义常量</span></span><br><span class="line"><span class="keyword">let</span> range = <span class="number">1</span>...<span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间值自定义</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a...b &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="3-2-半开区间运算符"><a href="#3-2-半开区间运算符" class="headerlink" title="3.2. 半开区间运算符"></a>3.2. 半开区间运算符</h3><p>格式：<code>a..&lt;b</code>（a &lt;= 取值 &lt; b）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span>.&lt;<span class="number">3</span> &#123;</span><br><span class="line">    print(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="3-3-区间运算符用在数组上"><a href="#3-3-区间运算符用在数组上" class="headerlink" title="3.3. 区间运算符用在数组上"></a>3.3. 区间运算符用在数组上</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处只是示例用法，实际应用时应注意数组越界</span></span><br><span class="line"><span class="keyword">let</span> words = [<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"ddd"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> words[<span class="number">0</span>...<span class="number">3</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-单侧区间：让区间朝一个方向尽可能的远"><a href="#3-4-单侧区间：让区间朝一个方向尽可能的远" class="headerlink" title="3.4 单侧区间：让区间朝一个方向尽可能的远"></a>3.4 单侧区间：让区间朝一个方向尽可能的远</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规闭区间</span></span><br><span class="line">let words = [<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"ddd"</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">word</span> in words[<span class="number">0.</span>.<span class="number">.3</span>] &#123;</span><br><span class="line"><span class="comment">//    print(word);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> aaa</span></span><br><span class="line"><span class="comment"> bbb</span></span><br><span class="line"><span class="comment"> ccc</span></span><br><span class="line"><span class="comment"> ddd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左边代表开始，右边代表数组最大长度</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">word</span> in words[<span class="number">2.</span>..] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">word</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> ccc</span></span><br><span class="line"><span class="comment"> ddd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左边代表0，右边闭区间值</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">word</span> in words[..<span class="number">.2</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">word</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> aaa</span></span><br><span class="line"><span class="comment"> bbb</span></span><br><span class="line"><span class="comment"> ccc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左边代表0，右边&lt;2</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">word</span> in words[..&lt;<span class="number">2</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">word</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> aaa</span></span><br><span class="line"><span class="comment"> bbb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无限制，range左边是无穷小的整数</span></span><br><span class="line">let range = ..<span class="number">.5</span></span><br><span class="line"><span class="built_in">print</span>(range.contains(<span class="number">7</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">print</span>(range.contains(<span class="number">1</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(range.contains(<span class="number">-2</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="四、区间类型（Range）"><a href="#四、区间类型（Range）" class="headerlink" title="四、区间类型（Range）"></a>四、区间类型（Range）</h2><ul><li>范围代表的是两个值的区间，它由上下边界进行定义；</li><li>不能对 Range 或者 ClosedRange 进行迭代，但是我们可以检查某个元素是否存在于范围中；</li><li>Range 和 ClosedRange 既非序列，也不是集合类型。有一部分范围确实是序列是因为 0..&lt;10 的类型其实是一个 CountableRang。CountableRange 和 Range 很相似，只不过它还需要一个附加约束:它的元素类型需要遵守 Strideable 协议 (以整数为步⻓)。Swift 将这类功能更强的范围叫做可数范围，这是因为只有这 类范围可以被迭代。可数范围的边界可以是整数或者指针类型，但不能是浮点数类型，这是由 于 Stride 类型中有一个整数的约束。如果你想要对连续的浮点数值进行迭代的话，你可以通过 使用 stride(from:to:by) 和 stride(from:through:by) 方法来创建序列用以迭代。</li></ul><table><thead><tr><th align="center">–</th><th align="center">半开</th><th align="center">闭合</th></tr></thead><tbody><tr><td align="center">Comparable</td><td align="center">Range</td><td align="center">ClosedRange</td></tr><tr><td align="center">Strideable(以整数为步长)</td><td align="center">CountableRange</td><td align="center">CountableClosedRange</td></tr></tbody></table><h3 id="4-1-同时省略掉上、下两个边界，这样你将会得到整个集合类型的切片"><a href="#4-1-同时省略掉上、下两个边界，这样你将会得到整个集合类型的切片" class="headerlink" title="4.1. 同时省略掉上、下两个边界，这样你将会得到整个集合类型的切片"></a>4.1. 同时省略掉上、下两个边界，这样你将会得到整个集合类型的切片</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr[...] <span class="comment">// [1, 2, 3, 4] </span></span><br><span class="line">type(of: arr) <span class="comment">// Array&lt;Int&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 半开区间</span></span><br><span class="line">let rang: Range = <span class="number">0.0</span>..&lt;<span class="number">1.0</span></span><br><span class="line">let countableRange: CountableRange = <span class="number">0.</span>.&lt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭区间</span></span><br><span class="line">let closedRange: ClosedRange = <span class="number">0.0</span>..<span class="number">.1</span><span class="number">.0</span> </span><br><span class="line">let countableClosedRange: CountableClosedRange = <span class="number">0.</span>.<span class="number">.1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 右侧闭区间</span></span><br><span class="line">let partialRangeThrough: PartialRangeThrough = ..<span class="number">.1</span><span class="number">.0</span></span><br><span class="line"><span class="comment">// 左侧闭区间</span></span><br><span class="line">let partialRangeFrom: PartialRangeFrom = <span class="number">0.0</span>...</span><br><span class="line"><span class="comment">// 右侧开区间</span></span><br><span class="line">let partialRangeUpTo: PartialRangeUpTo = ..&lt;<span class="number">1.0</span></span><br><span class="line"><span class="comment">// 左侧闭区间</span></span><br><span class="line">let countablePartialRangeFrom: CountablePartialRangeFrom  = <span class="number">1.</span>..</span><br></pre></td></tr></table></figure><h3 id="4-2-字符、字符串也能使用区间运算符，但默认不能用在for-in中"><a href="#4-2-字符、字符串也能使用区间运算符，但默认不能用在for-in中" class="headerlink" title="4.2. 字符、字符串也能使用区间运算符，但默认不能用在for-in中"></a>4.2. 字符、字符串也能使用区间运算符，但默认不能用在for-in中</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringRange1 = <span class="string">"cc"</span>...<span class="string">"ff"</span></span><br><span class="line">stringRange1.<span class="built_in">contains</span>(<span class="string">"cb"</span>) <span class="comment">// false</span></span><br><span class="line">stringRange1.<span class="built_in">contains</span>(<span class="string">"dz"</span>) <span class="comment">// true</span></span><br><span class="line">stringRange1.<span class="built_in">contains</span>(<span class="string">"e"</span>) <span class="comment">// true</span></span><br><span class="line">stringRange1.<span class="built_in">contains</span>(<span class="string">"fg"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stringRange2 = <span class="string">"a"</span>...<span class="string">"f"</span></span><br><span class="line">stringRange2.<span class="built_in">contains</span>(<span class="string">"a"</span>) <span class="comment">// true</span></span><br><span class="line">stringRange2.<span class="built_in">contains</span>(<span class="string">"e"</span>) <span class="comment">// true</span></span><br><span class="line">stringRange2.<span class="built_in">contains</span>(<span class="string">"g"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// \0到~囊括了所有可能要用到的ASCII字符</span></span><br><span class="line"><span class="keyword">let</span> characterRange: <span class="type">ClosedRange</span>&lt;<span class="type">Character</span>&gt; = <span class="string">"\0"</span>...<span class="string">"~"</span></span><br><span class="line">characterRange.<span class="built_in">contains</span>(<span class="string">"G"</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="4-3-带间隔的区间值"><a href="#4-3-带间隔的区间值" class="headerlink" title="4.3 带间隔的区间值"></a>4.3 带间隔的区间值</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> startValue = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> endValue = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> interval = <span class="number">2</span></span><br><span class="line"><span class="comment">// value取值从startValue开始，每次间隔interval，不超过endValue</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">stride</span>(from: startValue, through: endValue, by: interval) &#123;</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 0</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> 4</span></span><br><span class="line"><span class="comment"> 6</span></span><br><span class="line"><span class="comment"> 8</span></span><br><span class="line"><span class="comment"> 10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 另外一个方法 to是开区间</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">stride</span>&lt;T&gt;<span class="params">(from start: T, to end: T, by <span class="built_in">stride</span>: T.Stride)</span></span> -&gt; <span class="type">StrideTo</span>&lt;<span class="type">T</span>&gt; <span class="keyword">where</span> <span class="type">T</span> : <span class="type">Strideable</span></span><br></pre></td></tr></table></figure><h2 id="五、switch"><a href="#五、switch" class="headerlink" title="五、switch"></a>五、switch</h2><h3 id="5-1-case、default后面不能写大括号（编译器会报错）"><a href="#5-1-case、default后面不能写大括号（编译器会报错）" class="headerlink" title="5.1. case、default后面不能写大括号（编译器会报错）"></a>5.1. case、default后面不能写大括号（编译器会报错）</h3><h3 id="5-2-默认情况下可以不写break，并不会贯穿到后面的条件"><a href="#5-2-默认情况下可以不写break，并不会贯穿到后面的条件" class="headerlink" title="5.2. 默认情况下可以不写break，并不会贯穿到后面的条件"></a>5.2. 默认情况下可以不写break，并不会贯穿到后面的条件</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> HeaderCode &#123;<span class="keyword">case</span> success, failure, redirect, <span class="built_in">connect</span>&#125;</span><br><span class="line">let code = HeaderCode.success</span><br><span class="line"><span class="keyword">switch</span> code &#123;</span><br><span class="line"><span class="keyword">case</span> .success:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"success"</span>)</span><br><span class="line"><span class="keyword">case</span> .redirect:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"redirect"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="built_in">connect</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"connect"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"failure"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：success</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="5-3-如果需要贯穿，怎么办？fallthrough"><a href="#5-3-如果需要贯穿，怎么办？fallthrough" class="headerlink" title="5.3. 如果需要贯穿，怎么办？fallthrough"></a>5.3. 如果需要贯穿，怎么办？fallthrough</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">HeaderCode</span> </span>&#123;<span class="keyword">case</span> success, failure, redirect, connect&#125;</span><br><span class="line"><span class="keyword">let</span> code = <span class="type">HeaderCode</span>.success</span><br><span class="line"><span class="keyword">switch</span> code &#123;</span><br><span class="line"><span class="keyword">case</span> .success:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"success"</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> .redirect:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"redirect"</span>)</span><br><span class="line"><span class="keyword">case</span> .connect:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"connect"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"failure"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> success</span></span><br><span class="line"><span class="comment"> redirect</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="5-4-case、default后面至少要有一条语句"><a href="#5-4-case、default后面至少要有一条语句" class="headerlink" title="5.4. case、default后面至少要有一条语句"></a>5.4. case、default后面至少要有一条语句</h3><p><img src="http://blog.idbeny.com/r9rgd.png@normal" alt=""></p><h3 id="5-5-switch必须要保证能处理所有情况"><a href="#5-5-switch必须要保证能处理所有情况" class="headerlink" title="5.5. switch必须要保证能处理所有情况"></a>5.5. switch必须要保证能处理所有情况</h3><ul><li>如果不想做任何事，加个break即可</li><li>如果能保证已处理所有情况，也可以不使用default<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> HeaderCode &#123;<span class="keyword">case</span> success, failure, redirect, <span class="built_in">connect</span>&#125;</span><br><span class="line">let code = HeaderCode.success</span><br><span class="line"><span class="keyword">switch</span> code &#123;</span><br><span class="line"><span class="keyword">case</span> .success:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> .redirect:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"redirect"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="built_in">connect</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"connect"</span>)</span><br><span class="line"><span class="keyword">case</span> .failure:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"failure"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-6-复合条件（switch支持Character、String类型）"><a href="#5-6-复合条件（switch支持Character、String类型）" class="headerlink" title="5.6. 复合条件（switch支持Character、String类型）"></a>5.6. 复合条件（switch支持Character、String类型）</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String</span></span><br><span class="line">let <span class="keyword">string</span> = <span class="string">"idbeny"</span></span><br><span class="line"><span class="keyword">switch</span> <span class="keyword">string</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"idbeny"</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"idbeny"</span>)</span><br><span class="line">    fallthrough</span><br><span class="line"><span class="keyword">case</span> <span class="string">"developer"</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"developer"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"man"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> idbeny</span></span><br><span class="line"><span class="comment"> developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Character</span></span><br><span class="line">let <span class="keyword">character</span>: Character = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">switch</span> <span class="keyword">character</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"a"</span>, <span class="string">"A"</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"aaa"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：aaa</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="5-7-区间匹配、元组匹配"><a href="#5-7-区间匹配、元组匹配" class="headerlink" title="5.7. 区间匹配、元组匹配"></a>5.7. 区间匹配、元组匹配</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区间匹配</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">count</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">count</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"zero"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>...<span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"few"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>...<span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"large"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：large</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组匹配</span></span><br><span class="line"><span class="keyword">let</span> point = (<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"origin"</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">_</span>, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x-axis"</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">_</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"y-axis"</span>)</span><br><span class="line"><span class="keyword">case</span> (-<span class="number">2</span>...<span class="number">2</span>, -<span class="number">2</span>...<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"in the box"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：in the box</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>可以用下划线(<code>_</code>)忽略某个值</li><li>值绑定（必要时let可以改为var）<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point1 = (<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">switch</span> point1 &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"on the x-axis and x value of \(x)"</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">let</span> y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"on the y-axis and y value of \(y)"</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="keyword">let</span> y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"at (\(x), \(y))"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：on the x-axis and x value of 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="六、where（过滤）"><a href="#六、where（过滤）" class="headerlink" title="六、where（过滤）"></a>六、where（过滤）</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point = (<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span>(x, y) <span class="keyword">where</span> x == y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x == y"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span>(x, y) <span class="keyword">where</span> x == -y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x == -y"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span>(x, y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"at (\(x), \(y))"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：x == -y</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把所有数加起来</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, -<span class="number">30</span>, -<span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers <span class="keyword">where</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">    sum += num</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(sum)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：80</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="七、标签语句"><a href="#七、标签语句" class="headerlink" title="七、标签语句"></a>七、标签语句</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">side:</span> <span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="number">1</span><span class="string">...4</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">for</span> <span class="string">k</span> <span class="string">in</span> <span class="number">1</span><span class="string">...4</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">if</span> <span class="string">k</span> <span class="string">==</span> <span class="number">3</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">continue</span> <span class="string">side</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">if</span> <span class="string">i</span> <span class="string">==</span> <span class="number">3</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">break</span> <span class="string">side</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">print("i</span> <span class="string">==</span> <span class="string">\(i),</span> <span class="string">k</span> <span class="string">==</span> <span class="string">\(k)")</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"> <span class="string">输出：</span></span><br><span class="line"> <span class="string">i</span> <span class="string">==</span> <span class="number">1</span><span class="string">,</span> <span class="string">k</span> <span class="string">==</span> <span class="number">1</span></span><br><span class="line"> <span class="string">i</span> <span class="string">==</span> <span class="number">1</span><span class="string">,</span> <span class="string">k</span> <span class="string">==</span> <span class="number">2</span></span><br><span class="line"> <span class="string">i</span> <span class="string">==</span> <span class="number">2</span><span class="string">,</span> <span class="string">k</span> <span class="string">==</span> <span class="number">1</span></span><br><span class="line"> <span class="string">i</span> <span class="string">==</span> <span class="number">2</span><span class="string">,</span> <span class="string">k</span> <span class="string">==</span> <span class="number">2</span></span><br><span class="line"> <span class="string">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift循环控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift系列一 - 数据类型</title>
      <link href="/2019/05/07/swift-syntax-data-types/"/>
      <url>/2019/05/07/swift-syntax-data-types/</url>
      
        <content type="html"><![CDATA[<p>如果你习惯了OC的语法，第一次接触Swift的语法可能会有点抗拒，因为Swift的语法有点怪。但如果你有前端的基础，学Swift可能会有点吃力，如果你有C++的基础可能会学得比较快点。不管你有什么样的语法基础，学会Swift后你都会觉得这是门优秀的语言，总之相比哥哥OC更简洁，更高效。现在Swift的ABI版本已经到5.2了，总体趋于稳定，社区也很活跃，是系统学习的好时机。</p><a id="more"></a><h2 id="一、打印（print）"><a href="#一、打印（print）" class="headerlink" title="一、打印（print）"></a>一、打印（print）</h2><p>可以认为是C的扩展写法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let word = <span class="string">"world"</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"print output"</span>)</span></span> <span class="comment">// 输出：print output</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"hello \(word)"</span>)</span></span> <span class="comment">// 输出：hello world</span></span><br></pre></td></tr></table></figure><ul><li>以往OC中打印变量使用<code>NSLog(&quot;hello_%@&quot;,var)</code>,Swift使用<code>\(变量)</code></li></ul><h2 id="二、分号"><a href="#二、分号" class="headerlink" title="二、分号"></a>二、分号</h2><ul><li>一句代码尾部可以省略分号（;）</li><li>多句代码写到同一行时必须用分号（;）</li></ul><h2 id="三、注释"><a href="#三、注释" class="headerlink" title="三、注释"></a>三、注释</h2><ul><li>单行注释（//）</li><li>多行注释–支持多行嵌套，但必须是双标签（/**/）<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1.多行注释</span></span><br><span class="line"><span class="comment"> /* 多行注释的嵌套 */</span></span><br><span class="line"> <span class="number">2.</span>多行注释</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Playground的注释支持markup语法（和markdown相似）<br>如何开启markup语法预览？</p></blockquote><ul><li>选中当前行 -&gt; 菜单栏 -&gt; Editor -&gt; Show Rendered Markup</li><li>开启渲染：Show Rendered Markup</li><li>关闭渲染：Show Raw Markup</li><li><font style="color:red">注意</font>：markup语法只在Playground中有效<br><img src="http://blog.idbeny.com/vyrvz.png@normal" alt=""></li></ul><h2 id="四、Markup语法"><a href="#四、Markup语法" class="headerlink" title="四、Markup语法"></a>四、Markup语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//: # 一级标题</span><br><span class="line">//: ## 二级标题</span><br><span class="line"></span><br><span class="line">/*:</span><br><span class="line"> # 一级标题</span><br><span class="line"> </span><br><span class="line"> ## 无序列表</span><br><span class="line"><span class="bullet"> - </span>第一个元素</span><br><span class="line"><span class="bullet"> - </span>第二个元素</span><br><span class="line"> </span><br><span class="line"> ## 有序列表</span><br><span class="line"><span class="bullet"> 1. </span>第一个元素</span><br><span class="line"><span class="bullet"> 2. </span>第二个元素</span><br><span class="line"> </span><br><span class="line"> ## 笔记</span><br><span class="line"> &gt; 这是一个笔记</span><br><span class="line"></span><br><span class="line"> ## 分割线</span><br><span class="line"> ---</span><br><span class="line"> </span><br><span class="line"> ## 图片</span><br><span class="line"> ![<span class="string">图片描述</span>](<span class="link">图片链接</span>)</span><br><span class="line"> </span><br><span class="line"> ## 链接</span><br><span class="line"> [<span class="string">链接标题</span>](<span class="link">链接地址</span>)</span><br><span class="line"> </span><br><span class="line"> ## 粗体/斜体</span><br><span class="line"> 这是<span class="strong">**粗体**</span>，这是<span class="emphasis">*斜体*</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/vygjz.png@normal" alt=""></p><ul><li>单行注释时，冒号前面不能有空格，后面必须有空格</li><li>多行注释时，冒号前面不能有空格，后面不能有内容，必须另起一行</li></ul><h2 id="五、标识符"><a href="#五、标识符" class="headerlink" title="五、标识符"></a>五、标识符</h2><ul><li>标识符（比如常量名、变量名、函数名）几乎可以使用任何字符</li><li>标识符不能以数字开头，不能包含空白字符、制表符（Tab）、箭头（-&gt;）等特殊字符</li></ul><h2 id="六、数据类型"><a href="#六、数据类型" class="headerlink" title="六、数据类型"></a>六、数据类型</h2><p>Swift没有基本数据类型的概念，数据类型分为两大类：<br><img src="http://blog.idbeny.com/trile.png@normal" alt=""></p><h3 id="6-1-值类型（value-type）"><a href="#6-1-值类型（value-type）" class="headerlink" title="6.1. 值类型（value-type）"></a>6.1. 值类型（value-type）</h3><ul><li>枚举（enum）<ul><li>Optional</li></ul></li><li>结构体（struct）<ul><li>Bool、Int、Float、Double、Character</li><li>String、Array、Dictionary、Set</li></ul></li></ul><h4 id="6-1-1-整数类型"><a href="#6-1-1-整数类型" class="headerlink" title="6.1.1. 整数类型"></a>6.1.1. 整数类型</h4><ul><li>Int8、Int16、Int32、Int64、UInt8、UInt16、UInt32、UInt64</li><li>在32bit平台，Int等价于Int32、Int等价于Int64，所以一般情况下都是直接使用Int即可</li><li>整数的最值：UInt8.max、Int16.min</li></ul><h4 id="6-1-2-浮点类型"><a href="#6-1-2-浮点类型" class="headerlink" title="6.1.2. 浮点类型"></a>6.1.2. 浮点类型</h4><ul><li>Float，32位，精度只有6位</li><li>Double，64位，精度至少15位</li></ul><h4 id="6-1-3-字面量"><a href="#6-1-3-字面量" class="headerlink" title="6.1.3. 字面量"></a>6.1.3. 字面量</h4><ul><li>布尔类型值在OC中是0和1，但Swift中是true和false（和大部分语言一样）</li><li>字符串类型值用双引号</li><li>字符类型值和字符串一样都是用双引号括起来，但是字符变量必须用Character修饰，否则会默认是字符串</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 布尔</span></span><br><span class="line">let <span class="built_in">bool</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">let <span class="built_in">string</span> = <span class="string">"1024星球"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符</span></span><br><span class="line">let character: Character = <span class="string">"🌎"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整数</span></span><br><span class="line">let <span class="built_in">int</span>Decimal = <span class="number">20</span></span><br><span class="line">let <span class="built_in">int</span>Binary = <span class="number">0</span>b10001</span><br><span class="line">let <span class="built_in">int</span>Octal = <span class="number">0</span>o21</span><br><span class="line">let <span class="built_in">int</span>HexDecimal = <span class="number">0x11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数</span></span><br><span class="line">let <span class="built_in">double</span>Decimal = <span class="number">125.0</span> <span class="comment">// 十进制，等价于1.25e2，例：0.0125 &lt;=&gt; 1.25e-2</span></span><br><span class="line"></span><br><span class="line">let <span class="built_in">double</span>HexDecimal1 = <span class="number">0xF</span>p2 <span class="comment">// 十六进制，意味着15x2^2，相当于十进制的60.0</span></span><br><span class="line"></span><br><span class="line">let <span class="built_in">double</span>HexDecimal2 = <span class="number">0xF</span>p<span class="number">-2</span> <span class="comment">// 十六进制，意味着15x2^-2，相当于十进制的3.75</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下都是表示12.1875</span></span><br><span class="line"><span class="comment"> 十进制：12.1875、1.21875e1</span></span><br><span class="line"><span class="comment"> 十六进制：0xC.3p0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 数组</span></span><br><span class="line">let <span class="built_in">array</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字典</span></span><br><span class="line">let <span class="built_in">dictionary</span> = [<span class="string">"age"</span> : <span class="number">20</span>, <span class="string">"height"</span> : <span class="number">1.88</span>]</span><br></pre></td></tr></table></figure><ul><li>整数和浮点数可以添加额外的零或者添加下划线来增强可读性<ul><li>100_0000、1_000_000.000_000_1、000123.456</li></ul></li></ul><h3 id="6-2-引用类型（reference-type）"><a href="#6-2-引用类型（reference-type）" class="headerlink" title="6.2. 引用类型（reference type）"></a>6.2. 引用类型（reference type）</h3><ul><li>类（class）<br><img src="http://blog.idbeny.com/oh0dx.png@normal" alt=""></li></ul><p><em>通过官方简介即可看出，Int是用struct描述的</em></p><h2 id="七、类型转换"><a href="#七、类型转换" class="headerlink" title="七、类型转换"></a>七、类型转换</h2><h3 id="7-1-整数转换"><a href="#7-1-整数转换" class="headerlink" title="7.1. 整数转换"></a>7.1. 整数转换</h3><p>在Swift中不同类型之间是不能运算的，否则编译器会报错<br><img src="http://blog.idbeny.com/zhf7n.png@normal" alt=""></p><p>正确做法：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let i<span class="symbol">nt1</span>: UI<span class="symbol">nt16</span> = <span class="number">2</span>_<span class="number">000</span></span><br><span class="line">let i<span class="symbol">nt2</span>: UI<span class="symbol">nt8</span> = <span class="number">1</span></span><br><span class="line">let i<span class="symbol">nt3</span> = i<span class="symbol">nt1</span> + UI<span class="symbol">nt16</span><span class="comment">(int2)</span></span><br></pre></td></tr></table></figure><ul><li>把低类型转为高类型（为什么？字节占用）</li></ul><h3 id="7-2-整数、浮点数转换"><a href="#7-2-整数、浮点数转换" class="headerlink" title="7.2. 整数、浮点数转换"></a>7.2. 整数、浮点数转换</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">int</span>1: UInt16 = <span class="number">2</span>_000</span><br><span class="line">let <span class="built_in">int</span>2: UInt8 = <span class="number">1</span></span><br><span class="line">let <span class="built_in">int</span>3 = <span class="built_in">int</span>1 + UInt16(<span class="built_in">int</span>2)</span><br><span class="line"></span><br><span class="line">let <span class="built_in">int</span> = <span class="number">3</span></span><br><span class="line">let <span class="built_in">double</span> = <span class="number">0.1415926</span></span><br><span class="line">let pi = Double(<span class="built_in">int</span>) + <span class="built_in">double</span></span><br><span class="line">print(pi) <span class="comment">// 输出：3.1415926</span></span><br><span class="line">let <span class="built_in">int</span>Pi = <span class="built_in">int</span> + Int(<span class="built_in">double</span>)</span><br><span class="line">print(<span class="built_in">int</span>Pi) <span class="comment">// 输出：3</span></span><br></pre></td></tr></table></figure><ul><li>浮点转为整形是会把小数点后放弃，只取浮点整数部分</li></ul><p><em>思考：每次都需要转换，对于未知类型的数据（服务器返回的数据）怎么办？</em></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量可以直接相加，因为数字字面量本身没有明确类型</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">3</span> + <span class="number">0.1415926</span></span><br><span class="line"><span class="keyword">print</span>(result) <span class="comment">// 输出：3.1415926</span></span><br></pre></td></tr></table></figure><h2 id="八、var和let"><a href="#八、var和let" class="headerlink" title="八、var和let"></a>八、var和let</h2><ul><li>let代表常量，var代表变量（variable缩写）</li><li>编译器能自动推断出变量/常量的类型</li><li>两个使用前必须初始化（和其他语言不一样，编译时可以不用初始化），否则编译报错<br><img src="http://blog.idbeny.com/33lcc.png@normal" alt=""><br><img src="http://blog.idbeny.com/n6rd9.png@normal" alt=""><br><img src="http://blog.idbeny.com/ygvsq.png@normal" alt=""></li></ul><p>格式：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名: 变量类型 = 变量值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 变量名: 变量类型 = 变量值;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age: <span class="keyword">Int</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">print</span>(age) <span class="comment">// 输出：10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name: String = <span class="string">"idbeny"</span>;</span><br><span class="line"><span class="keyword">print</span>(name) <span class="comment">// 输出：idbeny</span></span><br></pre></td></tr></table></figure><h2 id="九、元组"><a href="#九、元组" class="headerlink" title="九、元组"></a>九、元组</h2><p>元组是借鉴C++中的概念（Python中也有此类型）：</p><ul><li>元组与列表类似，不同之处在于元组的元素不能修改。</li><li>元组使用小括号，列表使用方括号。</li><li>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可（无限的）。</li><li>元组解构用法时，变量名不能和其他同作用域的常规定义变量冲突</li></ul><p>格式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 格式一：常规</span></span><br><span class="line"><span class="comment"> 读取格式：变量名.索引</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">变量修饰符 变量名 = <span class="comment">(元素值，多个逗号分隔)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 格式二：解构</span></span><br><span class="line"><span class="comment"> 变量修饰符 (元组值对应的变量名称，位置要一一对应) = 已定义元组变量</span></span><br><span class="line"><span class="comment"> 读取格式：变量名称</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">变量修饰符 <span class="comment">(元组值对应的变量名称，位置要一一对应)</span> = 已定义元组变量</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构扩展：对应位置不需要的时候可用下划线代替</span></span><br><span class="line">变量修饰符 <span class="comment">(元组值对应的变量名称，_)</span> = 已定义元组变量</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 格式三：key-value</span></span><br><span class="line"><span class="comment"> 读取格式：1. 变量名.索引 2. 变量名.元素变量名 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">变量修饰符 变量名 = <span class="comment">(元素变量名：元素值，……)</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let tup1 = (<span class="number">404</span>, <span class="string">"Not Found"</span>, <span class="string">"moreParas"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(tup1.<span class="number">0</span>,tup1.<span class="number">1</span>,tup1.<span class="number">2</span>)</span></span> <span class="comment">// 输出：404 Not Found moreParas</span></span><br><span class="line"></span><br><span class="line">let (statusCode, statusDesc, paras) = tup1</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(statusCode, statusDesc, paras)</span></span> <span class="comment">// 输出：404 Not Found moreParas</span></span><br><span class="line"></span><br><span class="line">let (tempStatusCode, _, _) = tup1</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(tempStatusCode)</span></span> <span class="comment">// 输出：404</span></span><br><span class="line"></span><br><span class="line">let httpStatus = (statusCode: <span class="number">404</span>, statusDesc: <span class="string">"Not Found"</span>, paras: <span class="string">"moreParas"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(httpStatus.statusCode, httpStatus.statusDesc, httpStatus.paras)</span></span> <span class="comment">// 输出：404 Not Found moreParas</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【汇编】汇编语言初识&amp;lldb常用指令</title>
      <link href="/2019/04/30/assembly-swift/"/>
      <url>/2019/04/30/assembly-swift/</url>
      
        <content type="html"><![CDATA[<p>要想掌握一门语言，就要探其本质，知晓其中的内存和指针变化，这时候汇编就显得格外重要。</p><a id="more"></a><h3 id="汇编语言的种类"><a href="#汇编语言的种类" class="headerlink" title="汇编语言的种类"></a>汇编语言的种类</h3><ul><li><p>汇编语言的种类</p><ul><li>8086汇编（16bit）</li><li>x86汇编（32bit）</li><li>x64汇编（64bit）</li><li>ARM汇编（嵌入式，移动设备）</li><li>……</li></ul></li><li><p>x86、x64汇编根据编译器的不同，有2种书写格式</p><ul><li>Intel：Windows派系</li><li>AT&amp;T：Unix派系（例，iOS模拟器）</li></ul></li></ul><h3 id="常见汇编指令"><a href="#常见汇编指令" class="headerlink" title="常见汇编指令"></a>常见汇编指令</h3><p><img src="http://blog.idbeny.com/wh1lf.png@normal" alt=""></p><h3 id="寄存器与内存"><a href="#寄存器与内存" class="headerlink" title="寄存器与内存"></a>寄存器与内存</h3><ul><li>CPU组成<ul><li>寄存器（信息存储）</li><li>运算器（信息处理）</li><li>控制器</li></ul></li></ul><p>通常，CPU会先将内存中的数据存储到寄存器中，然后再对寄存器中的数据进行运算</p><blockquote><p>假设内存中有块红色内存空间的值是3，现在先把它的值+1，并将结果存储到绿色内存空间</p></blockquote><p>图解：<br><img src="http://blog.idbeny.com/mm427.png@normal" alt=""></p><p>代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">num</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>64位AT&amp;T混编中常用的寄存器有16种</p><ul><li>%rax、%rbx、%rcx、%rdx、%rsi、%rdi、%rbp、%rsp</li><li>%r8、%r9、%r10、%r11、%r12、%r13、%r14、%r15</li></ul><p>寄存器的具体用途</p><ul><li>%rax常作为函数返回值使用</li><li>%rdi、%rsi、%rdx、%rcx、%r8、%r9等寄存器常用于存放函数参数</li><li>%rsp、%rbp用于栈操作</li></ul><p><code>movq -0x18(%rbp), %rax</code><br>意思：根据内存地址找到对应存储空间的数据取出来赋值给%rax</p><p><code>leaq -0x18(%rbp), %rax</code><br>意思：直接将%rbp-0x18地址值赋值给%rax</p><ul><li><p><code>call</code>和<code>jmp</code>区别</p><ul><li><code>jmp 0x000a1841</code>，跳转到函数内存地址<code>0x000a1841</code>执行相关指令，跳转后不返回</li><li><code>call 0x000a1841</code>，也是跳转，和<code>ret</code>配合使用，但跳转<code>0x000a1841</code>函数执行完成后会返回继续执行之前的代码</li></ul></li><li><p><code>call *%rdx</code>，意思是跳转到寄存器里面的地址</p></li><li><p>混编指令后面的字符是什么意思？（例：<code>movq</code>、<code>leaw</code>）</p><ul><li>代表操作数长度（具体参照上图）</li></ul></li></ul><blockquote><p><code>r</code> 开头的是64位（8字节）的寄存器（CPU是64位的）</p><p><code>e</code> 开头的是32位（4字节）的寄存器（CPU是32位的）</p><p><code>ax</code>、<code>bx</code>、<code>cx</code> 开头的是16位（2字节）的寄存器（CPU是16位的）</p><p><code>ah</code>、<code>al</code>、<code>bh</code>、<code>bl</code> 开头的是8位（1字节）的寄存器（CPU是8位的）<br><code>h</code> 意思是high，代表占用高位；<code>l</code> 意思是low，代表占用低位</p></blockquote><p><em>思考：高位寄存器怎么兼容低位寄存器？</em></p><ul><li>64位寄存器需要兼容32位，32位需要兼容16位</li><li>如果使用的是64位（63<del>0），把内存的低位给32位用（31</del>0），一直往后推理</li></ul><h3 id="lldb常用指令"><a href="#lldb常用指令" class="headerlink" title="lldb常用指令"></a>lldb常用指令</h3><ul><li><p>读取寄存器的值：</p><ul><li><code>register read/格式</code></li><li><code>register read/x</code></li><li>例：<code>register read rax</code></li><li>在lldb中不需要加<code>%</code>，在汇编语言中才需要加</li><li>如果只输入<code>register read</code>，就会把所有寄存器的值打印出来</li></ul></li><li><p>修改寄存器的值</p><ul><li><code>register write 寄存器名称 数值</code></li><li><code>register write $rax 0</code></li></ul></li><li><p>读取内存中的值</p><ul><li><code>x/数量-格式-字节大小 内存地址</code></li><li><code>x/3xw 0x0000000100008200</code> 意思：读取3组16进制形式展示的数据，每组4个字节</li></ul></li><li><p>修改内存中的值</p><ul><li><code>memory write 内存地址 数值</code></li><li><code>memory write 0x0000000100008200 10</code></li></ul></li><li><p>格式</p><ul><li>x是16进制</li><li>f是浮点</li><li>d是十进制</li></ul></li><li><p>字节大小</p><ul><li>b - byte        1字节</li><li>h - half word   2字节</li><li>w - word        4字节</li><li>g - giant word  8字节</li></ul></li><li><p>expression 表达式</p><ul><li>可以简写：<code>expr 表达式</code></li><li><code>expression $rax</code></li><li><code>expression $rax = 1</code></li><li><code>expression 高级语言代码</code></li></ul></li><li><p>po 表达式</p></li><li><p>print 表达式</p></li><li><p>po/x $rax</p></li></ul><blockquote><p>更多指令参考 <code>help expression</code></p></blockquote><p>示例代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func test() &#123;</span><br><span class="line">    let <span class="selector-tag">a</span> = <span class="number">3</span></span><br><span class="line">    let <span class="selector-tag">b</span> = <span class="selector-tag">a</span> + <span class="number">1</span></span><br><span class="line">    print(b) <span class="comment">// 此处打断点进入混编</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>指令展示<br><img src="http://blog.idbeny.com/s0t9w.png@normal" alt=""></p><p>代码调试运行指令</p><ul><li><p><code>thread step-over</code></p><ul><li>简写：<code>next</code> 和 <code>n</code></li><li>单步运行，把子函数当做整体一步执行（源码级别）</li></ul></li><li><p><code>thread step-in</code></p><ul><li>简写：<code>step</code> 和 <code>s</code></li><li>单步运行，遇到子函数会进入子函数（源码级别）</li></ul></li><li><p><code>thread step-inst-over</code></p><ul><li>简写：<code>nexti</code> 和 <code>ni</code></li><li>单步运行，把子函数当做整体一步执行（汇编级别）</li></ul></li><li><p><code>thread step-inst</code></p><ul><li>简写：<code>stepi</code> 和 <code>si</code></li><li>单步运行，遇到子函数会进入子函数（汇编级别）</li></ul></li><li><p><code>thread step-out</code></p><ul><li>简写：<code>finish</code></li><li>直接执行完当前函数的所有代码，返回到上一个函数（遇到断点会卡主）</li></ul></li></ul><p>看到上面的指令名称，应该常用Xcode开发的同学会很熟悉，没错，就是Xcode上面的断点调试功能<br><img src="http://blog.idbeny.com/d9hex.png@normal" alt=""></p><p>补充：<br><code>xorl</code> - 按位异或</p><p><code>$</code> - 立即数</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Plugin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Assembly </tag>
            
            <tag> 汇编 </tag>
            
            <tag> lldb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LLVM】clang插件开发</title>
      <link href="/2019/04/16/compiler-llvm-clang/"/>
      <url>/2019/04/16/compiler-llvm-clang/</url>
      
        <content type="html"><![CDATA[<p>接上一篇LLVM的介绍，我们认识了LLVM，现在可以尝试用前端-<code>clang</code>自定义我们需要的东西了。</p><a id="more"></a><h3 id="插件目录"><a href="#插件目录" class="headerlink" title="插件目录"></a>插件目录</h3><ol><li><p>新建插件文件夹（例：<code>yb-plugin</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> llvm/tools/clang/tools/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir yb-plugin</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/usz7q.png@normal" alt=""></p></li><li><p>打开<code>CMakeLists.txt</code>（路径：<code>llvm/tools/clang/tools/CMakeLists.txt</code>），把要加载的插件加入到里面<br><img src="http://blog.idbeny.com/lb3rn.png@normal" alt=""></p></li></ol><h3 id="插件必要文件"><a href="#插件必要文件" class="headerlink" title="插件必要文件"></a>插件必要文件</h3><p>在<code>yb-plugin</code>目录下编写插件（插件是用C++编写的，有基础的同学会比较好理解）</p><ul><li>新建<code>CMakeLists.txt</code>，文件内容是：<code>add_llvm_library(YBPlugin MODULE BUILDTREE_ONLY YBPlugin.cpp)</code>，</li><li>YBPlugin是插件名，YBPlugin.cpp是源代码文件<br><img src="http://blog.idbeny.com/ckd0u.png@normal" alt=""></li></ul><h3 id="编译插件"><a href="#编译插件" class="headerlink" title="编译插件"></a>编译插件</h3><ul><li><p>利用cmake生成的Xcode项目来编译插件(第一次编写完插件，需要利用cmake重新生成一下Xcode项目: <code>$ cmake -G Xcode ../llvm</code>)<br><img src="http://blog.idbeny.com/vmedy.png@normal" alt=""><br>打开工程，选择<code>Automatically Create Schemes</code><br><img src="http://blog.idbeny.com/009dl.png@normal" alt=""></p></li><li><p>插件源代码在<code>Sources/Loadable modules</code>目录下可以找到，这样就可以直接在Xcode里编写插件代码<br><img src="http://blog.idbeny.com/yhmrk.png@normal" alt=""></p></li><li><p>编写插件<code>YBPlugin.cpp</code><br><img src="http://blog.idbeny.com/pnemt.png@normal" alt=""></p></li><li><p>选择YBPlugin这个target进行编译，编译完会生成一个动态库文件（路径：<code>llvm_xcode/Debug/lib/YBPlugin.dylib</code>）<br><img src="http://blog.idbeny.com/la3hp.png@normal" alt=""></p></li></ul><h3 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h3><ul><li>在Xcode项目中指定加载插件动态库:<code>BuildSettings &gt; Other C Flags</code></li><li><code>-Xclang -load -Xclang 动态库路径 -Xclang -add-plugin -Xclang 插件名称</code><br><img src="http://blog.idbeny.com/lqzre.png@normal" alt=""></li><li>编译（报错是因为Xcode默认的编译器不允许使用插件，做法请看下面）<br><img src="http://blog.idbeny.com/0kciy.png@normal" alt=""></li></ul><h3 id="修改自定义编译器（Hack-Xcode）"><a href="#修改自定义编译器（Hack-Xcode）" class="headerlink" title="修改自定义编译器（Hack Xcode）"></a>修改自定义编译器（Hack Xcode）</h3><ol><li><p>首先要对Xcode进行Hack，才能修改默认的编译器</p></li><li><p>下载<code>XcodeHacking.zip</code>，解压，修改<code>HackedClang.xcplugin/Contents/Resources/HackedClang.xcspec</code>的内容，设<br>置一下自己编译好的clang的路径（之前安装好的<code>llvm_release/bin/clang</code>）<br><img src="http://blog.idbeny.com/6m218.png@normal" alt=""></p></li><li><p>然后在XcodeHacking目录下进行命令行，将XcodeHacking的内容剪切到Xcode内部</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv HackedClang.xcplugin `xcode-select -print-path`<span class="regexp">/../</span>PlugIns<span class="regexp">/Xcode3Core.ideplugin/</span>Contents<span class="regexp">/SharedSupport/</span>Developer<span class="regexp">/Library/</span>Xcode/Plug-ins</span><br><span class="line"></span><br><span class="line">$ sudo mv HackedBuildSystem.xcspec `xcode-select -print-path`<span class="regexp">/Platforms/</span>iPhoneSimulator.platform<span class="regexp">/Developer/</span>Library<span class="regexp">/Xcode/</span>Specifications</span><br></pre></td></tr></table></figure></li><li><p>重启Xcode，选择编译器<br><img src="http://blog.idbeny.com/r4nc7.png@normal" alt=""></p></li><li><p>开始编译（编译项目后，会在编译日志看到YBPlugin插件的打印信息(如果插件更新了，最好先Clean一下项目)）<br><img src="./compiler-start.png" alt="compiler-start"></p></li></ol><h3 id="提示警告、错误信息"><a href="#提示警告、错误信息" class="headerlink" title="提示警告、错误信息"></a>提示警告、错误信息</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">YBASTConsumer(CompilerInstance &amp;<span class="params">ci</span>)</span> &#123;</span><br><span class="line">  DiagnosticsEngine &amp;D = ci.get<span class="constructor">Diagnostics()</span>; </span><br><span class="line">  D.<span class="constructor">Report(D.<span class="params">getCustomDiagID</span>(DiagnosticsEngine::Warning, <span class="string">"1024星球警告信息"</span>)</span>); </span><br><span class="line">  D.<span class="constructor">Report(D.<span class="params">getCustomDiagID</span>(DiagnosticsEngine::Error, <span class="string">"1024星球错误信息"</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><ul><li>想要实现更复杂的插件功能，就需要利用clang的API针对语法树(AST)进行相应的分析和处理</li><li>关于AST的资料<ul><li><a href="https://clang.llvm.org/doxygen/namespaceclang.html" target="_blank" rel="noopener">https://clang.llvm.org/doxygen/namespaceclang.html</a></li><li><a href="https://clang.llvm.org/doxygen/classclang_1_1Decl.html" target="_blank" rel="noopener">https://clang.llvm.org/doxygen/classclang_1_1Decl.html</a></li><li><a href="https://clang.llvm.org/doxygen/classclang_1_1Stmt.html" target="_blank" rel="noopener">https://clang.llvm.org/doxygen/classclang_1_1Stmt.html</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM </tag>
            
            <tag> clang </tag>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LLVM】认识LLVM</title>
      <link href="/2019/04/15/compiler-llvm/"/>
      <url>/2019/04/15/compiler-llvm/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是LLVM？"><a href="#什么是LLVM？" class="headerlink" title="什么是LLVM？"></a>什么是<a href="https://llvm.org" target="_blank" rel="noopener">LLVM</a>？</h2><h3 id="官网：https-llvm-org"><a href="#官网：https-llvm-org" class="headerlink" title="官网：https://llvm.org"></a>官网：<a href="https://llvm.org" target="_blank" rel="noopener">https://llvm.org</a></h3><p>原文：<br><img src="http://blog.idbeny.com/194sg.png@normal" alt=""><br>The LLVM Project is a collection of modular and reusable <font style="color:red">compiler</font> and <font style="color:red">toolchain</font> technologies. Despite its name, LLVM has little to do with traditional virtual machines. The name “LLVM” itself is not an acronym; it is the full name of the project.</p><a id="more"></a><p>翻译：LLVM项目是模块化和可重用的编译器和工具链技术的集合。尽管名为LLVM，但它与传统虚拟机几乎没有什么关系。“LLVM”这个名字本身不是一个缩写词；它是<font style="color:red">项目的全称</font>。</p><p>创始人：<a href="https://baike.baidu.com/item/%E5%85%8B%E9%87%8C%E6%96%AF%C2%B7%E6%8B%89%E7%89%B9%E7%BA%B3/14187836?fr=aladdin" target="_blank" rel="noopener">Chris Lattner</a>，也是<a href="https://developer.apple.com/cn/swift/" target="_blank" rel="noopener">Swift</a>之父</p><h3 id="一、传统的编译器架构："><a href="#一、传统的编译器架构：" class="headerlink" title="一、传统的编译器架构："></a>一、传统的编译器架构：</h3><p><img src="http://blog.idbeny.com/6epr5.png@normal" alt=""></p><ul><li><p>Frontend： 前端</p><ul><li>词法分析、语法分析、语义分析、生成中间代码</li></ul></li><li><p>Optimizer：优化器</p><ul><li>中间代码优化</li></ul></li><li><p>Backend：后端</p><ul><li>生成机器码</li></ul></li></ul><h3 id="二、LLVM架构"><a href="#二、LLVM架构" class="headerlink" title="二、LLVM架构"></a>二、LLVM架构</h3><p><img src="http://blog.idbeny.com/zdzwv.png@normal" alt=""></p><ul><li>不同的前端后端使用同一的中间代码LLVM Intermedicate Representation（LLVM IR）</li><li>如果需要支持一种新的编程语言，那么只需要实现一个新的前端</li><li>如果需要支持一种新的硬件设备，那么只需要实现一个新的后端</li><li>优化阶段是一个通用的阶段，它针对的是统一的LLVM IR，不论是支持新的编程语言，还是支持新的硬件设备，都不需要对优化阶段做修改</li><li>相比之下，GCC的前端和后端没分的太开，前端后端耦合在了一起，所以GCC为了支持一门新的语言，或者为了支持一个新的目标平台，就变得特别困难（排列组合形式）</li><li>LLVM现在被作为实现各种静态和运行时编译语言的通用基础结构（GCC家族、Java、.NET、Python、Ruby、Scheme、Haskell、D等）</li></ul><h3 id="三、什么是Clang？"><a href="#三、什么是Clang？" class="headerlink" title="三、什么是Clang？"></a>三、什么是Clang？</h3><ul><li><p>Clang是LLVM项目的一个子项目</p><ul><li>给予LLVM架构的C/C++/Objective-C编译器<font style="color:blue">前端</font></li><li>官网：<a href="http://clang.llvm.org/" target="_blank" rel="noopener">http://clang.llvm.org/</a></li></ul></li><li><p>相比于GCC、Clang具有如下优点：</p><ul><li><strong>编译速度快：</strong> 在某些平台上，Clang的编译速度显著的快过GCC（Debug模式下编译OC速度比GCC快3倍）</li><li><strong>占用内存小：</strong> Clang生成的AST所占用的内存是GCC的五分之一左右</li><li><strong>模块化设计：</strong> Clang采用基于库的模块化设计，易于IDE集成及其他用途的重用</li><li><strong>诊断信息可读性强：</strong> 在编译过程中，Clang创建并保留了大量详细的元数据（metadata），有利于调试和错误定位</li><li><strong>设计清晰简单，容易理解，易于扩展增强</strong></li></ul></li></ul><h3 id="四、Clang与LLVM"><a href="#四、Clang与LLVM" class="headerlink" title="四、Clang与LLVM"></a>四、Clang与LLVM</h3><p><img src="http://blog.idbeny.com/tl8fw.png@normal" alt=""><br><img src="http://blog.idbeny.com/nnzy7.png@normal" alt=""></p><ul><li><p><strong>广义的LLVM：</strong> 整个LLVM架构</p></li><li><p><strong>狭义的LLVM：</strong> LLVM后端（代码优化、目标代码生成等）</p></li></ul><h3 id="五、OC源文件的编译过程"><a href="#五、OC源文件的编译过程" class="headerlink" title="五、OC源文件的编译过程"></a>五、OC源文件的编译过程</h3><ol><li><p>尝试编译main.m<br><img src="http://blog.idbeny.com/agwoh.png@normal" alt=""></p></li><li><p>命令行查看编译的过程：<code>$ clang -ccc-pring-phases main.m</code><br><img src="http://blog.idbeny.com/j7ugl.png@normal" alt=""></p></li></ol><ul><li><strong>input：</strong> 输入源文件</li><li><strong>preprocessor：</strong> 预处理器（把import、include、define等替换掉）</li><li><strong>compiler：</strong> 编译成中间代码（IR）</li><li><strong>backend：</strong> 汇编生成目标代码</li><li><strong>assembler：</strong> 目标代码</li><li><strong>linker：</strong> 链接动态库和静态库</li><li><strong>bind-arch：</strong> 生成适合对应架构的机器码</li></ul><ol start="3"><li><p>查看preprocessor（预处理）的结果，为了方边查看，我们把main文件改造下<br><img src="http://blog.idbeny.com/ftzhn.png@normal" alt=""></p></li><li><p>控制台输入命令：<code>$ clang -E main.m</code><br><img src="http://blog.idbeny.com/5o9it.png@normal" alt=""><br>可以看到，已经把宏定义的AGE自动替换了</p></li></ol><h3 id="六、词法分析"><a href="#六、词法分析" class="headerlink" title="六、词法分析"></a>六、词法分析</h3><p>词法分析，其实就是把代码生成一个个token：<code>$ clang -fmodules -E -Xclang -dump-tokens main.m</code><br><img src="http://blog.idbeny.com/foxuz.png@normal" alt=""></p><h3 id="七、语法树-AST"><a href="#七、语法树-AST" class="headerlink" title="七、语法树-AST"></a>七、语法树-AST</h3><p>语法分析，生成语法树（AST，Abstract Syntax Tree）：<code>$ clang -fmodules -fsyntax-only -Xclang -ast-dump main.m</code><br><img src="http://blog.idbeny.com/r9z3z.png@normal" alt=""></p><ul><li><strong>FunctionDecl：</strong> 函数声明</li><li><strong>ParmVarDecl：</strong> 参数声明</li><li><strong>CompoundStmt/DeclStmt：：</strong> 具体语句</li><li><strong>VarDecl：</strong> 变量声明</li><li><strong>BinaryOperator：</strong> 操作符</li></ul><h3 id="八、LLVM-IR"><a href="#八、LLVM-IR" class="headerlink" title="八、LLVM IR"></a>八、LLVM IR</h3><p>LLVM IR有3中表示形式（但本质是等价的，就好比水可以有气体、液体、固体3种形态）</p><ul><li>text：便于阅读的文本格式，类似于汇编语言，扩展名<code>.ll</code>（<code>$ clang -S -emit-llvm main.m</code>）</li><li>memory：内存格式</li><li>bitcode：二进制格式，扩展名<code>.bc</code>（<code>$clang -c -emit-llvm main.m</code>）</li></ul><p>源代码<br><img src="http://blog.idbeny.com/bakiw.png@normal" alt=""><br>命令：<code>$ clang -S -emit-llvm main.m</code><br>生成main.ll文件<br><img src="http://blog.idbeny.com/ylxbq.png@normal" alt=""></p><p><strong>IR基本语法</strong></p><ul><li>注释以分号;开头</li><li>全局标识符以@开头，局部标识符以%开头</li><li>alloca，在当前函数栈帧中分配内存</li><li>i32，32bit，4个字节的意思</li><li>align，内存对齐</li><li>store，写入数据</li><li>load，读取数据</li></ul><p><strong>官方语法参考</strong><br><a href="https://llvm.org/docs/LangRef.html" target="_blank" rel="noopener">https://llvm.org/docs/LangRef.html</a></p><h3 id="九、源码下载"><a href="#九、源码下载" class="headerlink" title="九、源码下载"></a>九、源码下载</h3><ol><li><p>下载LLVM（大小795MB，仅供参考）：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://git.llvm.org/git/llvm.git/</span><br></pre></td></tr></table></figure></li><li><p>下载Clang（一定要等到LLVM下载完成后再操作，大小272.4MB，仅供参考）：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd llvm/tools</span><br><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/git.llvm.org/git</span><span class="regexp">/clang.git/</span></span><br></pre></td></tr></table></figure></li><li><p>Clang没有下载的时候，为什么也能使用？是因为Xcode内置了该工具<br><img src="http://blog.idbeny.com/ke2kw.png@normal" alt=""><br>之所以再次下载，是为了我们能够编译成自己需要的Clang（定制化）</p></li></ol><h3 id="十、源码编译"><a href="#十、源码编译" class="headerlink" title="十、源码编译"></a>十、源码编译</h3><ol><li>安装cmake和ninja（先安装brew，<a href="https://brew.sh/）" target="_blank" rel="noopener">https://brew.sh/）</a><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>cmake</span><br><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>ninja</span><br></pre></td></tr></table></figure><ul><li>ninja如果安装失败，可以直接从<a href="https://github.com/ninja-build/ninja/release" target="_blank" rel="noopener">Github</a>获取release版本放入<code>/usr/local/bin</code></li></ul></li></ol><ol start="2"><li>生成模板：在LLVM源码同级目录下新建一个<code>llvm_build</code>目录（最终会在<code>llvm_build</code>目录下生成<code>build.ninja</code>）<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm_build</span><br><span class="line">$ cmake -G Ninja <span class="built_in">..</span>/llvm <span class="attribute">-DCMAKE_INSTALL_PREFIX</span>=LLVM的安装路径</span><br></pre></td></tr></table></figure></li></ol><ul><li>更多cmake相关选项，可以参考：<a href="https://llvm.org/docs/CMake.html" target="_blank" rel="noopener">https://llvm.org/docs/CMake.html</a></li></ul><ol start="3"><li><p>执行编译指令（编译完毕后，<code>llvm_build</code>目录大概21.05GB（仅供参考））</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ninja</span><br></pre></td></tr></table></figure></li><li><p>执行安装指令（在<code>llvm_build</code>同级目录创建一个<code>llvm_release</code>目录，安装完毕后，安装目录大概11.92GB（仅供参考））</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ninja <span class="keyword">install</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>完成之后在可以看到clang执行文件（<code>llvm_release/bin/clang</code>）</li></ul><hr><ol start="5"><li>另外一种编译方式：生成Xcode项目，然后用Xcode编译（速度很慢很慢很慢~）<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm_build</span><br><span class="line">$ cmake -G Ninja <span class="built_in">..</span>/llvm <span class="attribute">-DCMAKE_INSTALL_PREFIX</span>=LLVM的安装路径</span><br></pre></td></tr></table></figure></li></ol><ul><li>新建<code>llvm_xcode</code>目录<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm_xcode</span><br><span class="line">$ cmake -G XCODE <span class="built_in">..</span>/llvm <span class="attribute">-DCMAKE_INSTALL_PREFIX</span>=LLVM的安装路径</span><br></pre></td></tr></table></figure></li><li>生成之后，可以看到执行文件，用Xcode打开之后选择Scheme<code>ALL_BUILD</code>，开始编译，之后在<code>llvm_xcode/Debug/bin</code>可以看到编译后的文件。</li></ul><h3 id="十一、应用与实践"><a href="#十一、应用与实践" class="headerlink" title="十一、应用与实践"></a>十一、应用与实践</h3><h4 id="LLVM相关工具：libclang、libTooling"><a href="#LLVM相关工具：libclang、libTooling" class="headerlink" title="LLVM相关工具：libclang、libTooling"></a>LLVM相关工具：libclang、libTooling</h4><ul><li>官方参考：<a href="https://clang.llvm.org/docs/Tooling.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/Tooling.html</a></li><li>应用场景：语法树分析、语言转换等</li></ul><h4 id="Clang插件开发"><a href="#Clang插件开发" class="headerlink" title="Clang插件开发"></a>Clang插件开发</h4><ul><li>官方参考【如何开发一个Clang插件】：<ul><li><a href="https://clang.llvm.org/docs/ClangPlugins.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/ClangPlugins.html</a></li><li><a href="https://clang.llvm.org/docs/ExternalClangExamples.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/ExternalClangExamples.html</a></li><li><a href="https://clang.llvm.org/docs/RAVFrontendAction.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/RAVFrontendAction.html</a></li></ul></li><li>应用场景：代码检查（命名规范，代码规范）等</li></ul><h4 id="Pass开发"><a href="#Pass开发" class="headerlink" title="Pass开发"></a>Pass开发</h4><ul><li>官方参考【如何进行代码优化】：<a href="https://llvm.org/docs/WritingAnLLVMPass.html" target="_blank" rel="noopener">https://llvm.org/docs/WritingAnLLVMPass.html</a></li><li>应用场景：代码优化，代码混淆等</li><li>开发新的编程语言<ul><li><a href="https://llvm-tutorial-cn.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://llvm-tutorial-cn.readthedocs.io/en/latest/index.html</a></li><li><a href="https://kaleidoscope-llvm-tutorial-zh-cn.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">https://kaleidoscope-llvm-tutorial-zh-cn.readthedocs.io/zh_CN/latest/index.html</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】loadView原理</title>
      <link href="/2018/09/07/ios-loadview/"/>
      <url>/2018/09/07/ios-loadview/</url>
      
        <content type="html"><![CDATA[<p>我们一直在使用控制器，但是有没有想过控制器的view是如何创建的呢？</p><a id="more"></a><p>当外界第一次使用当前控制器的<code>view</code>时，会调用控制器的<code>loadView</code>方法，该方法用来创建控制器的<code>view</code>。控制器的<code>view</code>是懒加载的（什么时候调用，什么时候创建），如果已经创建就直接使用。</p><h2 id="普通流程"><a href="#普通流程" class="headerlink" title="普通流程"></a>普通流程</h2><p>创建一个控制器，并用<code>IB</code>描述控制器的<code>view</code>。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FirstViewController.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FirstViewController</span> : <span class="title">UIViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FirstViewController.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"FirstViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FirstViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FirstViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/zr6lm.png@normal" alt=""></p><p>指定<code>UIWindow</code>的跟控制器为<code>FirstViewController</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] init];</span><br><span class="line">    <span class="keyword">self</span>.window.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    </span><br><span class="line">    FirstViewController *firstVC = [[FirstViewController alloc] init];</span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = firstVC;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行，看效果：<br><img src="http://blog.idbeny.com/43u31.png@normal" alt=""></p><p>这是正常我们使用控制器和<code>IB</code>的流程。控制器的<code>view</code>是在<code>loadView</code>方法中创建的，我们尝试重写该方法看下会有什么效果。</p><h2 id="重写loadView"><a href="#重写loadView" class="headerlink" title="重写loadView"></a>重写loadView</h2><p>重写<code>FirstViewController</code>的<code>loadView</code>方法</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(void)</span>loadView &#123;</span><br><span class="line">    NSLog<span class="params">(@<span class="string">"%s"</span>, __func__)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，界面是一个空白，<code>FirstView.xib</code>也没有加载，控制台输出多次<code>-[FirstViewController loadView]</code>。查看视图层级关系后，发现控制器<code>view</code>不存在，如果我们再给<code>UIWindow</code>一个颜色，看到的就是一个<code>UIWindow</code>窗口。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.window.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">...</span><br><span class="line">firstVC.view.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/bbwf3.png@normal" alt=""></p><p><strong>结论：</strong> 子类重写<code>loadView</code>方法后，如果不做任何处理，控制器不会加载<code>IB</code>，更不会自动创建view。</p><p><em>思考：如果调用<code>[super loadView]</code>，会走默认的流程么？</em><br>如果调用<code>[super loadView]</code>，也仅仅是会自动创建<code>view</code>，不会加载<code>IB</code>，除非在控制器调用<code>initWithNibName:</code>初始化方法时指定<code>IB</code>名称。</p><h2 id="手动创建控制器view"><a href="#手动创建控制器view" class="headerlink" title="手动创建控制器view"></a>手动创建控制器view</h2><p>我们尝试自己创建<code>view</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)loadView &#123;</span><br><span class="line">    <span class="keyword">self</span>.view = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.frame];</span><br><span class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行，程序崩溃了。<br><img src="http://blog.idbeny.com/v0hm7.png@normal" alt=""></p><p>从上面堆栈信息可以看出，发生了死循环，为什么？<br><strong>因为控制器view是懒加载的，只要调用<code>view</code>的<code>get</code>方法就会进入<code>loadView</code>方法。所以在<code>view</code>创建完成前不要使用使用他。</strong></p><p>view懒加载伪代码：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (UIView *)<span class="built_in">view</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!_view) &#123;</span><br><span class="line">    [self loadView];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>view</code>的创建方式</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)loadView &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] init];</span><br><span class="line">    view.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">    <span class="keyword">self</span>.view = view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行，显示正常<br><img src="http://blog.idbeny.com/h81zj.png@normal" alt=""></p><p>在<code>loadView</code>中不需要给自定义的view设置大小，在合适的时机（<code>viewWillLayoutSubviews</code>和<code>viewDidLayoutSubviews</code>）view会自动设置为当前屏幕大小。</p><h2 id="查看viewDidLoad加载时机"><a href="#查看viewDidLoad加载时机" class="headerlink" title="查看viewDidLoad加载时机"></a>查看viewDidLoad加载时机</h2><p><code>AppDelegate.m</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    FirstViewController *firstVC = [[FirstViewController alloc] init];</span><br><span class="line">    firstVC.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = firstVC;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FirstViewController.m</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)loadView &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] init];</span><br><span class="line">    view.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">    <span class="keyword">self</span>.view = view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考：<code>view</code>是什么颜色？<br><img src="http://blog.idbeny.com/yb5cn.png@normal" alt=""></p><p>红色，因为代码执行顺序是这样的：</p><ol><li>执行<code>firstVC.view.backgroundColor = [UIColor redColor];</code>调用控制器view的<code>get</code>方法；</li><li>执行<code>firstVC</code>的<code>loadView</code>方法；</li><li>创建控制器view，创建完成后执行<code>view.backgroundColor = [UIColor yellowColor];</code></li><li><code>loadView</code>执行完毕，view的<code>get</code>方法执行结束；</li><li>颜色重新赋值<code>firstVC.view.backgroundColor = [UIColor redColor];</code></li></ol><h3 id="viewDidLoad修改view的颜色"><a href="#viewDidLoad修改view的颜色" class="headerlink" title="viewDidLoad修改view的颜色"></a>viewDidLoad修改view的颜色</h3><p>上面示例基础上，增加<code>viewDidLoad</code>方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考：<code>view</code>是什么颜色？<br><img src="http://blog.idbeny.com/xpqhi.png@normal" alt=""></p><p>红色，为什么还是红色呢？<code>viewDidLoad</code>不是最后才执行的么？我们看下代码的执行顺序。</p><p><code>AppDelegate.m</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    FirstViewController *firstVC = [[FirstViewController alloc] init];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">    firstVC.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = firstVC;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"4"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FirstViewController.m</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)loadView &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"5"</span>);</span><br><span class="line">    <span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] init];</span><br><span class="line">    view.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">    <span class="keyword">self</span>.view = view;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"6"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"7"</span>);</span><br><span class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"8"</span>);</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺序：1 &gt; 5 &gt; 6 &gt; 7 &gt; 8 &gt; 2 &gt; 3 &gt; 4<br>看到执行<code>loadView</code>结束后执行了<code>viewDidLoad</code>，所以颜色变成了红色。</p><p>view懒加载伪代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (UIView *)<span class="selector-tag">view</span> &#123;</span><br><span class="line">  <span class="selector-tag">if</span> (!_view) &#123;</span><br><span class="line">    <span class="selector-attr">[self loadView]</span>;</span><br><span class="line">    <span class="selector-attr">[self viewDidLoad]</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">_view</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的分析可以总结：</p><ul><li>控制器的<code>view</code>是懒加载的；</li><li>当控制器<code>view</code>创建完成后，会自动调用<code>viewDidLoad</code>方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> loadView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】应用程序启动原理及UIWindow的使用</title>
      <link href="/2018/07/21/ios-launch-start/"/>
      <url>/2018/07/21/ios-launch-start/</url>
      
        <content type="html"><![CDATA[<p>iOS应用程序（App）从开始运行到界面展示经历了哪些方法？界面是怎么显示到屏幕上的？理解了这些对我们后续的开发很有帮助。</p><a id="more"></a><p>App从启动到我们熟知的<code>AppDelegate</code>代理方法经历了一下几个步骤</p><p><img src="http://blog.idbeny.com/jje0g.png@normal" alt=""></p><h2 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h2><p>主要讲的是控制器的<code>load</code>方法，App执行<code>main</code>函数之前会优先执行<code>load</code>方法。我们可以在这里交换一些控制器的生命周期及方法，经常用到的埋点基本上都是通过该方式进行处理的。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="comment">// 自定义处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><p><code>main</code>函数在工程根目录的<code>main.m</code>文件中。也是程序的唯一入口函数。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> * appDelegateClassName;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="comment">// Setup code that might create autoreleased objects goes here.</span></span><br><span class="line">        appDelegateClassName = <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, appDelegateClassName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看下<code>UIApplicationMain</code>的介绍。该函数的作用就是创建一个应用程序对象并设置代理，然后设置主事件循环。如果应用程序的<code>Info.plist</code>指定了一个<code>nib</code>作为程序主要入口，这个<code>nib</code>将会被加载到程序中。最后还补充到，尽管声明了返回类型，但该函数永远不会返回（这也意味着主循环是一个死循环，直到程序被杀死才会停止）。<br><img src="http://blog.idbeny.com/3h1t3.png@normal" alt=""></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIKIT_EXTERN <span class="built_in">int</span> <span class="constructor">UIApplicationMain(<span class="params">int</span> <span class="params">argc</span>, <span class="params">char</span> <span class="operator">*</span> <span class="params">_Nullable</span> <span class="params">argv</span>[<span class="params">_Nonnull</span>], NSString <span class="operator">*</span> <span class="params">_Nullable</span> <span class="params">principalClassName</span>, NSString <span class="operator">*</span> <span class="params">_Nullable</span> <span class="params">delegateClassName</span>)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>argc</code>： <code>argv</code>中参数的个数，通常是<code>main</code>对应的参数。</li><li><code>argv</code>： 参数列表，通常也是<code>main</code>对应的参数。</li><li><code>principalClassName</code>：<ul><li><code>UIApplication</code>或子类名称</li><li>如果设置为空，将会从<code>Info.plist</code>中查找是否指定了该值（查找key：<code>Main storyboard file base name</code>）。</li><li>如果在<code>Info.plist</code>找到配置的值（即<code>Main</code>），就会创建一个<code>UIWindow</code>，把<code>Main.storyboard</code>中箭头指向的控制器view添加到<code>UIWindow</code>上；</li><li>如果在<code>Info.plist</code>没有找到，将会直接使用<code>UIApplication</code>，同样会创建上面描述的<code>UIWindow</code>。</li></ul></li><li><code>delegateClassName</code>：<code>principalClassName</code>的代理类名称，初始化<code>principalClassName</code>完成后代理类会被实例化（开始走<code>AppDelegate</code>的代理方法）。</li></ul><h2 id="UIWindow"><a href="#UIWindow" class="headerlink" title="UIWindow"></a>UIWindow</h2><p><code>UIWindow</code>是一个特殊的<code>UIView</code>，一般情况下一个应用程序至少有一个<code>UIWindow</code>。</p><p>iOS程序启动结束后，会自动创建一个<code>UIWindow</code>，然后设置跟控制器，把跟控制器的<code>View</code>添加到这个<code>UIWindow</code>上，最后展示在屏幕上。<code>UIWindow</code>更像是一棵树的根节点，所有的子节点都从根节点或根的子节点出发。所以说如果没有<code>UIWindow</code>，用户就看不到任何界面。</p><p>如果设置了<code>Main.storyboard</code>启动，程序就会把<code>Main.storyboard</code>中初始化箭头指向的控制器<code>view</code>添加到<code>UIWindow</code>上。<code>UIWindow</code>的跟控制器就不需要我们自己设置了，系统会自动关联。</p><h3 id="UIWindow为什么要设置rootViewController"><a href="#UIWindow为什么要设置rootViewController" class="headerlink" title="UIWindow为什么要设置rootViewController?"></a><code>UIWindow</code>为什么要设置<code>rootViewController</code>?</h3><p>设置<code>rootViewController</code>从程序设计角度来讲会更加合理，并且能够起到解耦的效果。从内存角度看的话，就是一个强引用指针。</p><h3 id="手动创建UIWindow"><a href="#手动创建UIWindow" class="headerlink" title="手动创建UIWindow"></a>手动创建<code>UIWindow</code></h3><ol><li><p>把<code>Info.plist</code>中的<code>Main storyboard file base name</code>对应的value值<code>Main</code>清空，或者直接把这行移除。<br><img src="http://blog.idbeny.com/qnvxr.png@normal" alt=""></p></li><li><p>在<code>AppDelegate</code>加载完成的代理方法中创建<code>UIWindow</code>，并显示</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="comment">// 创建UIWindow</span></span><br><span class="line">    <span class="built_in">UIWindow</span> *window = [[<span class="built_in">UIWindow</span> alloc] init];</span><br><span class="line">    window.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置UIWindow的根控制器</span></span><br><span class="line">    <span class="built_in">UIViewController</span> *vc = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    vc.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    window.rootViewController = vc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让当前window成为主window并显示到屏幕上</span></span><br><span class="line">    [window makeKeyAndVisible];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 强引用，否则会被释放</span></span><br><span class="line">    <span class="keyword">self</span>.window = window;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/t8d1d.png@normal" alt=""></p></li></ol><h3 id="makeKeyAndVisible原理"><a href="#makeKeyAndVisible原理" class="headerlink" title="makeKeyAndVisible原理"></a>makeKeyAndVisible原理</h3><p><code>UIApplicaton</code>属性<code>keyWindow</code>指向的就是<code>makeKeyAndVisible</code>的最后一次调用者。</p><p>我们通过<code>[UIApplication sharedApplication].keyWindow</code>查看下创建的<code>UIWindow</code>做了哪些操作。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="built_in">UIWindow</span> *window = [[<span class="built_in">UIWindow</span> alloc] init];</span><br><span class="line">    <span class="built_in">UIViewController</span> *vc = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    window.rootViewController = vc;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"window:%@"</span>, window);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"before:%@"</span>, [<span class="built_in">UIApplication</span> sharedApplication].keyWindow);</span><br><span class="line">    </span><br><span class="line">    [window makeKeyAndVisible];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"after:%@"</span>, [<span class="built_in">UIApplication</span> sharedApplication].keyWindow);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.window = window;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出：</span><br><span class="line">window:&lt;<span class="built_in">UIWindow</span>: <span class="number">0x7f9d1c506eb0</span>; frame = (<span class="number">0</span> <span class="number">0</span>; <span class="number">375</span> <span class="number">667</span>); hidden = <span class="literal">YES</span>; gestureRecognizers = &lt;<span class="built_in">NSArray</span>: <span class="number">0x600002a42a90</span>&gt;; layer = &lt;<span class="built_in">UIWindowLayer</span>: <span class="number">0x60000244c800</span>&gt;&gt;</span><br><span class="line"></span><br><span class="line">before:(null)</span><br><span class="line"></span><br><span class="line">after:&lt;<span class="built_in">UIWindow</span>: <span class="number">0x7f9d1c506eb0</span>; frame = (<span class="number">0</span> <span class="number">0</span>; <span class="number">375</span> <span class="number">667</span>); gestureRecognizers = &lt;<span class="built_in">NSArray</span>: <span class="number">0x600002a42a90</span>&gt;; layer = &lt;<span class="built_in">UIWindowLayer</span>: <span class="number">0x60000244c800</span>&gt;&gt;</span><br></pre></td></tr></table></figure><p>通过控制台输出可以看到，<code>keyWindow</code>和自己创建的<code>window</code>是同一个对象，只是调用<code>makeKeyAndVisible</code>之前<code>window</code>的<code>hidden</code>属性是<code>YES</code>，调用之后<code>hidden</code>属性没有了（其实就是<code>NO</code>）。</p><p>总结<code>makeKeyAndVisible</code>作用：</p><ul><li>设置调用者<code>window</code>为当前应用程序的<code>keyWindow</code>；</li><li>显示到屏幕上；</li><li>把根控制器的<code>view</code>添加到自己上面。</li></ul><p>伪代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UIWindow.m</span></span><br><span class="line">- (<span class="keyword">void</span>)makeKeyAndVisible &#123;</span><br><span class="line">  [<span class="built_in">UIApplication</span> sharedApplication].keyWindow = <span class="keyword">self</span>;</span><br><span class="line">  <span class="keyword">self</span>.hidden = <span class="literal">NO</span>;</span><br><span class="line">  [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.rootViewController.view];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不调用<code>makeKeyAndVisible</code>，设置<code>window</code>的<code>hidden</code>为<code>NO</code>时也可以显示到屏幕，只是<code>keyWindow</code>为空</p><p>伪代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UIWindow.m</span></span><br><span class="line">- (<span class="keyword">void</span>)setHidden:(<span class="built_in">BOOL</span>)hidden &#123;</span><br><span class="line">  _hidden = hidden;</span><br><span class="line">  <span class="keyword">if</span> (_hidden) &#123;</span><br><span class="line">    [<span class="keyword">self</span>.rootViewController.view removeFromSuperview];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.rootViewController.view];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>UIWindow</code>的根控制器必须设置且不能给空，否则报错。<code>iOS9</code>之后创建的<code>UIWindow</code>不需要设置<code>frame</code>了。</p><h3 id="多个UIWindow"><a href="#多个UIWindow" class="headerlink" title="多个UIWindow"></a>多个UIWindow</h3><p>系统给我们提供<code>UIWindow</code>的<code>windowLevel</code>层级有三个常量：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="keyword">const</span> <span class="built_in">UIWindowLevel</span> <span class="built_in">UIWindowLevelNormal</span>;</span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="keyword">const</span> <span class="built_in">UIWindowLevel</span> <span class="built_in">UIWindowLevelAlert</span>;</span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="keyword">const</span> <span class="built_in">UIWindowLevel</span> <span class="built_in">UIWindowLevelStatusBar</span></span><br></pre></td></tr></table></figure><p><code>windowLevel</code>是<code>CGFloat</code>类型，默认值是<code>0.0</code>，我们可以通过他设置多个window之间的层级。</p><p>三个常量之间的层级优先级是：<code>UIWindowLevelNormal（值：0.0）</code> &gt; <code>UIWindowLevelStatusBar（值：1000.0）</code> &gt; <code>UIWindowLevelAlert（值：2000.0）</code></p><ul><li><code>UIWindowLevelNormal</code>：创建的window默认都是这个层级；</li><li><code>UIWindowLevelStatusBar</code>：状态栏的层级；</li><li><code>UIWindowLevelAlert</code>：键盘、系统弹框都属于这个层级。</li></ul><h4 id="新建window作为状态栏背景（UIWindowLevelNormal）"><a href="#新建window作为状态栏背景（UIWindowLevelNormal）" class="headerlink" title="新建window作为状态栏背景（UIWindowLevelNormal）"></a>新建window作为状态栏背景（<code>UIWindowLevelNormal</code>）</h4><p>不需要设置<code>windowLevel</code>，或设置<code>windowLevel</code>小于<code>UIWindowLevelStatusBar</code>即可。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] init];</span><br><span class="line">    <span class="keyword">self</span>.window.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">    <span class="built_in">UIViewController</span> *vc = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    vc.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = vc;</span><br><span class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">UIWindow</span> *statusBarWindow = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width, <span class="number">20.0</span>)];</span><br><span class="line">    <span class="built_in">UIViewController</span> *statusBarVC = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    statusBarVC.view.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">    statusBarWindow.rootViewController = statusBarVC;</span><br><span class="line">    [statusBarWindow makeKeyAndVisible];</span><br><span class="line">    <span class="keyword">self</span>.statusBarWindow = statusBarWindow;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/8dzur.PNG@normal" alt=""></p><h4 id="新建window覆盖状态栏（UIWindowLevelStatusBar）"><a href="#新建window覆盖状态栏（UIWindowLevelStatusBar）" class="headerlink" title="新建window覆盖状态栏（UIWindowLevelStatusBar）"></a>新建window覆盖状态栏（<code>UIWindowLevelStatusBar</code>）</h4><p>只需设置<code>windowLevel</code>大于等于<code>UIWindowLevelStatusBar</code>即可。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] init];</span><br><span class="line">    <span class="keyword">self</span>.window.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">    <span class="built_in">UIViewController</span> *vc = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    vc.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = vc;</span><br><span class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">UIWindow</span> *statusBarWindow = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width, <span class="number">20.0</span>)];</span><br><span class="line">    <span class="built_in">UIViewController</span> *statusBarVC = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    statusBarVC.view.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">    statusBarWindow.rootViewController = statusBarVC;</span><br><span class="line">    statusBarWindow.windowLevel = <span class="built_in">UIWindowLevelStatusBar</span>;</span><br><span class="line">    [statusBarWindow makeKeyAndVisible];</span><br><span class="line">    <span class="keyword">self</span>.statusBarWindow = statusBarWindow;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/vi791.PNG@normal" alt=""></p><h3 id="window覆盖（UIWindowLevelAlert）"><a href="#window覆盖（UIWindowLevelAlert）" class="headerlink" title="window覆盖（UIWindowLevelAlert）"></a>window覆盖（<code>UIWindowLevelAlert</code>）</h3><p>只需设置<code>windowLevel</code>大于等于<code>UIWindowLevelAlert</code>即可。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] init];</span><br><span class="line">    <span class="keyword">self</span>.window.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">    <span class="built_in">UIViewController</span> *vc = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    vc.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = vc;</span><br><span class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">UIWindow</span> *statusBarWindow = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width, <span class="number">20.0</span>)];</span><br><span class="line">    <span class="built_in">UIViewController</span> *statusBarVC = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    statusBarVC.view.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">    statusBarWindow.rootViewController = statusBarVC;</span><br><span class="line">    statusBarWindow.windowLevel = <span class="built_in">UIWindowLevelStatusBar</span>;</span><br><span class="line">    [statusBarWindow makeKeyAndVisible];</span><br><span class="line">    <span class="keyword">self</span>.statusBarWindow = statusBarWindow;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIWindow</span> *alertWindow = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">10</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width, <span class="number">200.0</span>)];</span><br><span class="line">    <span class="built_in">UIViewController</span> *alertVC = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    alertVC.view.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">    alertWindow.rootViewController = alertVC;</span><br><span class="line">    alertWindow.windowLevel = <span class="built_in">UIWindowLevelAlert</span>;</span><br><span class="line">    [alertWindow makeKeyAndVisible];</span><br><span class="line">    <span class="keyword">self</span>.alertWindow = alertWindow;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIWindow</span> *alertWindow2 = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">100</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width, <span class="number">200.0</span>)];</span><br><span class="line">    <span class="built_in">UIViewController</span> *alertVC2 = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    alertVC2.view.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line">    alertWindow2.rootViewController = alertVC2;</span><br><span class="line">    alertWindow2.windowLevel = <span class="built_in">UIWindowLevelAlert</span>;</span><br><span class="line">    [alertWindow2 makeKeyAndVisible];</span><br><span class="line">    <span class="keyword">self</span>.alertWindow2 = alertWindow2;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/c1exa.PNG@normal" alt=""></p><p>总结：如果多个<code>window</code>设置了同级别，后添加的会覆盖到之前添加的上面。在实际开发中，除了首次创建的视图载体<code>window</code>，建议直接使用<code>UIWindow</code>的<code>hidden</code>属性，少用<code>makeKeyAndVisible</code>，这样可以有效避免<code>UIApplication</code>属性<code>keyWindow</code>的混乱。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 应用程序启动 </tag>
            
            <tag> UIWindow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】initWithNibName原理</title>
      <link href="/2018/07/05/ios-initnib/"/>
      <url>/2018/07/05/ios-initnib/</url>
      
        <content type="html"><![CDATA[<p>使用<code>IB</code>描述控制器<code>view</code>并用代码加载的时候，内部实现逻辑是怎样的？</p><a id="more"></a><p>我们新建一个控制器，控制器<code>view</code>用<code>IB</code>描述。</p><h3 id="场景搭建"><a href="#场景搭建" class="headerlink" title="场景搭建"></a>场景搭建</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LoginViewController.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LoginViewController</span> : <span class="title">UIViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LoginViewController.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"LoginViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LoginViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LoginViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>View.xib</code>的时候，我们一般选择<code>View</code>模板<br><img src="http://blog.idbeny.com/7kj3o.png@normal" alt=""></p><h3 id="示例一（TestView-xib）"><a href="#示例一（TestView-xib）" class="headerlink" title="示例一（TestView.xib）"></a>示例一（<code>TestView.xib</code>）</h3><p>条件：创建一个名称为<code>TestView</code>的<code>IB</code>，用来描述控制器<code>view</code><br><img src="http://blog.idbeny.com/60ggu.png@normal" alt=""></p><p>加载：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] init];</span><br><span class="line">    <span class="keyword">self</span>.window.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    </span><br><span class="line">    LoginViewController *loginVC = [[LoginViewController alloc] initWithNibName:<span class="string">@"TestView"</span> bundle:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = loginVC;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/8x7r6.png@normal" alt=""></p><p>把加载方式修改下：<code>initWithNibName:</code>传<code>nil</code></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoginViewController *loginVC = [[LoginViewController alloc] <span class="symbol">initWithNibName:</span><span class="literal">nil</span> <span class="symbol">bundle:</span><span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>修改后的效果：<br><img src="http://blog.idbeny.com/ib940.png@normal" alt=""></p><h3 id="示例二（Login-xib）"><a href="#示例二（Login-xib）" class="headerlink" title="示例二（Login.xib）"></a>示例二（<code>Login.xib</code>）</h3><p>条件：创建一个名称为<code>Login</code>的<code>IB</code>，用来描述控制器<code>view</code><br><img src="http://blog.idbeny.com/05lzw.png@normal" alt=""></p><p>加载：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoginViewController *loginVC = [[LoginViewController alloc] <span class="string">initWithNibName:</span>@<span class="string">"Login"</span> <span class="string">bundle:</span>nil];</span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/36s4s.png@normal" alt=""></p><p>把加载方式修改下：<code>initWithNibName:</code>传<code>nil</code></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoginViewController *loginVC = [[LoginViewController alloc] <span class="symbol">initWithNibName:</span><span class="literal">nil</span> <span class="symbol">bundle:</span><span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>修改后的效果：<br><img src="http://blog.idbeny.com/ib940.png@normal" alt=""></p><h3 id="示例三（LoginView-xib）"><a href="#示例三（LoginView-xib）" class="headerlink" title="示例三（LoginView.xib）"></a>示例三（<code>LoginView.xib</code>）</h3><p>条件：创建一个名称为<code>LoginView</code>的<code>IB</code>，用来描述控制器<code>view</code><br><img src="http://blog.idbeny.com/dg36u.png@normal" alt=""></p><p>加载：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoginViewController *loginVC = [[LoginViewController alloc] <span class="string">initWithNibName:</span>@<span class="string">"LoginView"</span> <span class="string">bundle:</span>nil];</span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/5d2or.png@normal" alt=""></p><p>把加载方式修改下：<code>initWithNibName:</code>传<code>nil</code></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoginViewController *loginVC = [[LoginViewController alloc] <span class="symbol">initWithNibName:</span><span class="literal">nil</span> <span class="symbol">bundle:</span><span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>修改后的效果：<br><img src="http://blog.idbeny.com/5d2or.png@normal" alt=""></p><h3 id="示例四（LoginViewController-xib）"><a href="#示例四（LoginViewController-xib）" class="headerlink" title="示例四（LoginViewController.xib）"></a>示例四（<code>LoginViewController.xib</code>）</h3><p>条件：创建一个名称为<code>LoginViewController</code>的<code>IB</code>，用来描述控制器<code>view</code><br><img src="http://blog.idbeny.com/3c063.png@normal" alt=""></p><p>加载：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoginViewController *loginVC = [[LoginViewController alloc] <span class="string">initWithNibName:</span>@<span class="string">"LoginViewController"</span> <span class="string">bundle:</span>nil];</span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/wss94.png@normal" alt=""></p><p>把加载方式修改下：<code>initWithNibName:</code>传<code>nil</code></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoginViewController *loginVC = [[LoginViewController alloc] <span class="symbol">initWithNibName:</span><span class="literal">nil</span> <span class="symbol">bundle:</span><span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>修改后的效果：<br><img src="http://blog.idbeny.com/wss94.png@normal" alt=""></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><img src="http://blog.idbeny.com/v67qs.png@normal" alt=""></p><p>在此基础上如果使用以下代码创建控制器，会默认加载和控制器同名的<code>IB</code>。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoginViewController *loginVC = <span class="comment">[<span class="comment">[LoginViewController alloc]</span> init]</span>;</span><br></pre></td></tr></table></figure><p>为什么呢？我们重写<code>LoginViewController</code>的<code>initWithNibName:bundle:</code>方法看下。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LoginViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithNibName:(<span class="built_in">NSString</span> *)nibNameOrNil bundle:(<span class="built_in">NSBundle</span> *)nibBundleOrNil &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, nibBundleOrNil); <span class="comment">// 输出：(null)</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> initWithNibName:nibNameOrNil bundle:nibBundleOrNil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>通过输入我们可以看到，即使用<code>init</code>进行初始化，也会进入到<code>initWithNibName:bundle:</code>方法，只不过传入的<code>nibName</code>是空。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果<code>initWithNibName:</code>指定了<code>IB</code>名称，则按照指定的名称去查找对应的<code>IB</code>文件。如果是<code>nil</code>，则有两种情况：</p><ul><li><p><code>iOS9</code>之前</p><ul><li>优先加载控制器同名且去除<code>Controller</code>的<code>IB</code>文件，再去加载控制器同名的<code>IB</code>。</li><li>例：优先查找<code>LoginView.xib</code>，当不存在时，再查找<code>LoginViewController.xib</code>，如果最终没有找到，则不使用<code>IB</code>。</li></ul></li><li><p><code>iOS9</code>之后</p><ul><li>优先加载控制器同名的<code>IB</code>，再去加载去除<code>Controller</code>的<code>IB</code>文件。</li><li>例：优先查找<code>LoginViewController.xib</code>，当不存在时，再查找<code>LoginView.xib</code>，如果最终没有找到，则不使用<code>IB</code>。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Nib </tag>
            
            <tag> 加载XIB原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Autoresizing、AutoLayout、VFL</title>
      <link href="/2018/06/30/ios-layout/"/>
      <url>/2018/06/30/ios-layout/</url>
      
        <content type="html"><![CDATA[<p>布局千变万化，但万变不离其宗。</p><a id="more"></a><h2 id="历史背景"><a href="#历史背景" class="headerlink" title="历史背景"></a>历史背景</h2><p><code>iPhone4s</code>及以前的设备尺寸都是固定<code>320*480</code>（为什么这么设计呢？乔帮主认为这是人类手持设备最适合的尺寸），但随着时间推移及技术发展，不同设备尺寸层出不穷。</p><p><code>iPhone5</code>出来后开发者就要做界面适配了，因为设备尺寸变成<code>320*568</code>了。<code>Autoresizing</code>其实主要是为了解决<code>iPad</code>的界面适配（横竖屏），iPhone也是适用的，但<code>Autoresizing</code>局限性较大，它只能设置自身和父控件的关系，对于一些复杂的界面根本无法完成 。<code>iPhone5（iOS6）</code>已经发布了<code>AutoLayout</code>技术，主要是为了解决移动端屏幕适配问题，比<code>Autoresizing</code>更丰富，但当时开发工具版本是<code>Xcode4</code>，对<code>Autolayout</code>的支持很不友好，再加上需要往下兼容<code>iOS5</code>甚至<code>iOS4</code>的系统，所以很少有开发者使用它。</p><p><code>iPhone6</code>及<code>iPhone6Plus</code>发布后，开发工具也随之升级到<code>Xcode5</code>，<code>Autolayout</code>的开发效率也有很大提升，苹果官方也推荐使用<code>Autolayout</code>来布局UI界面。因为它可以很轻松解决屏幕适配问题（解决任何控件之间的相对关系），开发者才开始逐步使用<code>Autolayout</code>。 </p><blockquote><p><code>iOS8</code>之后又推出了<code>Sizeclasses</code>，可以理解为<code>AutoLayout</code>的升级版。但我觉得后面苹果应该会往<strong>声明式编程</strong>的大前端行进，<code>Flex</code>布局也会一统天下，到那时界面布局应该会稳定下来吧……</p></blockquote><h2 id="Autoresizing"><a href="#Autoresizing" class="headerlink" title="Autoresizing"></a>Autoresizing</h2><p><code>Autoresizing</code>其实很简单，因为它只能约束子控件和父控件之间的关系，不能约束兄弟控件的关系，这也是它最大的壁垒。我们先通过Storyboard演示下<code>Autoresizing</code>是如何使用的，然后再看纯代码的写法。</p><h3 id="Storyboard"><a href="#Storyboard" class="headerlink" title="Storyboard"></a>Storyboard</h3><p>由于<code>Autoresizing</code>和<code>AutoLayout</code>是互斥的，所以如果你的开发工具是Xcode8以下的，需要选择<code>Main.storyboard</code>后点击右边文件简介区顶部的第一个按钮（<em>Show the File inspector</em>），将<strong>Use Auto Layout</strong>和<strong>User Size Classes</strong>两个复选框取消勾选（默认是勾选的）。当取消勾选<strong>Use Auto Layout</strong>时系统会弹出标题为<strong>Using Size Classes Requires Auto Layout</strong>的弹框，选择<strong>Disable Size Classes</strong>即可（此时<strong>User Size Classes</strong>会自动取消勾选）。Xcode8及以上不需要做任何改动。</p><h4 id="案例一（场景：红色view位于屏幕右下角且宽高均为100，根据屏幕自适应位置及尺寸）"><a href="#案例一（场景：红色view位于屏幕右下角且宽高均为100，根据屏幕自适应位置及尺寸）" class="headerlink" title="案例一（场景：红色view位于屏幕右下角且宽高均为100，根据屏幕自适应位置及尺寸）"></a>案例一（场景：红色view位于屏幕右下角且宽高均为100，根据屏幕自适应位置及尺寸）</h4><p><strong>添加view</strong><br><img src="http://blog.idbeny.com/aznyd.png@normal" alt="添加view"></p><p>添加完成后预览，在8Plus上展示没有问题，但我们在4s（只是作为不同尺寸屏幕预览而已）上面看到刚才添加的红色view没有展示（也可以通过旋转屏幕查看view是否正常显示）。原因是红色view是相对于8Plus设置的frame，也就是view的x坐标是(414-100=314)，y坐标(736-100=636)，但是4s的屏幕尺寸是320*480，不在屏幕范围内，所以不显示。</p><p><strong>修改<code>Autoresizing</code></strong><br>我们看到修改尺寸下面有个<code>Autoresizing</code>栏目，光标移到对应位置还会有动画效果。左边有一个可操作区（默认连接左边和上边），里面外围每一条线代表距离父视图是固定间距。如果点亮右边和下边的线，意味着该view距离父视图右边和下边都是固定间距。内围有两条线，水平方向代表宽度是否伸缩，垂直方向代表高度是否伸缩。每改变一次连线状态，都能在右边看到预览动画。<br><img src="http://blog.idbeny.com/knq9v.gif@normal" alt="改变连线状态-IB-autoresizing"></p><p>选中红色view，取消上和左的连接状态，连接右和下，这时候看到在两个不同尺寸屏幕上都正常显示。<br><img src="http://blog.idbeny.com/6psl0.png@normal" alt="连线右和下-IB-autoresizing"></p><p>选中水平和垂直，宽度和高度将会根据屏幕自动伸缩。<br><img src="http://blog.idbeny.com/bmzb7.png@normal" alt="选中水平和垂直-IB-autoresizing"></p><p>新增一个蓝色view位于屏幕左下角，宽高和红色view相等。<br><img src="http://blog.idbeny.com/mqjog.png@normal" alt="兄弟关系-IB-autoresizing"><br>可以看到，蓝色view和红色view是兄弟关系，但只能设置相对父视图的位置和伸缩尺寸，无法设置兄弟之间的关系。</p><p><em>思考：如果四条线都勾选会怎么样呢？</em><br>view会被展示到左上角，因为四条线的相对方向是有互斥性及优先级的，左 &gt; 右，上 &gt; 下。</p><h3 id="纯代码"><a href="#纯代码" class="headerlink" title="纯代码"></a>纯代码</h3><p><code>UIView</code>有一个<code>autoresizingMask</code>属性可以设置<code>Autoresizing</code>。<code>autoresizingMask</code>是一个<code>UIViewAutoresizing</code>类型的枚举值，默认值是<code>UIViewAutoresizingNone</code>。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> NS_OPTIONS(NSUInteger, UIViewAutoresizing) &#123;</span><br><span class="line">    UIViewAutoresizingNone                 = <span class="number">0</span>,      <span class="comment">// 默认值</span></span><br><span class="line">    UIViewAutoresizingFlexibleLeftMargin   = <span class="number">1</span> &lt;&lt; <span class="number">0</span>, <span class="comment">// 相对于父控件左边距弹性布局（即右边距固定）</span></span><br><span class="line">    UIViewAutoresizingFlexibleWidth        = <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">// 相对于父控件宽度弹性布局（即宽度根据父控件大小自动拉伸）</span></span><br><span class="line">    UIViewAutoresizingFlexibleRightMargin  = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">// 相对于父控件右边距弹性布局（即左边距固定）</span></span><br><span class="line">    UIViewAutoresizingFlexibleTopMargin    = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">// 相对于父控件上边距弹性布局（即下边距固定）</span></span><br><span class="line">    UIViewAutoresizingFlexibleHeight       = <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">// 相对于父控件高度弹性布局（即高度根据父控件大小自动拉伸）</span></span><br><span class="line">    UIViewAutoresizingFlexibleBottomMargin = <span class="number">1</span> &lt;&lt; <span class="number">5</span>  <span class="comment">// 相对于父控件下边距弹性布局（即上边距固定）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>案例一（场景：红色view位于屏幕右下角且宽高均为100，根据屏幕自适应位置及尺寸）</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UIView *redView = <span class="literal">[[UIV<span class="identifier">iew</span> <span class="identifier">alloc</span>]</span> init];</span><br><span class="line">CGFloat redView_w = <span class="number">100</span>;</span><br><span class="line">CGFloat redView_h = <span class="number">100</span>;</span><br><span class="line">redView.frame = <span class="constructor">CGRectMake(<span class="params">self</span>.<span class="params">view</span>.<span class="params">frame</span>.<span class="params">size</span>.<span class="params">width</span>-<span class="params">redView_w</span>, <span class="params">self</span>.<span class="params">view</span>.<span class="params">frame</span>.<span class="params">size</span>.<span class="params">height</span>-<span class="params">redView_h</span>, <span class="params">redView_w</span>, <span class="params">redView_h</span>)</span>;</span><br><span class="line">redView.backgroundColor = <span class="literal">[UIC<span class="identifier">olor</span> <span class="identifier">redColor</span>]</span>;</span><br><span class="line">redView.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin <span class="pattern-match">| <span class="constructor">UIViewAutoresizingFlexibleTopMargin</span> | <span class="constructor">UIViewAutoresizingFlexibleWidth</span> | <span class="constructor">UIViewAutoresizingFlexibleHeight</span>;</span></span><br><span class="line"><span class="pattern-match">[self.view add<span class="constructor">Subview</span>:red<span class="constructor">View</span>];</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/w1j4h.gif@normal" alt="代码-autoresizing"></p><p><strong>案例二（场景：红色view位于屏幕右下角且宽高均为100；蓝色view右边距离红色view的左边间距为30且宽高和红色view相等）</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">UIView *redView = <span class="literal">[[UIV<span class="identifier">iew</span> <span class="identifier">alloc</span>]</span> init];</span><br><span class="line">CGFloat redView_w = <span class="number">100</span>;</span><br><span class="line">CGFloat redView_h = <span class="number">100</span>;</span><br><span class="line">redView.frame = <span class="constructor">CGRectMake(<span class="params">self</span>.<span class="params">view</span>.<span class="params">frame</span>.<span class="params">size</span>.<span class="params">width</span>-<span class="params">redView_w</span>, <span class="params">self</span>.<span class="params">view</span>.<span class="params">frame</span>.<span class="params">size</span>.<span class="params">height</span>-<span class="params">redView_h</span>, <span class="params">redView_w</span>, <span class="params">redView_h</span>)</span>;</span><br><span class="line">redView.backgroundColor = <span class="literal">[UIC<span class="identifier">olor</span> <span class="identifier">redColor</span>]</span>;</span><br><span class="line">redView.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin <span class="pattern-match">| <span class="constructor">UIViewAutoresizingFlexibleTopMargin</span>;</span></span><br><span class="line"><span class="pattern-match">[self.view add<span class="constructor">Subview</span>:red<span class="constructor">View</span>];</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match"><span class="constructor">UIView</span> <span class="operator">*</span>blue<span class="constructor">View</span> = [[<span class="constructor">UIView</span> alloc] init];</span></span><br><span class="line"><span class="pattern-match"><span class="constructor">CGFloat</span> space = 30;</span></span><br><span class="line"><span class="pattern-match"><span class="constructor">CGFloat</span> blue<span class="constructor">View_w</span> = <span class="constructor">CGRectGetWidth(<span class="params">redView</span>.<span class="params">frame</span>)</span>;</span></span><br><span class="line"><span class="pattern-match"><span class="constructor">CGFloat</span> blue<span class="constructor">View_h</span> = <span class="constructor">CGRectGetHeight(<span class="params">redView</span>.<span class="params">frame</span>)</span>;</span></span><br><span class="line"><span class="pattern-match"><span class="constructor">CGFloat</span> blue<span class="constructor">View_x</span> = <span class="constructor">CGRectGetMinX(<span class="params">redView</span>.<span class="params">frame</span>)</span>-space-blue<span class="constructor">View_w</span>;</span></span><br><span class="line"><span class="pattern-match"><span class="constructor">CGFloat</span> blue<span class="constructor">View_y</span> = <span class="constructor">CGRectGetMinY(<span class="params">redView</span>.<span class="params">frame</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">blue<span class="constructor">View</span>.frame = <span class="constructor">CGRectMake(<span class="params">blueView_x</span>, <span class="params">blueView_y</span>, <span class="params">blueView_w</span>, <span class="params">blueView_h</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">blue<span class="constructor">View</span>.background<span class="constructor">Color</span> = [<span class="constructor">UIColor</span> blue<span class="constructor">Color</span>];</span></span><br><span class="line"><span class="pattern-match">blue<span class="constructor">View</span>.autoresizing<span class="constructor">Mask</span> = <span class="constructor">UIViewAutoresizingFlexibleLeftMargin</span> | <span class="constructor">UIViewAutoresizingFlexibleTopMargin</span>;</span></span><br><span class="line"><span class="pattern-match">[self.view add<span class="constructor">Subview</span>:blue<span class="constructor">View</span>];</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/0zfvd.gif@normal" alt="兄弟关系-代码-autoresizing"></p><h2 id="AutoLayout"><a href="#AutoLayout" class="headerlink" title="AutoLayout"></a>AutoLayout</h2><p>如果项目允许可视化编程（<code>Interface Builder</code>），<code>AutoLayout</code>必然会被用到，这也是整个<code>IB</code>的精髓。苹果官方也建议开发者使用<code>AutoLayout</code>进行UI布局，因为它确实很高效。由于使用代码实现<code>AutoLayout</code>会非常繁琐，所以我们一般也只在<code>IB</code>中使用。当然，纯代码方式推荐使用第三方框架<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="noopener">Masonry</a>。</p><p><code>AutoLayout</code>有两个核心概念：</p><ul><li>约束：通过给控件添加约束，来决定控件的位置和尺寸</li><li>参照：添加约束时，是依据谁来添加（可以是父控件或者兄弟控件）</li></ul><p>自动布局的核心计算公式：<code>obj1.property1 = (obj2.property2 * multiplier) * constant value</code>，先记住公式即可，接下来我们通过案例来慢慢了解他。</p><p>官网指南：<a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/LayoutUsingStackViews.html#//apple_ref/doc/uid/TP40010853-CH11-SW1" target="_blank" rel="noopener">Auto Layout Guide</a></p><h3 id="Storyboard-1"><a href="#Storyboard-1" class="headerlink" title="Storyboard"></a>Storyboard</h3><p>打开<code>Storyboard</code>，创建一个view并选中，在操作区下方有一个添加约束的按钮，点击之后会出现约束条件，有一个<code>Contrain to margins</code>复选框，取消勾选（每次都要这样做，为什么？这是苹果官方推荐的边距尺寸，视图和跟控制器的边距是20pt，父子之间是8pt，其实我们没必要使用它）。<br><img src="http://blog.idbeny.com/qr471.png@normal" alt="autolayout界面"></p><h4 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h4><p>约束条件上面的四个边距和<code>autoresizing</code>很相似，默认设置相对于最近一个视图的上下左右边距，下面的就很好理解了，设置宽度和高度。设置完成后一定要点击最后的<code>Add 4 Contraints</code>，这样才能将约束添加到对应的视图上。</p><p>可以用鼠标点击对应数值框修改，也可以按顺序使用键盘<code>Tab</code>键，每次值变化后都会默认选中对应约束条件。添加约束完成后会自动更新IB界面，Xcode9之前都需要我们手动更新。<br><img src="http://blog.idbeny.com/pc8qe.png@normal" alt="添加约束"></p><p>约束添加完成，预览发现，不同尺寸或横竖屏展示的效果都一样。<br><img src="http://blog.idbeny.com/f50er.png@normal" alt="约束完成"></p><p>注意：<strong>约束不能重复添加</strong>，否则会报错。比如我们需要把红色view的宽和高修改为150，直接添加一个宽高150的约束。<br><img src="http://blog.idbeny.com/rnu8o.png@normal" alt="约束冲突"><br>系统提示约束错误，我们根据系统提示把需要删除的约束删除即可。</p><h3 id="修改-更新约束"><a href="#修改-更新约束" class="headerlink" title="修改/更新约束"></a>修改/更新约束</h3><h4 id="1-删除之前约束，添加新的约束"><a href="#1-删除之前约束，添加新的约束" class="headerlink" title="1. 删除之前约束，添加新的约束"></a>1. 删除之前约束，添加新的约束</h4><p>选中操作元素（即红色view），点击约束区<code>Resolve Auto Layout Issues</code>按钮。选择<code>Clear Constraints</code>，这时候就把view的所有约束都清除掉了，添加新的约束即可。<br><img src="http://blog.idbeny.com/id6ld.png@normal" alt="清除约束"></p><p>清除约束时，慎重点击<code>Clear Constraints</code>，该操作的对象是整个根视图内的所有约束。从上图可以看到，系统已经对这些操作做了分组处理，一般情况下我们只需要关注<code>Selected Views</code>分区就行。</p><h4 id="2-左边栏"><a href="#2-左边栏" class="headerlink" title="2. 左边栏"></a>2. 左边栏</h4><p>展开左栏view的约束，点击需要修改的约束，在右边栏的<code>Constant</code>输入框内输入需要修改的值，回车。<br><img src="http://blog.idbeny.com/mqttm.png@normal" alt="修改约束"></p><h4 id="3-双击view的约束线条（不建议，触控范围太小）"><a href="#3-双击view的约束线条（不建议，触控范围太小）" class="headerlink" title="3. 双击view的约束线条（不建议，触控范围太小）"></a>3. 双击view的约束线条（不建议，触控范围太小）</h4><p>双击需要修改的约束线条，在弹出框内修改<code>Constant</code>的值，然后点击回车。<br><img src="http://blog.idbeny.com/imh8j.png@normal" alt="修改约束"></p><h4 id="4-右边栏"><a href="#4-右边栏" class="headerlink" title="4. 右边栏"></a>4. 右边栏</h4><p>通过右侧的尺寸区域修改约束条件，两种选择方式选其一即可（不同方式可修改的条件不一样）。<br><img src="http://blog.idbeny.com/p3swl.png@normal" alt="修改约束"></p><h4 id="5-更新约束"><a href="#5-更新约束" class="headerlink" title="5. 更新约束"></a>5. 更新约束</h4><p>有时候我们在操作界面拖动了已经添加好约束的视图，发现约束线条颜色变黄，而且左上角多了一个警告按钮，这时候只需要把约束更新下就可以了。<br><img src="http://blog.idbeny.com/bxx4y.png@normal" alt="更新约束"></p><h4 id="6-约束失效"><a href="#6-约束失效" class="headerlink" title="6. 约束失效"></a>6. 约束失效</h4><p>如果我们需要添加一个新的约束，仅仅是看下效果，又不想删除之前的约束，就可以用这种方法–约束失效。选择待失效的约束，把右边栏的<code>installed</code>复选框取消勾选（默认都是勾选）。如果想要恢复之前的约束，把<code>installed</code>再次选中即可。选中约束直接按<code>delete</code>，约束将会被完全删除。<br><img src="http://blog.idbeny.com/zeg73.png@normal" alt="约束失效"></p><h3 id="约束参照"><a href="#约束参照" class="headerlink" title="约束参照"></a>约束参照</h3><p>在添加约束的时候，我们可以看到约束值的旁边有一个三角按钮，表示有可选项，有哪些内容呢？他们的作用是什么?</p><p>新添加一个view，放到右下角，然后开始添加约束条件，点击右边约束的三角按钮看到默认选中了一个选项<code>Safe Area（current distance = 0）</code>。意思很简单，当前这个view的约束条件参照物是安全区域（安全区域是刘海屏的概念—即iPhoneX以上系列，简单的说就是空出上面的状态栏和下面的Home指示条，剩余的就是安全区域），并且目前距离安全区域的右边距是0。<br><img src="http://blog.idbeny.com/g5u58.png@normal" alt="约束参照"></p><p>例：view展示到屏幕右上角，不同的参照物，可能位置也会不一样。<br><img src="http://blog.idbeny.com/2xx4a.png@normal" alt=""></p><p>约束辅助参照对应的还有<code>Top Layout Guide</code>和<code>Bottom Layout Guide</code>，在Xcode10以上需要手动把<code>Use Safe Area Layout Guides</code>取消（默认勾选），才能显示。具体不再介绍，原理和<code>Safe Area</code>类似。</p><p>兄弟之间、父子之间的对齐方式<br><img src="http://blog.idbeny.com/74d0w.png@normal" alt="对齐方式"></p><h4 id="案例一（兄弟关系-等宽等高）"><a href="#案例一（兄弟关系-等宽等高）" class="headerlink" title="案例一（兄弟关系-等宽等高）"></a>案例一（兄弟关系-等宽等高）</h4><p>场景：在Controller中添加两个等宽等高（高度50）的view，左边红色，右边蓝色，父控件左边、右边、下边及连个view之间的间距都是相等的（间距30）。</p><p><img src="http://blog.idbeny.com/5nttq.png@normal" alt="案例一"></p><p>操作技巧：</p><ul><li>command可以选择多个控件（可以设置等宽等高、对齐方式等）；</li><li>选中控件，按住control，往关联控件内拖就可以设置关联属性；</li><li>如果设置左右边距的时候发现找不到红色或蓝色view作为参照，很大原因是因为两个在水平方向上没有交集，这时候拖动任意一个到同一个方向即可。</li></ul><h4 id="案例二（兄弟关系-中心对齐）"><a href="#案例二（兄弟关系-中心对齐）" class="headerlink" title="案例二（兄弟关系-中心对齐）"></a>案例二（兄弟关系-中心对齐）</h4><p>场景：在Controller中添加一个红色view，左右边距和高度都为50，父视图中心点对齐，一个蓝色view，宽度为红色的一半，高度和红色一致，底部距离红色顶部50。</p><p><img src="http://blog.idbeny.com/vru4d.png@normal" alt="案例二"></p><p>操作技巧：</p><ul><li>约束添加完成后，如果界面没有变化也没有警告报错，可以尝试主动修改约束的常量值（<code>Constant</code>）。</li></ul><h4 id="案例三（父子关系-等宽等高及对齐）"><a href="#案例三（父子关系-等宽等高及对齐）" class="headerlink" title="案例三（父子关系-等宽等高及对齐）"></a>案例三（父子关系-等宽等高及对齐）</h4><p>场景：4个view进行2*2排列占满屏幕，每个view都有一个距离自己四边距30的子view。</p><p><img src="http://blog.idbeny.com/9yzx3.png@normal" alt="案例三"></p><p>操作技巧：</p><ul><li>当视图比较多的时候，可以给每个view打上一个标签名，这样就很容易区分；</li><li>视图约束参照物默认选择距离最近的一个。</li></ul><h4 id="案例四（UILabel内容伸缩）"><a href="#案例四（UILabel内容伸缩）" class="headerlink" title="案例四（UILabel内容伸缩）"></a>案例四（UILabel内容伸缩）</h4><p>场景：UILabel根据文字多少自动计算宽高。</p><ul><li>没有<code>AutoLayout</code>之前，<code>UILabel</code>的文字内容总是居中显示，导致顶部和底部会有一大片空白区域；</li><li>有了<code>AutoLayout</code>只后，<code>UILabel</code>的<code>bounds</code>默认会自动包住所有的文字内容，顶部和底部也没有空白区域。<ul><li>这是因为<code>UILabel</code>设置约束后会根据内容的多少自动计算需要显示多少行，并且根据字体大小计算每行文字的高度，计算完成后会把内容高度赋值给<code>UILabel</code>，这时候看到的效果就是<code>UILabel</code>高度会随着文字的多少自动计算。</li></ul></li></ul><ol><li><p>添加一个<code>UILabel</code>到控制器上，如果不加任何约束，文字垂直居中水平居左展示。<br><img src="http://blog.idbeny.com/mbxuh.png@normal" alt=""></p></li><li><p>多行文字，也只在<code>UILabel</code>的范围内尽可能的展示（需要设置行数为0，即不限制行数），但仍然显示不全。<br><img src="http://blog.idbeny.com/ynovt.png@normal" alt=""></p></li><li><p>给<code>UILabel</code>添加居中显示的约束。<br><img src="http://blog.idbeny.com/dt9e2.png@normal" alt=""></p></li><li><p><code>UILabel</code>添加约束后和其他控件不太一样，由于没有设置宽度和高度，Xcode也没有报错或警告，仅仅文字由之前的多行变成了单行显示。这是因为<code>UILabel</code>没有设置宽度，系统只能根据当前文字大小无限制的展示一行，所以高度也只是一行文字的高。<br><img src="http://blog.idbeny.com/h4ip8.png@normal" alt=""><br>我们可以看到如果不设置宽度，仅设置居中对齐的话，<code>UILabel</code>的X坐标和宽都会随着文字的多少而变化，就算超出屏幕也一样。<br><img src="http://blog.idbeny.com/qujlu.png@normal" alt=""></p></li><li><p>如果我们添加宽度约束，并把约束修改为小于等于300(<code>Less Than or Equal</code>)，就会发现<code>UILabel</code>可以正常显示了。<br>5.1. 添加宽度约束<br><img src="http://blog.idbeny.com/l8dne.png@normal" alt=""></p><p>5.2. 修改宽度并设置约束关系为小于等于<br><img src="http://blog.idbeny.com/uvx9k.png@normal" alt=""></p><p>5.3. 可以自动计算高度<br><img src="http://blog.idbeny.com/pxosr.png@normal" alt=""></p></li></ol><blockquote><p>思考：为什么设置<code>Less Than or Equal</code>？设置其他关系就不可以么？</p></blockquote><p>约束关系共有三种：</p><ul><li><code>Less Than or Equal</code> 小于等于(&lt;=)</li><li><code>Equal</code> 等于(=)</li><li><code>Greater Than or Equal</code> 大于等于(&gt;=)</li></ul><p><code>Less Than or Equal</code>的意思是最大值不能超过多少。我们设置了宽度300，如果文字很少的情况下，Label会包裹内容显示；如果文字超过300，就会换行显示。</p><p>如果设置为<code>Equal</code>，意思就是宽度只能是300，文字很少情况下，Label不会包裹内容显示，宽度一直是300；文字超过300时，同样还会换行显示的。</p><p>如果设置为<code>Greater Than or Equal</code>，意思是宽度最小是300，文字很少情况下，Label不会包裹内容显示，宽度一直是300；文字超过300时，也不会换行。</p><p>操作技巧：</p><ul><li>UILabel包裹内容三要素：<ul><li>设置约束</li><li>设置宽度（小于等于或等于）</li><li>不要设置高度</li></ul></li></ul><h4 id="案例五（父视图随子视图内容伸缩-–-朋友圈-微博）"><a href="#案例五（父视图随子视图内容伸缩-–-朋友圈-微博）" class="headerlink" title="案例五（父视图随子视图内容伸缩 – 朋友圈/微博）"></a>案例五（父视图随子视图内容伸缩 – 朋友圈/微博）</h4><p>场景：模拟一条微信朋友圈信息。</p><p>查看下面的约束，重点是time的顶部约束等于content的底部约束加上10的间距，根视图view的底部和time的底部对齐，并且有8间距。<br><img src="http://blog.idbeny.com/8djrb.png@normal" alt=""></p><p>修改内容，查看效果</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *contentLabel;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> isChanged;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="keyword">self</span>.isChanged = !<span class="keyword">self</span>.isChanged;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *content = <span class="string">@"1024星球"</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.isChanged) &#123;</span><br><span class="line">        content = <span class="string">@"1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球1024星球"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.contentLabel.text = content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/xjmkr.gif@normal" alt=""></p><p>操作技巧：</p><ul><li>记住万能公式</li></ul><h3 id="约束优先级"><a href="#约束优先级" class="headerlink" title="约束优先级"></a>约束优先级</h3><p>如何根据不同情况设置不同的约束？可以设置约束的优先级，系统在<code>IB</code>中给我们提供了三种优先级选择，纯代码方式提供了7个常量，其实我们都可以设置<code>(0, 1000]</code>范围内任意值。</p><p>特点：优先级值越高，优先生效。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>场景：三个view，并行排列（尺寸、间距都相同），移除中间一个view，最后的view自动往前移动到被删除view的位置。</p><ol><li><p>添加三个view并设置约束；<br><img src="http://blog.idbeny.com/0i8db.png@normal" alt=""></p></li><li><p>把中间的view移除；</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> ViewController ()</span><br><span class="line"></span><br><span class="line"><span class="variable">@property</span> (weak, nonatomic) IBOutlet UIView *middleView;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line">- (void)<span class="attribute">touchesBegan</span>:(NSSet&lt;UITouch *&gt; *)touches <span class="attribute">withEvent</span>:(UIEvent *)event &#123;</span><br><span class="line">    <span class="selector-attr">[self.middleView removeFromSuperview]</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>移除后，右边的view并没有向前移动。当中间的view被移除后，约束就不存了，右边的view约束又参照于中间的view，所以也没有约束了，最后两个都不显示了；<br><img src="http://blog.idbeny.com/nk6gr.gif@normal" alt=""></p></li><li><p>右边的view添加新的约束（以左边的view为参照）并设置约束优先级；<br><img src="http://blog.idbeny.com/8euaz.png@normal" alt=""></p></li><li><p>约束优先级生效。<br><img src="http://blog.idbeny.com/ezbw0.gif@normal" alt=""></p></li></ol><p>操作技巧：</p><ul><li>优先级低的约束，会用虚线框连接或包裹</li></ul><h3 id="约束动画"><a href="#约束动画" class="headerlink" title="约束动画"></a>约束动画</h3><p>正常线性动画只需要变换<code>frame</code>即可，但是如果是约束怎么办呢？苹果规定使用约束后在修改控件尺寸和位置就不能使用<code>frame</code>，应该继续使用约束。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>场景：点击屏幕修改view的宽度，动画显示，动画时长持续2s。</p><ol><li><p>添加view并设置约束；<br><img src="http://blog.idbeny.com/6x64k.png@normal" alt=""></p></li><li><p>修改宽度约束值；</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> ViewController ()</span><br><span class="line"></span><br><span class="line"><span class="variable">@property</span> (weak, nonatomic) IBOutlet NSLayoutConstraint *widthConstraint;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)<span class="attribute">touchesBegan</span>:(NSSet&lt;UITouch *&gt; *)touches <span class="attribute">withEvent</span>:(UIEvent *)event &#123;</span><br><span class="line">    <span class="selector-attr">[UIView animateWithDuration:2.0 animations:^&#123;</span></span><br><span class="line"><span class="selector-attr">        self.widthConstraint.constant = 150;</span></span><br><span class="line"><span class="selector-attr">    &#125;]</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动画没有生效；<br><img src="http://blog.idbeny.com/lsmu5.gif@normal" alt=""></p></li><li><p>使用强制刷新；</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="keyword">self</span>.widthConstraint.constant = <span class="number">150</span>;</span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">2.0</span> animations:^&#123;</span><br><span class="line">        [<span class="keyword">self</span>.view layoutIfNeeded];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动画生效，为什么这样就可以了呢？因为约束的本质也是转化为<code>frame</code>，此时修改约束时，我们并不知道什么时候计算<code>frame</code>，设置<code>layoutIfNeeded</code>后，等待下次屏幕刷新时就会按照动画形式刷新view。<br><img src="http://blog.idbeny.com/99sup.gif@normal" alt=""></p></li></ol><h4 id="常见警告和错误"><a href="#常见警告和错误" class="headerlink" title="常见警告和错误"></a>常见警告和错误</h4><ul><li><p>警告：控件的frame不匹配所添加的约束</p><ul><li>约束和显示不一致<ul><li>例：约束控件的宽度为100，而控件现在的宽度是110</li></ul></li><li>解决方案<ul><li>更新约束</li></ul></li></ul></li><li><p>错误：</p><ul><li><p>缺乏必要的约束</p><ul><li>例：之约束了宽度和高度，没有约束具体位置</li><li>解决方案<ul><li>添加缺失的约束条件</li></ul></li></ul></li><li><p>两个约束冲突</p><ul><li>例：1个约束控件的宽度为100，1个约束控件的宽度为110</li><li>解决方案<ul><li>删除其中一个约束或使其失效</li></ul></li></ul></li></ul></li></ul><h3 id="纯代码-1"><a href="#纯代码-1" class="headerlink" title="纯代码"></a>纯代码</h3><p><code>AutoLayout</code>一般用在<code>IB</code>上，纯代码非常繁琐。如果使用<code>AutoLayout</code>则必须放弃<code>frame</code>，因为<code>AutoLayout</code>的底层实现还是设置<code>frame</code>，如果设置了<code>frame</code>会发生很多冲突甚至未知性错误。</p><p><code>AutoLayout</code>和<code>Autoresizing</code>是互斥的，但<code>UIView</code>的<code>Autoresizing</code>功能是默认开启的，如果想用<code>AutoLayout</code>布局UI，则必须把对应控件的<code>translatesAutoresizingMaskIntoConstraints</code>设置为NO。</p><p>每一条约束其实就是一个对象，所以用代码创建约束的时候就是创建很多约束对象。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p>场景：红色view位于屏幕右下角且宽高均为100，根据屏幕自适应位置及尺寸。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 添加约束方法：对比万能公式理解</span></span><br><span class="line"><span class="comment"> * view1：约束的控件1</span></span><br><span class="line"><span class="comment"> * attr1：约束的属性（NSLayoutAttribute枚举类型）</span></span><br><span class="line"><span class="comment"> * relation：控件1和控件2的约束关系（NSLayoutRelation枚举类型）</span></span><br><span class="line"><span class="comment"> * view2：参照物控件2</span></span><br><span class="line"><span class="comment"> * attr2：参照控件2的约束属性</span></span><br><span class="line"><span class="comment"> * multiplier：约束值得倍数</span></span><br><span class="line"><span class="comment"> * c：约束常量值</span></span><br><span class="line"><span class="comment"> * @return 返回一个约束对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (instancetype)<span class="string">constraintWithItem:</span>(id)view1 <span class="string">attribute:</span>(NSLayoutAttribute)attr1 <span class="string">relatedBy:</span>(NSLayoutRelation)relation <span class="string">toItem:</span>(nullable id)view2 <span class="string">attribute:</span>(NSLayoutAttribute)attr2 <span class="string">multiplier:</span>(CGFloat)multiplier <span class="string">constant:</span>(CGFloat)c;</span><br><span class="line"></span><br><span class="line">UIView *redView = [[UIView alloc] init];</span><br><span class="line">redView.translatesAutoresizingMaskIntoConstraints = NO;</span><br><span class="line">redView.backgroundColor = [UIColor redColor];</span><br><span class="line">[self.view <span class="string">addSubview:</span>redView];</span><br><span class="line"></span><br><span class="line">NSLayoutConstraint *widthConstraint = [NSLayoutConstraint <span class="string">constraintWithItem:</span>redView <span class="string">attribute:</span>NSLayoutAttributeWidth <span class="string">relatedBy:</span>NSLayoutRelationEqual <span class="string">toItem:</span>nil <span class="string">attribute:</span>NSLayoutAttributeNotAnAttribute <span class="string">multiplier:</span><span class="number">0</span> <span class="string">constant:</span><span class="number">100</span>];</span><br><span class="line">[redView <span class="string">addConstraint:</span>widthConstraint];</span><br><span class="line"></span><br><span class="line">NSLayoutConstraint *heightConstraint = [NSLayoutConstraint <span class="string">constraintWithItem:</span>redView <span class="string">attribute:</span>NSLayoutAttributeHeight <span class="string">relatedBy:</span>NSLayoutRelationEqual <span class="string">toItem:</span>nil <span class="string">attribute:</span>NSLayoutAttributeNotAnAttribute <span class="string">multiplier:</span><span class="number">0</span> <span class="string">constant:</span><span class="number">100</span>];</span><br><span class="line">[redView <span class="string">addConstraint:</span>heightConstraint];</span><br><span class="line"></span><br><span class="line">NSLayoutConstraint *rightConstraint = [NSLayoutConstraint <span class="string">constraintWithItem:</span>redView <span class="string">attribute:</span>NSLayoutAttributeRight <span class="string">relatedBy:</span>NSLayoutRelationEqual <span class="string">toItem:</span>self.view  <span class="string">attribute:</span>NSLayoutAttributeRight <span class="string">multiplier:</span><span class="number">1.0</span> <span class="string">constant:</span><span class="number">0.0</span>];</span><br><span class="line">NSLayoutConstraint *bottomConstraint = [NSLayoutConstraint <span class="string">constraintWithItem:</span>redView <span class="string">attribute:</span>NSLayoutAttributeBottom <span class="string">relatedBy:</span>NSLayoutRelationEqual <span class="string">toItem:</span>self.view <span class="string">attribute:</span>NSLayoutAttributeBottom <span class="string">multiplier:</span><span class="number">1.0</span> <span class="string">constant:</span><span class="number">0.0</span>];</span><br><span class="line">[self.view <span class="string">addConstraints:</span>@[rightConstraint, bottomConstraint]];</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/jlckz.png@normal" alt=""></p><p><strong>约束应该添加到哪个视图上面？</strong><br>添加约束原则：</p><ul><li>两个同层级关系的控件，约束添加到他们的父视图上；</li><li>两个不同层级关系的控件，添加到他们最近的共同父视图上；</li><li>有层级关系的控件，添加到层次较高的父view上。</li></ul><p>对比上面的简单视图使用<code>AutoLayout</code>的纯代码方式实现起来很繁琐，代码量也很大，即使约束有冲突编译也不会报错。所以，平时开发尽量使用IB。</p><h2 id="VFL"><a href="#VFL" class="headerlink" title="VFL"></a>VFL</h2><p>VFL（<em>Visual Format Language</em>），翻译为“可视化格式语言”，是苹果公司为了简化AutoLayout的编码而推出的抽象语言。</p><p>VFL只有水平方向（<code>H</code>:<em>Horizontal</em>）和垂直方向（<code>V</code>:<em>Vertical</em>）的约束，在水平方向上控件名后面的常量是宽度，垂直方向代表高度。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul><li><p><code>H:[控件名1(宽)]-间距-[控件名2(宽)]</code></p><ul><li>示例：<code>H:[redView(20)]-10-[blueView(30)]</code></li><li>含义：水平方向上，控件redView的宽是20，控件blueView的宽度是30，他们之间的间距是10。</li></ul></li><li><p><code>H:[控件名(&gt;=宽度@优先级)]</code></p><ul><li>示例：<code>H:[redView(&gt;=20@700)]</code></li><li>含义：水平方向上，控件redView的宽大于等于20，该约束条件优先级为700（优先级最大值是1000，优先满足优先级高的约束）。</li></ul></li><li><p><code>H:|-间距-[控件名1(宽)]-[控件名2(&gt;=宽度)]-|</code></p><ul><li>示例：<code>H:|-10-[redView(&gt;=20)]-[blueView(30)]-|</code></li><li>含义：水平方向上，控件redView的宽大于等于20，距离父控件左间距10；控件blueView的宽是30，紧靠redView的右边，距离父控件右间距为0。</li></ul></li></ul><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p>场景：红色view位于屏幕右下角（边距均为20）且宽高均为100，根据屏幕自适应位置及尺寸。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 添加VFL约束</span></span><br><span class="line"><span class="comment"> * format：VFL语句</span></span><br><span class="line"><span class="comment"> * options：NSLayoutFormatOptions的枚举，填写一些约束关系条件</span></span><br><span class="line"><span class="comment"> * metrics：参数配置，可以把一些常量参数做一个映射，把名称放到VFL中即可，方便维护</span></span><br><span class="line"><span class="comment"> * views：控件关系映射，key作为VFL中的控件名，value是控件对象</span></span><br><span class="line"><span class="comment"> * @return 返回一个数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSLayoutConstraint</span> *&gt; *)constraintsWithVisualFormat:(<span class="built_in">NSString</span> *)format options:(<span class="built_in">NSLayoutFormatOptions</span>)opts metrics:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)metrics views:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)views;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIView</span> *redView = [[<span class="built_in">UIView</span> alloc] init];</span><br><span class="line">redView.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</span><br><span class="line">redView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:redView];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *views = @&#123;<span class="string">@"redView"</span> : redView&#125;;</span><br><span class="line"><span class="built_in">NSDictionary</span> *metrics = @&#123;<span class="string">@"space"</span> : @<span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *h_VFL = <span class="string">@"H:[redView(100)]-space-|"</span>;</span><br><span class="line"><span class="built_in">NSArray</span> *h_constraint = [<span class="built_in">NSLayoutConstraint</span> constraintsWithVisualFormat:h_VFL options:kNilOptions metrics:metrics views:views];</span><br><span class="line">[<span class="keyword">self</span>.view addConstraints:h_constraint];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *v_VFL = <span class="string">@"V:[redView(100)]-space-|"</span>;</span><br><span class="line"><span class="built_in">NSArray</span> *v_constraint = [<span class="built_in">NSLayoutConstraint</span> constraintsWithVisualFormat:v_VFL options:kNilOptions metrics:metrics views:views];</span><br><span class="line">[<span class="keyword">self</span>.view addConstraints:v_constraint];</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/6y1p5.png@normal" alt=""></p><p>操作技巧：<br>如果views的映射一般情况下都和对象的指针名称一致，其实没有必要做映射，使用系统提供的宏定义即可。<code>NSDictionaryOfVariableBindings(...)</code>，例如：<code>NSDictionary *views = NSDictionaryOfVariableBindings(redView, blueView)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 布局 </tag>
            
            <tag> Autoresizing </tag>
            
            <tag> AutoLayout </tag>
            
            <tag> VFL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】PCH预编译文件</title>
      <link href="/2018/05/10/ios-pch/"/>
      <url>/2018/05/10/ios-pch/</url>
      
        <content type="html"><![CDATA[<p><code>PCH</code>（Precompiler Header），译作“预编译头文件”。</p><a id="more"></a><p><strong>原理：</strong><code>PCH</code>，顾名思义，我们可以在程序编译的时候放置一些提前需要编译的内容。被编译的代码会放到每一个OC文件中被使用（即一处编写，编译后处处使用）。哪些代码需要放到<code>PCH</code>中，其实是编译时间和开发效率之间的衡量。</p><p><code>Xcode7</code>以前在创建项目的时候会自动创建<code>PCH</code>文件，但以后的版本在创建项目的时候默认不生成<code>PCH</code>，但我们可以手动创建并关联程序。</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>新建<code>PCH</code>文件，文件名称和工程名称保持一致（为什么要保持一致？<code>Xcode7</code>之前默认创建的<code>PCH</code>文件就是和工程名称一致的，我们可以模仿他，其实这就类似是一种规范，你也可以按照自己的规则进行命名）<br><img src="http://blog.idbeny.com/na9hs.png@normal" alt=""></p><p>创建完成后，<code>PCH</code>中的代码如下</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  PCHDemo.pch</span></span><br><span class="line"><span class="comment">//  PCHDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 开发 on 2020/5/10.</span></span><br><span class="line"><span class="comment">//  Copyright © 2018 南京凌硕科技有限公司. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PCHDemo_pch</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCHDemo_pch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Include any system framework and library headers here that should be included in all compilation units.</span></span><br><span class="line"><span class="comment">// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* PCHDemo_pch */</span></span></span><br></pre></td></tr></table></figure><p>我们尝试加入一个描述屏幕尺寸的宏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">UIScreenWidth</span> <span class="selector-attr">[UIScreen mainScreen]</span><span class="selector-class">.bounds</span><span class="selector-class">.size</span><span class="selector-class">.width</span></span><br><span class="line"><span class="selector-id">#define</span> <span class="selector-tag">UIScreenHeight</span> <span class="selector-attr">[UIScreen mainScreen]</span><span class="selector-class">.bounds</span><span class="selector-class">.size</span><span class="selector-class">.height</span></span><br></pre></td></tr></table></figure><p>在<code>AppDelegate</code>中使用，编译报错了<br><img src="http://blog.idbeny.com/0x71s.png@normal" alt=""></p><p>我们把<code>PCH</code>文件导入当前类试下，编译运行没问题</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"PCHDemo.pch"</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%f"</span>, <span class="built_in">UIScreenWidth</span>);</span><br><span class="line"><span class="comment">// 输出：375.000000</span></span><br></pre></td></tr></table></figure><p>如果我们每次用到这个文件内的代码块都需要导入到对应类文件中，这和普通头文件没什么区别啊！接下来我们看看如何正确使用它。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>要想使用自己创建的<code>PCH</code>文件，必须到工程设置中进行配置<br><img src="http://blog.idbeny.com/7zcz2.png@normal" alt=""></p><p>配置完成后，我们把之前在<code>AppDelegate</code>中导入的头文件移除，再次编译运行</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%f"</span>, <span class="built_in">UIScreenWidth</span>);</span><br><span class="line"><span class="comment">// 输出：375.000000</span></span><br></pre></td></tr></table></figure><p>这时候就算配置完成了，在该项目中其他任何OC文件中都可以使用<code>PCH</code>中定义的代码了。</p><p><strong>注意：填写预编译文件路径的时候前面一定不要加斜杠’/‘，否则会找不到对应的文件夹。</strong></p><h3 id="公有头文件"><a href="#公有头文件" class="headerlink" title="公有头文件"></a>公有头文件</h3><p>如果项目中有很多地方都用到了一个分类，此时我们就没必要每个类中都导入需要使用的分类的，可以在<code>PCH</code>中导入这个分类就行。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PCHDemo.pch</span></span><br><span class="line">#<span class="keyword">import</span> <span class="string">"UIView+Layout.h"</span></span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>我们可以根据环境变量定义一些我们需要的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="comment">// Debug环境</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">// Release环境</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="针对OC做处理"><a href="#针对OC做处理" class="headerlink" title="针对OC做处理"></a>针对OC做处理</h3><p>在其他非OC文件中不能使用么？我们可以创建一个<code>test.c</code>文件试下，<code>PCH</code>文件中导入了一个分类</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PCHDemo.pch</span></span><br><span class="line"><span class="number">#def</span>ine UIScreenWidth [UIScreen mainScreen]<span class="selector-class">.bounds</span><span class="selector-class">.size</span>.<span class="attribute">width</span></span><br><span class="line"><span class="number">#def</span>ine UIScreenHeight [UIScreen mainScreen]<span class="selector-class">.bounds</span><span class="selector-class">.size</span>.<span class="attribute">height</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#import</span> <span class="string">"UIView+Layout.h"</span></span><br></pre></td></tr></table></figure><p>编译报错了，为什么？因为编译的时候会把<code>PCH</code>中的所有代码都放到需要编译的代码文件中，由于<code>test.c</code>不支持<code>OC</code>，所以会编译报错。解决方案很简单，我们可以根据环境变量去判断哪些文件需要使用宏定义的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __OBJC__</span></span><br><span class="line"><span class="comment">// OC文件</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"UIView+Layout.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">// 非OC文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>使用系统提供的环境变量<code>__OBJC__</code>指定只有<code>OC</code>文件才可以导入相关类头文件，此时非<code>OC</code>文件就不受<code>PCH</code>文件影响了，正常编译运行。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> PCH </tag>
            
            <tag> 预编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Xcode】配置包iOS13.* 、iOS12.* 、iOS11.* 、iOS10.* 、iOS9.* 等 could not find developer disk image</title>
      <link href="/2018/04/02/xcode-devicesupport-config/"/>
      <url>/2018/04/02/xcode-devicesupport-config/</url>
      
        <content type="html"><![CDATA[<p><strong>最新版本13.0</strong></p><a id="more"></a><ol><li><p>在<code>Finder</code>状态下前往文件夹，快捷键：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shift</span>+<span class="built_in">command</span>+G</span><br></pre></td></tr></table></figure></li><li><p>填写路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Platforms/i</span>PhoneOS.platform<span class="regexp">/DeviceSupport</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/sfyfg.png@normal" alt=""></p></li><li><p>点击前往<br><img src="http://blog.idbeny.com/klj59.png@normal" alt=""></p></li></ol><p>这时候我们把资源包放在<code>DeviceSupport</code>文件夹下面，<strong>重启Xcode</strong>即可</p><blockquote><p>GitHub地址： <a href="https://github.com/idbeny/DeviceSupport" target="_blank" rel="noopener">https://github.com/idbeny/DeviceSupport</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】LaunchScreen.storyboard原理</title>
      <link href="/2018/03/12/ios-launchscreen/"/>
      <url>/2018/03/12/ios-launchscreen/</url>
      
        <content type="html"><![CDATA[<p>之前应用启动图都是通过<code>Assets.xcassets</code>新建<code>LaunchImages</code>来设置的。虽然也很方便，但每次都需要UI给出很多各种屏幕尺寸的图，其实每张图内容元素都一样，仅仅是尺寸不一样，这样不但占用应用安装包体积，对UI设计及开发效率都是有影响的（只要启动图内容调整了，意味着整体需要替换）。</p><a id="more"></a><p><code>LaunchScreen.storyboard</code>是<code>Xcode7</code>之后出的一个文件，并且每次新建项目的时候会默认创建。这个文件时用来替代之前设置启动图方式的，由于是<code>IB</code>系列，所以适配工作相对就很轻松了。</p><h2 id="界面绘制"><a href="#界面绘制" class="headerlink" title="界面绘制"></a>界面绘制</h2><p>既然是<code>IB</code>，我们可以尝试在界面上放几个视图看下效果；<br><img src="http://blog.idbeny.com/9nz7x.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/gjx92.png@normal" alt=""></p><p>运行后发现效果和我们设置的界面一样，那是不是意味着我们可以关联一个<code>ViewController</code>？<br>答案是否定的，因为<code>Xcode</code>限制关联任何控制器。</p><p>我们可以尝试下：<br>新建<code>LaunchScreenViewController</code>，在<code>IB</code>中关联，编译就会报错，提示不可以设置自定义类。<br><img src="http://blog.idbeny.com/rc8lu.png@normal" alt=""></p><h2 id="关联Storyboard"><a href="#关联Storyboard" class="headerlink" title="关联Storyboard"></a>关联Storyboard</h2><p>界面设置完成后，需要配置启动图关联文件是哪个。如果没有设置，默认是<code>LaunchScreen.storyboard</code>。<br><img src="http://blog.idbeny.com/z44yb.png@normal" alt=""></p><p>从上图可以看出，我们可以完全新建一个<code>Storyboard</code>替代默认的<code>LaunchScreen.storyboard</code>。但有一个注意点，如果是新建的<code>Storyboard</code>，需要我们手动修改是否把当前<code>Storyboard</code>作为启动图使用。</p><p><img src="http://blog.idbeny.com/nze0q.png@normal" alt=""></p><h2 id="探究原理"><a href="#探究原理" class="headerlink" title="探究原理"></a>探究原理</h2><p><code>LaunchScreen.storyboard</code>的原理其实很简单，就是在程序首次运行的时候，把<code>LaunchScreen.storyboard</code>描述的界面进行截屏，并保存到沙盒中，等下次程序启动的先从沙盒中查找截屏图片，找到就显示，如果没有找到就继续截屏保存。</p><p>编译运行，生成当前屏幕尺寸的截屏（有横屏和竖屏）：<br><img src="http://blog.idbeny.com/gx8my.png@normal" alt=""></p><p>我们尝试把截图全部删除，再运行应用：<br><strong>竖屏状态</strong><br><img src="http://blog.idbeny.com/pvk3f.png@normal" alt=""></p><p><strong>横屏状态</strong><br><img src="http://blog.idbeny.com/nao9y.png@normal" alt=""></p><p>通过试验示例我们发现，生成截屏的时候会根据当前设备旋转状态进行截屏，并且根据当前设备尺寸生成对应大小的图片。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> LaunchScreen </tag>
            
            <tag> 启动图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Xcode】build版本号自动跟随时间变化脚本</title>
      <link href="/2018/01/04/xcode-version-script/"/>
      <url>/2018/01/04/xcode-version-script/</url>
      
        <content type="html"><![CDATA[<p>利用脚本让构建版本号自动化，再也不需要手动更改，开发效率杠杠滴~</p><a id="more"></a><h3 id="新增脚本"><a href="#新增脚本" class="headerlink" title="新增脚本"></a>新增脚本</h3><p><img src="http://blog.idbeny.com/q0z2w.png@normal" alt=""></p><h3 id="修改脚本位置和名称"><a href="#修改脚本位置和名称" class="headerlink" title="修改脚本位置和名称"></a>修改脚本位置和名称</h3><p><img src="http://blog.idbeny.com/bx07t.png@normal" alt=""></p><ul><li>如果有多个脚本执行，尽量把修改build版本号的脚本放在所有脚本的首位（优先执行，防止其他脚本或代码用到build版本号）</li><li>为了和其他脚本区分，可以双击修改脚本名称（例：<code>Run Script BuildVersion</code>）</li></ul><h3 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h3><blockquote><p>跟随时间变化（release和Debug不同情况）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">// 判断是哪个configuration</span><br><span class="line">// Release Debug 或者只自定义的配置</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"Release"</span> != <span class="string">"<span class="variable">$&#123;CONFIGURATION&#125;</span>"</span> ]</span><br><span class="line">// 如果是Release做哪些事情</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">// 如果不是Release做哪些事情</span><br><span class="line">    // <span class="built_in">exit</span> 0 退出 不执行下面的代码</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">// 获取info.plist信息 CFBundleVersion 可以更改为想获取的信息的名字</span><br><span class="line">buildNumber=$(/usr/libexec/PlistBuddy -c <span class="string">"Print :CFBundleVersion"</span> <span class="string">"<span class="variable">$&#123;PROJECT_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_FILE&#125;</span>"</span>)  </span><br><span class="line">shortVersion=$(/usr/libexec/PlistBuddy -c <span class="string">"Print :CFBundleShortVersionString"</span> <span class="string">"<span class="variable">$&#123;PROJECT_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_FILE&#125;</span>"</span>)  </span><br><span class="line">buildNumber=`date +<span class="string">"%Y%m%d%H%M%S"</span>`  </span><br><span class="line">buildNumber=<span class="string">"<span class="variable">$shortVersion</span>.<span class="variable">$buildNumber</span>"</span>  </span><br><span class="line"></span><br><span class="line">// 设置info.plist</span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleVersion <span class="variable">$buildNumber</span>"</span> <span class="string">"<span class="variable">$&#123;PROJECT_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_FILE&#125;</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>自动+1</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">buildNumber=$(/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleVersion"</span> <span class="string">"<span class="variable">$INFOPLIST_FILE</span>"</span>)</span><br><span class="line">buildNumber=$((<span class="variable">$buildNumber</span> + 1))</span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleVersion <span class="variable">$buildNumber</span>"</span> <span class="string">"<span class="variable">$INFOPLIST_FILE</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>修改项目显示名称为版本号（适用于不同版本号装到一个机器里面，便于区分是哪个版本）</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"Release"</span> != <span class="string">"<span class="variable">$&#123;CONFIGURATION&#125;</span>"</span> ]; then</span><br><span class="line"></span><br><span class="line"><span class="attribute">DisplayName</span>=$(/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleShortVersionString"</span> <span class="string">"<span class="variable">$INFOPLIST_FILE</span>"</span>)</span><br><span class="line"><span class="attribute">DisplayName</span>=<span class="string">"ep<span class="variable">$&#123;DisplayName&#125;</span>-I"</span></span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleDisplayName <span class="variable">$DisplayName</span>"</span> <span class="string">"<span class="variable">$INFOPLIST_FILE</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">DisplayName</span>=<span class="string">"真正的项目名称"</span></span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleDisplayName <span class="variable">$DisplayName</span>"</span> <span class="string">"<span class="variable">$INFOPLIST_FILE</span>"</span></span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>贴上我用的脚本（版本号+日期）</p></blockquote><p><img src="http://blog.idbeny.com/5h8h8.png@normal" alt=""></p><p>以上完成后编译/运行即可看到效果<br><img src="http://blog.idbeny.com/evoa9.png@normal" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
            <tag> build版本号 </tag>
            
            <tag> ShellScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】多线程系列一 - 进程和线程</title>
      <link href="/2017/09/10/ios-process-thread/"/>
      <url>/2017/09/10/ios-process-thread/</url>
      
        <content type="html"><![CDATA[<p>进程和线程在开发中经常会遇到，他们的本质什么？有什么区别呢？</p><a id="more"></a><h2 id="一、进程"><a href="#一、进程" class="headerlink" title="一、进程"></a>一、进程</h2><h3 id="1-1-什么是进程？"><a href="#1-1-什么是进程？" class="headerlink" title="1.1. 什么是进程？"></a>1.1. 什么是进程？</h3><p>进程是指在系统中<strong>正在运行</strong>的一个应用程序。</p><p>每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内。</p><h3 id="1-2-查看进程"><a href="#1-2-查看进程" class="headerlink" title="1.2. 查看进程"></a>1.2. 查看进程</h3><p>Mac电脑的活动监视器就可以看到当前活动的进程以及线程数：<br><img src="http://blog.idbeny.com/p2a7p.png@normal" alt=""></p><p>通过终端也可以看到进程信息（命令：<code>top</code>）：<br><img src="http://blog.idbeny.com/iz6hf.png@normal" alt=""></p><h2 id="二、线程"><a href="#二、线程" class="headerlink" title="二、线程"></a>二、线程</h2><h3 id="2-1-什么是线程？"><a href="#2-1-什么是线程？" class="headerlink" title="2.1. 什么是线程？"></a>2.1. 什么是线程？</h3><ul><li>1个进程要想执行任务，必须得有线程（每个进程至少要有1条线程）；</li><li>一个进程（程序）的所有任务都在线程中执行；</li></ul><h3 id="2-2-线程的串行"><a href="#2-2-线程的串行" class="headerlink" title="2.2. 线程的串行"></a>2.2. 线程的串行</h3><p>1个线程中任务的执行是串行的。如果要在1个线程中执行多个任务，那么只能一个一个地按顺序执行这些任务。也就是说，在同一时间内，1个线程中只能执行1个任务。</p><h2 id="三、进程和线程的比较"><a href="#三、进程和线程的比较" class="headerlink" title="三、进程和线程的比较"></a>三、进程和线程的比较</h2><ol><li>线程是CPU调用（执行任务）的最小单位；</li><li>进程是CPU分配资源和调度的单位；</li><li>一个程序可以对应多个进程，一个进程中可以有多个线程，但至少要有一个线程；</li><li>同一个进程内的线程共享进程的资源。</li></ol><h2 id="四、多线程"><a href="#四、多线程" class="headerlink" title="四、多线程"></a>四、多线程</h2><h3 id="4-1-什么是多线程？"><a href="#4-1-什么是多线程？" class="headerlink" title="4.1. 什么是多线程？"></a>4.1. 什么是多线程？</h3><p>1个进程中可以开启多条线程，每条线程可以 <strong>并行（同时）</strong> 执行不同的任务。</p><h3 id="4-2-多线程的原理"><a href="#4-2-多线程的原理" class="headerlink" title="4.2. 多线程的原理"></a>4.2. 多线程的原理</h3><ul><li>同一时间，CPU只能处理1条线程，只有1条线程在工作（执行）；</li><li>多线程并发（同时）执行，其实是CPU快速地在多条线程之间调度（切换）；</li><li>如果CPU调度线程的时间足够快，就造成了多线程并发执行的假象。</li></ul><blockquote><p>思考：如果线程非常多，会发生什么情况？</p><ul><li>线程的数量并不是越多越好；</li><li>CPU会在N多线程之间调度，CPU会累死，消耗大量的CPU资源；</li><li>每条线程被调度执行的频次会降低（线程的执行效率降低）。</li></ul></blockquote><h3 id="4-3-多线程的优缺点"><a href="#4-3-多线程的优缺点" class="headerlink" title="4.3. 多线程的优缺点"></a>4.3. 多线程的优缺点</h3><p><strong>优点：</strong></p><ol><li>能适当提高程序的执行效率；</li><li>能适当提高资源利用率（CPU、内存利用率）。</li></ol><p><strong>缺点：</strong></p><ol><li>创建线程是有开销的，iOS下主要成本包括：内核数据结构（大约1KB）、栈空间（子线程512KB、主线程1MB，也可以使用<code>-setStackSize:</code>设置，但必须是4K的倍数，而且最小是16K），创建线程大约需要90毫秒的创建时间；</li><li>如果开启大量的线程，会降低程序的性能；</li><li>线程越多，CPU在调度线程上的开销就越大；</li><li>程序设计更加复杂：比如线程之间的通信，多线程的数据共享。</li></ol><h2 id="五、多线程在iOS开发中的应用"><a href="#五、多线程在iOS开发中的应用" class="headerlink" title="五、多线程在iOS开发中的应用"></a>五、多线程在iOS开发中的应用</h2><h3 id="5-1-主线程"><a href="#5-1-主线程" class="headerlink" title="5.1. 主线程"></a>5.1. 主线程</h3><p>一个iOS程序运行后，默认会开启1条线程，称为<strong>主线程</strong>或<strong>UI线程</strong>。</p><h4 id="5-1-1-主线程的主要作用："><a href="#5-1-1-主线程的主要作用：" class="headerlink" title="5.1.1. 主线程的主要作用："></a>5.1.1. 主线程的主要作用：</h4><ul><li>显示/刷新UI界面；</li><li>处理UI事件（比如点击事件、滚动事件、拖拽事件等）。</li></ul><h4 id="5-1-2-主线程的使用注意："><a href="#5-1-2-主线程的使用注意：" class="headerlink" title="5.1.2. 主线程的使用注意："></a>5.1.2. 主线程的使用注意：</h4><ul><li>别将比较耗时的操作放到主线程（会影响用户操作）；</li><li>把耗时操作放在子线程（后台线程、非主线程）；</li><li>UI相关的操作都必须在主线程中执行。</li></ul><h4 id="5-1-3-获取主线程及当前线程"><a href="#5-1-3-获取主线程及当前线程" class="headerlink" title="5.1.3. 获取主线程及当前线程"></a>5.1.3. 获取主线程及当前线程</h4><p>获取主线程：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSThread</span> *mainThread = [<span class="built_in">NSThread</span> mainThread];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, mainThread);</span><br><span class="line"><span class="comment">// 输出：&lt;NSThread: 0x600000562000&gt;&#123;number = 1, name = main&#125;</span></span><br></pre></td></tr></table></figure><p>获取当前线程（执行当前任务/方法的线程）：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSThread</span> *mainThread = [<span class="built_in">NSThread</span> mainThread];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, mainThread);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSThread</span> *curThread = [<span class="built_in">NSThread</span> currentThread];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, curThread);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> &lt;NSThread: 0x600002306c80&gt;&#123;number = 1, name = main&#125;</span></span><br><span class="line"><span class="comment"> &lt;NSThread: 0x600002306c80&gt;&#123;number = 1, name = main&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>通常情况下，几乎所有的任务/方法都在主线程中执行，除非手动创建子线程。</p><p>如何判断线程是否是主线程？</p><ol><li>打印<code>number = 1</code>就是主线程，否则就是子线程；</li><li>通过类方法<code>[NSThread isMainThread]</code>判断；</li><li>通过对象方法<code>[curThread isMainThread]</code>判断。</li></ol><h3 id="5-2-iOS中多线程的实现方案"><a href="#5-2-iOS中多线程的实现方案" class="headerlink" title="5.2. iOS中多线程的实现方案"></a>5.2. iOS中多线程的实现方案</h3><p><img src="http://blog.idbeny.com/g0ame.png@normal" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 进程和线程区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】归档</title>
      <link href="/2017/09/05/ios-nscoding/"/>
      <url>/2017/09/05/ios-nscoding/</url>
      
        <content type="html"><![CDATA[<p>数组和字典都可以保存对象，如果把包含自定义对象的数组以写入到本地沙盒能保存成功么？</p><a id="more"></a><p>场景：两个按钮，分别是读写操作。数组中存放自定义对象，然后把数组存到沙盒。</p><p><strong>自定义类</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">DBPerson </span>: NSObject</span><br><span class="line"></span><br><span class="line"><span class="variable">@property</span> (nonatomic,   copy) NSString *name;</span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) NSInteger age;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> DBPerson</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><p><strong>写数据</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)writeAction &#123;</span><br><span class="line">    DBPerson *person = [[DBPerson alloc] init];</span><br><span class="line">    person.name = <span class="string">@"idbeny"</span>;</span><br><span class="line">    person.age = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *documentPath =  <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>).firstObject;</span><br><span class="line">    <span class="built_in">NSString</span> *dataPath = [documentPath stringByAppendingPathComponent:<span class="string">@"person.data"</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *dataArray = @[<span class="string">@"idbeny"</span>, @<span class="number">30</span>, person];</span><br><span class="line">    <span class="built_in">BOOL</span> isSuccess = [dataArray writeToFile:dataPath atomically:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"写入%@"</span>, isSuccess ? <span class="string">@"成功"</span> : <span class="string">@"失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：写入失败</p><p>因为自定义对象写入到本地沙盒需要使用归档（其实就是编码）才可以实现。</p><h2 id="一、NSCoding"><a href="#一、NSCoding" class="headerlink" title="一、NSCoding"></a>一、NSCoding</h2><p>任何对象保存到本地都需要遵守<code>NSCoding</code>协议，并且协议内容是必须实现的。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSCoding</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)coder;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)coder; <span class="comment">// NS_DESIGNATED_INITIALIZER</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><ul><li><code>encodeWithCoder:</code> 归档（编码），指定key值保存属性value</li><li><code>initWithCoder:</code> 解档（解码），根据key值取对应的属性value</li></ul><h3 id="1-1-遵守协议"><a href="#1-1-遵守协议" class="headerlink" title="1.1. 遵守协议"></a>1.1. 遵守协议</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">DBPerson </span>: NSObject&lt;NSCoding&gt;</span><br><span class="line"></span><br><span class="line"><span class="variable">@property</span> (nonatomic,   copy) NSString *name;</span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) NSInteger age;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><h3 id="1-2-实现协议"><a href="#1-2-实现协议" class="headerlink" title="1.2. 实现协议"></a>1.2. 实现协议</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBPerson</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = [aDecoder decodeObjectForKey:<span class="string">@"name"</span>];</span><br><span class="line">        <span class="keyword">self</span>.age = [aDecoder decodeIntegerForKey:<span class="string">@"age"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder &#123;</span><br><span class="line">    [aCoder encodeObject:<span class="keyword">self</span>.name forKey:<span class="string">@"name"</span>];</span><br><span class="line">    [aCoder encodeInteger:<span class="keyword">self</span>.age forKey:<span class="string">@"age"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="二、归档（编码）"><a href="#二、归档（编码）" class="headerlink" title="二、归档（编码）"></a>二、归档（编码）</h2><p>对象归档使用的<code>NSKeyedArchiver</code>里面的<code>archiveRootObject:</code>类方法。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)writeAction &#123;</span><br><span class="line">    DBPerson *person = [[DBPerson alloc] init];</span><br><span class="line">    person.name = <span class="string">@"idbeny"</span>;</span><br><span class="line">    person.age = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *documentPath =  <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>).firstObject;</span><br><span class="line">    <span class="built_in">NSString</span> *dataPath = [documentPath stringByAppendingPathComponent:<span class="string">@"person.data"</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *dataArray = @[<span class="string">@"idbeny"</span>, @<span class="number">30</span>, person];</span><br><span class="line">    <span class="built_in">BOOL</span> isSuccess =  [<span class="built_in">NSKeyedArchiver</span> archiveRootObject:dataArray toFile:dataPath];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"写入%@"</span>, isSuccess ? <span class="string">@"成功"</span> : <span class="string">@"失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行，崩溃了，<code>DBPerson</code>中没有<code>encodeWithCoder:</code>这个方法.<br><font color='red'><br>KeyedArchiver[79403:937363] *** Terminating app due to uncaught exception ‘NSInvalidArgumentException’, reason: ‘-[DBPerson encodeWithCoder:]: unrecognized selector sent to instance 0x6000022088c0’<br></font></p><p>原因：当执行<code>NSKeyedArchiver</code>的<code>archiveRootObject:</code>时，会自动调用对象的<code>encodeWithCoder:</code>方法，该方法的目的就是告诉他保存对象的哪些属性。要想实现<code>encodeWithCoder:</code>方法，必须遵守<code>NSCoding</code>协议。</p><p>遵守协议后，我们再运行试下。输出：写入成功。</p><p>查看保存的路径：<br><img src="http://blog.idbeny.com/zxi2a.png@normal" alt=""></p><h2 id="三、解档（解码）"><a href="#三、解档（解码）" class="headerlink" title="三、解档（解码）"></a>三、解档（解码）</h2><p>当执行<code>NSKeyedUnarchiver</code>的<code>unarchiveObjectWithFile:</code>时，会自动调用对象的<code>initWithCoder:</code>方法，该方法的目的就是告诉他读取对象的哪些属性。要想实现<code>initWithCoder:</code>方法，同样须遵守<code>NSCoding</code>协议。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)readAction &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *documentPath =  <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>).firstObject;</span><br><span class="line">    <span class="built_in">NSString</span> *dataPath = [documentPath stringByAppendingPathComponent:<span class="string">@"person.data"</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *dataArray = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithFile:dataPath];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, dataArray);</span><br><span class="line">    DBPerson *person = dataArray.lastObject;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"name=%@,age=%ld"</span>, person.name, person.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行，输出结果：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="built_in">    idbeny,</span></span><br><span class="line"><span class="built_in">    30,</span></span><br><span class="line">    <span class="string">"&lt;DBPerson: 0x6000037e97c0&gt;"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">name=idbeny,age=<span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="四、扩展"><a href="#四、扩展" class="headerlink" title="四、扩展"></a>四、扩展</h2><p>4.1. 协议不遵守也可以，本质是给对象发送<code>encodeWithCoder:</code>这个消息，如果该方法没有实现才会崩溃。但为了写代码的时候能够有提示，遵守协议还是很有必要的。</p><p>4.2. 在上面的<code>DBPerson</code>案例中，<code>initWithCoder:</code>方法中为什么不能调用父类的<code>initWithCoder:</code>方法？</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是继承自<code>UIView</code>的自定义<code>View</code>就可以调用父类的<code>initWithCoder:</code>方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aCoder &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:aCoder]) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为<code>UIView</code>实现了<code>NSCoding</code>协议，<code>NSObject</code>没有实现该协议。只要一个类遵守了一个协议，他的子类都会遵守这个协议。</p><p><code>initWithCoder:</code>调用时机：</p><ul><li>加载<code>IB</code>，开始解析对应类时调用（<code>IB</code>解析完成后会调用<code>awakeFromNib</code>）；</li><li>解档时会调用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 归档 </tag>
            
            <tag> initWithCoder作用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaScript】常用正则表达式</title>
      <link href="/2017/08/21/js-regix/"/>
      <url>/2017/08/21/js-regix/</url>
      
        <content type="html"><![CDATA[<p>验证数字：<code>^[0-9]*$</code><br>验证n位的数字：<code>^\d{n}$</code><br>验证至少n位数字：<code>^\d{n,}$</code></p><a id="more"></a><p>验证m-n位的数字：<code>^\d{m,n}$</code><br>验证零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p><p>验证有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code><br>验证有1-3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p><p>验证非零的正整数：<code>^\+?[1-9][0-9]*$</code><br>验证非零的负整数：<code>^\-[1-9][0-9]*$</code><br>验证非负整数（正整数 + 0） <code>^\d+$</code><br>验证非正整数（负整数 + 0）  <code>^((-\d+)|(0+))$</code></p><p>验证整数：<code>^-?\d+$</code><br>验证非负浮点数（正浮点数 + 0）：<code>^\d+(\.\d+)?$</code><br>验证正浮点数：  <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code><br>验证非正浮点数（负浮点数 + 0）：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code><br>验证负浮点数 ： <code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code><br>验证浮点数 ：<code>^(-?\d+)(\.\d+)?</code></p><p>验证长度为3的字符：<code>^.{3}$</code><br>验证由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code><br>验证由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code><br>验证由26个小写英文字母组成的字符串：<code>^[a-z]+$</code><br>验证由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code><br>验证由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$</code></p><p>验证用户密码(以字母开头，长度在6-18之间，只能包含字符、数字和下划线):<code>^[a-zA-Z]\w{5,17}$</code><br>验证是否含有 <code>^%&amp;’,;=?$”</code> 等字符：<code>[^%&amp;&#39;,;=?$\x22]+</code><br>验证汉字：<code>^[\u4e00-\u9fa5],{0,}$</code><br>验证Email地址：<code>^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code><br>验证InternetURL：<code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code>或<code>^[a-zA-z]+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$</code><br>验证电话号码(格式XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX)：<code>^(\(\d{3,4}\)|\d{3,4}-)?\d{7,8}$</code><br>验证身份证号（15位或18位数字）：<code>^\d{15}|\d{}18$</code></p><p>验证一年的12个月(“01”-“09”和“1”“12”)：<code>^(0?[1-9]|1[0-2])$</code><br>验证一个月的31天(01、09和1、31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p>]]></content>
      
      
      <categories>
          
          <category> H5 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】UICollectionView区头停留</title>
      <link href="/2017/07/19/ios-collection-plain/"/>
      <url>/2017/07/19/ios-collection-plain/</url>
      
        <content type="html"><![CDATA[<p><code>UITableView</code>系统提供了两种常用样式(<code>UITableViewStylePlain</code>和<code>UITableViewStyleGrouped</code>)，<code>UITableViewStylePlain</code>可以让区头停留在顶部，但是<code>UICollectionView</code>没有直接提供这样的样式，如果需要我们只能重写<code>UICollectionViewFlowLayout</code>，直接上代码：</p><a id="more"></a><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  UICollectionPlainFlowLayout.h</span></span><br><span class="line"><span class="comment">//  FlowLayoutDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by IDBENY on 2017/7/19.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017年 www.idbeny.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ShoppingCollectionPlainFlowLayout</span> : <span class="title">UICollectionViewFlowLayout</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> navHeight;<span class="comment">//默认为64.0, default is 64.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  UICollectionPlainFlowLayout.m</span></span><br><span class="line"><span class="comment">//  FlowLayoutDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by IDBENY on 2017/7/19.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017年 www.idbeny.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ShoppingCollectionPlainFlowLayout.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ShoppingCollectionPlainFlowLayout</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _navHeight = <span class="number">64.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)layoutAttributesForElementsInRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="comment">//UICollectionViewLayoutAttributes：我称它为collectionView中的item（包括cell和header、footer这些）的《结构信息》</span></span><br><span class="line">    <span class="comment">//截取到父类所返回的数组（里面放的是当前屏幕所能展示的item的结构信息），并转化成不可变数组</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *superArray = [[<span class="keyword">super</span> layoutAttributesForElementsInRect:rect] mutableCopy];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建存索引的数组，无符号（正整数），无序（不能通过下标取值），不可重复（重复的话会自动过滤）</span></span><br><span class="line">    <span class="built_in">NSMutableIndexSet</span> *noneHeaderSections = [<span class="built_in">NSMutableIndexSet</span> indexSet];</span><br><span class="line">    <span class="comment">//遍历superArray，得到一个当前屏幕中所有的section数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UICollectionViewLayoutAttributes</span> *attributes <span class="keyword">in</span> superArray) &#123;</span><br><span class="line">        <span class="comment">//如果当前的元素分类是一个cell，将cell所在的分区section加入数组，重复的话会自动过滤</span></span><br><span class="line">        <span class="keyword">if</span> (attributes.representedElementCategory == <span class="built_in">UICollectionElementCategoryCell</span>) &#123;</span><br><span class="line">            [noneHeaderSections addIndex:attributes.indexPath.section];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历superArray，将当前屏幕中拥有的header的section从数组中移除，得到一个当前屏幕中没有header的section数组</span></span><br><span class="line">    <span class="comment">//正常情况下，随着手指往上移，header脱离屏幕会被系统回收而cell尚在，也会触发该方法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UICollectionViewLayoutAttributes</span> *attributes <span class="keyword">in</span> superArray) &#123;</span><br><span class="line">        <span class="comment">//如果当前的元素是一个header，将header所在的section从数组中移除</span></span><br><span class="line">        <span class="keyword">if</span> ([attributes.representedElementKind isEqualToString:<span class="built_in">UICollectionElementKindSectionHeader</span>]) &#123;</span><br><span class="line">            [noneHeaderSections removeIndex:attributes.indexPath.section];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历当前屏幕中没有header的section数组</span></span><br><span class="line">    [noneHeaderSections enumerateIndexesUsingBlock:^(<span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//取到当前section中第一个item的indexPath</span></span><br><span class="line">        <span class="built_in">NSIndexPath</span> *indexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:<span class="number">0</span> inSection:idx];</span><br><span class="line">        <span class="comment">//获取当前section在正常情况下已经离开屏幕的header结构信息</span></span><br><span class="line">        <span class="built_in">UICollectionViewLayoutAttributes</span> *attributes = [<span class="keyword">self</span> layoutAttributesForSupplementaryViewOfKind:<span class="built_in">UICollectionElementKindSectionHeader</span> atIndexPath:indexPath];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果当前分区确实有因为离开屏幕而被系统回收的header</span></span><br><span class="line">        <span class="keyword">if</span> (attributes) &#123;</span><br><span class="line">            <span class="comment">//将该header结构信息重新加入到superArray中去</span></span><br><span class="line">            [superArray addObject:attributes];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历superArray，改变header结构信息中的参数，使它可以在当前section还没完全离开屏幕的时候一直显示</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UICollectionViewLayoutAttributes</span> *attributes <span class="keyword">in</span> superArray) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果当前item是header</span></span><br><span class="line">        <span class="keyword">if</span> ([attributes.representedElementKind isEqualToString:<span class="built_in">UICollectionElementKindSectionHeader</span>]) &#123;</span><br><span class="line">            <span class="comment">//得到当前header所在分区的cell的数量</span></span><br><span class="line">            <span class="built_in">NSInteger</span> numberOfItemsInSection = [<span class="keyword">self</span>.collectionView numberOfItemsInSection:attributes.indexPath.section];</span><br><span class="line">            <span class="comment">//得到第一个item的indexPath</span></span><br><span class="line">            <span class="built_in">NSIndexPath</span> *firstItemIndexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:<span class="number">0</span> inSection:attributes.indexPath.section];</span><br><span class="line">            <span class="comment">//得到最后一个item的indexPath</span></span><br><span class="line">            <span class="built_in">NSIndexPath</span> *lastItemIndexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:MAX(<span class="number">0</span>, numberOfItemsInSection<span class="number">-1</span>) inSection:attributes.indexPath.section];</span><br><span class="line">            <span class="comment">//得到第一个item和最后一个item的结构信息</span></span><br><span class="line">            <span class="built_in">UICollectionViewLayoutAttributes</span> *firstItemAttributes, *lastItemAttributes;</span><br><span class="line">            <span class="keyword">if</span> (numberOfItemsInSection&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//cell有值，则获取第一个cell和最后一个cell的结构信息</span></span><br><span class="line">                firstItemAttributes = [<span class="keyword">self</span> layoutAttributesForItemAtIndexPath:firstItemIndexPath];</span><br><span class="line">                lastItemAttributes = [<span class="keyword">self</span> layoutAttributesForItemAtIndexPath:lastItemIndexPath];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//cell没值,就新建一个UICollectionViewLayoutAttributes</span></span><br><span class="line">                firstItemAttributes = [<span class="built_in">UICollectionViewLayoutAttributes</span> new];</span><br><span class="line">                <span class="comment">//然后模拟出在当前分区中的唯一一个cell，cell在header的下面，高度为0，还与header隔着可能存在的sectionInset的top</span></span><br><span class="line">                <span class="built_in">CGFloat</span> y = <span class="built_in">CGRectGetMaxY</span>(attributes.frame)+<span class="keyword">self</span>.sectionInset.top;</span><br><span class="line">                firstItemAttributes.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, y, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">//因为只有一个cell，所以最后一个cell等于第一个cell</span></span><br><span class="line">                lastItemAttributes = firstItemAttributes;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//获取当前header的frame</span></span><br><span class="line">            <span class="built_in">CGRect</span> rect = attributes.frame;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//当前的滑动距离 + 因为导航栏产生的偏移量，默认为64（如果app需求不同，需自己设置）</span></span><br><span class="line">            <span class="built_in">CGFloat</span> offset = <span class="keyword">self</span>.collectionView.contentOffset.y + _navHeight;</span><br><span class="line">            <span class="comment">//第一个cell的y值 - 当前header的高度 - 可能存在的sectionInset的top</span></span><br><span class="line">            <span class="built_in">CGFloat</span> headerY = firstItemAttributes.frame.origin.y - rect.size.height - <span class="keyword">self</span>.sectionInset.top;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//哪个大取哪个，保证header悬停</span></span><br><span class="line">            <span class="comment">//针对当前header基本上都是offset更加大，针对下一个header则会是headerY大，各自处理</span></span><br><span class="line">            <span class="built_in">CGFloat</span> maxY = MAX(offset,headerY);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//最后一个cell的y值 + 最后一个cell的高度 + 可能存在的sectionInset的bottom - 当前header的高度</span></span><br><span class="line">            <span class="comment">//当当前section的footer或者下一个section的header接触到当前header的底部，计算出的headerMissingY即为有效值</span></span><br><span class="line">            <span class="built_in">CGFloat</span> headerMissingY = <span class="built_in">CGRectGetMaxY</span>(lastItemAttributes.frame) + <span class="keyword">self</span>.sectionInset.bottom - rect.size.height;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//给rect的y赋新值，因为在最后消失的临界点要跟谁消失，所以取小</span></span><br><span class="line">            rect.origin.y = MIN(maxY,headerMissingY);</span><br><span class="line">            <span class="comment">//给header的结构信息的frame重新赋值</span></span><br><span class="line">            attributes.frame = rect;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果按照正常情况下,header离开屏幕被系统回收，而header的层次关系又与cell相等，如果不去理会，会出现cell在header上面的情况</span></span><br><span class="line">            <span class="comment">//通过打印可以知道cell的层次关系zIndex数值为0，我们可以将header的zIndex设置成1，如果不放心，也可以将它设置成非常大，这里随便填了个7</span></span><br><span class="line">            attributes.zIndex = <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//转换回不可变数组，并返回</span></span><br><span class="line">    <span class="keyword">return</span> [superArray <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return YES;表示一旦滑动就实时调用上面这个layoutAttributesForElementsInRect:方法</span></span><br><span class="line">- (<span class="built_in">BOOL</span>) shouldInvalidateLayoutForBoundsChange:(<span class="built_in">CGRect</span>)newBound &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UICollectionView区头停留 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】获取设备信息</title>
      <link href="/2017/07/07/ios-device-info/"/>
      <url>/2017/07/07/ios-device-info/</url>
      
        <content type="html"><![CDATA[<p>在项目中经常会遇到要向服务端提交设备相关信息的需求(设备型号、版本号、DeviceToken等等)，于是把当前用到的相关函数整理成一个工具类和大家分享</p><a id="more"></a><p>欢迎补充~~<br><a href="https://github.com/idbeny/YBDeviceManager.git" target="_blank" rel="noopener">https://github.com/idbeny/YBDeviceManager.git</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  YBDeviceManager.h</span></span><br><span class="line"><span class="comment">//  SHARE</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by IDBENY on 2017/6/6.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017年 Personal:idbeny.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mac</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sysctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if_dl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;sys/sockio.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ifaddrs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mount.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Security/Security.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/mach.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//广告</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;AdSupport/AdSupport.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> : <span class="built_in">NSUInteger</span> &#123;</span><br><span class="line">    MemoryTypeTotal = <span class="number">0</span>,<span class="comment">//总的</span></span><br><span class="line">    MemoryTypeFree,     <span class="comment">//剩余</span></span><br><span class="line">    MemoryTypeUsed,     <span class="comment">//已用</span></span><br><span class="line">    MemoryTypeActive,   <span class="comment">//活跃</span></span><br><span class="line">    MemoryTypeInactive, <span class="comment">//不活跃</span></span><br><span class="line">    MemoryTypeWired,    <span class="comment">//存放内核和数据结构</span></span><br><span class="line">    MemoryTypePurgeable  <span class="comment">//可释放的</span></span><br><span class="line">&#125; MemoryType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> iOS7AndLater()&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">7.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> iOS8AndLater()&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">8.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> iOS9AndLater()&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">9.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> iOS10AndLater()&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">10.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> iOS11AndLater()&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">11.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YBDeviceManager</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)defaultManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取UUID</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return UUID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceUUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 创建UUID</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return UUID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)createNewUUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取DeviceToken</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return DeviceToken</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceToken;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取当前设备Model</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return iPhone/iPad/iPod touch/...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)deviceModel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取当前设备名称</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return iPhone 6 Plus/iPhone SE/iPad Mini/...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取广告标识符</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return IDFA</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIDFA;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取设备IP地址</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return deviceIP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceIPAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取WiFi地址</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return WiFiIP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIPAddressForWiFi;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取移动网络IP</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return mobileNetworkIP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIPAddressForMobileNetwork;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取MAC地址</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return MAC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getMACAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 系统版本</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return e.g 7.0/8.3/..</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)systemVersion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 当前APP版本</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return e.g 3.0.0/3.0.1/...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)appVersion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取区域标志符（非语言标志）</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return e.g en_GB...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)localeIdentifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 判断设备是否为iPad</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return NO:iPhone/TV/CarPlay YES:iPad</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isiPad;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 是否为视网膜屏幕</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return YES/NO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isRetina;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 判断系统版本</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return YES/NO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS7AndLater;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS8AndLater;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS9AndLater;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS10AndLater;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS11AndLater;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 判断相机是否可用(前置)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return YES/NO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isFrontCameraAvailable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 判断相机是否可用(后置)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return YES/NO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isRearCameraAvailable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 电量</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return battery</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)batteryLevel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 系统上次启动时间</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return NSDate*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSDate</span> *)getSystemUptime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取CPU总数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return CPU数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)getCPUCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> CPU使用总比例</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return CPU usage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)getCPUUsage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 每个CPU使用比例</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return CPU usage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)getPerCPUUsage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取总磁盘空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return total disk space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getTotalDiskSpace;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_totalDiskSpace;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取剩余磁盘空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return free disk space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getFreeDiskSpace;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_freeDiskSpace;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取已使用磁盘空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return used disk space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getUsedDiskSpace;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取磁盘设备号</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return NSNumber*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)diskNumber;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取指定目录大小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param dir 文件地址</span></span><br><span class="line"><span class="comment"> @return 文件夹大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)sizeOfDirectory:(<span class="built_in">NSString</span> *)dir;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 大小转换</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param size bit</span></span><br><span class="line"><span class="comment"> @return 转换结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)convertFloatSizeToString:(<span class="keyword">float</span>)size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取系统总内存空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return total memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getTotalMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_totalMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取系统活跃内存空间</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return active memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getActiveMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_activeMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取系统不活跃内存空间</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return inactive memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getInactiveMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_inactiveMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取系统空闲的内存空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return free memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getFreeMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_freeMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 用户可使用内存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return free memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)c_userMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取系统已使用的内存空间</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return used memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getUsedMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_usedMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取用来存放内核和数据结构的内存</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return wired memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getWiredMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_wireMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 可释放的内存空间：内存吃紧自动释放</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return purgeable memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getPurgeableMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_purgeableMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> CPU使用频率</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return frequency</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)cpuFrequency;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> CPU总线频率</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return frequency</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)busFrequency;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 最大Socket缓存区大小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return size</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)maxSocketBufferSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  YBDeviceManager.m</span></span><br><span class="line"><span class="comment">//  SHARE</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by IDBENY on 2017/6/6.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017年 Personal:idbeny.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"YBDeviceManager.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YBDeviceManager</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)defaultManager &#123;</span><br><span class="line">    <span class="keyword">static</span> YBDeviceManager *defaultManager = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        defaultManager = [[YBDeviceManager alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> defaultManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取设备UUID ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceUUID &#123;</span><br><span class="line">    <span class="built_in">CFUUIDRef</span> new_uuid = <span class="built_in">CFUUIDCreate</span>(<span class="literal">nil</span>);</span><br><span class="line">    <span class="built_in">CFStringRef</span> uuidString = <span class="built_in">CFUUIDCreateString</span>(<span class="literal">nil</span>, new_uuid);</span><br><span class="line">    <span class="built_in">NSString</span> * result = (<span class="built_in">NSString</span> *)<span class="built_in">CFBridgingRelease</span>(<span class="built_in">CFStringCreateCopy</span>( <span class="literal">NULL</span>, uuidString));</span><br><span class="line">    <span class="built_in">CFRelease</span>(new_uuid);</span><br><span class="line">    <span class="built_in">CFRelease</span>(uuidString);</span><br><span class="line">    <span class="built_in">NSString</span> *UUID  = [[result description] stringByReplacingOccurrencesOfString:<span class="string">@"-"</span> withString:<span class="string">@""</span>];</span><br><span class="line">    <span class="keyword">return</span> UUID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 创建新的UUID ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)createNewUUID &#123;</span><br><span class="line">    <span class="built_in">CFUUIDRef</span> theUUID = <span class="built_in">CFUUIDCreate</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">CFStringRef</span> string = <span class="built_in">CFUUIDCreateString</span>(<span class="literal">NULL</span>, theUUID);</span><br><span class="line">    <span class="built_in">CFRelease</span>(theUUID);</span><br><span class="line">    <span class="keyword">return</span> (__bridge <span class="built_in">NSString</span> *)string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取DeviceToken ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceToken &#123;</span><br><span class="line">    <span class="built_in">NSString</span>  *token = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] objectForKey:<span class="string">@"deviceToken"</span>];</span><br><span class="line">    <span class="keyword">return</span> token.length &gt; <span class="number">0</span> ? token : <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前设备的model</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)deviceModel &#123;</span><br><span class="line">    <span class="keyword">struct</span> utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    <span class="built_in">NSString</span> *deviceModel = [<span class="built_in">NSString</span> stringWithCString:systemInfo.machine encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">return</span> deviceModel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取当前设备的名称 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceName &#123;</span><br><span class="line">    <span class="keyword">struct</span> utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    <span class="built_in">NSString</span> *deviceString = [<span class="built_in">NSString</span> stringWithCString:systemInfo.machine encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone3,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 4"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone3,2"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 4"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone3,3"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 4"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone4,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 4S"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone5,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone5,2"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5 (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone5,3"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5c (GSM)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone5,4"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5c (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone6,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5s (GSM)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone6,2"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5s (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone7,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 6 Plus"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone7,2"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 6"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone8,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 6s"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone8,2"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 6s Plus"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone8,4"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone SE"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone9,1"</span>])    <span class="keyword">return</span> <span class="string">@"国行、日版、港行iPhone 7"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone9,2"</span>])    <span class="keyword">return</span> <span class="string">@"港行、国行iPhone 7 Plus"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone9,3"</span>])    <span class="keyword">return</span> <span class="string">@"美版、台版iPhone 7"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone9,4"</span>])    <span class="keyword">return</span> <span class="string">@"美版、台版iPhone 7 Plus"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPod1,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPod Touch 1G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPod2,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPod Touch 2G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPod3,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPod Touch 3G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPod4,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPod Touch 4G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPod5,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPod Touch (5 Gen)"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad1,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPad"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad1,2"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 3G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 2 (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,2"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,3"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 2 (CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,4"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,5"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,6"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,7"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 3 (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,2"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 3 (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,3"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,4"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 4 (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,5"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 4"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,6"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 4 (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Air (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,2"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Air (Cellular)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,4"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 2 (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,5"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 2 (Cellular)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,6"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,7"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,8"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,9"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad5,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 4 (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad5,2"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 4 (LTE)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad5,3"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Air 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad5,4"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Air 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad6,3"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Pro 9.7"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad6,4"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Pro 9.7"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad6,7"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Pro 12.9"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad6,8"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Pro 12.9"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"AppleTV2,1"</span>])      <span class="keyword">return</span> <span class="string">@"Apple TV 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"AppleTV3,1"</span>])      <span class="keyword">return</span> <span class="string">@"Apple TV 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"AppleTV3,2"</span>])      <span class="keyword">return</span> <span class="string">@"Apple TV 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"AppleTV5,3"</span>])      <span class="keyword">return</span> <span class="string">@"Apple TV 4"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"i386"</span>])         <span class="keyword">return</span> <span class="string">@"i386Simulator"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"x86_64"</span>])       <span class="keyword">return</span> <span class="string">@"x86_64Simulator"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> deviceString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取广告标识符 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIDFA &#123;</span><br><span class="line">    <span class="keyword">return</span> [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取设备IP地址 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceIPAddress &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sockfd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *ips = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> BUFFERSIZE = <span class="number">4096</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> ifconf ifc;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> buffer[BUFFERSIZE], *ptr, lastname[IFNAMSIZ], *cptr;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> ifreq *ifr, ifrcopy;</span><br><span class="line">    </span><br><span class="line">    ifc.ifc_len = BUFFERSIZE;</span><br><span class="line">    ifc.ifc_buf = buffer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ioctl(sockfd, SIOCGIFCONF, &amp;ifc) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (ptr = buffer; ptr &lt; buffer + ifc.ifc_len; )&#123;</span><br><span class="line">            </span><br><span class="line">            ifr = (<span class="keyword">struct</span> ifreq *)ptr;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (ifr-&gt;ifr_addr.sa_len &gt; len) &#123;</span><br><span class="line">                len = ifr-&gt;ifr_addr.sa_len;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ptr += <span class="keyword">sizeof</span>(ifr-&gt;ifr_name) + len;</span><br><span class="line">            <span class="keyword">if</span> (ifr-&gt;ifr_addr.sa_family != AF_INET) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((cptr = (<span class="keyword">char</span> *)strchr(ifr-&gt;ifr_name, <span class="string">':'</span>)) != <span class="literal">NULL</span>) *cptr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (strncmp(lastname, ifr-&gt;ifr_name, IFNAMSIZ) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            memcpy(lastname, ifr-&gt;ifr_name, IFNAMSIZ);</span><br><span class="line">            ifrcopy = *ifr;</span><br><span class="line">            ioctl(sockfd, SIOCGIFFLAGS, &amp;ifrcopy);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> ((ifrcopy.ifr_flags &amp; IFF_UP) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSString</span> *ip = [<span class="built_in">NSString</span>  stringWithFormat:<span class="string">@"%s"</span>, inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)&amp;ifr-&gt;ifr_addr)-&gt;sin_addr)];</span><br><span class="line">            [ips addObject:ip];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="built_in">NSString</span> *deviceIP = <span class="string">@""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; ips.count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ips.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            deviceIP = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,ips.lastObject];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deviceIP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取wifi地址 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIPAddressForWiFi &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ipAddressWithIfaName:<span class="string">@"en0"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取移动网络地址 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIPAddressForMobileNetwork&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ipAddressWithIfaName:<span class="string">@"pdp_ip0"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)ipAddressWithIfaName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *address = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">struct</span> ifaddrs *addrs = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (getifaddrs(&amp;addrs) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">struct</span> ifaddrs *addr = addrs;</span><br><span class="line">        <span class="keyword">while</span> (addr) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([[<span class="built_in">NSString</span> stringWithUTF8String:addr-&gt;ifa_name] isEqualToString:name]) &#123;</span><br><span class="line">                sa_family_t family = addr-&gt;ifa_addr-&gt;sa_family;</span><br><span class="line">                <span class="keyword">switch</span> (family) &#123;</span><br><span class="line">                    <span class="keyword">case</span> AF_INET: &#123; <span class="comment">// IPv4</span></span><br><span class="line">                        <span class="keyword">char</span> str[INET_ADDRSTRLEN] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                        inet_ntop(family, &amp;(((<span class="keyword">struct</span> sockaddr_in *)addr-&gt;ifa_addr)-&gt;sin_addr), str, <span class="keyword">sizeof</span>(str));</span><br><span class="line">                        <span class="keyword">if</span> (strlen(str) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            address = [<span class="built_in">NSString</span> stringWithUTF8String:str];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">break</span>;</span><br><span class="line">                        </span><br><span class="line">                    <span class="keyword">case</span> AF_INET6: &#123; <span class="comment">// IPv6</span></span><br><span class="line">                        <span class="keyword">char</span> str[INET6_ADDRSTRLEN] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                        inet_ntop(family, &amp;(((<span class="keyword">struct</span> sockaddr_in6 *)addr-&gt;ifa_addr)-&gt;sin6_addr), str, <span class="keyword">sizeof</span>(str));</span><br><span class="line">                        <span class="keyword">if</span> (strlen(str) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            address = [<span class="built_in">NSString</span> stringWithUTF8String:str];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                        </span><br><span class="line">                    <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (address) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            addr = addr-&gt;ifa_next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    freeifaddrs(addrs);</span><br><span class="line">    <span class="keyword">return</span> address ? address : <span class="string">@"该设备不存在该ip地址"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取MAC地址(为了保护用户隐私，每次都不一样) ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getMACAddress &#123;</span><br><span class="line">    <span class="keyword">int</span>                    mib[<span class="number">6</span>];</span><br><span class="line">    size_t                len;</span><br><span class="line">    <span class="keyword">char</span>                *buf;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>        *ptr;</span><br><span class="line">    <span class="keyword">struct</span> if_msghdr    *ifm;</span><br><span class="line">    <span class="keyword">struct</span> sockaddr_dl    *sdl;</span><br><span class="line">    </span><br><span class="line">    mib[<span class="number">0</span>] = <span class="built_in">CTL_NET</span>;</span><br><span class="line">    mib[<span class="number">1</span>] = AF_ROUTE;</span><br><span class="line">    mib[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    mib[<span class="number">3</span>] = AF_LINK;</span><br><span class="line">    mib[<span class="number">4</span>] = NET_RT_IFLIST;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((mib[<span class="number">5</span>] = if_nametoindex(<span class="string">"en0"</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        printf(<span class="string">"Error: if_nametoindex error/n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (sysctl(mib, <span class="number">6</span>, <span class="literal">NULL</span>, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printf(<span class="string">"Error: sysctl, take 1/n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((buf = malloc(len)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        printf(<span class="string">"Could not allocate memory. error!/n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (sysctl(mib, <span class="number">6</span>, buf, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printf(<span class="string">"Error: sysctl, take 2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ifm = (<span class="keyword">struct</span> if_msghdr *)buf;</span><br><span class="line">    sdl = (<span class="keyword">struct</span> sockaddr_dl *)(ifm + <span class="number">1</span>);</span><br><span class="line">    ptr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)LLADDR(sdl);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *outstring = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%02x%02x%02x%02x%02x%02x"</span>, *ptr, *(ptr+<span class="number">1</span>), *(ptr+<span class="number">2</span>), *(ptr+<span class="number">3</span>), *(ptr+<span class="number">4</span>), *(ptr+<span class="number">5</span>)];</span><br><span class="line">    free(buf);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [outstring uppercaseString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 系统版本 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)systemVersion &#123;</span><br><span class="line">    <span class="built_in">UIDevice</span> *device=[<span class="built_in">UIDevice</span> currentDevice];</span><br><span class="line">    <span class="keyword">return</span> device.systemVersion;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== APP version ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)appVersion &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *majorVersion = [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:<span class="string">@"CFBundleShortVersionString"</span>];</span><br><span class="line">    <span class="keyword">return</span> majorVersion;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电池量</span></span><br><span class="line">- (<span class="keyword">float</span>)batteryLevel&#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">UIDevice</span> currentDevice] batteryLevel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取区域标志符（非语言标志）</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)localeIdentifier &#123;</span><br><span class="line">    <span class="built_in">NSLocale</span> *frLocale = [<span class="built_in">NSLocale</span> autoupdatingCurrentLocale];</span><br><span class="line">    <span class="keyword">return</span> frLocale.localeIdentifier;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 系统上次启动时间 ==============</span></span><br><span class="line">- (<span class="built_in">NSDate</span> *)getSystemUptime &#123;</span><br><span class="line">    <span class="built_in">NSTimeInterval</span> time = [[<span class="built_in">NSProcessInfo</span> processInfo] systemUptime];</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSDate</span> alloc] initWithTimeIntervalSinceNow:(<span class="number">0</span> - time)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 判断设备是否为iPad ==============</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isiPad&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">UI_USER_INTERFACE_IDIOM</span>() == <span class="built_in">UIUserInterfaceIdiomPad</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 判断是否为视网膜屏幕 ==============</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isRetina&#123;</span><br><span class="line">    <span class="keyword">return</span> ([<span class="built_in">UIScreen</span> mainScreen].scale &gt; <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 判断系统版本 ==============</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS7AndLater&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">7.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS8AndLater&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">8.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS9AndLater&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">9.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS10AndLater&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">10.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS11AndLater&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">11.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 判断相机是否可用 ==============</span></span><br><span class="line"><span class="comment">//判断相机是否可用(前置)</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isFrontCameraAvailable&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIImagePickerController</span> isCameraDeviceAvailable: <span class="built_in">UIImagePickerControllerCameraDeviceFront</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断相机是否可用(后置)</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isRearCameraAvailable&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIImagePickerController</span> isCameraDeviceAvailable: <span class="built_in">UIImagePickerControllerCameraDeviceRear</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== CPU ==============</span></span><br><span class="line"><span class="comment">//CPU总数</span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)getCPUCount &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSProcessInfo</span> processInfo].activeProcessorCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU使用的总比例</span></span><br><span class="line">- (<span class="keyword">float</span>)getCPUUsage &#123;</span><br><span class="line">    <span class="keyword">float</span> cpu = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSArray</span> *cpus = [<span class="keyword">self</span> getPerCPUUsage];</span><br><span class="line">    <span class="keyword">if</span> (cpus.count == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSNumber</span> *n <span class="keyword">in</span> cpus) &#123;</span><br><span class="line">        cpu += n.floatValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cpu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每个CPU使用比例</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)getPerCPUUsage &#123;</span><br><span class="line">    processor_info_array_t _cpuInfo, _prevCPUInfo = <span class="literal">nil</span>;</span><br><span class="line">    mach_msg_type_number_t _numCPUInfo, _numPrevCPUInfo = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> _numCPUs;</span><br><span class="line">    <span class="built_in">NSLock</span> *_cpuUsageLock;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> _mib[<span class="number">2</span>U] = &#123; <span class="built_in">CTL_HW</span>, HW_NCPU &#125;;</span><br><span class="line">    size_t _sizeOfNumCPUs = <span class="keyword">sizeof</span>(_numCPUs);</span><br><span class="line">    <span class="keyword">int</span> _status = sysctl(_mib, <span class="number">2</span>U, &amp;_numCPUs, &amp;_sizeOfNumCPUs, <span class="literal">NULL</span>, <span class="number">0</span>U);</span><br><span class="line">    <span class="keyword">if</span> (_status)</span><br><span class="line">        _numCPUs = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    _cpuUsageLock = [[<span class="built_in">NSLock</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    natural_t _numCPUsU = <span class="number">0</span>U;</span><br><span class="line">    kern_return_t err = host_processor_info(mach_host_self(), PROCESSOR_CPU_LOAD_INFO, &amp;_numCPUsU, &amp;_cpuInfo, &amp;_numCPUInfo);</span><br><span class="line">    <span class="keyword">if</span> (err == KERN_SUCCESS) &#123;</span><br><span class="line">        [_cpuUsageLock lock];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSMutableArray</span> *cpus = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>U; i &lt; _numCPUs; ++i) &#123;</span><br><span class="line">            Float32 _inUse, _total;</span><br><span class="line">            <span class="keyword">if</span> (_prevCPUInfo) &#123;</span><br><span class="line">                _inUse = (</span><br><span class="line">                          (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_USER]   - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_USER])</span><br><span class="line">                          + (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_SYSTEM] - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_SYSTEM])</span><br><span class="line">                          + (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_NICE]   - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_NICE])</span><br><span class="line">                          );</span><br><span class="line">                _total = _inUse + (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_IDLE] - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_IDLE]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _inUse = _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_USER] + _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_SYSTEM] + _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_NICE];</span><br><span class="line">                _total = _inUse + _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_IDLE];</span><br><span class="line">            &#125;</span><br><span class="line">            [cpus addObject:@(_inUse / _total)];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [_cpuUsageLock unlock];</span><br><span class="line">        <span class="keyword">if</span> (_prevCPUInfo) &#123;</span><br><span class="line">            size_t prevCpuInfoSize = <span class="keyword">sizeof</span>(integer_t) * _numPrevCPUInfo;</span><br><span class="line">            vm_deallocate(mach_task_self(), (vm_address_t)_prevCPUInfo, prevCpuInfoSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cpus;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== Disk ==============</span></span><br><span class="line"><span class="comment">//总磁盘空间</span></span><br><span class="line">- (int64_t)getTotalDiskSpace &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getSpaceForKey:<span class="built_in">NSFileSystemSize</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_totalDiskSpace &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"~/Documents"</span>;</span><br><span class="line">    </span><br><span class="line">    uint64_t size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">struct</span> statfs diskInfo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(statfs([[str stringByExpandingTildeInPath] fileSystemRepresentation], &amp;diskInfo) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//每个block里包含的字节数</span></span><br><span class="line">        uint64_t blocksize = diskInfo.f_bsize;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//总的字节数，f_blocks为block的数目</span></span><br><span class="line">        uint64_t totalsize = blocksize * diskInfo.f_blocks;</span><br><span class="line">        size = totalsize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剩余磁盘空间</span></span><br><span class="line">- (int64_t)getFreeDiskSpace &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getSpaceForKey:<span class="built_in">NSFileSystemFreeSize</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_freeDiskSpace &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"~/Documents"</span>;</span><br><span class="line">    </span><br><span class="line">    uint64_t size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">struct</span> statfs diskInfo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(statfs([[str stringByExpandingTildeInPath] fileSystemRepresentation], &amp;diskInfo) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//每个block里包含的字节数</span></span><br><span class="line">        uint64_t blocksize = diskInfo.f_bsize;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//可用空间大小</span></span><br><span class="line">        uint64_t availableDisk = diskInfo.f_bavail * blocksize;</span><br><span class="line">        </span><br><span class="line">        size = availableDisk;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//已用磁盘空间</span></span><br><span class="line">- (int64_t)getUsedDiskSpace &#123;</span><br><span class="line">    int64_t totalDisk = [<span class="keyword">self</span> getTotalDiskSpace];</span><br><span class="line">    int64_t freeDisk = [<span class="keyword">self</span> getFreeDiskSpace];</span><br><span class="line">    <span class="keyword">if</span> (totalDisk &lt; <span class="number">0</span> || freeDisk &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    int64_t usedDisk = totalDisk - freeDisk;</span><br><span class="line">    <span class="keyword">if</span> (usedDisk &lt; <span class="number">0</span>) usedDisk = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> usedDisk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (int64_t)ios_getSpaceForKey:(<span class="keyword">id</span>)key &#123;</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *attrs = [[<span class="built_in">NSFileManager</span> defaultManager] attributesOfFileSystemForPath:<span class="built_in">NSHomeDirectory</span>() error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    int64_t space =  [[attrs objectForKey:key] longLongValue];</span><br><span class="line">    <span class="keyword">if</span> (space &lt; <span class="number">0</span>) space = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> space;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//磁盘号</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)diskNumber &#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *fattributes = [[<span class="built_in">NSFileManager</span> defaultManager] attributesOfFileSystemForPath:<span class="built_in">NSHomeDirectory</span>() error:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [fattributes objectForKey:<span class="built_in">NSFileSystemNumber</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目录下所有文件大小</span></span><br><span class="line">- (int64_t)sizeOfDirectory:(<span class="built_in">NSString</span> *)dir &#123;</span><br><span class="line">    <span class="built_in">NSDirectoryEnumerator</span> *direnum = [[<span class="built_in">NSFileManager</span> defaultManager] enumeratorAtPath:dir];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *pname;</span><br><span class="line">    int64_t s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pname = [direnum nextObject])&#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *currentdict=[direnum fileAttributes];</span><br><span class="line">        <span class="built_in">NSString</span> *filesize=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,[currentdict objectForKey:<span class="built_in">NSFileSize</span>]];</span><br><span class="line">        <span class="built_in">NSString</span> *filetype=[currentdict objectForKey:<span class="built_in">NSFileType</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([filetype isEqualToString:<span class="built_in">NSFileTypeDirectory</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        s += [filesize longLongValue];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将大小转化为格式,B,L,M,G之间的转换</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)convertFloatSizeToString:(<span class="keyword">float</span>)size &#123;</span><br><span class="line">    <span class="keyword">if</span>(size &lt; <span class="number">1024</span>L) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%fB"</span>, size];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(size &lt; <span class="number">1024</span>L * <span class="number">1024</span>L) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%1.2fK"</span>, (<span class="keyword">float</span>)size / <span class="number">1024.0</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(size &lt; <span class="number">1024</span>L * <span class="number">1024</span>L * <span class="number">1024</span>L) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%1.2fM"</span>, (<span class="keyword">float</span>)size / <span class="number">1024.0</span> / <span class="number">1024.0</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%1.2fG"</span>, (<span class="keyword">float</span>)size / <span class="number">1024.0</span> / <span class="number">1024.0</span> / <span class="number">1024.0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== Memory ==============</span></span><br><span class="line"><span class="comment">//总内存</span></span><br><span class="line">- (int64_t)getTotalMemory &#123;</span><br><span class="line">    int64_t totalMemory = [[<span class="built_in">NSProcessInfo</span> processInfo] physicalMemory];</span><br><span class="line">    <span class="keyword">if</span> (totalMemory &lt; <span class="number">-1</span>) totalMemory = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> totalMemory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_totalMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sysInfo:HW_PHYSMEM];</span><br><span class="line">    <span class="comment">//or</span></span><br><span class="line">    <span class="comment">//return NSRealMemoryAvailable();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//活跃内存</span></span><br><span class="line">- (int64_t)getActiveMemory &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypeActive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_activeMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypeActive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不活跃内存</span></span><br><span class="line">- (int64_t)getInactiveMemory &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypeInactive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_inactiveMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypeInactive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剩余内存</span></span><br><span class="line">- (int64_t)getFreeMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypeFree];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_freeMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypeFree];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户可使用内存</span></span><br><span class="line">- (<span class="keyword">float</span>)c_userMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sysInfo:HW_USERMEM];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//已用内存</span></span><br><span class="line">- (int64_t)getUsedMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypeUsed];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_usedMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypeUsed];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放内核和数据结构的内存</span></span><br><span class="line">- (int64_t)getWiredMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypeWired];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_wireMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypeWired];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可释放的内存</span></span><br><span class="line">- (int64_t)getPurgeableMemory &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypePurgeable];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_purgeableMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypePurgeable];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (int64_t)ios_getMemoryWithType:(MemoryType)type&#123;</span><br><span class="line">    mach_port_t host_port = mach_host_self();</span><br><span class="line">    mach_msg_type_number_t host_size = <span class="keyword">sizeof</span>(vm_statistics_data_t) / <span class="keyword">sizeof</span>(integer_t);</span><br><span class="line">    vm_size_t page_size;</span><br><span class="line">    vm_statistics_data_t vm_stat;</span><br><span class="line">    kern_return_t kern;</span><br><span class="line">    </span><br><span class="line">    kern = host_page_size(host_port, &amp;page_size);</span><br><span class="line">    <span class="keyword">if</span> (kern != KERN_SUCCESS) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    kern = host_statistics(host_port, HOST_VM_INFO, (host_info_t)&amp;vm_stat, &amp;host_size);</span><br><span class="line">    <span class="keyword">if</span> (kern != KERN_SUCCESS) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    int64_t count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> MemoryTypeFree:</span><br><span class="line">            count = vm_stat.free_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> MemoryTypePurgeable:</span><br><span class="line">            count = vm_stat.purgeable_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> MemoryTypeActive:</span><br><span class="line">            count = vm_stat.active_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> MemoryTypeInactive:</span><br><span class="line">            count = vm_stat.inactive_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> MemoryTypeWired:</span><br><span class="line">            count = vm_stat.wire_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> MemoryTypeUsed:</span><br><span class="line">            count = vm_stat.active_count + vm_stat.inactive_count + vm_stat.wire_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count * page_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_memoryWithType:(MemoryType)type&#123;</span><br><span class="line">    vm_statistics_data_t vm_stat;</span><br><span class="line">    </span><br><span class="line">    mach_msg_type_number_t infoCount = HOST_VM_INFO_COUNT;</span><br><span class="line">    kern_return_t kernReturn = host_statistics(mach_host_self(), HOST_VM_INFO, (host_info_t)&amp;vm_stat, &amp;infoCount);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(kernReturn == KERN_SUCCESS)&#123;</span><br><span class="line">        int64_t count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> MemoryTypeFree:</span><br><span class="line">                count = vm_stat.free_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> MemoryTypePurgeable:</span><br><span class="line">                count = vm_stat.purgeable_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> MemoryTypeActive:</span><br><span class="line">                count = vm_stat.active_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> MemoryTypeInactive:</span><br><span class="line">                count = vm_stat.inactive_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> MemoryTypeWired:</span><br><span class="line">                count = vm_stat.wire_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> MemoryTypeUsed:</span><br><span class="line">                count = vm_stat.active_count + vm_stat.inactive_count + vm_stat.wire_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count * vm_page_size * <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU使用频率</span></span><br><span class="line">- (<span class="keyword">float</span>)cpuFrequency&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sysInfo:HW_CPU_FREQ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU总线频率</span></span><br><span class="line">- (<span class="keyword">float</span>)busFrequency&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sysInfo:HW_BUS_FREQ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最大Socket缓存区大小</span></span><br><span class="line">- (<span class="keyword">float</span>)maxSocketBufferSize&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sysInfo:KIPC_MAXSOCKBUF];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)sysInfo:(uint)typeSpecifier&#123;</span><br><span class="line">    size_t size = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> results;</span><br><span class="line">    <span class="keyword">int</span> mib[<span class="number">2</span>] = &#123;<span class="built_in">CTL_HW</span>, typeSpecifier&#125;;</span><br><span class="line">    sysctl(mib, <span class="number">2</span>, &amp;results, &amp;size, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">NSUInteger</span>) results * <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 设备信息获取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】 Build Active Architecture Only</title>
      <link href="/2017/06/23/ios-armv-config/"/>
      <url>/2017/06/23/ios-armv-config/</url>
      
        <content type="html"><![CDATA[<p>前两天运营部门提出一个问题：为什么我们的APP不支持iPhone5s以下机型(我们APP最低支持系统版本8.0)？我也是一脸懵，平时都是不支持哪个系统版本的，我还是头一次听说不支持机型的呢！直觉告诉我问题出在<code>armv64</code>、<code>armv7</code>等系统架构上面……</p><a id="more"></a><p>我在AppStore上搜索我们的APP发现兼容性描述限制了机型！！！<br><img src="http://blog.idbeny.com/eehiu.png@normal" alt=""></p><p>为什么会出现这样的问题呢？查看配置<br><img src="http://blog.idbeny.com/jfge1.png@normal" alt=""></p><ul><li>当<code>Debug</code>和<code>Release</code>属性设置为<code>YES</code>时，是为了debug的时候编译速度更快，它只编译当前连接手机的<code>architecture</code>版本;</li><li>当而设置为<code>NO</code>时，会编译所有的版本;</li><li>编译出的版本是向下兼容的，比如你设置值为<code>YES</code>，用iPhone4编译出来的是armv7版本的，iphone5也可以运行，但是armv6的设备就不能运行;</li><li>所以，一般<code>Debug</code>模式可以选择设置为<code>YES</code>，<code>Release</code>的时候要改为<code>NO</code>，以适应不同设备。</li></ul><p>目前为止Apple移动设备默认指令集：</p><ul><li>armv6：iPhone2G/3G、iPod 1G/2G</li><li>armv7：iPhone 3GS/4/4s、iPod 3G/4G、iPad 1G/2G/3G、iPad mini</li><li>armv7s：iPhone5、iPhone5c、iPad4</li><li>arm64：iPhone5s及以后、iPad Air、iPad mini2</li></ul><p><em>(Armv6、armv7、armv7s、arm64都是arm处理器的指令集，所有指令集原则上都是向下兼容的。需要注意的是iOS模拟器没有运行arm指令集，编译运行的是x86指令集，所以，只有在iOS设备上，才会执行设备对应的arm指令集。)</em></p><p>更改设置并发布版本后发现AppStore兼容性描述正常，iPhone5也可以正常下载<br><img src="http://blog.idbeny.com/4blki.png@normal" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> armv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Alcatraz】如何安装和使用Alcatraz</title>
      <link href="/2017/05/29/alcatraz-install-used/"/>
      <url>/2017/05/29/alcatraz-install-used/</url>
      
        <content type="html"><![CDATA[<p>开发过程中为了提高开发效率我们经常会使用到很多Xcode插件，有时候为了方便能不能出个像<code>cocoapods</code>那样的插件管理工具呢？</p><a id="more"></a><p>接下来就为大家介绍一下灰常牛逼的一款插件管理工具：<a href="https://link.jianshu.com/?t=https://github.com/alcatraz/Alcatraz" target="_blank" rel="noopener">Alcatraz</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>在终端输入：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/alcatraz/Alcatraz/master/Scripts/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/kwtpk.png@normal" alt=""></p></li><li><p>安装成功后重启Xcode</p></li><li><p>重新打开Xcode后提示如下：选择<code>Load Bundle</code><br><img src="http://blog.idbeny.com/586k1.png@normal" alt=""></p></li><li><p>查看是否安装成功<br>进入<code>Xcode</code>菜单导航界面选择<code>Window</code>，出现<code>Package Manager</code>即安装成功<br><img src="http://blog.idbeny.com/oytsb.png@normal" alt=""></p></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>我们可以接上一步骤直接鼠标点击打开，或快捷键：<code>command+shift+9</code></p></li><li><p>点击<code>Installed</code>以及<code>Plugins</code>可以看到之前已经安装好的插件<br><img src="http://blog.idbeny.com/fvzno.png@normal" alt=""></p></li><li><p>安装插件只需搜索相关插件即可，以<a href="https://link.jianshu.com/?t=https://github.com/ksuther/KSImageNamed-Xcode" target="_blank" rel="noopener">KSImageNamed</a>为例</p></li><li><p>点击<code>INSTALL</code>，等待安装，安装过程中<code>INSTALL</code>会变成<code>INSTALLING</code>，安装成功后显示<code>REMOVE **</code><br><img src="http://blog.idbeny.com/el25l.png@normal" alt=""></p></li><li><p>安装成功后，若想立即使用刚才下载的插件需要<strong>重启Xcode</strong>，再次打开后勾选<code>Load Bundle</code><br><img src="http://blog.idbeny.com/g6dka.png@normal" alt=""></p></li><li><p>若想移除相关插件点击<code>REMOVE</code>即可<br><img src="http://blog.idbeny.com/yl81i.png@normal" alt=""></p></li><li><p>移除所有插件，在终端输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Alcatraz/</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="移除工具"><a href="#移除工具" class="headerlink" title="移除工具"></a>移除工具</h3><p>删除Alcatraz 只需在终端输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins<span class="regexp">/Alcatraz.xcplugin</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：目前Alcatraz仅支持Xcode7.0+</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alcatraz </tag>
            
            <tag> Xcode </tag>
            
            <tag> Plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】AVQueuePlayer讲解</title>
      <link href="/2017/05/25/ios-avplayer/"/>
      <url>/2017/05/25/ios-avplayer/</url>
      
        <content type="html"><![CDATA[<p>最近在做的项目中使用<code>AVPlayer</code>进行视频播放，因为第一次做功能点这样庞大的视频播放项目，所以在带着团队<code>review</code>代码的时候发现有些地方还是值得优化的，很经典的一块就是按照集数顺序播放，当时做的是思路如下：</p><a id="more"></a><h3 id="AVPlayer"><a href="#AVPlayer" class="headerlink" title="AVPlayer"></a>AVPlayer</h3><ol><li><p>为当前<code>AVPlayerItem</code>添加播放结束的通知<code>AVPlayerItemDidPlayToEndTimeNotification</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听视频是否已经播放完毕，然后实现KVO的方法：</span></span><br><span class="line">[[NSNotificationCenter defaultCenter] <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">mediaPlayDidEnd:</span>) <span class="string">name:</span>AVPlayerItemDidPlayToEndTimeNotification <span class="string">object:</span>self.playerItem];</span><br></pre></td></tr></table></figure></li><li><p>实现监听方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//视频播放结束通知</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">mediaPlayDidEnd:</span>(NSNotification *)notification&#123;</span><br><span class="line">  <span class="comment">//在此实现切换相应集数的逻辑，例如：刷新UI、切换播放地址等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>review</code>代码的时候一不小心点到官方API里面，发现一个神奇的字眼<code>queue</code>，给我的直觉就是队列播放，仔细阅读官方文档后内心感觉这玩意简直就是为自己量身打造的，无比激动 ——<code>AVQueuePlayer</code></p><h3 id="AVQueuePlayer"><a href="#AVQueuePlayer" class="headerlink" title="AVQueuePlayer"></a>AVQueuePlayer</h3><p>下面我根据<a href="https://link.jianshu.com/?t=https%3A%2F%2Fdeveloper.apple.com%2Freference%2Favfoundation%2Favqueueplayer%3Flanguage%3Dobjc" target="_blank" rel="noopener">官方文档</a>简单进行翻译下，就不上代码了，因为文档很简单，功能很直白</p><blockquote><p>AVQueuePlayer is a subclass of <a href="https://developer.apple.com/reference/avfoundation/avplayer?language=objc" target="_blank" rel="noopener">AVPlayer</a> used to play a number of items in sequence. Using this class you can create and manage a queue of player items comprised of local or progressively downloaded file-based media, such as QuickTime movies or MP3 audio files, as well as media served using HTTP Live Streaming.</p></blockquote><p>翻译：<code>AVQueuePlayer</code>是<code>AVPlayer</code>被用来依次播放的子类。用这个类你能够创建和管理一个播放或文件下载的队列，例如<code>QuickTime</code>格式的视频或MP3音频文件，同样还支持流媒体的使用。</p><ul><li><p>创建队列对象的方法有两种，都是根据数组创建的，数组元素类型是<code>AVPlayerItem</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)queuePlayerWithItems:(<span class="built_in">NSArray</span>&lt;<span class="built_in">AVPlayerItem</span> *&gt; *)items;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">AVQueuePlayer</span> *)initWithItems:(<span class="built_in">NSArray</span>&lt;<span class="built_in">AVPlayerItem</span> *&gt; *)items;</span><br></pre></td></tr></table></figure></li><li><p>获取当前存在于队列里元素的方法</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="name">NSArray&lt;AVPlayerItem</span> *&gt; *)items<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>结束当前播放并播放下一集(将当前item从队列中移除)</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="name">void</span>)advanceToNextItem<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>判断是否能够在队列中追加播放资源（需要注意的是，不支持队列中存在多个相同的播放资源，即<code>AVPlayerItem</code>）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)canInsertItem:(<span class="built_in">AVPlayerItem</span> *)item afterItem:(<span class="keyword">nullable</span> <span class="built_in">AVPlayerItem</span> *)afterItem;</span><br></pre></td></tr></table></figure></li><li><p>在指定位置插入一条播放资源（如果元素是空的则自动会过滤掉）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)insertItem:(<span class="built_in">AVPlayerItem</span> *)item afterItem:(<span class="keyword">nullable</span> <span class="built_in">AVPlayerItem</span> *)afterItem;</span><br></pre></td></tr></table></figure></li><li><p>从队列中移除播放资源（如果移除的是当前正在播放的元素，则会自动执行advanceToNextItem播放下一集）</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(void)</span>removeItem:<span class="params">(AVPlayerItem *)</span>item;</span><br></pre></td></tr></table></figure></li><li><p>清除所有播放资源（当执行这一操作后，将会暂停播放）</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="name">void</span>)removeAllItems<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><p>以上就是<code>AVQueuePlayer</code>相关的介绍，使用它可以平滑的进行连续播放。</p><p>等以后有时间了，将会把播放器这块代码（含<code>FFmpeg</code>）整理下和大家共享(需要和公司申请)~~</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> AVPlayer </tag>
            
            <tag> 播放器 </tag>
            
            <tag> 自定义播放器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】UIImageView支持GIF动画</title>
      <link href="/2017/05/16/ios-image-gif/"/>
      <url>/2017/05/16/ios-image-gif/</url>
      
        <content type="html"><![CDATA[<p>项目中经常会用到<code>SDWebImage</code>来缓存图片，但是最新版本的<code>SDWebImage</code>似乎对<code>GIF</code>分类做出了改变，仅支持<code>NSData</code>，但把图片文件转换为<code>NSData</code>后再用<code>SDWebImage</code>提供的<code>GIF</code>方法，貌似并不管用(没有动画效果)，现在把之前的<code>GIF</code>分类贴上来，供大家参考使用：</p><a id="more"></a><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImage</span> (<span class="title">YBGIF</span>)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据图片名字创建gif图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param name 图片名字</span></span><br><span class="line"><span class="comment"> @return UIImage*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)animatedGIFNamed:(<span class="built_in">NSString</span> *)name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据NSData* 创建gif图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param data NSData *</span></span><br><span class="line"><span class="comment"> @return UIImage *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)animatedGIFWithData:(<span class="built_in">NSData</span> *)data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据大小裁剪图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param size 裁剪大小</span></span><br><span class="line"><span class="comment"> @return UIImage*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)animatedImageByScalingAndCroppingToSize:(<span class="built_in">CGSize</span>)size;</span><br><span class="line"><span class="meta">#import <span class="meta-string">"UIImage+YBGIF.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;ImageIO/ImageIO.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">YBGIF</span>)</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)animatedGIFWithData:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">   <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">CGImageSourceRef</span> source = <span class="built_in">CGImageSourceCreateWithData</span>((__bridge <span class="built_in">CFDataRef</span>)data, <span class="literal">NULL</span>);</span><br><span class="line">   </span><br><span class="line">   size_t count = <span class="built_in">CGImageSourceGetCount</span>(source);</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">UIImage</span> *animatedImage;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">       animatedImage = [[<span class="built_in">UIImage</span> alloc] initWithData:data];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">NSMutableArray</span> *images = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">NSTimeInterval</span> duration = <span class="number">0.0</span>f;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">           <span class="built_in">CGImageRef</span> image = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(source, i, <span class="literal">NULL</span>);</span><br><span class="line">           <span class="keyword">if</span> (!image) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           duration += [<span class="keyword">self</span> frameDurationAtIndex:i source:source];</span><br><span class="line">           </span><br><span class="line">           [images addObject:[<span class="built_in">UIImage</span> imageWithCGImage:image scale:[<span class="built_in">UIScreen</span> mainScreen].scale orientation:<span class="built_in">UIImageOrientationUp</span>]];</span><br><span class="line">           </span><br><span class="line">           <span class="built_in">CGImageRelease</span>(image);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (!duration) &#123;</span><br><span class="line">           duration = (<span class="number">1.0</span>f / <span class="number">10.0</span>f) * count;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       animatedImage = [<span class="built_in">UIImage</span> animatedImageWithImages:images duration:duration];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">CFRelease</span>(source);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> animatedImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">float</span>)frameDurationAtIndex:(<span class="built_in">NSUInteger</span>)index source:(<span class="built_in">CGImageSourceRef</span>)source &#123;</span><br><span class="line">   <span class="keyword">float</span> frameDuration = <span class="number">0.1</span>f;</span><br><span class="line">   <span class="built_in">CFDictionaryRef</span> cfFrameProperties = <span class="built_in">CGImageSourceCopyPropertiesAtIndex</span>(source, index, <span class="literal">nil</span>);</span><br><span class="line">   <span class="built_in">NSDictionary</span> *frameProperties = (__bridge <span class="built_in">NSDictionary</span> *)cfFrameProperties;</span><br><span class="line">   <span class="built_in">NSDictionary</span> *gifProperties = frameProperties[(<span class="built_in">NSString</span> *)kCGImagePropertyGIFDictionary];</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">NSNumber</span> *delayTimeUnclampedProp = gifProperties[(<span class="built_in">NSString</span> *)kCGImagePropertyGIFUnclampedDelayTime];</span><br><span class="line">   <span class="keyword">if</span> (delayTimeUnclampedProp) &#123;</span><br><span class="line">       frameDuration = [delayTimeUnclampedProp floatValue];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">NSNumber</span> *delayTimeProp = gifProperties[(<span class="built_in">NSString</span> *)kCGImagePropertyGIFDelayTime];</span><br><span class="line">       <span class="keyword">if</span> (delayTimeProp) &#123;</span><br><span class="line">           frameDuration = [delayTimeProp floatValue];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Many annoying ads specify a 0 duration to make an image flash as quickly as possible.</span></span><br><span class="line">   <span class="comment">// We follow Firefox's behavior and use a duration of 100 ms for any frames that specify</span></span><br><span class="line">   <span class="comment">// a duration of &lt;= 10 ms. See &lt;rdar://problem/7689300&gt; and &lt;http://webkit.org/b/36082&gt;</span></span><br><span class="line">   <span class="comment">// for more information.</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (frameDuration &lt; <span class="number">0.011</span>f) &#123;</span><br><span class="line">       frameDuration = <span class="number">0.100</span>f;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">CFRelease</span>(cfFrameProperties);</span><br><span class="line">   <span class="keyword">return</span> frameDuration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)animatedGIFNamed:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">   <span class="built_in">CGFloat</span> scale = [<span class="built_in">UIScreen</span> mainScreen].scale;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (scale &gt; <span class="number">1.0</span>f) &#123;</span><br><span class="line">       <span class="built_in">NSString</span> *retinaPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:[name stringByAppendingString:<span class="string">@"@2x"</span>] ofType:<span class="string">@"gif"</span>];</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:retinaPath];</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (data) &#123;</span><br><span class="line">           <span class="keyword">return</span> [<span class="built_in">UIImage</span> animatedGIFWithData:data];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:name ofType:<span class="string">@"gif"</span>];</span><br><span class="line">       </span><br><span class="line">       data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (data) &#123;</span><br><span class="line">           <span class="keyword">return</span> [<span class="built_in">UIImage</span> animatedGIFWithData:data];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageNamed:name];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:name ofType:<span class="string">@"gif"</span>];</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (data) &#123;</span><br><span class="line">           <span class="keyword">return</span> [<span class="built_in">UIImage</span> animatedGIFWithData:data];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageNamed:name];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIImage</span> *)animatedImageByScalingAndCroppingToSize:(<span class="built_in">CGSize</span>)size &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">CGSizeEqualToSize</span>(<span class="keyword">self</span>.size, size) || <span class="built_in">CGSizeEqualToSize</span>(size, <span class="built_in">CGSizeZero</span>)) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">CGSize</span> scaledSize = size;</span><br><span class="line">   <span class="built_in">CGPoint</span> thumbnailPoint = <span class="built_in">CGPointZero</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">CGFloat</span> widthFactor = size.width / <span class="keyword">self</span>.size.width;</span><br><span class="line">   <span class="built_in">CGFloat</span> heightFactor = size.height / <span class="keyword">self</span>.size.height;</span><br><span class="line">   <span class="built_in">CGFloat</span> scaleFactor = (widthFactor &gt; heightFactor) ? widthFactor : heightFactor;</span><br><span class="line">   scaledSize.width = <span class="keyword">self</span>.size.width * scaleFactor;</span><br><span class="line">   scaledSize.height = <span class="keyword">self</span>.size.height * scaleFactor;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (widthFactor &gt; heightFactor) &#123;</span><br><span class="line">       thumbnailPoint.y = (size.height - scaledSize.height) * <span class="number">0.5</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (widthFactor &lt; heightFactor) &#123;</span><br><span class="line">       thumbnailPoint.x = (size.width - scaledSize.width) * <span class="number">0.5</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">NSMutableArray</span> *scaledImages = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> (<span class="built_in">UIImage</span> *image <span class="keyword">in</span> <span class="keyword">self</span>.images) &#123;</span><br><span class="line">       <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(size, <span class="literal">NO</span>, <span class="number">0.0</span>);</span><br><span class="line">       </span><br><span class="line">       [image drawInRect:<span class="built_in">CGRectMake</span>(thumbnailPoint.x, thumbnailPoint.y, scaledSize.width, scaledSize.height)];</span><br><span class="line">       <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">       </span><br><span class="line">       [scaledImages addObject:newImage];</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> [<span class="built_in">UIImage</span> animatedImageWithImages:scaledImages duration:<span class="keyword">self</span>.duration];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Gif动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】微信分享描述变链接</title>
      <link href="/2017/05/15/ios-wechat-share-issues/"/>
      <url>/2017/05/15/ios-wechat-share-issues/</url>
      
        <content type="html"><![CDATA[<p>从去年开始，微信分享功能改版升级(跟随微信版本升级)，APP分享到微信的描述如果是空的，则显示的是对应的网址链接(部分微信未升级的用户不受此影响)。怎么办呢？当时我也查找了N多资料，但都未能有效的解决这个问题，最后发现用<code>Unicode</code>全角字符写一个空格就行了(普通空格都行不通)。</p><a id="more"></a><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span>判段描述是否有效，如果无效则用空格代替 *\u3000表示unicode空格编码*</span><br><span class="line"><span class="keyword">if</span> <span class="params">(<span class="attr">shareDes</span> == nil || shareDes.<span class="attr">length</span> == 0)</span> &#123;</span><br><span class="line">    shareDes = @<span class="string">"\u3000"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候分享出去的描述就不是一个链接地址了，赶快去试试看看效果~</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 微信分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】过滤html标签</title>
      <link href="/2017/05/15/ios-filter-html/"/>
      <url>/2017/05/15/ios-filter-html/</url>
      
        <content type="html"><![CDATA[<p>文字(UI或分享时的标题(描述))展示给用户的时候，可能需要过滤掉html标签，有的开发团队可能把过滤操作放在后端处理，其实放在前端做相对来说比较合理(灵活性)。</p><a id="more"></a><p>那么怎样才能高效有效的过滤这些标签呢？首先想到的就是使用<strong>正则</strong>……我们我可以写一个<code>NSString</code>的分类</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+ (NSString *)<span class="string">getNormalStringFilterHTMLString:</span>(NSString *)htmlStr&#123;</span><br><span class="line">    NSString *normalStr = htmlStr.copy;</span><br><span class="line">    <span class="comment">//判断字符串是否有效</span></span><br><span class="line">    <span class="keyword">if</span> (!normalStr || normalStr.length == <span class="number">0</span> || [normalStr <span class="string">isEqual:</span>[NSNull <span class="literal">null</span>]]) <span class="keyword">return</span> nil;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//过滤正常标签</span></span><br><span class="line">    NSRegularExpression *regularExpression=[NSRegularExpression <span class="string">regularExpressionWithPattern:</span>@<span class="string">"&lt;[^&gt;]*&gt;"</span> <span class="string">options:</span>NSRegularExpressionCaseInsensitive <span class="string">error:</span>nil];</span><br><span class="line">    normalStr = [regularExpression <span class="string">stringByReplacingMatchesInString:</span>normalStr <span class="string">options:</span>NSMatchingReportProgress <span class="string">range:</span>NSMakeRange(<span class="number">0</span>, normalStr.length) <span class="string">withTemplate:</span>@<span class="string">""</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//过滤占位符</span></span><br><span class="line">    NSRegularExpression *plExpression=[NSRegularExpression <span class="string">regularExpressionWithPattern:</span>@<span class="string">"&amp;[^;]+;"</span> <span class="string">options:</span>NSRegularExpressionCaseInsensitive <span class="string">error:</span>nil];</span><br><span class="line">    normalStr = [plExpression <span class="string">stringByReplacingMatchesInString:</span>normalStr <span class="string">options:</span>NSMatchingReportProgress <span class="string">range:</span>NSMakeRange(<span class="number">0</span>, normalStr.length) <span class="string">withTemplate:</span>@<span class="string">""</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//过滤空格</span></span><br><span class="line">    NSRegularExpression *spaceExpression=[NSRegularExpression <span class="string">regularExpressionWithPattern:</span>@<span class="string">"^\\s*|\\s*$"</span> <span class="string">options:</span>NSRegularExpressionCaseInsensitive <span class="string">error:</span>nil];</span><br><span class="line">    normalStr = [spaceExpression <span class="string">stringByReplacingMatchesInString:</span>normalStr <span class="string">options:</span>NSMatchingReportProgress <span class="string">range:</span>NSMakeRange(<span class="number">0</span>, normalStr.length) <span class="string">withTemplate:</span>@<span class="string">""</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> normalStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 过滤Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】UIWebView播放器退出继续播放</title>
      <link href="/2017/04/19/ios-webview-player-issues/"/>
      <url>/2017/04/19/ios-webview-player-issues/</url>
      
        <content type="html"><![CDATA[<p><code>UIWebView</code>加载一个带播放器的html页面的时候，当视频在播放中我们退出当前页面的时候发现还在继续播放。</p><a id="more"></a><p>解决思路网上很多说法，说的最多的一种就是退出页面的时候加载一个空页面。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">self.webView</span> loadRequest:[<span class="name">NSURLRequest</span> requestWithURL:[<span class="name">NSURL</span> URLWithString:@<span class="string">"about:blank"</span>]]]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>很多人在退出页面的时候加上这样一句代码就会发现播放器确实暂停播放了，但是如果继续回到这个页面(pop形式)发现是个空白页面。即使再次加载对应的URL能够解决当前问题，但对用户来说体验很不友好，怎么办呢？</p><p>用OC调用JS方法使播放器停止播放</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">viewWillDisappear:</span>(BOOL)animated&#123;</span><br><span class="line">    [<span class="keyword">super</span> <span class="string">viewWillDisappear:</span>animated];</span><br><span class="line"></span><br><span class="line">    NSString *videoPauseJSStr = @<span class="string">"document.documentElement.getElementsByTagName(\"video\")[0].pause()"</span>;</span><br><span class="line">    [self.mWebView <span class="string">stringByEvaluatingJavaScriptFromString:</span>videoPauseJSStr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候发现退出当前页面就暂停播放了<del>~</del></p><blockquote><p>以上方案仅适用于前端播放器使用<code>video</code>标签</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 播放器 </tag>
            
            <tag> UIWebView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】使用UISlider实现播放器断点播放</title>
      <link href="/2017/04/14/ios-slider-play/"/>
      <url>/2017/04/14/ios-slider-play/</url>
      
        <content type="html"><![CDATA[<p>实现播放器的<strong>断点播放</strong>有两个思路：</p><ul><li>自定义进度条(使用<code>UIView</code>绘制)</li><li>在<code>UISlider</code>基础上实现断点播放</li></ul><p>在这里简单介绍下用第2中思路是怎么实现的</p><a id="more"></a><h4 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h4><p>扩展一个<code>UISlider</code>子类，在子类方法中重写开始触摸代理方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> &lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br></pre></td></tr></table></figure><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event&#123;</span><br><span class="line">    <span class="built_in">CGRect</span> trackRect = [<span class="keyword">self</span> trackRectForBounds: [<span class="keyword">self</span> bounds]];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> value = [<span class="keyword">self</span> minimumValue] + ([[touches anyObject] locationInView: <span class="keyword">self</span>].x - t.origin.x - <span class="number">4.0</span>) * (([<span class="keyword">self</span> maximumValue]-[<span class="keyword">self</span> minimumValue]) / (trackRect.size.width - <span class="number">8.0</span>));</span><br><span class="line">    [<span class="keyword">self</span> setValue:value];</span><br><span class="line">    [<span class="keyword">super</span> touchesBegan:touches withEvent:event];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> current = value * [AudioPlayer shareInstance].player.duration;</span><br><span class="line">    [[AudioPlayer shareInstance].player setCurrentTime:current];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UISlider </tag>
            
            <tag> 自定义Slider </tag>
            
            <tag> 播放器Slider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】3D Touch</title>
      <link href="/2017/04/01/ios-3dtouch/"/>
      <url>/2017/04/01/ios-3dtouch/</url>
      
        <content type="html"><![CDATA[<p><code>3D Touch</code>是苹果<code>iOS9</code>推出的新特性，同样是iPhone6s和6sPlus的一个新功能。之前的苹果设备则不能实现这样的功能。它的出现使app更加便捷化，能够让用户快速的定位到目的页面。</p><a id="more"></a><p>实现<code>3D Touc</code>h功能有<strong>静态</strong>和<strong>动态</strong>两种：</p><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>只需要在<code>info.plist</code>文件进行简单的键值配置就行（我还是比较习惯使用代码，这样比较灵活且不易出错）<br><img src="http://blog.idbeny.com/myy8e.png@normal" alt=""></p><ul><li><code>UIApplicationShortcutItemType</code> 点击事件唯一标识符，用来判断点击的是哪个元素</li><li><code>UIApplicationShortcutItemTitle</code> 标题</li><li><code>UIApplicationShortcutItemSubtitle</code> 副标题，在标题的下方</li><li><code>UIApplicationShortcutItemIconType</code> 选取系统的图标类型（枚举）</li><li><code>UIApplicationShortcutItemIconFile</code> 自定义图标（35*35，单色图片），如果设置这个属性，那么<code>UIApplicationShortcutItemIconType</code>将失效</li></ul><p><em>注意：<code>UIApplicationShortcutItemType</code>和<code>UIApplicationShortcutItemTitle</code>为必填，其它为选填</em></p><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>在需要的时候进行创建，不需要的时候取消已经存在的。（微信的“收付款”功能就是动态的）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日历</span></span><br><span class="line"><span class="built_in">UIApplicationShortcutIcon</span> *dateIcon = [<span class="built_in">UIApplicationShortcutIcon</span> iconWithType:<span class="built_in">UIApplicationShortcutIconTypeDate</span>];</span><br><span class="line">    <span class="built_in">UIApplicationShortcutItem</span> *dateItem = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:<span class="string">@"date"</span> localizedTitle:<span class="string">@"日历"</span> localizedSubtitle:<span class="string">@"选个日期"</span> icon:dateIcon userInfo:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//收藏</span></span><br><span class="line"><span class="built_in">UIApplicationShortcutIcon</span> *favoriteIcon = [<span class="built_in">UIApplicationShortcutIcon</span> iconWithType:<span class="built_in">UIApplicationShortcutIconTypeFavorite</span>];</span><br><span class="line">    <span class="built_in">UIApplicationShortcutItem</span> *favoriteItem = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:<span class="string">@"favorite"</span> localizedTitle:<span class="string">@"收藏"</span> localizedSubtitle:<span class="string">@"收藏喜欢的东西"</span> icon:favoriteIcon userInfo:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//首页</span></span><br><span class="line"><span class="built_in">UIApplicationShortcutIcon</span> *homeIcon = [<span class="built_in">UIApplicationShortcutIcon</span> iconWithType:<span class="built_in">UIApplicationShortcutIconTypeHome</span>];</span><br><span class="line">    <span class="built_in">UIApplicationShortcutItem</span> *homeItem = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:<span class="string">@"home"</span> localizedTitle:<span class="string">@"首页"</span> localizedSubtitle:<span class="string">@"首页图标"</span> icon:homeIcon userInfo:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示Item</span></span><br><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].shortcutItems = @[homeItem,dateItem,favoriteItem,videoItem];</span><br></pre></td></tr></table></figure><p>用力按压app图标时，上面的元素就已经能够显示出来了。</p><h3 id="Item事件"><a href="#Item事件" class="headerlink" title="Item事件"></a>Item事件</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application performActionForShortcutItem:(<span class="built_in">UIApplicationShortcutItem</span> *)shortcutItem completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span>))completionHandler&#123;</span><br><span class="line">    <span class="comment">//判断每个元素设置的唯一标识</span></span><br><span class="line">    <span class="keyword">if</span>([shortcutItem.type isEqualToString:<span class="string">@"home"</span>]) &#123;<span class="comment">//首页</span></span><br><span class="line">        <span class="built_in">UIViewController</span> *homeVC = [<span class="built_in">UIViewController</span> new];</span><br><span class="line">        homeVC.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        [<span class="keyword">self</span> addWindowRootViewController:homeVC LabelTitle:<span class="string">@"首页"</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>([shortcutItem.type isEqualToString:<span class="string">@"favorite"</span>])&#123;<span class="comment">//收藏</span></span><br><span class="line">        <span class="built_in">UIViewController</span> *favoriteVC = [<span class="built_in">UIViewController</span> new];</span><br><span class="line">        favoriteVC.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        [<span class="keyword">self</span> addWindowRootViewController:favoriteVC LabelTitle:<span class="string">@"收藏"</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([shortcutItem.type isEqualToString:<span class="string">@"date"</span>])&#123;<span class="comment">//日历</span></span><br><span class="line">        <span class="built_in">UIViewController</span> *dateVC = [<span class="built_in">UIViewController</span> new];</span><br><span class="line">        dateVC.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        [<span class="keyword">self</span> addWindowRootViewController:dateVC LabelTitle:<span class="string">@"日期"</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//视频</span></span><br><span class="line">        <span class="built_in">UIViewController</span> *videoVC = [<span class="built_in">UIViewController</span> new];</span><br><span class="line">        videoVC.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        [<span class="keyword">self</span> addWindowRootViewController:videoVC LabelTitle:<span class="string">@"视频"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//作为window的根视图显示（实际应用的跳转可根据runtime机制进行操作，此处只作为模拟使用）</span></span><br><span class="line">- (<span class="keyword">void</span>)addWindowRootViewController:(<span class="built_in">UIViewController</span> *)rootViewController LabelTitle:(<span class="built_in">NSString</span> *)title&#123;</span><br><span class="line">    <span class="built_in">UILabel</span> *titleLabel = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">250</span>, kScreen_width, <span class="number">100</span>)];</span><br><span class="line">    titleLabel.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</span><br><span class="line">    titleLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,title];</span><br><span class="line">    titleLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">50</span>];</span><br><span class="line">    titleLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</span><br><span class="line">    [rootViewController.view addSubview:titleLabel];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = rootViewController;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>以上代码我都写在AppDelegate.m文件中，仅供参考和理解。</em></p><blockquote><p>注意：<code>kScreen_width</code>是宏定义<code>#define kScreen_width ([UIScreen mainScreen].bounds.size.width)</code></p></blockquote><p>实际效果：<br><img src="http://blog.idbeny.com/yco31.png@normal" alt=""></p><ul><li>系统限制每个App最多显示4个Item，其它无效。</li><li>静态创建和动态创建同时存在的情况下，优先显示静态创建。</li><li><code>UIApplicationShortcutIconType</code>是系统给的一个枚举类型，里面有多种图标样式供我们选择。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 3D-Touch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】截屏、保存图片到相册</title>
      <link href="/2017/03/31/ios-image-snip/"/>
      <url>/2017/03/31/ios-image-snip/</url>
      
        <content type="html"><![CDATA[<p>为了简便我们的开发，通常会建立一个分类来处理，废话不多说，直接上代码：</p><a id="more"></a><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> : <span class="built_in">NSUInteger</span> &#123;</span><br><span class="line">    ImageRotationAngleZero = <span class="number">0</span>,<span class="comment">//逆时针旋转0°</span></span><br><span class="line">    ImageRotationAngleM_PI_2 = <span class="number">90</span>,<span class="comment">//逆时针旋转90°</span></span><br><span class="line">    ImageRotationAngleM_PI = <span class="number">180</span>,<span class="comment">//逆时针旋转180°</span></span><br><span class="line">    ImageRotationAngle3M_PI_2 = <span class="number">270</span><span class="comment">//逆时针旋转270°</span></span><br><span class="line">&#125; ImageRotationAngle;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImage</span> (<span class="title">SnipImage</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 缩放并保存图片到相册</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param imagePath 图片地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)scaleAndSaveImage:(<span class="built_in">NSString</span> *)imagePath;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 截屏并保存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)snipAndSaveImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> <span class="string">"UIImage+SnipImage.h"</span></span><br><span class="line"></span><br><span class="line">@implementation UIImage (SnipImage)</span><br><span class="line"></span><br><span class="line"><span class="comment">//截屏并裁剪保存图片</span></span><br><span class="line">+ (<span class="keyword">void</span>)snipAndSaveImage&#123;</span><br><span class="line">    CGSize imageSize = [[UIScreen mainScreen] bounds].<span class="built_in">size</span>;</span><br><span class="line">    </span><br><span class="line">    UIGraphicsBeginImageContextWithOptions(imageSize, NO, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (UIWindow *window in [[UIApplication sharedApplication] windows]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (![window respondsToSelector:@selector(screen)] || [window screen] == [UIScreen mainScreen]) &#123;</span><br><span class="line">            CGContextSaveGState(context);</span><br><span class="line">            </span><br><span class="line">            CGContextTranslateCTM(context, [window center].x, [window center].y);</span><br><span class="line">            </span><br><span class="line">            CGContextConcatCTM(context, [window transform]);</span><br><span class="line">            </span><br><span class="line">            CGContextTranslateCTM(context,</span><br><span class="line">                                  -[window bounds].<span class="built_in">size</span>.<span class="built_in">width</span> * [[window layer] anchorPoint].x,</span><br><span class="line">                                  -[window bounds].<span class="built_in">size</span>.<span class="built_in">height</span> * [[window layer] anchorPoint].y);</span><br><span class="line">            </span><br><span class="line">            [[window layer] renderInContext:context];</span><br><span class="line">            </span><br><span class="line">            CGContextRestoreGState(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIImage *snipImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    </span><br><span class="line">    UIGraphicsEndImageContext();</span><br><span class="line">    </span><br><span class="line">    UIImage *saveImage = [self scaleImage:snipImage];</span><br><span class="line">    UIImageWriteToSavedPhotosAlbum(saveImage,self, nil, nil);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据图片地址裁剪并保存图片</span></span><br><span class="line">+ (<span class="keyword">void</span>)scaleAndSaveImage:(NSString *)imagePath&#123;</span><br><span class="line">    UIImage *<span class="built_in">image</span> = [UIImage imageWithContentsOfFile:imagePath];</span><br><span class="line">    </span><br><span class="line">    UIImage *saveImage = [self scaleImage:<span class="built_in">image</span>];</span><br><span class="line">    </span><br><span class="line">    UIImageWriteToSavedPhotosAlbum(saveImage,self, nil, nil);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//裁剪图片(此处容易有坑 *所有的尺寸应该是分辨率)</span></span><br><span class="line">+ (UIImage *)scaleImage:(UIImage *)<span class="built_in">image</span>&#123;</span><br><span class="line">    CGFloat screenPX_width = [UIScreen mainScreen].bounds.<span class="built_in">size</span>.<span class="built_in">width</span>*<span class="number">2</span>;</span><br><span class="line">    CGFloat screenPX_height = [UIScreen mainScreen].bounds.<span class="built_in">size</span>.<span class="built_in">height</span>*<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//裁剪区域根据需求自己处理</span></span><br><span class="line">    CGFloat scaleImage_offset = <span class="number">10</span>;</span><br><span class="line">    CGFloat scaleImage_height = screenPX_height<span class="number">-30</span>*<span class="number">2</span>;</span><br><span class="line">    CGFloat scaleImage_width = screenPX_width * <span class="number">0.635</span>;</span><br><span class="line">    CGFloat scaleImage_x = (screenPX_width - scaleImage_width)/<span class="number">2</span>+scaleImage_offset;</span><br><span class="line">    CGFloat scaleImage_y = <span class="number">30</span>;</span><br><span class="line">    </span><br><span class="line">    UIImage *scaleImage = [UIImage imageWithCGImage:CGImageCreateWithImageInRect(<span class="built_in">image</span>.CGImage, CGRectMake(scaleImage_x, scaleImage_y, scaleImage_width, scaleImage_height))];</span><br><span class="line">    UIImage *saveImage = [self rotationImage:scaleImage angle:<span class="number">270</span>];</span><br><span class="line">    <span class="keyword">return</span> saveImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//旋转图片到指定角度</span></span><br><span class="line">+ (UIImage *)rotationImage:(UIImage *)<span class="built_in">image</span> angle:(ImageRotationAngle)angle&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> <span class="built_in">rotate</span> = <span class="number">0.0</span>;</span><br><span class="line">    CGRect <span class="built_in">rect</span>;</span><br><span class="line">    <span class="built_in">float</span> translateX = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">float</span> translateY = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">float</span> scaleX = <span class="number">1.0</span>;</span><br><span class="line">    <span class="built_in">float</span> scaleY = <span class="number">1.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (angle) &#123;</span><br><span class="line">        <span class="keyword">case</span> ImageRotationAngleZero:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">image</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> ImageRotationAngleM_PI_2:</span><br><span class="line">            <span class="built_in">rotate</span> = M_PI_2;</span><br><span class="line">            <span class="built_in">rect</span> = CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">height</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">width</span>);</span><br><span class="line">            translateX = <span class="number">0</span>;</span><br><span class="line">            translateY = -<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>;</span><br><span class="line">            scaleY = <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>/<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>;</span><br><span class="line">            scaleX = <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>/<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> ImageRotationAngleM_PI:</span><br><span class="line">            <span class="built_in">rotate</span> = M_PI;</span><br><span class="line">            <span class="built_in">rect</span> = CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">width</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">height</span>);</span><br><span class="line">            translateX = -<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>;</span><br><span class="line">            translateY = -<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> ImageRotationAngle3M_PI_2:</span><br><span class="line">            <span class="built_in">rotate</span> = <span class="number">3</span> * M_PI_2;</span><br><span class="line">            <span class="built_in">rect</span> = CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">height</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">width</span>);</span><br><span class="line">            translateX = -<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>;</span><br><span class="line">            translateY = <span class="number">0</span>;</span><br><span class="line">            scaleY = <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>/<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>;</span><br><span class="line">            scaleX = <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>/<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIGraphicsBeginImageContext(<span class="built_in">rect</span>.<span class="built_in">size</span>);</span><br><span class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</span><br><span class="line">    CGContextTranslateCTM(context, <span class="number">0.0</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>);</span><br><span class="line">    CGContextScaleCTM(context, <span class="number">1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line">    CGContextRotateCTM(context, <span class="built_in">rotate</span>);</span><br><span class="line">    CGContextTranslateCTM(context, translateX, translateY);</span><br><span class="line">    </span><br><span class="line">    CGContextScaleCTM(context, scaleX, scaleY);</span><br><span class="line">    CGContextDrawImage(context, CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>), <span class="built_in">image</span>.CGImage);</span><br><span class="line">    </span><br><span class="line">    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 截图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Mac】Terminal(终端)命令不能用</title>
      <link href="/2017/03/11/mac-terminal-not-work/"/>
      <url>/2017/03/11/mac-terminal-not-work/</url>
      
        <content type="html"><![CDATA[<p>最近一次在用终端敲命令的时候发现命令总是不执行(只有cd命令可以正常执行)，返回命令未识别的错误<code>-bash: source: command not found</code>，相信很多朋友也会遇到类似的问题。</p><a id="more"></a><p>解决步骤：</p><ol><li><p>命令行输入下面命令（这样可以保证命令行命令暂时能够使用。这行命令执行完后不要关闭终端）</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="regexp">/usr/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/usr/X11R6/bin</span></span><br></pre></td></tr></table></figure></li><li><p>进入当前Home目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/</span><br></pre></td></tr></table></figure></li><li><p>创建<code>bash_profile</code>执行命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-class">.bash_profile</span></span><br></pre></td></tr></table></figure></li><li><p>文件内容是你之前配置过的path，把全部内容删除(将自己有用的部分备份，Terminal修复后再加到里面)，加入PATH：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="regexp">/usr/bin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/sbin</span><span class="symbol">:/usr/local/bin</span></span><br></pre></td></tr></table></figure></li></ol><p><em>保存文件并退出(不要退出Terminal)</em></p><ol start="5"><li>继续执行命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure></li></ol><p>重启Terminal即可，完毕！</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】QQ粘性动画果冻效果</title>
      <link href="/2016/12/12/ios-animation-sticky/"/>
      <url>/2016/12/12/ios-animation-sticky/</url>
      
        <content type="html"><![CDATA[<p>QQ中的未读消息可以通过拖拽根据手指移动，在范围内拖拽会有一个粘性动画，当松开手指时还会有一个果冻效果。看到这个动画时，眨眼一看挺好看，仔细一想挺难，但深入分析后发现做起来不难。</p><a id="more"></a><p><img src="http://blog.idbeny.com/6j08o.gif@normal" alt=""></p><h2 id="一、整体思路"><a href="#一、整体思路" class="headerlink" title="一、整体思路"></a>一、整体思路</h2><h3 id="1-1-构建UI"><a href="#1-1-构建UI" class="headerlink" title="1.1. 构建UI"></a>1.1. 构建UI</h3><ol><li>既然可以拖动，应该是一个view，使用<code>UIButton</code>或者<code>UILabel</code>都可以，我们选择使用<code>UIButton</code>；</li><li>在按钮的原始位置创建一个尺寸小于按钮的view，作为‘吸盘’固定在该位置，吸盘和按钮是同一级，不是父子关系。<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">self.placeView</span> = [[UIView alloc] init]<span class="comment">;</span></span><br><span class="line"><span class="attr">self.placeView.frame</span> = self.frame<span class="comment">;</span></span><br><span class="line"><span class="attr">self.placeView.layer.cornerRadius</span> = self.placeView.bounds.size.width * <span class="number">0.5</span><span class="comment">;</span></span><br><span class="line"><span class="section">[self.superview insertSubview:self.placeView belowSubview:self]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-2-添加拖动事件"><a href="#1-2-添加拖动事件" class="headerlink" title="1.2. 添加拖动事件"></a>1.2. 添加拖动事件</h3><ol><li>给<code>UIButton</code>添加拖动事件，让按钮能够跟随手指在屏幕上移动；</li><li>拖动按钮时，让吸盘随着拖动距离按比例收缩；</li><li>拖动位移达到限定距离后让吸盘消失，按钮继续跟随手指位置；</li><li>取消拖动后，如果在限定距离内，让按钮回到原始位置，否则停留在当前触摸点。<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UIPanGestureRecognizer *panGesture = [[UIPanGestureRecognizer alloc] <span class="string">initWithTarget:</span>self <span class="string">action:</span><span class="meta">@selector</span>(<span class="string">panGestureHandle:</span>)];</span><br><span class="line">[self <span class="string">addGestureRecognizer:</span>panGesture];</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-3-计算路径（重点）"><a href="#1-3-计算路径（重点）" class="headerlink" title="1.3. 计算路径（重点）"></a>1.3. 计算路径（重点）</h3><p>由于<code>transform</code>不会修改<code>center</code>，只会修改<code>frame</code>，为了方便计算两个圆心之间的距离，所以不使用<code>transform</code>让按钮发生位移动画。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)panGestureHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> translatePoint = [gesture translationInView:gesture.view];</span><br><span class="line">    <span class="comment">// 计算按钮中心点</span></span><br><span class="line">    <span class="built_in">CGPoint</span> center = <span class="keyword">self</span>.center;</span><br><span class="line">    center.x += translatePoint.x;</span><br><span class="line">    center.y += translatePoint.y;</span><br><span class="line">    <span class="keyword">self</span>.center = center;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 位移复位</span></span><br><span class="line">    [gesture setTranslation:<span class="built_in">CGPointZero</span> inView:gesture.view];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取两个view的圆心距离</span></span><br><span class="line">    <span class="built_in">CGFloat</span> distance = [<span class="keyword">self</span> getCircleCenterDistanceWithView:<span class="keyword">self</span> otherView:<span class="keyword">self</span>.placeView];</span><br><span class="line">    <span class="comment">// 计算缩放比例</span></span><br><span class="line">    <span class="built_in">CGFloat</span> place_radius = <span class="keyword">self</span>.bounds.size.width * <span class="number">0.5</span>;</span><br><span class="line">    place_radius = place_radius - distance / <span class="number">10.0</span>;</span><br><span class="line">    <span class="keyword">self</span>.placeView.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, place_radius * <span class="number">2</span>, place_radius * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">self</span>.placeView.layer.cornerRadius = place_radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取圆心距离</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)getCircleCenterDistanceWithView:(<span class="built_in">UIView</span> *)aView otherView:(<span class="built_in">UIView</span> *)bView &#123;</span><br><span class="line">    <span class="comment">// 1.斜边 = 临边两个数平方的和的平方根</span></span><br><span class="line">    <span class="built_in">CGFloat</span> offset_x = fabs(aView.center.x - bView.center.x);</span><br><span class="line">    <span class="built_in">CGFloat</span> offset_y = fabs(aView.center.y - bView.center.y);</span><br><span class="line">    <span class="built_in">CGFloat</span> distance = sqrtf(offset_x * offset_x + offset_y * offset_y);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.求直角三角形斜边长度的C函数：hypotf(a, b)</span></span><br><span class="line">    <span class="comment">// distance = hypotf(offset_x, offset_y);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>圆心距离有了，只需要计算出两个圆的四个外切连线点坐标，然后把四个点连接起来并填充颜色就可以了。</p><p><strong>四个点的坐标如何计算呢？</strong></p><p><img src="http://blog.idbeny.com/96qkn.png@normal" alt=""></p><p>$已知 OA \perp  AB { , } PB \perp AB { , } OA=PB= d  \div  2 $</p><p>由上图可知，当动画改变时，两个圆距离和角度会发生变化，变换的值是<strong>距离d</strong>和<strong>角度θ</strong>。根据已知条件，用三角定理可以求出<strong>距离d</strong>，使用三角函数和相似三角原理可以求出其他各点的坐标（计算坐标时要用数学思维，不要把屏幕坐标系考虑在内）。</p><p>求距离d：<br>$ d =  \sqrt{  (x_{1}-x_{2}) ^{2}+ (y_{1}-y_{2}) ^{2}  }  $</p><p>优先求出<code>MN</code>和<code>x2轴</code>的角θ正弦和余弦：</p><p>$ \sin  \theta = \frac{ x_{2}-x_{1} }{d}  $</p><p>$  \cos  \theta = \frac{ y_{2}-y_{1} }{d}  $</p><p>求A的坐标：</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AE = r1 * <span class="built_in">cos</span>θ</span><br><span class="line">EM = r1 * <span class="built_in">sin</span>θ</span><br><span class="line">A的<span class="symbol">x</span>坐标 = x1 - AE</span><br><span class="line">A的<span class="symbol">y</span>坐标 = y1 + EM</span><br><span class="line">A(x1 - AE, y1 + EM)</span><br></pre></td></tr></table></figure><p>同理可得其他点坐标：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">B(<span class="params">x1</span> + <span class="params">r1</span> <span class="operator">*</span> <span class="params">cos</span>θ, <span class="params">y1</span> - <span class="params">r1</span> <span class="operator">*</span> <span class="params">sin</span>θ)</span></span><br><span class="line"><span class="constructor">C(<span class="params">x2</span> + <span class="params">r2</span> <span class="operator">*</span> <span class="params">cos</span>θ, <span class="params">y2</span> - <span class="params">r2</span> <span class="operator">*</span> <span class="params">sin</span>θ)</span></span><br><span class="line"><span class="constructor">D(<span class="params">x2</span> - <span class="params">r2</span> <span class="operator">*</span> <span class="params">cos</span>θ, <span class="params">y2</span> + <span class="params">r2</span> <span class="operator">*</span> <span class="params">sin</span>θ)</span></span><br><span class="line"><span class="constructor">O(A坐标<span class="params">x</span> + 2<span class="operator">/</span><span class="params">d</span> <span class="operator">*</span> <span class="params">sin</span>θ, A坐标<span class="params">y</span> + 2<span class="operator">/</span><span class="params">d</span> <span class="operator">*</span> <span class="params">cos</span>θ)</span></span><br><span class="line"><span class="constructor">P(B坐标<span class="params">x</span> + 2<span class="operator">/</span><span class="params">d</span> <span class="operator">*</span> <span class="params">sin</span>θ, B坐标<span class="params">y</span> + 2<span class="operator">/</span><span class="params">d</span> <span class="operator">*</span> <span class="params">cos</span>θ)</span></span><br></pre></td></tr></table></figure><p>最后只需要把所有点用贝塞尔曲线连接起来就行了。</p><h3 id="1-4-绘制形状（重点）"><a href="#1-4-绘制形状（重点）" class="headerlink" title="1.4. 绘制形状（重点）"></a>1.4. 绘制形状（重点）</h3><p>直接使用<code>UIBezierPath</code>不能填充路径，而且超出路径范围后不显示，所以需要使用<code>CAShapeLayer</code>根据路径生成一个形状，并形状添加到父视图上。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIBezierPath</span> *path = [<span class="keyword">self</span> getBezierPathWithView:<span class="keyword">self</span>.placeView otherView:<span class="keyword">self</span>];</span><br><span class="line"><span class="comment">// 根据路径填充形状</span></span><br><span class="line"><span class="keyword">self</span>.shapeLayer.path = path.CGPath;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CAShapeLayer</span> *)shapeLayer &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_shapeLayer) &#123;</span><br><span class="line">        <span class="built_in">CAShapeLayer</span> *shapeLayer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">        shapeLayer.fillColor = <span class="keyword">self</span>.backgroundColor.CGColor;</span><br><span class="line">        [<span class="keyword">self</span>.superview.layer insertSublayer:shapeLayer atIndex:<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">self</span>.shapeLayer = shapeLayer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _shapeLayer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、实现细节"><a href="#二、实现细节" class="headerlink" title="二、实现细节"></a>二、实现细节</h2><p><strong><code>DBBadgeButton</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBBadgeButton</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *placeView; <span class="comment">// 占位</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">CAShapeLayer</span> *shapeLayer; <span class="comment">// 路径形状</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBBadgeButton</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</span><br><span class="line">    [<span class="keyword">super</span> awakeFromNib];</span><br><span class="line">    [<span class="keyword">self</span> initConfig];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> initConfig];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消高亮状态（不调用super即可）</span></span><br><span class="line">- (<span class="keyword">void</span>)setHighlighted:(<span class="built_in">BOOL</span>)highlighted &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)willMoveToSuperview:(<span class="built_in">UIView</span> *)newSuperview &#123;</span><br><span class="line">    [newSuperview insertSubview:<span class="keyword">self</span>.placeView belowSubview:<span class="keyword">self</span>];</span><br><span class="line">    [newSuperview.layer insertSublayer:<span class="keyword">self</span>.shapeLayer atIndex:<span class="number">0</span>];</span><br><span class="line">    [<span class="keyword">super</span> willMoveToSuperview:newSuperview];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化配置</span></span><br><span class="line">- (<span class="keyword">void</span>)initConfig &#123;</span><br><span class="line">    <span class="keyword">self</span>.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setTitleColor:[<span class="built_in">UIColor</span> whiteColor] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGestureHandle:)];</span><br><span class="line">    [<span class="keyword">self</span> addGestureRecognizer:panGesture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</span><br><span class="line">    [<span class="keyword">super</span> layoutSubviews];</span><br><span class="line">    <span class="keyword">self</span>.layer.cornerRadius = <span class="keyword">self</span>.bounds.size.width * <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">self</span>.placeView.frame = <span class="keyword">self</span>.frame;</span><br><span class="line">    <span class="keyword">self</span>.placeView.layer.cornerRadius = <span class="keyword">self</span>.placeView.bounds.size.width * <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Private Method</span></span><br><span class="line"><span class="comment">// 拖动手势</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> translatePoint = [gesture translationInView:gesture.view];</span><br><span class="line">    <span class="comment">// 跟随手指移动</span></span><br><span class="line">    <span class="built_in">CGPoint</span> center = <span class="keyword">self</span>.center;</span><br><span class="line">    center.x += translatePoint.x;</span><br><span class="line">    center.y += translatePoint.y;</span><br><span class="line">    <span class="keyword">self</span>.center = center;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 位移复位</span></span><br><span class="line">    [gesture setTranslation:<span class="built_in">CGPointZero</span> inView:gesture.view];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取两个view的圆心距离</span></span><br><span class="line">    <span class="built_in">CGFloat</span> distance = [<span class="keyword">self</span> getCircleCenterDistanceWithView:<span class="keyword">self</span>.placeView otherView:<span class="keyword">self</span>];</span><br><span class="line">    <span class="comment">// 计算缩放比例</span></span><br><span class="line">    <span class="built_in">CGFloat</span> place_radius = <span class="keyword">self</span>.bounds.size.width * <span class="number">0.5</span>;</span><br><span class="line">    place_radius = place_radius - distance / <span class="number">10.0</span>;</span><br><span class="line">    <span class="keyword">self</span>.placeView.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, place_radius * <span class="number">2</span>, place_radius * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">self</span>.placeView.layer.cornerRadius = place_radius;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 范围内显示路径</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.placeView.hidden == <span class="literal">NO</span>) &#123;</span><br><span class="line">        <span class="built_in">UIBezierPath</span> *path = [<span class="keyword">self</span> getBezierPathWithView:<span class="keyword">self</span>.placeView otherView:<span class="keyword">self</span>];</span><br><span class="line">        <span class="comment">// 根据路径填充形状</span></span><br><span class="line">        <span class="keyword">self</span>.shapeLayer.path = path.CGPath;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 超出范围隐藏路径</span></span><br><span class="line">    <span class="keyword">if</span> (distance &gt; <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.placeView.hidden = <span class="literal">YES</span>;</span><br><span class="line">        [<span class="keyword">self</span>.shapeLayer removeFromSuperlayer];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手势结束</span></span><br><span class="line">    <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateEnded</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (distance &lt;= <span class="number">60</span>) &#123; <span class="comment">// 复位</span></span><br><span class="line">            [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.25</span> delay:<span class="number">0</span> usingSpringWithDamping:<span class="number">0.6</span> initialSpringVelocity:<span class="number">0</span> options:<span class="built_in">UIViewAnimationOptionCurveLinear</span> animations:^&#123;</span><br><span class="line">                <span class="keyword">self</span>.center = <span class="keyword">self</span>.placeView.center;</span><br><span class="line">            &#125; completion:<span class="literal">nil</span>];</span><br><span class="line">            <span class="keyword">self</span>.placeView.hidden = <span class="literal">NO</span>;</span><br><span class="line">            [<span class="keyword">self</span>.shapeLayer removeFromSuperlayer];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 做动画</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径</span></span><br><span class="line">- (<span class="built_in">UIBezierPath</span> *)getBezierPathWithView:(<span class="built_in">UIView</span> *)aView otherView:(<span class="built_in">UIView</span> *)bView &#123;</span><br><span class="line">    <span class="comment">// 获取圆心距离</span></span><br><span class="line">    <span class="built_in">CGFloat</span> d = [<span class="keyword">self</span> getCircleCenterDistanceWithView:aView otherView:bView];</span><br><span class="line">    <span class="comment">// 距离小于0不绘制曲线</span></span><br><span class="line">    <span class="keyword">if</span> (d &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算坐标点</span></span><br><span class="line">    <span class="built_in">CGFloat</span> x1 = aView.center.x;</span><br><span class="line">    <span class="built_in">CGFloat</span> y1 = aView.center.y;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGFloat</span> x2 = bView.center.x;</span><br><span class="line">    <span class="built_in">CGFloat</span> y2 = bView.center.y;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGFloat</span> sinθ = (x2 - x1) / d;</span><br><span class="line">    <span class="built_in">CGFloat</span> cosθ = (y2 - y1) / d;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGFloat</span> r1 = aView.bounds.size.width * <span class="number">0.5</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> r2 = bView.bounds.size.width * <span class="number">0.5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGPoint</span> pointA = <span class="built_in">CGPointMake</span>(x1 - r1 * cosθ, y1 + r1 * sinθ);</span><br><span class="line">    <span class="built_in">CGPoint</span> pointB = <span class="built_in">CGPointMake</span>(x1 + r1 * cosθ, y1 - r1 * sinθ);</span><br><span class="line">    <span class="built_in">CGPoint</span> pointC = <span class="built_in">CGPointMake</span>(x2 + r2 * cosθ, y2 - r2 * sinθ);</span><br><span class="line">    <span class="built_in">CGPoint</span> pointD = <span class="built_in">CGPointMake</span>(x2 - r2 * cosθ, y2 + r2 * sinθ);</span><br><span class="line">    <span class="built_in">CGPoint</span> pointO = <span class="built_in">CGPointMake</span>(pointA.x + <span class="number">2</span>/d * sinθ, pointA.y + <span class="number">2</span>/d * cosθ);</span><br><span class="line">    <span class="built_in">CGPoint</span> pointP = <span class="built_in">CGPointMake</span>(pointB.x + <span class="number">2</span>/d * sinθ, pointB.y + <span class="number">2</span>/d * cosθ);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绘制路径</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    <span class="comment">// AB直线</span></span><br><span class="line">    [path moveToPoint:pointA];</span><br><span class="line">    [path addLineToPoint:pointB];</span><br><span class="line">    <span class="comment">// BC曲线</span></span><br><span class="line">    [path addQuadCurveToPoint:pointC controlPoint:pointP];</span><br><span class="line">    <span class="comment">// CD直线</span></span><br><span class="line">    [path addLineToPoint:pointD];</span><br><span class="line">    <span class="comment">// DA曲线</span></span><br><span class="line">    [path addQuadCurveToPoint:pointA controlPoint:pointO];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取圆心距离</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)getCircleCenterDistanceWithView:(<span class="built_in">UIView</span> *)aView otherView:(<span class="built_in">UIView</span> *)bView &#123;</span><br><span class="line">    <span class="comment">// 1.斜边 = 临边两个数平方的和的平方根</span></span><br><span class="line">    <span class="built_in">CGFloat</span> offset_x = fabs(aView.center.x - bView.center.x);</span><br><span class="line">    <span class="built_in">CGFloat</span> offset_y = fabs(aView.center.y - bView.center.y);</span><br><span class="line">    <span class="built_in">CGFloat</span> distance = sqrtf(offset_x * offset_x + offset_y * offset_y);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.求直角三角形斜边长度的C函数：hypotf(a, b)</span></span><br><span class="line">    distance = hypotf(offset_x, offset_y);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Setter and Getter</span></span><br><span class="line">- (<span class="keyword">void</span>)setBackgroundColor:(<span class="built_in">UIColor</span> *)backgroundColor &#123;</span><br><span class="line">    [<span class="keyword">super</span> setBackgroundColor:backgroundColor];</span><br><span class="line">    <span class="keyword">self</span>.placeView.backgroundColor = backgroundColor;</span><br><span class="line">    <span class="keyword">self</span>.shapeLayer.fillColor = backgroundColor.CGColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)placeView &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_placeView) &#123;</span><br><span class="line">        _placeView = [[<span class="built_in">UIView</span> alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _placeView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CAShapeLayer</span> *)shapeLayer &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_shapeLayer) &#123;</span><br><span class="line">        <span class="built_in">CAShapeLayer</span> *shapeLayer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">        shapeLayer.fillColor = <span class="keyword">self</span>.backgroundColor.CGColor;</span><br><span class="line">        [<span class="keyword">self</span>.superview.layer insertSublayer:shapeLayer atIndex:<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">self</span>.shapeLayer = shapeLayer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _shapeLayer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CoreAnimation </tag>
            
            <tag> 粘性动画 </tag>
            
            <tag> 果冻效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】CoreAnimation的使用及综合案例</title>
      <link href="/2016/12/02/ios-coreanimation/"/>
      <url>/2016/12/02/ios-coreanimation/</url>
      
        <content type="html"><![CDATA[<p><strong>CoreAnimation</strong>，译为核心动画。它是一组非常抢到的动画处理框架（供Mac OS和iOS平台使用），使用它可以做出非常绚丽的动画效果，而且使用起来非常简单。</p><a id="more"></a><p><strong>CoreAnimation</strong>的动画执行是在后台操作的，不会阻塞主线程。动画是直接作用在<code>CALayer</code>上的，不是<code>UIView</code>。</p><h2 id="一、核心动画的基础"><a href="#一、核心动画的基础" class="headerlink" title="一、核心动画的基础"></a>一、核心动画的基础</h2><h3 id="1-1-继承结构"><a href="#1-1-继承结构" class="headerlink" title="1.1. 继承结构"></a>1.1. 继承结构</h3><p><img src="http://blog.idbeny.com/b6quc.png@normal" alt=""></p><p><code>CAAnimation</code>是所有动画的父类，<code>CAAnimation</code>遵守了<code>CAMediaTiming</code>协议。</p><h3 id="1-2-创建动画"><a href="#1-2-创建动画" class="headerlink" title="1.2. 创建动画"></a>1.2. 创建动画</h3><p><code>CAAnimation</code>是作用在Layer上的，所以说先需要创建<code>CALayer</code>，然后初始化一个<code>CAAnimation</code>对象，并设置一些动画属性，最后通过调用<code>CALayer</code>的<code>addAnimation:forKey:</code>方法，把<code>CAAnimation</code>对象添加到<code>CALayer</code>中，这样就能看到动画了。</p><p><code>addAnimation:forKey:</code>方法中key的作用是用来区分动画的唯一标识，如果只有一个动画，可以设为nil。<br><img src="http://blog.idbeny.com/lwm12.png@normal" alt=""></p><p><strong>示例：对红色view添加核心动画。</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="comment">// 1.创建对象</span></span><br><span class="line">    <span class="built_in">CABasicAnimation</span> *anim = [<span class="built_in">CABasicAnimation</span> animation];</span><br><span class="line">    <span class="comment">// 2.动画属性</span></span><br><span class="line">    anim.keyPath = <span class="string">@"position.y"</span>;</span><br><span class="line">    <span class="comment">// 3.属性目标值</span></span><br><span class="line">    anim.toValue = @(<span class="number">400</span>);</span><br><span class="line">    [<span class="keyword">self</span>.redView.layer addAnimation:anim forKey:<span class="string">@"anim"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/kcm7b.gif@normal" alt=""></p><p>手指点击一次，动画执行一次。而且动画直接结束后立马回到原来的位置。下面介绍的两个属性可以调整状态：</p><ul><li><p><code>CAAnimation</code>属性<code>removedOnCompletion</code>可以控制动画完成后是否移除动画，默认是YES。</p></li><li><p><code>CAMediaTiming</code>协议属性<code>fillMode</code>可以设置动画完成时layer的状态。</p><ul><li><code>backwards（kCAFillModeBackwards）</code>：原来位置</li><li><code>forwards（kCAFillModeForwards）</code>：动画目标位置</li><li><code>both（kCAFillModeBoth）</code>：随机选择<code>backwards</code>或<code>forwards</code></li><li><code>removed（kCAFillModeRemoved）</code>：移除动画（默认）</li></ul></li></ul><h3 id="1-3-心跳效果（CABasicAnimation）"><a href="#1-3-心跳效果（CABasicAnimation）" class="headerlink" title="1.3. 心跳效果（CABasicAnimation）"></a>1.3. 心跳效果（CABasicAnimation）</h3><p>心跳效果主要是比例缩放。<br><img src="http://blog.idbeny.com/pan0d.gif@normal" alt=""></p><ul><li><code>repeatCount</code>：重复次数，默认0</li><li><code>duration</code>：动画执行时长</li><li><code>autoreverses</code>：是否自动反转（从哪来到哪去的往返动画，默认NO）</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CABasicAnimation *<span class="attr">anim</span> = [CABasicAnimation animation];</span><br><span class="line">anim.<span class="attr">keyPath</span> = @<span class="string">"transform.scale"</span>;</span><br><span class="line">anim.<span class="attr">toValue</span> = @(<span class="number">0</span>);</span><br><span class="line">anim.<span class="attr">repeatCount</span> = HUGE;</span><br><span class="line">anim.<span class="attr">duration</span> = <span class="number">1.0</span>;</span><br><span class="line">anim.<span class="attr">autoreverses</span> = YES;</span><br><span class="line">[self.heartView.layer addAnimation:anim forKey:nil];</span><br></pre></td></tr></table></figure><h3 id="1-4-抖动效果（CAKeyframeAnimation）"><a href="#1-4-抖动效果（CAKeyframeAnimation）" class="headerlink" title="1.4. 抖动效果（CAKeyframeAnimation）"></a>1.4. 抖动效果（CAKeyframeAnimation）</h3><p>抖动效果在苹果手机上经常看到，长按应用图标就会出现左右抖动。抖动的原理就是添加从左边弧度和右边弧度的往返帧动画。<br><img src="http://blog.idbeny.com/uu3cv.gif@normal" alt=""></p><ul><li><code>values</code>：动画属性值，可以设置多个，多个值会均分<code>duration</code></li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CAKeyframeAnimation *<span class="attr">anim</span> = [CAKeyframeAnimation animation];</span><br><span class="line">anim.<span class="attr">keyPath</span> = @<span class="string">"transform.rotation"</span>;</span><br><span class="line">CGFloat <span class="attr">startAngle</span> = -<span class="number">8</span> * M_PI / <span class="number">180</span>;</span><br><span class="line">CGFloat <span class="attr">endAngle</span> = <span class="number">8</span> * M_PI / <span class="number">180</span>;</span><br><span class="line">anim.<span class="attr">values</span> = @[@(startAngle), @(endAngle)];</span><br><span class="line">anim.<span class="attr">autoreverses</span> = YES;</span><br><span class="line">anim.<span class="attr">repeatCount</span> = HUGE;</span><br><span class="line">anim.<span class="attr">duration</span> = <span class="number">0.1</span>;</span><br><span class="line">[self.appView.layer addAnimation:anim forKey:nil];</span><br><span class="line"></span><br><span class="line">// anim.<span class="attr">autoreverses</span> = YES 等效 anim.<span class="attr">values</span> = @[@(startAngle), @(endAngle), @(startAngle)];</span><br></pre></td></tr></table></figure><h3 id="1-5-路径动画（CAKeyframeAnimation和UIBezierPath）"><a href="#1-5-路径动画（CAKeyframeAnimation和UIBezierPath）" class="headerlink" title="1.5. 路径动画（CAKeyframeAnimation和UIBezierPath）"></a>1.5. 路径动画（CAKeyframeAnimation和UIBezierPath）</h3><p>路径动画只能使用<code>CAKeyframeAnimation</code>来构建，路径使用<code>UIBezierPath</code>创建。</p><p><code>CAKeyframeAnimation</code>有两个属性非常重要：</p><h4 id="动画旋转模式"><a href="#动画旋转模式" class="headerlink" title="动画旋转模式"></a>动画旋转模式</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">CAAnimationRotationMode</span> rotationMode;</span><br></pre></td></tr></table></figure><p>默认值为空，有两个值可供选择：</p><ul><li><code>kCAAnimationRotateAuto</code>: 自动旋转</li><li><code>kCAAnimationRotateAutoReverse</code>: 自动反转</li></ul><h4 id="时间计算模式"><a href="#时间计算模式" class="headerlink" title="时间计算模式"></a>时间计算模式</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"></span>(copy) CAAnimationCalculationMode calculationMode;</span><br></pre></td></tr></table></figure><p>默认值<code>linear</code>，系统提供了字符串常量：</p><ul><li><code>kCAAnimationLinear</code>: 匀时（每个路径动画时长均分总时长）</li><li><code>kCAAnimationDiscrete</code>: 离散动画（只有关键帧有动画）</li><li><code>kCAAnimationPaced</code>: 匀速（每个路径动画速度一致）</li><li><code>kCAAnimationCubic</code>: 关键帧之间使用圆弧曲线动画</li><li><code>kCAAnimationCubicPaced</code>: 在<code>kCAAnimationCubic</code>基础上<code>kCAAnimationPaced</code>动画</li></ul><p>当设置计算模式为<code>kCAAnimationPaced</code>和<code>kCAAnimationCubicPaced</code>时，<code>keyTimes</code>和<code>timingFunctions</code>会失效。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建路径</span></span><br><span class="line"><span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">[path moveToPoint:<span class="keyword">self</span>.carView.center];</span><br><span class="line">[path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">300.0</span>, <span class="keyword">self</span>.carView.center.y)];</span><br><span class="line">[path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">300.0</span>, <span class="number">500.0</span>)];</span><br><span class="line">[path addArcWithCenter:<span class="built_in">CGPointMake</span>(<span class="number">185.0</span>, <span class="number">500.0</span>) radius:<span class="number">115.0</span> startAngle:<span class="number">0</span> endAngle:M_PI clockwise:<span class="literal">YES</span>];</span><br><span class="line">[path closePath];</span><br><span class="line"><span class="comment">// 2.创建动画</span></span><br><span class="line"><span class="built_in">CAKeyframeAnimation</span> *anim = [<span class="built_in">CAKeyframeAnimation</span> animation];</span><br><span class="line">anim.keyPath = <span class="string">@"position"</span>;</span><br><span class="line"><span class="comment">// 设置动画路径</span></span><br><span class="line">anim.path = path.CGPath;</span><br><span class="line"><span class="comment">// 动画旋转模式</span></span><br><span class="line">anim.rotationMode = kCAAnimationRotateAuto;</span><br><span class="line"><span class="comment">// 时间计算模式</span></span><br><span class="line">anim.calculationMode = kCAAnimationCubicPaced;</span><br><span class="line"></span><br><span class="line">anim.duration = <span class="number">5.0</span>;</span><br><span class="line">anim.repeatCount = HUGE;</span><br><span class="line">[<span class="keyword">self</span>.carView.layer addAnimation:anim forKey:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/y7zn9.gif@normal" alt=""></p><h3 id="1-6-转场动画（CATransition）"><a href="#1-6-转场动画（CATransition）" class="headerlink" title="1.6. 转场动画（CATransition）"></a>1.6. 转场动画（CATransition）</h3><h4 id="转场效果"><a href="#转场效果" class="headerlink" title="转场效果"></a>转场效果</h4><p>控制转场动画的过度效果</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"></span>(copy) CATransitionType <span class="keyword">type</span>;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/0uect.png@normal" alt=""></p><p><code>suckEffect</code>收缩效果是从父视图左上角被收走。</p><h4 id="转场方向"><a href="#转场方向" class="headerlink" title="转场方向"></a>转场方向</h4><p>控制动画从哪个方向开始。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">CATransitionSubtype</span> subtype;</span><br></pre></td></tr></table></figure><p>有四个常量值：</p><ul><li><code>kCATransitionFromRight</code>:</li><li><code>kCATransitionFromLeft</code>:</li><li><code>kCATransitionFromTop</code>:</li><li><code>kCATransitionFromBottom</code>:</li></ul><h4 id="动画起止点"><a href="#动画起止点" class="headerlink" title="动画起止点"></a>动画起止点</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>float startProgress;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>float endProgress;</span><br></pre></td></tr></table></figure><p>设置动画从哪个点开始，到哪个点结束。数值范围是<code>[0, 1]</code>，<code>endProgress</code>必须大于等于<code>startProgress</code>。他们的默认值分别是0和1。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span> _index = <span class="number">0</span>;</span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="comment">// 转场代码</span></span><br><span class="line">    _index++;</span><br><span class="line">    <span class="keyword">if</span> (_index &gt; <span class="number">4</span>) &#123;</span><br><span class="line">        _index = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.fireView.image = [<span class="built_in">UIImage</span> imageNamed:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"fire%ld"</span>, _index]];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转场动画</span></span><br><span class="line">    <span class="built_in">CATransition</span> *anim = [<span class="built_in">CATransition</span> animation];</span><br><span class="line">    anim.type = <span class="string">@"cube"</span>;</span><br><span class="line">    anim.subtype = kCATransitionFromLeft;</span><br><span class="line">    anim.startProgress = <span class="number">0.2</span>;</span><br><span class="line">    anim.endProgress = <span class="number">0.8</span>;</span><br><span class="line">    anim.duration = <span class="number">5.0</span>;</span><br><span class="line">    [<span class="keyword">self</span>.fireView.layer addAnimation:anim forKey:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/ap8o9.gif@normal" alt=""></p><p>注意：转场代码和转场动画必须在同一个方法中(编译后)，否则动画无效。</p><h3 id="1-7-动画组（CAAnimationGroup）"><a href="#1-7-动画组（CAAnimationGroup）" class="headerlink" title="1.7. 动画组（CAAnimationGroup）"></a>1.7. 动画组（CAAnimationGroup）</h3><p>动画组可以把多个动画合并在一起执行。</p><p>可以把需要组合在一起的动画放到<code>animations</code>数组中，数组元素需是<code>CAAnimation</code>类型，也就是所有的核心动画都可以放到数组中。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">CAAnimation</span> *&gt; *animations;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CABasicAnimation *<span class="attr">anim_scale</span> = [CABasicAnimation animation];</span><br><span class="line">anim_scale.<span class="attr">keyPath</span> = @<span class="string">"transform.scale"</span>;</span><br><span class="line">anim_scale.<span class="attr">toValue</span> = @(<span class="number">0.3</span>);</span><br><span class="line">anim_scale.<span class="attr">removedOnCompletion</span> = NO;</span><br><span class="line">anim_scale.<span class="attr">fillMode</span> = kCAFillModeForwards;</span><br><span class="line">anim_scale.<span class="attr">duration</span> = <span class="number">1.0</span>;</span><br><span class="line">[self.redView.layer addAnimation:anim_scale forKey:nil];</span><br><span class="line"></span><br><span class="line">CABasicAnimation *<span class="attr">anim_offset</span> = [CABasicAnimation animation];</span><br><span class="line">anim_offset.<span class="attr">keyPath</span> = @<span class="string">"position.y"</span>;</span><br><span class="line">anim_offset.<span class="attr">toValue</span> = @<span class="number">300</span>;</span><br><span class="line">anim_offset.<span class="attr">removedOnCompletion</span> = NO;</span><br><span class="line">anim_offset.<span class="attr">fillMode</span> = kCAFillModeForwards;</span><br><span class="line">anim_offset.<span class="attr">duration</span> = <span class="number">1.0</span>;</span><br><span class="line">[self.redView.layer addAnimation:anim_offset forKey:nil];</span><br></pre></td></tr></table></figure><p>上面示例代码有很多重复属性值，如果把动画添加到动画组就会省下很多代码：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CABasicAnimation *<span class="attr">anim_scale</span> = [CABasicAnimation animation];</span><br><span class="line">anim_scale.<span class="attr">keyPath</span> = @<span class="string">"transform.scale"</span>;</span><br><span class="line">anim_scale.<span class="attr">toValue</span> = @(<span class="number">0.3</span>);</span><br><span class="line">    </span><br><span class="line">CABasicAnimation *<span class="attr">anim_offset</span> = [CABasicAnimation animation];</span><br><span class="line">anim_offset.<span class="attr">keyPath</span> = @<span class="string">"position.y"</span>;</span><br><span class="line">anim_offset.<span class="attr">toValue</span> = @<span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">CAAnimationGroup *<span class="attr">anim_group</span> = [CAAnimationGroup animation];</span><br><span class="line">anim_group.<span class="attr">animations</span> = @[anim_scale, anim_offset];</span><br><span class="line">anim_group.<span class="attr">removedOnCompletion</span> = NO;</span><br><span class="line">anim_group.<span class="attr">fillMode</span> = kCAFillModeForwards;</span><br><span class="line">anim_group.<span class="attr">duration</span> = <span class="number">1.0</span>;</span><br><span class="line">[self.redView.layer addAnimation:anim_group forKey:nil];</span><br></pre></td></tr></table></figure><h3 id="1-8-代理（CAAnimationDelegate）"><a href="#1-8-代理（CAAnimationDelegate）" class="headerlink" title="1.8. 代理（CAAnimationDelegate）"></a>1.8. 代理（CAAnimationDelegate）</h3><p>所有核心动画都有都可以成为代理。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动画开始时调用</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">animationDidStart:</span>(CAAnimation *)anim;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画结束后调用。如果动画在未结束前把所在的layer移除，也会调用。动画在没有被移除前完成时，flag是true</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">animationDidStop:</span>(CAAnimation *)anim <span class="string">finished:</span>(BOOL)flag;</span><br></pre></td></tr></table></figure><h2 id="二、探究核心动画前后的位置和尺寸"><a href="#二、探究核心动画前后的位置和尺寸" class="headerlink" title="二、探究核心动画前后的位置和尺寸"></a>二、探究核心动画前后的位置和尺寸</h2><p>核心动画并没有修改属性的真实值，那为什么看到的内容确实发生了形变呢？我们打印动画执行前后控件的位置看下。</p><p>场景：屏幕上红色view添加核心动画，通过形变查看前后位置。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// 原始位置和尺寸</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"origin:%@"</span>, <span class="built_in">NSStringFromCGRect</span>(<span class="keyword">self</span>.redView.frame));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加核心动画</span></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">CABasicAnimation</span> *anim = [<span class="built_in">CABasicAnimation</span> animation];</span><br><span class="line">    anim.delegate = <span class="keyword">self</span>;</span><br><span class="line">    anim.keyPath = <span class="string">@"position.y"</span>;</span><br><span class="line">    anim.toValue = @(<span class="number">400</span>);</span><br><span class="line">    anim.fillMode = kCAFillModeForwards;</span><br><span class="line">    [<span class="keyword">self</span>.redView.layer addAnimation:anim forKey:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画结束</span></span><br><span class="line">- (<span class="keyword">void</span>)animationDidStop:(<span class="built_in">CAAnimation</span> *)anim finished:(<span class="built_in">BOOL</span>)flag &#123;</span><br><span class="line">    <span class="comment">// 动画结束后位置和尺寸</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"animAfter:%@"</span>, <span class="built_in">NSStringFromCGRect</span>(<span class="keyword">self</span>.redView.frame));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origin:&#123;&#123;<span class="number">10</span>, <span class="number">60</span>&#125;, &#123;<span class="number">100</span>, <span class="number">100</span>&#125;&#125;</span><br><span class="line">animAfter:&#123;&#123;<span class="number">10</span>, <span class="number">60</span>&#125;, &#123;<span class="number">100</span>, <span class="number">100</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>唉，为什么呢？系统出bug了？哈哈哈哈</p><p>这是因为layer层其实是一个数据结构，含有模型层和动画层。真实数据都是在模型层，动画修改的是动画层的数据，并没有修改模型层，所以真实位置没有发生改变。</p><h2 id="三、UIView动画和CALayer核心动画区别"><a href="#三、UIView动画和CALayer核心动画区别" class="headerlink" title="三、UIView动画和CALayer核心动画区别"></a>三、UIView动画和CALayer核心动画区别</h2><p>区别：</p><ul><li>核心动画只作用在<code>Layer</code>上；</li><li>核心动画看到的一切都是假象，并没有去修改属性的真实值；</li></ul><p>选择：</p><ul><li>当需要与用户进行交互时，由于<code>CALayer</code>不能和用户交互并且位置是虚假的，所以必须使用<code>UIView</code>动画；</li><li>帧动画：当需要根据路径做动画时，使用核心动画；</li><li>转场动画：使用核心动画，转场类型比较多。</li></ul><h2 id="四、综合案例"><a href="#四、综合案例" class="headerlink" title="四、综合案例"></a>四、综合案例</h2><h3 id="4-1-图片折叠"><a href="#4-1-图片折叠" class="headerlink" title="4.1. 图片折叠"></a>4.1. 图片折叠</h3><p><img src="http://blog.idbeny.com/ivyk1.gif@normal" alt=""><br><strong>思路：</strong></p><ol><li>创建上下两个<code>UIImageView</code>，两个控件重叠在一起；</li><li>图片利用代码来控制显示部分内容，上面的图片只显示上半部分，下面的图片显示下半部分（也可以用之前裁剪好的图片）；</li><li>因为是按照x轴旋转，所以修改上面<code>UIImageView</code>的锚点为<code>(0.5, 1.0)</code>；</li><li>下面的<code>UIImageView</code>也需要修改锚点<code>(0.5, 0.0)</code>，否则两个图片之间会有间隙；</li><li>这时候视觉效果已经是一张完整的图片了，而且上面的图片也可以围绕x轴旋转；</li><li>由于整个<code>UIImageView</code>都需要手势控制，所以我们在图片上方覆盖一个透明的view，在这个view上添加手势来控制图片的形变。</li><li>为上面的图片添加透视效果；</li><li>为下面的图片添加阴影渐变。</li></ol><p><strong>知识点一：显示部分内容</strong><br><code>CALayer</code>有一个<code>contentsRect</code>属性，可以控制内容显示区域，范围是<code>[0 0 1 1]</code>，就是从左上角开始，整个layer层的区域大小是按照<code>[0, 1]</code>计算的。设置范围后，会裁剪指定范围外的内容，只保留范围内的内容，并填充整个layer的范围。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>CGRect contentsRect;</span><br></pre></td></tr></table></figure><p>例，显示左半部分的范围：<code>{0, 0, 0.5, 1}</code></p><p><strong>知识点二：透视效果</strong><br>核心动画本质是一个矩阵变换的过程，涉及到矩阵的计算。但是透视效果实现起来非常简单，我们只需要修改图层的初始矩阵第三行四列元素（m34）的值就行了。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CATransform3D transform = CATransform3DIdentity<span class="comment">;</span></span><br><span class="line">transform.m34 = -<span class="number">1</span> / <span class="number">500.0</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>在视觉原理上，透视出来的效果是近大远小，距离镜头近的物体就大，越远越小。所以，我们只需要修改分母的值来确定镜头的位置(分母一定要是小数)。</p><p><strong>知识点三：弹性动画</strong><br>弹性动画用到地方很多，微博的选取相册界面就是用的弹性动画。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> duration 动画时长</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay 延迟时间（延迟多久开始执行动画）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dampingRatio 阻尼比例（值越小弹性越大，一般0.5左右）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> velocity 初始化速度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> options 动画效果（UIViewAnimationOptions枚举）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> animations 要执行的动画块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> completion 动画完成回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)<span class="string">animateWithDuration:</span>(NSTimeInterval)duration <span class="string">delay:</span>(NSTimeInterval)delay <span class="string">usingSpringWithDamping:</span>(CGFloat)dampingRatio <span class="string">initialSpringVelocity:</span>(CGFloat)velocity <span class="string">options:</span>(UIViewAnimationOptions)options <span class="string">animations:</span>(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))animations <span class="string">completion:</span>(<span class="keyword">void</span> (^ __nullable)(BOOL finished))completion;</span><br></pre></td></tr></table></figure><p><strong>代码：</strong><br><strong><code>ViewController</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">CAAnimationDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *topImgView; <span class="comment">// 上图片</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *bottomImgView; <span class="comment">// 下图片</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *gestureView; <span class="comment">// 手势</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="built_in">CAGradientLayer</span> *gradientLayer; <span class="comment">// 渐变色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// 1.指定图片显示范围</span></span><br><span class="line">    <span class="keyword">self</span>.topImgView.layer.contentsRect = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">self</span>.bottomImgView.layer.contentsRect = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.修改锚点（目标：让视觉效果是一张图）</span></span><br><span class="line">    <span class="keyword">self</span>.topImgView.layer.anchorPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">self</span>.bottomImgView.layer.anchorPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">0.0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.添加手势</span></span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGestureHandle:)];</span><br><span class="line">    [<span class="keyword">self</span>.gestureView addGestureRecognizer:panGesture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.添加阴影</span></span><br><span class="line">    <span class="built_in">CAGradientLayer</span> *gradientLayer = [<span class="built_in">CAGradientLayer</span> layer];</span><br><span class="line">    gradientLayer.colors = @[(<span class="keyword">id</span>)[<span class="built_in">UIColor</span> clearColor].CGColor, (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> blackColor].CGColor];</span><br><span class="line">    gradientLayer.frame = <span class="keyword">self</span>.bottomImgView.bounds;</span><br><span class="line">    gradientLayer.opacity = <span class="number">0</span>;</span><br><span class="line">    [<span class="keyword">self</span>.bottomImgView.layer addSublayer:gradientLayer];</span><br><span class="line">    <span class="keyword">self</span>.gradientLayer = gradientLayer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑动手势</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> translatePoint = [gesture translationInView:gesture.view];</span><br><span class="line">    <span class="comment">// 计算弧度</span></span><br><span class="line">    <span class="built_in">CGFloat</span> angle = translatePoint.y / gesture.view.bounds.size.height * M_PI;</span><br><span class="line">    <span class="comment">// 设置透视</span></span><br><span class="line">    <span class="built_in">CATransform3D</span> transform = <span class="built_in">CATransform3DIdentity</span>;</span><br><span class="line">    transform.m34 = <span class="number">-1</span> / <span class="number">500.0</span>;</span><br><span class="line">    <span class="keyword">self</span>.topImgView.layer.transform = <span class="built_in">CATransform3DRotate</span>(transform, -angle, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置阴影透明度</span></span><br><span class="line">    <span class="built_in">CGFloat</span> opacity = translatePoint.y / gesture.view.bounds.size.height;</span><br><span class="line">    <span class="keyword">self</span>.gradientLayer.opacity = opacity;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拖拽结束后复位</span></span><br><span class="line">    <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateEnded</span>) &#123;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.25</span> delay:<span class="number">0</span> usingSpringWithDamping:<span class="number">0.2</span> initialSpringVelocity:<span class="number">0</span> options:<span class="built_in">UIViewAnimationOptionCurveEaseIn</span> animations:^&#123;</span><br><span class="line">            <span class="keyword">self</span>.topImgView.transform = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">            <span class="keyword">self</span>.gradientLayer.opacity = <span class="number">0</span>;</span><br><span class="line">        &#125; completion:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="4-2-音乐振动条"><a href="#4-2-音乐振动条" class="headerlink" title="4.2. 音乐振动条"></a>4.2. 音乐振动条</h3><p><img src="http://blog.idbeny.com/thkvl.gif@normal" alt=""><br><strong>思路：</strong></p><ol><li>创建一个背景视图，用来装载振动条，振动条使用<code>CALayer</code>绘制；</li><li>震动的原理是给振动条添加y轴的形变，只要y轴不断的变大和变小就能达到震动的效果；</li><li>把振动条多复制几份并设置一定间距，整体效果就有了。</li></ol><p><strong>知识点：</strong><br><code>CAReplicatorLayer</code>是<code>CALayer</code>的子类，见名知意，他可以用来复制Layer，复制的是添加到自己身上的所有子层。</p><p>设置复制的份数，包含已添加到身上的。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>NSInteger instanceCount;</span><br></pre></td></tr></table></figure><p>对每一份复制的内容整体做形变操作（不包括首次添加上去的）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>CATransform3D instanceTransform;</span><br></pre></td></tr></table></figure><p>设置每一份复制内容动画延迟执行的时间（每一份等待时间是n，不包括首次添加上去的）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>CFTimeInterval instanceDelay;</span><br></pre></td></tr></table></figure><p>设置每一份复制内容的RGBA</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>float instanceRedOffset;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>float instanceGreenOffset;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>float instanceBlueOffset;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>float instanceAlphaOffset;</span><br></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建复制容器</span></span><br><span class="line"><span class="built_in">CAReplicatorLayer</span> *repLayer = [<span class="built_in">CAReplicatorLayer</span> layer];</span><br><span class="line">repLayer.frame = <span class="keyword">self</span>.shakeBgView.bounds;</span><br><span class="line">[<span class="keyword">self</span>.shakeBgView.layer addSublayer:repLayer];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.绘制振动条，并添加到赋值容器中</span></span><br><span class="line"><span class="built_in">CGFloat</span> layer_w = <span class="number">20.0</span>;</span><br><span class="line"><span class="built_in">CGFloat</span> layer_h = <span class="number">120</span>;</span><br><span class="line"><span class="built_in">CALayer</span> *layer = [<span class="built_in">CALayer</span> layer];</span><br><span class="line">layer.backgroundColor = [<span class="built_in">UIColor</span> redColor].CGColor;</span><br><span class="line">layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, layer_w, layer_h);</span><br><span class="line">layer.position = <span class="built_in">CGPointMake</span>(<span class="number">0.0</span>, repLayer.bounds.size.height);</span><br><span class="line">layer.anchorPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">[repLayer addSublayer:layer];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.振动条添加缩放动画</span></span><br><span class="line"><span class="built_in">CABasicAnimation</span> *anim = [<span class="built_in">CABasicAnimation</span> animation];</span><br><span class="line">anim.keyPath = <span class="string">@"transform.scale.y"</span>;</span><br><span class="line">anim.toValue = @<span class="number">0</span>;</span><br><span class="line">anim.duration = <span class="number">0.5</span>;</span><br><span class="line">anim.repeatCount = HUGE;</span><br><span class="line">anim.autoreverses = <span class="literal">YES</span>;</span><br><span class="line">[layer addAnimation:anim forKey:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.设置复制份数</span></span><br><span class="line">repLayer.instanceCount = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.设置子层的形变（间距）</span></span><br><span class="line">repLayer.instanceTransform = <span class="built_in">CATransform3DMakeTranslation</span>(layer_w + <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.设置子层动画延迟执行时间（）</span></span><br><span class="line">repLayer.instanceDelay = <span class="number">0.3</span>;</span><br></pre></td></tr></table></figure><h3 id="4-3-倒影"><a href="#4-3-倒影" class="headerlink" title="4.3. 倒影"></a>4.3. 倒影</h3><p><img src="http://blog.idbeny.com/dzhnw.png@normal" alt=""></p><p><strong>思路：</strong></p><ol><li>自定义View，重写layer类为<code>CAReplicatorLayer</code>，添加一个<code>UIImageView</code>到view上；</li><li>使用<code>CAReplicatorLayer</code>复制一份子层；</li><li>旋转子层180°（注意锚点位置），并设置复制层的RGBA。</li></ol><p><strong>代码：</strong><br>此案例是重写控制器的view。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义控制器view</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBControllerView</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写CALayer类，返回CAReplicatorLayer类型</span></span><br><span class="line">+ (Class)layerClass &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">CAReplicatorLayer</span> <span class="keyword">class</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制器</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">CAReplicatorLayer</span> *repLayer = (<span class="built_in">CAReplicatorLayer</span> *)<span class="keyword">self</span>.view.layer;</span><br><span class="line">    repLayer.instanceCount = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 围绕repLayer锚点旋转</span></span><br><span class="line">    repLayer.instanceTransform = <span class="built_in">CATransform3DMakeRotation</span>(M_PI, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 设置子layer的RGBA</span></span><br><span class="line">    repLayer.instanceRedOffset -= <span class="number">0.1</span>;</span><br><span class="line">    repLayer.instanceGreenOffset -= <span class="number">0.1</span>;</span><br><span class="line">    repLayer.instanceBlueOffset -= <span class="number">0.1</span>;</span><br><span class="line">    repLayer.instanceAlphaOffset -= <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CoreAnimation </tag>
            
            <tag> 心跳效果 </tag>
            
            <tag> 抖动效果 </tag>
            
            <tag> 图片折叠 </tag>
            
            <tag> 音乐振动条 </tag>
            
            <tag> 倒影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】CALayer-时钟效果</title>
      <link href="/2016/11/10/ios-layer-clock/"/>
      <url>/2016/11/10/ios-layer-clock/</url>
      
        <content type="html"><![CDATA[<p>使用<code>CALayer</code>制作一个钟表。</p><a id="more"></a><p><img src="http://blog.idbeny.com/oxcve.gif@normal" alt=""></p><h2 id="一、分析"><a href="#一、分析" class="headerlink" title="一、分析"></a>一、分析</h2><p>钟表由一个表盘和三个指针组成，三个指针分别是时、分、秒，且指针的一个端点是表盘的中心点，指针围绕着表盘中心点顺时针旋转。</p><p>表盘就是一张图片，只需要控制指针旋转就可以了。怎么旋转呢？</p><h3 id="1-1-第一步：绘制指针"><a href="#1-1-第一步：绘制指针" class="headerlink" title="1.1. 第一步：绘制指针"></a>1.1. 第一步：绘制指针</h3><p>指针使用<code>CALayer</code>绘制，把指针<code>position</code>设为表盘的中心点，<code>anchorPoint</code>设为<code>(0.5, 1.0)</code>，这时候指针的一端就固定在表盘中心点了。</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong) CALayer *secondsLayer; <span class="comment">// 秒针</span></span><br><span class="line"></span><br><span class="line">CALayer *<span class="symbol">layer</span> = [CALayer <span class="symbol">layer</span>];</span><br><span class="line"><span class="symbol">layer</span>.bounds = CGRectMake(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">90.0</span>);</span><br><span class="line"><span class="symbol">layer</span>.anchorPoint = CGPointMake(<span class="number">0.5</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="symbol">layer</span>.position = CGPointMake(<span class="literal">self</span>.bounds.size.width * <span class="number">0.5</span>, <span class="literal">self</span>.bounds.size.height * <span class="number">0.5</span>);</span><br><span class="line"><span class="symbol">layer</span>.backgroundColor = [UIColor blackColor].CGColor;</span><br><span class="line"><span class="symbol">layer</span>.shadowOpacity = <span class="number">1.0</span>;</span><br><span class="line"><span class="symbol">layer</span>.shadowOffset = CGSizeMake(<span class="number">2.0</span>, <span class="number">2.0</span>);</span><br><span class="line">[<span class="literal">self</span>.<span class="symbol">layer</span> addSublayer:<span class="symbol">layer</span>];</span><br><span class="line"><span class="literal">self</span>.secondsLayer = <span class="symbol">layer</span>;</span><br></pre></td></tr></table></figure><h3 id="1-2-第二步：旋转"><a href="#1-2-第二步：旋转" class="headerlink" title="1.2. 第二步：旋转"></a>1.2. 第二步：旋转</h3><p>由于指针旋转一周是360°，每一秒就是6°。指针围绕坐标系z轴旋转，每一秒旋转6°就可以了。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每一格（秒）度数</span></span><br><span class="line">NSInteger angleUnit = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// 秒针弧度</span></span><br><span class="line">CGFloat secondsAngle = secnds * angleUnit * M_PI / <span class="number">180</span>;</span><br><span class="line"><span class="comment">// 秒针围绕z轴旋转</span></span><br><span class="line">self.secondsLayer.transform = CATransform3DMakeRotation(secondsAngle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="1-3-第三步：获取当前时间秒数"><a href="#1-3-第三步：获取当前时间秒数" class="headerlink" title="1.3. 第三步：获取当前时间秒数"></a>1.3. 第三步：获取当前时间秒数</h3><p>获取秒数可以使用<code>NSDate</code>，也可以使用<code>NSCalendar</code>，建议使用后者。因为<code>NSCalendar</code>可以精确获取到当前时区的年月日时分秒，不需要额外去计算。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSCalendar</span> *calendar = [<span class="built_in">NSCalendar</span> currentCalendar];</span><br><span class="line"><span class="built_in">NSDateComponents</span> *dateCmps = [calendar components:<span class="built_in">NSCalendarUnitHour</span> | <span class="built_in">NSCalendarUnitMinute</span> | <span class="built_in">NSCalendarUnitSecond</span> fromDate:[<span class="built_in">NSDate</span> date]];</span><br><span class="line"><span class="built_in">NSInteger</span> hour = dateCmps.hour;</span><br><span class="line"><span class="built_in">NSInteger</span> minute = dateCmps.minute;</span><br><span class="line"><span class="built_in">NSInteger</span> secnds = dateCmps.second;</span><br></pre></td></tr></table></figure><h3 id="1-4-第四步：添加定时器"><a href="#1-4-第四步：添加定时器" class="headerlink" title="1.4. 第四步：添加定时器"></a>1.4. 第四步：添加定时器</h3><p>有了秒数和旋转度数，只需要添加一个定时器去刷新就可以了，定时器间隔为1s。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:timeInterval target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timeValueChanged:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">[timer fire];</span><br><span class="line">[[<span class="built_in">NSRunLoop</span> mainRunLoop] addTimer:timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器运行</span></span><br><span class="line">- (<span class="keyword">void</span>)timeValueChanged:(<span class="built_in">NSDictionary</span> *)userInfo &#123;</span><br><span class="line">    <span class="built_in">NSCalendar</span> *calendar = [<span class="built_in">NSCalendar</span> currentCalendar];</span><br><span class="line">    <span class="built_in">NSDateComponents</span> *dateCmps = [calendar components:<span class="built_in">NSCalendarUnitSecond</span> fromDate:[<span class="built_in">NSDate</span> date]];</span><br><span class="line">    <span class="built_in">NSInteger</span> secnds = dateCmps.second;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每一秒度数</span></span><br><span class="line">    <span class="built_in">NSInteger</span> anglePerSecnds = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 秒针弧度</span></span><br><span class="line">    <span class="built_in">CGFloat</span> secondsAngle = secnds * anglePerSecnds * M_PI / <span class="number">180</span>;</span><br><span class="line">    <span class="comment">// 秒针围绕z轴旋转</span></span><br><span class="line">    <span class="keyword">self</span>.secondsLayer.transform = <span class="built_in">CATransform3DMakeRotation</span>(secondsAngle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-第五步：完善其他指针"><a href="#1-5-第五步：完善其他指针" class="headerlink" title="1.5. 第五步：完善其他指针"></a>1.5. 第五步：完善其他指针</h3><p>时针和分针的思路与分针一样，分别按照自己的时间度数旋转。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/ 每一分度数</span><br><span class="line">NSInteger anglePerMinute = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// 分针弧度</span></span><br><span class="line">CGFloat minuteAngle = minute * anglePerMinute * M_PI / <span class="number">180</span>;</span><br><span class="line"><span class="comment">// 时针围绕z轴旋转</span></span><br><span class="line">self.minuteLayer.transform = CATransform3DMakeRotation(minuteAngle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一小时度数（每一格6度 * 一小时占用5格）</span></span><br><span class="line">NSInteger anglePerHour = <span class="number">30</span>;</span><br><span class="line"><span class="comment">// 时针弧度</span></span><br><span class="line">CGFloat hourAngle = hour * anglePerHour * M_PI / <span class="number">180</span>;</span><br><span class="line"><span class="comment">// 时针围绕z轴旋转</span></span><br><span class="line">self.hourLayer.transform = CATransform3DMakeRotation(hourAngle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h2><p><strong><code>DBClockView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DBClockView.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBClockView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表盘</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImage</span> *clockBackgroundImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DBClockView.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DBClockView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBClockView</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImageView</span> *clockBgView; <span class="comment">// 表盘背景图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CALayer</span> *centerLayer; <span class="comment">// 中心点</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CALayer</span> *secondsLayer; <span class="comment">// 秒针</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CALayer</span> *minuteLayer; <span class="comment">// 分针</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CALayer</span> *hourLayer; <span class="comment">// 时针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSTimer</span> *timer; <span class="comment">// 定时器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBClockView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</span><br><span class="line">    [<span class="keyword">super</span> awakeFromNib];</span><br><span class="line">    [<span class="keyword">self</span> initConfig];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> initConfig];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</span><br><span class="line">    [<span class="keyword">super</span> layoutSubviews];</span><br><span class="line">    <span class="keyword">self</span>.clockBgView.frame = <span class="keyword">self</span>.bounds;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 中心点</span></span><br><span class="line">    <span class="built_in">CGPoint</span> center = <span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.bounds.size.width * <span class="number">0.5</span>, <span class="keyword">self</span>.bounds.size.height * <span class="number">0.5</span>);;</span><br><span class="line">    <span class="keyword">self</span>.centerLayer.position = center;</span><br><span class="line">    <span class="keyword">self</span>.secondsLayer.position = center;</span><br><span class="line">    <span class="keyword">self</span>.minuteLayer.position = center;</span><br><span class="line">    <span class="keyword">self</span>.hourLayer.position = center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化子视图</span></span><br><span class="line">- (<span class="keyword">void</span>)initConfig &#123;</span><br><span class="line">    [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.clockBgView];</span><br><span class="line">    [<span class="keyword">self</span> initHour];</span><br><span class="line">    [<span class="keyword">self</span> initMinute];</span><br><span class="line">    [<span class="keyword">self</span> initSeconds];</span><br><span class="line">    [<span class="keyword">self</span> initCenter];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> startTimer:<span class="number">1.0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加定时器让表针不停旋转</span></span><br><span class="line">- (<span class="keyword">void</span>)startTimer:(<span class="built_in">NSTimeInterval</span>)timeInterval &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.timer) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.timer invalidate];</span><br><span class="line">        _timer = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:timeInterval target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timeValueChanged:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span>.timer fire];</span><br><span class="line">    [[<span class="built_in">NSRunLoop</span> mainRunLoop] addTimer:<span class="keyword">self</span>.timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表盘中心点</span></span><br><span class="line">- (<span class="keyword">void</span>)initCenter &#123;</span><br><span class="line">    <span class="built_in">CALayer</span> *layer = [<span class="built_in">CALayer</span> layer];</span><br><span class="line">    layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">6.0</span>, <span class="number">6.0</span>);</span><br><span class="line">    layer.cornerRadius = layer.bounds.size.width * <span class="number">0.5</span>;</span><br><span class="line">    layer.backgroundColor = [<span class="built_in">UIColor</span> blackColor].CGColor;</span><br><span class="line">    [<span class="keyword">self</span>.layer addSublayer:layer];</span><br><span class="line">    <span class="keyword">self</span>.centerLayer = layer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 秒针</span></span><br><span class="line">- (<span class="keyword">void</span>)initSeconds &#123;</span><br><span class="line">    <span class="built_in">CALayer</span> *layer = [<span class="built_in">CALayer</span> layer];</span><br><span class="line">    layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">90.0</span>);</span><br><span class="line">    layer.anchorPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">1.0</span>);</span><br><span class="line">    layer.backgroundColor = [<span class="built_in">UIColor</span> blackColor].CGColor;</span><br><span class="line">    layer.shadowOpacity = <span class="number">1.0</span>;</span><br><span class="line">    layer.shadowOffset = <span class="built_in">CGSizeMake</span>(<span class="number">2.0</span>, <span class="number">2.0</span>);</span><br><span class="line">    [<span class="keyword">self</span>.layer addSublayer:layer];</span><br><span class="line">    <span class="keyword">self</span>.secondsLayer = layer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分针</span></span><br><span class="line">- (<span class="keyword">void</span>)initMinute &#123;</span><br><span class="line">    <span class="built_in">CALayer</span> *layer = [<span class="built_in">CALayer</span> layer];</span><br><span class="line">    layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">80.0</span>);</span><br><span class="line">    layer.anchorPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">1.0</span>);</span><br><span class="line">    layer.backgroundColor = [<span class="built_in">UIColor</span> blackColor].CGColor;</span><br><span class="line">    layer.shadowOpacity = <span class="number">0.7</span>;</span><br><span class="line">    layer.shadowOffset = <span class="built_in">CGSizeMake</span>(<span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    [<span class="keyword">self</span>.layer addSublayer:layer];</span><br><span class="line">    <span class="keyword">self</span>.minuteLayer = layer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时针</span></span><br><span class="line">- (<span class="keyword">void</span>)initHour &#123;</span><br><span class="line">    <span class="built_in">CALayer</span> *layer = [<span class="built_in">CALayer</span> layer];</span><br><span class="line">    layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">60.0</span>);</span><br><span class="line">    layer.anchorPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">1.0</span>);</span><br><span class="line">    layer.backgroundColor = [<span class="built_in">UIColor</span> blackColor].CGColor;</span><br><span class="line">    layer.shadowOpacity = <span class="number">0.4</span>;</span><br><span class="line">    [<span class="keyword">self</span>.layer addSublayer:layer];</span><br><span class="line">    <span class="keyword">self</span>.hourLayer = layer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Private Method</span></span><br><span class="line"><span class="comment">// 定时器运行</span></span><br><span class="line">- (<span class="keyword">void</span>)timeValueChanged:(<span class="built_in">NSDictionary</span> *)userInfo &#123;</span><br><span class="line">    <span class="comment">// 获取当前时分秒</span></span><br><span class="line">    <span class="built_in">NSCalendar</span> *calendar = [<span class="built_in">NSCalendar</span> currentCalendar];</span><br><span class="line">    <span class="built_in">NSDateComponents</span> *dateCmps = [calendar components:<span class="built_in">NSCalendarUnitHour</span> | <span class="built_in">NSCalendarUnitMinute</span> | <span class="built_in">NSCalendarUnitSecond</span> fromDate:[<span class="built_in">NSDate</span> date]];</span><br><span class="line">    <span class="built_in">NSInteger</span> hour = dateCmps.hour;</span><br><span class="line">    <span class="built_in">NSInteger</span> minute = dateCmps.minute;</span><br><span class="line">    <span class="built_in">NSInteger</span> secnds = dateCmps.second;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每一秒度数</span></span><br><span class="line">    <span class="built_in">NSInteger</span> anglePerSecnds = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 秒针弧度</span></span><br><span class="line">    <span class="built_in">CGFloat</span> secondsAngle = secnds * anglePerSecnds * M_PI / <span class="number">180</span>;</span><br><span class="line">    <span class="comment">// 秒针围绕z轴旋转</span></span><br><span class="line">    <span class="keyword">self</span>.secondsLayer.transform = <span class="built_in">CATransform3DMakeRotation</span>(secondsAngle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每一分度数</span></span><br><span class="line">    <span class="built_in">NSInteger</span> anglePerMinute = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 分针弧度</span></span><br><span class="line">    <span class="built_in">CGFloat</span> minuteAngle = minute * anglePerMinute * M_PI / <span class="number">180</span>;</span><br><span class="line">    <span class="comment">// 时针围绕z轴旋转</span></span><br><span class="line">    <span class="keyword">self</span>.minuteLayer.transform = <span class="built_in">CATransform3DMakeRotation</span>(minuteAngle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每一小时度数（每一格6度 * 一小时占用5格）</span></span><br><span class="line">    <span class="built_in">NSInteger</span> anglePerHour = <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 时针弧度</span></span><br><span class="line">    <span class="built_in">CGFloat</span> hourAngle = hour * anglePerHour * M_PI / <span class="number">180</span>;</span><br><span class="line">    <span class="comment">// 时针围绕z轴旋转</span></span><br><span class="line">    <span class="keyword">self</span>.hourLayer.transform = <span class="built_in">CATransform3DMakeRotation</span>(hourAngle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Setter and Getter</span></span><br><span class="line">- (<span class="keyword">void</span>)setClockBackgroundImage:(<span class="built_in">UIImage</span> *)clockBackgroundImage &#123;</span><br><span class="line">    _clockBackgroundImage = clockBackgroundImage;</span><br><span class="line">    <span class="keyword">self</span>.clockBgView.image = clockBackgroundImage;</span><br><span class="line">    [<span class="keyword">self</span> layoutIfNeeded];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIImageView</span> *)clockBgView &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_clockBgView) &#123;</span><br><span class="line">        _clockBgView = [[<span class="built_in">UIImageView</span> alloc] init];</span><br><span class="line">        _clockBgView.contentMode = <span class="built_in">UIViewContentModeCenter</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _clockBgView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>ViewController使用</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    DBClockView *clockView = [[DBClockView alloc] init];</span><br><span class="line">    clockView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    clockView.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">240.0</span>, <span class="number">240.0</span>);</span><br><span class="line">    clockView.center = <span class="keyword">self</span>.view.center;</span><br><span class="line">    clockView.clockBackgroundImage = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"clock"</span>];</span><br><span class="line">    clockView.allowSlowMode = <span class="literal">YES</span>;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:clockView];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CALayer </tag>
            
            <tag> CATransform3D </tag>
            
            <tag> 时钟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】CALayer的认识</title>
      <link href="/2016/11/03/ios-layer/"/>
      <url>/2016/11/03/ios-layer/</url>
      
        <content type="html"><![CDATA[<p>在iOS中，按钮、文本框、图片等所有能看的见的和处理事件响应的基本都是<code>UIView</code>。但是<code>UIView</code>之所以能够显示到屏幕上，完全是因为它内部的图层（Layer)。</p><a id="more"></a><h2 id="一、CALayer介绍"><a href="#一、CALayer介绍" class="headerlink" title="一、CALayer介绍"></a>一、CALayer介绍</h2><p>在创建<code>UIView</code>对象时，<code>UIView</code>内部会自动创建一个图层，这个图层就是<code>CALayer</code>对象，通过<code>UIView</code>的<code>layer</code>属性可以访问到这个属性。<code>layer</code>属性从来不会是空的，而且官方把<code>UIView</code>描述为是图层的一个代理。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">CALayer</span> *layer;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/49rr2.png@normal" alt=""></p><p>当<code>UIView</code>需要显示到屏幕上时，会调用<code>drawRect:</code>方法进行绘图，并且会把所有内容都绘制到自己的图层上，绘图结束后，系统会把图层拷贝到屏幕上，所以我们就看到了<code>UIView</code>的内容。所以<code>UIView</code>本身不具备显示功能，是它内部的<code>layer</code>才有显示功能。</p><h3 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1. 基本使用"></a>1.1. 基本使用</h3><p>通过操作<code>CALayer</code>对象，可以很方便地调整<code>UIView</code>的一些外观属性。例如，阴影，圆角、边框、内容等。也可以给图层添加动画，很多动画都是基于图层实现的。</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.设置边框</span></span><br><span class="line"><span class="comment">// 1.1.设置边框颜色</span></span><br><span class="line"><span class="literal">self</span>.testView.<span class="symbol">layer</span>.borderColor = [UIColor blueColor].CGColor;</span><br><span class="line"><span class="comment">// 1.2.设置边框宽度</span></span><br><span class="line"><span class="literal">self</span>.testView.<span class="symbol">layer</span>.borderWidth = <span class="number">5.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.设置圆角</span></span><br><span class="line"><span class="literal">self</span>.testView.<span class="symbol">layer</span>.cornerRadius = <span class="literal">self</span>.testView.bounds.size.height/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.设置阴影</span></span><br><span class="line"><span class="comment">// 3.1.设置阴影不透明度（0~1，默认0）</span></span><br><span class="line"><span class="literal">self</span>.testView.<span class="symbol">layer</span>.shadowOpacity = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 3.2.设置阴影偏移量</span></span><br><span class="line"><span class="literal">self</span>.testView.<span class="symbol">layer</span>.shadowOffset = CGSizeMake(<span class="number">10.0</span>, <span class="number">10.0</span>);</span><br><span class="line"><span class="comment">// 3.3.设置阴影颜色</span></span><br><span class="line"><span class="literal">self</span>.testView.<span class="symbol">layer</span>.shadowColor = [UIColor orangeColor].CGColor;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/mugtb.png@normal" alt=""></p><p>给<code>UIImageView</code>添加同样的属性，看下效果：<br><img src="http://blog.idbeny.com/t52u8.png@normal" alt=""></p><p>为什么没有裁剪成圆呢？这是因为<code>UIImageView</code>的图片是在<code>layer</code>里面的<code>contents</code>上面的。而<code>cornerRadius</code>是操纵<code>layer</code>的，无法直接操纵<code>contents</code>上面的内容，所以看到的效果就是没有裁剪。</p><p>如果要对图片进行裁剪，需要手动的调用一个方法，把超过视图的所有内容都裁剪掉，但是这样也会把阴影也裁掉，因为阴影本身也是在视图外的。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">view.clipsToBounds</span> = <span class="literal">YES</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/k4enj.png@normal" alt=""></p><p>还有一个针对<code>layer</code>的裁剪方法，其实<code>clipsToBounds</code>本质也操作的<code>layer</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">view.layer.masksToBounds</span> = <span class="literal">YES</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-离屏渲染"><a href="#1-2-离屏渲染" class="headerlink" title="1.2. 离屏渲染"></a>1.2. 离屏渲染</h3><p>用上面的两种方法会造成离屏渲染，裁剪图像建议使用Quartz2D。</p><p><strong>什么是离屏渲染？</strong><br>处理图像分为CPU和GPU两部分，GPU是专门处理图像的。但是本应该交给CPU处理的事情交给了GPU处理，GPU又不擅长处理CPU的事情，所以GPU又开辟了一块新的内存专门处理CPU交代的事情。等处理完成后，GPU和CPU需要把结果合并到一起，在合并过程中比较消耗性能的，这就造成了离屏渲染。</p><p>真正造成离屏渲染的是<code>masksToBounds</code>。一两个视图的圆角处理可以忽略，但是如果一个<code>tableView</code>上大量使用<code>masksToBounds</code>就会造成卡顿，这时候使用Quartz2D就不会造成离屏渲染了，这也是<code>tableView</code>优化的一部分。</p><p>UI控件的位置和尺寸如果出现小数点可能会出现锯齿现象，这时候也会造成离屏渲染。所以要尽量避免出现小数点。</p><p>YY大神写的一篇文章非常深入透彻 -&gt; <a href="https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="noopener">https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/</a></p><h2 id="二、CATransform3D"><a href="#二、CATransform3D" class="headerlink" title="二、CATransform3D"></a>二、CATransform3D</h2><p><code>UIView</code>形变属性<code>transform</code>是<code>CGAffineTransform</code>类型。<code>CALayer</code>形变属性<code>transform</code>是<code>CATransform3D</code>类型，同样也是一个结构体（<code>CATransform3D</code>是四维方形矩阵）。</p><p>CA代表<code>CoreAnimation</code>框架，CG代表<code>CoreGraphics</code>框架。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> <span class="built_in">CATransform3D</span> transform;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="built_in">CA_BOXABLE</span> <span class="built_in">CATransform3D</span> <span class="built_in">CATransform3D</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="built_in">CATransform3D</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">CGFloat</span> m11, m12, m13, m14;</span><br><span class="line">  <span class="built_in">CGFloat</span> m21, m22, m23, m24;</span><br><span class="line">  <span class="built_in">CGFloat</span> m31, m32, m33, m34;</span><br><span class="line">  <span class="built_in">CGFloat</span> m41, m42, m43, m44;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>CALayer</code>的<code>transform</code>和<code>UIView</code>的用法很相似，只是参数不一样。</p><p>3D即代表是个三维空间，坐标系有x、y、z轴。<br><img src="http://blog.idbeny.com/yuv71.png@normal" alt=""></p><h3 id="2-1-旋转、平移、缩放"><a href="#2-1-旋转、平移、缩放" class="headerlink" title="2.1. 旋转、平移、缩放"></a>2.1. 旋转、平移、缩放</h3><h4 id="2-1-1-旋转"><a href="#2-1-1-旋转" class="headerlink" title="2.1.1. 旋转"></a>2.1.1. 旋转</h4><p><code>angle</code>是旋转角度，x、y、z分别代表围绕哪个坐标轴旋转。</p><p>绕哪个轴旋转就把对应坐标轴设为1，其他为0。</p><ul><li>绕x轴旋转：<code>(angle, 1, 0, 0)</code></li><li>绕y轴旋转：<code>(angle, 0, 1, 0)</code></li><li>绕z轴旋转：<code>(angle, 0, 0, 1)</code></li></ul><p><code>UIView</code>的<code>transform</code>旋转就是对根Layer进行z轴旋转。</p><p>注意：旋转操作会自动根据最短路径旋转（例如，围绕z轴旋转270°，会逆时针旋转90°；旋转180°时也是逆时针旋转的；旋转45°是顺时针旋转）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CATransform3D</span> <span class="built_in">CATransform3DMakeRotation</span> (<span class="built_in">CGFloat</span> angle, <span class="built_in">CGFloat</span> x, <span class="built_in">CGFloat</span> y, <span class="built_in">CGFloat</span> z);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CATransform3D</span> <span class="built_in">CATransform3DRotate</span> (<span class="built_in">CATransform3D</span> t, <span class="built_in">CGFloat</span> angle, <span class="built_in">CGFloat</span> x, <span class="built_in">CGFloat</span> y, <span class="built_in">CGFloat</span> z);</span><br></pre></td></tr></table></figure><h4 id="2-1-2-平移"><a href="#2-1-2-平移" class="headerlink" title="2.1.2. 平移"></a>2.1.2. 平移</h4><p>x、y分表代表二维偏移量，z代表层级，层级高会遮盖层级低的视图。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CATransform3D</span> <span class="built_in">CATransform3DMakeTranslation</span> (<span class="built_in">CGFloat</span> tx, <span class="built_in">CGFloat</span> ty, <span class="built_in">CGFloat</span> tz);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CATransform3D</span> <span class="built_in">CATransform3DTranslate</span> (<span class="built_in">CATransform3D</span> t, <span class="built_in">CGFloat</span> tx, <span class="built_in">CGFloat</span> ty, <span class="built_in">CGFloat</span> tz);</span><br></pre></td></tr></table></figure><h4 id="2-1-3-缩放"><a href="#2-1-3-缩放" class="headerlink" title="2.1.3. 缩放"></a>2.1.3. 缩放</h4><p>缩放操作的是x、y，z轴一般默认1。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CATransform3D</span> <span class="built_in">CATransform3DMakeScale</span> (<span class="built_in">CGFloat</span> sx, <span class="built_in">CGFloat</span> sy, <span class="built_in">CGFloat</span> sz);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CATransform3D</span> <span class="built_in">CATransform3DScale</span> (<span class="built_in">CATransform3D</span> t, <span class="built_in">CGFloat</span> sx, <span class="built_in">CGFloat</span> sy, <span class="built_in">CGFloat</span> sz)</span><br></pre></td></tr></table></figure><h4 id="2-1-4-KVC"><a href="#2-1-4-KVC" class="headerlink" title="2.1.4. KVC"></a>2.1.4. KVC</h4><p>以上操作还可以通过<code>KVC</code>进行设置：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithCATransform3D:<span class="built_in">CATransform3DMakeRotation</span>(M_PI_4, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)];</span><br><span class="line">[<span class="keyword">self</span>.testImgView.layer setValue:value forKeyPath:<span class="string">@"transform"</span>];</span><br></pre></td></tr></table></figure><p>使用<code>KVC</code>场景：主要用来做快速形变操作，即只有一个值的操作。<br>例：<br>只做x轴的平移操作：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">self.testImgView.layer</span> setValue:@(<span class="name">100</span>) forKeyPath:@<span class="string">"transform.translation.x"</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>只做缩放操作：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">self.testImgView.layer</span> setValue:@(<span class="name">1.2</span>) forKeyPath:@<span class="string">"transform.scale"</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>只做绕z轴旋转操作：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">self.testImgView.layer</span> setValue:@(<span class="name">M_PI</span>) forKeyPath:@<span class="string">"transform.rotation.z"</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="二、自定义CALayer"><a href="#二、自定义CALayer" class="headerlink" title="二、自定义CALayer"></a>二、自定义CALayer</h2><p><code>CALayer</code>的创建形式和<code>UIView</code>类似。</p><h3 id="2-1-创建CALayer"><a href="#2-1-创建CALayer" class="headerlink" title="2.1. 创建CALayer"></a>2.1. 创建CALayer</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CALayer *<span class="symbol">layer</span> = [CALayer <span class="symbol">layer</span>];</span><br><span class="line"><span class="symbol">layer</span>.backgroundColor = [UIColor redColor].CGColor;</span><br><span class="line"><span class="symbol">layer</span>.frame = CGRectMake(<span class="number">20.0</span>, <span class="number">20.0</span>, <span class="number">100.0</span>, <span class="number">100.0</span>);</span><br><span class="line">[<span class="literal">self</span>.view.<span class="symbol">layer</span> addSublayer:<span class="symbol">layer</span>];</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/zoifb.png@normal" alt=""></p><h3 id="2-2-CALayer的内容"><a href="#2-2-CALayer的内容" class="headerlink" title="2.2. CALayer的内容"></a>2.2. CALayer的内容</h3><p><code>CALayer</code>的内容填充最具代表性的是图片，<code>CALayer</code>的<code>contents</code>属性就是对内容进行填充，默认为空。</p><p>图片会自动填充layer，不需要设置大小。但是需要<code>CGImageRef</code>类型，因此需要对<code>UIImage</code>进行转换。</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CALayer *<span class="symbol">layer</span> = [CALayer <span class="symbol">layer</span>];</span><br><span class="line"><span class="symbol">layer</span>.backgroundColor = [UIColor redColor].CGColor;</span><br><span class="line"><span class="symbol">layer</span>.frame = CGRectMake(<span class="number">20.0</span>, <span class="number">20.0</span>, <span class="number">100.0</span>, <span class="number">100.0</span>);</span><br><span class="line"><span class="symbol">layer</span>.contents =(<span class="symbol">id</span>)[UIImage imageNamed:@<span class="string">"avatar"</span>].CGImage;</span><br><span class="line">[<span class="literal">self</span>.view.<span class="symbol">layer</span> addSublayer:<span class="symbol">layer</span>];</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/tksgb.png@normal" alt=""></p><h3 id="2-3-扩展"><a href="#2-3-扩展" class="headerlink" title="2.3. 扩展"></a>2.3. 扩展</h3><p>为什么<code>CALayer</code>的背景色和内容需要转换为<code>CoreGraphics</code>支持的类型。</p><ul><li><code>CALayer</code>是定义在<code>QuartzCore</code>框架中的；</li><li><code>CGImageRef</code>、<code>CGColorRef</code>是定义在<code>CoreGraphics</code>框架中的；</li><li><code>UIColor</code>、<code>UIImage</code>定义在<code>UIKit</code>框架中。</li></ul><p><code>QuartzCore</code>和<code>CoreGraphics</code>两个框架是跨平台的（MaxOS和iOS），但是<code>UIKit</code>只能在iOS中使用。为了保证可移植性，<code>QuartzCore</code>只能使用<code>CGImageRef</code>、<code>CGColorRef</code>。</p><h2 id="三、CALayer和UIView的区别"><a href="#三、CALayer和UIView的区别" class="headerlink" title="三、CALayer和UIView的区别"></a>三、CALayer和UIView的区别</h2><p>通过<code>CALayer</code>能够做出和<code>UIImageView</code>一样的界面效果。既然<code>CALayer</code>和<code>UIView</code>都能实现实现相同的效果，那开发中选择谁更好呢？</p><p><code>CALayer</code>继承自<code>NSObject</code>，而<code>UIView</code>继承自<code>UIResponder</code>。所以<code>UIView</code>比<code>CALayer</code>多了一个事件处理的能力，也就是说<code>CALayer</code>不能处理用户的触摸事件。</p><p>如果显示的内容需要和用户进行交互，使用<code>UIView</code>；如果不需要交互，两者都可以，但建议选择<code>CALayer</code>，因为 <strong><code>CALayer</code>的性能更好，更加轻量级</strong>。</p><p>反转，反转，实际开发中即使不需要事件处理，也建议使用<code>UIView</code>，不是自相矛盾么？因为 <strong><code>UIView</code>可扩展性更好，开发效率会更高</strong>。</p><h2 id="三、position和anchorPoint的作用"><a href="#三、position和anchorPoint的作用" class="headerlink" title="三、position和anchorPoint的作用"></a>三、position和anchorPoint的作用</h2><p><code>position</code>和<code>anchorPoint</code>是<code>CALayer</code>的两个非常重要的属性。</p><p><code>position</code>用来设置<code>CALayer</code>在父层中的位置。以父层左上角为原点坐标<code>(0，0)</code>。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>CGPoint position;</span><br></pre></td></tr></table></figure><p><code>anchorPoint</code>是锚点（定位点），决定着<code>CALayer</code>的哪个点会在<code>position</code>属性所指的位置。锚点的坐标系是自己本身，以自己左上角为原点坐标<code>(0，0)</code>，取值范围是<code>[0, 1]</code>，默认值是<code>(0.5, 0.5)</code>。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property CGPoint <span class="built_in">anchor</span>Point;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/kjykh.png@normal" alt=""></p><p><strong><code>position</code>和<code>anchorPoint</code>是始终重合的。</strong></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>场景：绘制一个红色layer，查看<code>position</code>和<code>anchorPoint</code>坐标点。</p><h4 id="步骤一：初始化位置"><a href="#步骤一：初始化位置" class="headerlink" title="步骤一：初始化位置"></a>步骤一：初始化位置</h4><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CALayer *<span class="symbol">layer</span> = [CALayer <span class="symbol">layer</span>];</span><br><span class="line"><span class="symbol">layer</span>.backgroundColor = [UIColor redColor].CGColor;</span><br><span class="line"><span class="symbol">layer</span>.bounds = CGRectMake(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">100.0</span>, <span class="number">100.0</span>);</span><br><span class="line">[<span class="literal">self</span>.view.<span class="symbol">layer</span> addSublayer:<span class="symbol">layer</span>];</span><br><span class="line">NSLog(@<span class="string">"%@-%@"</span>, NSStringFromCGPoint(<span class="symbol">layer</span>.position), NSStringFromCGPoint(<span class="symbol">layer</span>.anchorPoint));</span><br><span class="line"><span class="comment">// 输出：&#123;0, 0&#125;-&#123;0.5, 0.5&#125;</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/vc843.png@normal" alt=""></p><h4 id="步骤二：修改position"><a href="#步骤二：修改position" class="headerlink" title="步骤二：修改position"></a>步骤二：修改<code>position</code></h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">_layer</span>.</span></span>position = <span class="constructor">CGPointMake(50.0, 50.0)</span>;</span><br><span class="line">    <span class="constructor">NSLog(@<span class="string">"%@-%@"</span>, NSStringFromCGPoint(<span class="params">_layer</span>.<span class="params">position</span>)</span>, <span class="constructor">NSStringFromCGPoint(<span class="params">_layer</span>.<span class="params">anchorPoint</span>)</span>);</span><br><span class="line">    <span class="comment">// 输出：&#123;50, 50&#125;-&#123;0.5, 0.5&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/yr70l.png@normal" alt=""></p><h4 id="步骤三：修改anchorPoint"><a href="#步骤三：修改anchorPoint" class="headerlink" title="步骤三：修改anchorPoint"></a>步骤三：修改<code>anchorPoint</code></h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)touchesBegan:(NSSet<span class="variable">&lt;UITouch *&gt;</span> *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    _layer.<span class="built_in">anchor</span>Point = CGPointMake(<span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    NSLog(@<span class="string">"%@-%@"</span>, NSStringFromCGPoint(_layer.position), NSStringFromCGPoint(_layer.<span class="built_in">anchor</span>Point));</span><br><span class="line">    // 输出：&#123;<span class="number">50</span>, <span class="number">50</span>&#125;-&#123;<span class="number">0.5</span>, <span class="number">0.5</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/yr70l.png@normal" alt=""></p><p>通过输出发现：<code>position</code>和<code>anchorPoint</code>始终在一个点上，无论修改哪个属性值都会让layer的位置发生改变。默认情况下，layer相对父layer的左上角坐标点是<code>（layer.position.x-layer.width/2, layer.position.y-layer.height/2)</code>，<code>UIView</code>的<code>center</code>就是内部layer的<code>position</code>。<code>anchorPoint</code>的可移动范围就是layer的自身大小，</p><h2 id="四、隐式动画"><a href="#四、隐式动画" class="headerlink" title="四、隐式动画"></a>四、隐式动画</h2><p>每一个<code>UIView</code>内部都默认关联着一个<code>CALayer</code>，我们称这个layer为<code>RootLayer</code>（根层）。所有非<code>RootLayer</code>（手动创建的<code>CALayer</code>对象）都存在隐式动画。</p><p>通过上面的案例发现，修改自定义layer的部分属性时会有一个动画效果，这个效果是系统自己添加的，这个动画就是隐式动画。属性是否携带动画，苹果在文档注释中都有描述，携带<code>Animatable</code>的就是会产生隐式动画。常见的会产生隐式动画的属性有<code>bounds</code>、<code>backgroundColor</code>、<code>position</code>。</p><p><strong>取消隐式动画</strong><br>隐式动画的本质是封装的一个事务，如果要取消隐式动画只需要把事务取消就可以了。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[CATransaction setDisableActions:NO]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>把需要取消隐式动画的属性操作放在上面代码的后面就可以了。</p><p><strong>包装隐式动画</strong><br>如果需要部分属性执行隐式动画，只需要使用事务把这部分属性上下包住就行了。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.开启事务</span></span><br><span class="line">[<span class="built_in">CATransaction</span> begin];</span><br><span class="line"><span class="comment">// 2.事务有效</span></span><br><span class="line">[<span class="built_in">CATransaction</span> setDisableActions:<span class="literal">NO</span>];</span><br><span class="line"><span class="comment">// 3.动画执行时长</span></span><br><span class="line">[<span class="built_in">CATransaction</span> setAnimationDuration:<span class="number">5.0</span>];</span><br><span class="line"><span class="comment">// 4.提交事务</span></span><br><span class="line">[<span class="built_in">CATransaction</span> commit];</span><br></pre></td></tr></table></figure><p>例：部分属性添加隐式动画</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐式动画时长</span></span><br><span class="line">[<span class="built_in">CATransaction</span> setAnimationDuration:<span class="number">3.0</span>];</span><br><span class="line"><span class="comment">// layer不需要隐式动画</span></span><br><span class="line">[<span class="built_in">CATransaction</span> setDisableActions:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为背景色添加隐式动画，并修改动画时长</span></span><br><span class="line">[<span class="built_in">CATransaction</span> begin];</span><br><span class="line">[<span class="built_in">CATransaction</span> setAnimationDuration:<span class="number">5.0</span>];</span><br><span class="line">[<span class="built_in">CATransaction</span> setDisableActions:<span class="literal">NO</span>];</span><br><span class="line">_layer.backgroundColor = [<span class="built_in">UIColor</span> blueColor].CGColor;</span><br><span class="line">[<span class="built_in">CATransaction</span> commit];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为圆角添加隐式动画</span></span><br><span class="line">[<span class="built_in">CATransaction</span> begin];</span><br><span class="line">[<span class="built_in">CATransaction</span> setDisableActions:<span class="literal">NO</span>];</span><br><span class="line">_layer.cornerRadius = <span class="number">50.0</span>;</span><br><span class="line">[<span class="built_in">CATransaction</span> commit];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平移就没有隐式动画</span></span><br><span class="line">_layer.position = <span class="built_in">CGPointMake</span>(<span class="number">150.0</span>, <span class="number">150.0</span>);</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/pmt88.gif@normal" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CALayer </tag>
            
            <tag> CATransform3D </tag>
            
            <tag> UIView </tag>
            
            <tag> 隐式动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Quartz 2D之手势解锁</title>
      <link href="/2016/10/19/ios-quartz2d-gesturelock/"/>
      <url>/2016/10/19/ios-quartz2d-gesturelock/</url>
      
        <content type="html"><![CDATA[<p>目前电子设备的密码基本有四大类：字符密码、手势解锁、指纹密码、人脸识别。</p><a id="more"></a><p>字符密码无非就是各种字符按照一定顺序组在一起，在产品中几乎都可以看到他的身影。指纹密码和人脸识别需要硬件设备的支持，不是软件开发人员能够控制的。手势解锁其实是一种特殊的字符密码，每一个按钮代码一个字符，一共九个字符，按照设定的规则连接在一起就组成了一串字符。</p><h2 id="一、手势密码的逻辑"><a href="#一、手势密码的逻辑" class="headerlink" title="一、手势密码的逻辑"></a>一、手势密码的逻辑</h2><ol><li>自定义view，使用九宫格排布九个按钮，并把按钮放在自定义view上；</li><li>监听view的手势事件，当点击view时判断触摸点是否在按钮上；</li><li>如果点击事件在按钮上就把按钮的状态变为高亮状态，并把按钮放到选中栈中，否则不做任何处理；</li><li>当滑动事件发生时，判断滑动轨迹是否在按钮范围内；</li><li>如果滑动轨迹在按钮范围内，就把按钮的状态变为高亮状态，并把按钮放到选中栈中，否则不做任何处理；</li><li>以第一个高亮按钮为出发点绘制直线，按照选中栈中的顺序依次绘制；</li><li>当连线按钮达到限制条件时（默认选中5个），把每一个按钮绑定的数字组成字符串通知给代理；</li><li>当取消事件发生时，把已选按钮状态恢复到之前未高亮状态。</li></ol><h2 id="二、完整代码及效果"><a href="#二、完整代码及效果" class="headerlink" title="二、完整代码及效果"></a>二、完整代码及效果</h2><p><strong>UI界面</strong><br><img src="http://blog.idbeny.com/2uzwd.png@normal" alt=""></p><p><strong>效果预览</strong><br><img src="http://blog.idbeny.com/uvaru.gif@normal" alt=""></p><p><strong><code>ViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DBGestureLockView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">DBGestureLockViewDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> DBGestureLockView *gestureLockView;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 提示语</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *hintLabel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kInitPwdKey = <span class="string">@"initPwd"</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.gestureLockView.delegate = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *initPwd = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] objectForKey:kInitPwdKey];</span><br><span class="line">    <span class="keyword">if</span> (!initPwd) &#123;</span><br><span class="line">        <span class="keyword">self</span>.hintLabel.text = <span class="string">@"请设置初始化密码"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.hintLabel.text = <span class="string">@"请解锁"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - DBGestureLockViewDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)gestureLockViewDidEnd:(<span class="built_in">NSString</span> *)result &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *initPwd = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] objectForKey:kInitPwdKey];</span><br><span class="line">    <span class="keyword">if</span> (!initPwd) &#123; <span class="comment">// 首次输入密码</span></span><br><span class="line">        <span class="keyword">if</span> (result.length !=<span class="number">0</span> &amp;&amp; result.length == <span class="keyword">self</span>.gestureLockView.allowSelectedCount) &#123;</span><br><span class="line">            [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setObject:result forKey:kInitPwdKey];</span><br><span class="line">            <span class="keyword">self</span>.hintLabel.text = <span class="string">@"密码设置完成"</span>;</span><br><span class="line">            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1.5</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="keyword">self</span>.hintLabel.text = <span class="literal">nil</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.length != <span class="number">0</span> &amp;&amp; [result isEqualToString:initPwd]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.hintLabel.text = <span class="string">@"恭喜，解锁成功"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.hintLabel.text = <span class="string">@"密码错误，请重试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong><code>DBGestureLockView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DBGestureLockView.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DBGestureLockViewDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手势结束后调用</span></span><br><span class="line"><span class="comment"> * @param result 手势密码结果（0~9数字组成）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)gestureLockViewDidEnd:(<span class="built_in">NSString</span> *)result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBGestureLockView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;DBGestureLockViewDelegate&gt; delegate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 允许选择数（密码位数），默认5位数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> allowSelectedCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DBGestureLockView.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DBGestureLockView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBGestureLockView</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *_itemsArray; <span class="comment">// 所有按钮</span></span><br><span class="line">    <span class="built_in">CGPoint</span> _curPoint; <span class="comment">// 当前触摸点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前选中的按钮</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *selectedItemsArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBGestureLockView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</span><br><span class="line">    [<span class="keyword">super</span> awakeFromNib];</span><br><span class="line">    [<span class="keyword">self</span> initSubviews];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> initSubviews];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化子视图</span></span><br><span class="line">- (<span class="keyword">void</span>)initSubviews &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *itemsArr = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">UIButton</span> *btn = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">        btn.tag = i;</span><br><span class="line">        [btn setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"gesture_node_normal"</span>] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">        [btn setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"gesture_node_selected"</span>] forState:<span class="built_in">UIControlStateSelected</span>];</span><br><span class="line">        [btn setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"gesture_node_selected"</span>] forState:<span class="built_in">UIControlStateHighlighted</span>];</span><br><span class="line">        btn.userInteractionEnabled = <span class="literal">NO</span>;</span><br><span class="line">        [itemsArr addObject:btn];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:btn];</span><br><span class="line">    &#125;</span><br><span class="line">    _itemsArray = itemsArr;</span><br><span class="line">    <span class="keyword">self</span>.allowSelectedCount = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</span><br><span class="line">    [<span class="keyword">super</span> layoutSubviews];</span><br><span class="line">    <span class="built_in">NSInteger</span> column = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> item_w = <span class="number">60.0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> item_h = <span class="number">60.0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> item_x = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> item_y = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> item_space = (<span class="keyword">self</span>.bounds.size.width - column * item_w) / (column - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; _itemsArray.count; i++) &#123;</span><br><span class="line">        <span class="built_in">UIButton</span> *btn = _itemsArray[i];</span><br><span class="line">        item_x = i % column * (item_w + item_space);</span><br><span class="line">        item_y = i / column * (item_h + item_space);</span><br><span class="line">        btn.frame = <span class="built_in">CGRectMake</span>(item_x, item_y, item_w, item_h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> curPoint = [<span class="keyword">self</span> getCurrentPointWithTouches:touches];</span><br><span class="line">    <span class="built_in">UIButton</span> *btn = [<span class="keyword">self</span> itemContainsPoint:curPoint];</span><br><span class="line">    <span class="keyword">if</span> (btn) &#123;</span><br><span class="line">        btn.selected = <span class="literal">YES</span>;</span><br><span class="line">        [<span class="keyword">self</span>.selectedItemsArray addObject:btn];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesMoved:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> curPoint = [<span class="keyword">self</span> getCurrentPointWithTouches:touches];</span><br><span class="line">    _curPoint = curPoint;</span><br><span class="line">    <span class="built_in">UIButton</span> *btn = [<span class="keyword">self</span> itemContainsPoint:curPoint];</span><br><span class="line">    <span class="keyword">if</span> (btn &amp;&amp; btn.selected == <span class="literal">NO</span> &amp;&amp; <span class="keyword">self</span>.selectedItemsArray.count &lt; <span class="keyword">self</span>.allowSelectedCount) &#123;</span><br><span class="line">        btn.selected = <span class="literal">YES</span>;</span><br><span class="line">        [<span class="keyword">self</span>.selectedItemsArray addObject:btn];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesEnded:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *result = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIButton</span> *btn <span class="keyword">in</span> <span class="keyword">self</span>.selectedItemsArray) &#123;</span><br><span class="line">        btn.selected = <span class="literal">NO</span>;</span><br><span class="line">        [result appendString:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld"</span>, btn.tag]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.delegate &amp;&amp; [<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(gestureLockViewDidEnd:)]) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.delegate gestureLockViewDidEnd:result];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.selectedItemsArray removeAllObjects];</span><br><span class="line">    _curPoint = <span class="built_in">CGPointZero</span>;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前触摸点</span></span><br><span class="line">- (<span class="built_in">CGPoint</span>)getCurrentPointWithTouches:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches &#123;</span><br><span class="line">    <span class="built_in">UITouch</span> *curTouch = [touches anyObject];</span><br><span class="line">    <span class="built_in">CGPoint</span> curPoint = [curTouch locationInView:<span class="keyword">self</span>];</span><br><span class="line">    <span class="keyword">return</span> curPoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断触摸点是否在btn范围内</span></span><br><span class="line">- (<span class="built_in">UIButton</span> *)itemContainsPoint:(<span class="built_in">CGPoint</span>)point &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIButton</span> *btn <span class="keyword">in</span> _itemsArray) &#123;</span><br><span class="line">        <span class="built_in">BOOL</span> isInside = <span class="built_in">CGRectContainsPoint</span>(btn.frame, point);</span><br><span class="line">        <span class="keyword">if</span> (isInside) &#123;</span><br><span class="line">            <span class="keyword">return</span> btn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="comment">// 控制台警告：[Unknown process name] CGPathAddLineToPoint: no current point.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.selectedItemsArray.count == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建路径</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    <span class="comment">// 第一个选中的按钮作为起点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="keyword">self</span>.selectedItemsArray.count; i++) &#123;</span><br><span class="line">        <span class="built_in">UIButton</span> *btn = <span class="keyword">self</span>.selectedItemsArray[i];</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            [path moveToPoint:btn.center];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [path addLineToPoint:btn.center];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加跟随手指移动的线</span></span><br><span class="line">    [path addLineToPoint:_curPoint];</span><br><span class="line">    <span class="comment">// 上下文状态</span></span><br><span class="line">    [[<span class="built_in">UIColor</span> systemTealColor] set];</span><br><span class="line">    path.lineWidth = <span class="number">8.0</span>;</span><br><span class="line">    path.lineJoinStyle = kCGLineCapRound;</span><br><span class="line">    <span class="comment">// 绘制路径</span></span><br><span class="line">    [path stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Setter and Getter</span></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)selectedItemsArray &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_selectedItemsArray) &#123;</span><br><span class="line">        _selectedItemsArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _selectedItemsArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Quartz2D </tag>
            
            <tag> UIBezierPath </tag>
            
            <tag> 手势解锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Quartz 2D之画板</title>
      <link href="/2016/10/06/ios-quartz2d-drawboard/"/>
      <url>/2016/10/06/ios-quartz2d-drawboard/</url>
      
        <content type="html"><![CDATA[<p>画板听起来很难，其实做起来很简单。主要很多人不明白思路，所以觉得难以入手。</p><a id="more"></a><p>场景：实现清除、撤销、重做、照片、保存、颜色、线宽等功能的画板。</p><h2 id="一、功能开发流程"><a href="#一、功能开发流程" class="headerlink" title="一、功能开发流程"></a>一、功能开发流程</h2><h3 id="1-1-UI使用storyboard进行快速搭建"><a href="#1-1-UI使用storyboard进行快速搭建" class="headerlink" title="1.1. UI使用storyboard进行快速搭建"></a>1.1. UI使用storyboard进行快速搭建</h3><p><img src="http://blog.idbeny.com/kwarn.png@normal" alt=""></p><h3 id="1-2-自定义绘图区域"><a href="#1-2-自定义绘图区域" class="headerlink" title="1.2. 自定义绘图区域"></a>1.2. 自定义绘图区域</h3><p>画板功能相对来说比较聚合，所有的功能最终都是通过<code>drawRect</code>绘制到画板上的，同时为了方便其他项目使用，我们尽量把功能都集成在一个画板上。</p><p>画板使用手势计算路径会更加合理高效，所以我们使用滑动手势来绘制。</p><p><strong><code>DBDrawboardView.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBDrawboardView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</span><br><span class="line">    [<span class="keyword">super</span> awakeFromNib];</span><br><span class="line">    [<span class="keyword">self</span> initConfig];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> initConfig];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化配置</span></span><br><span class="line">- (<span class="keyword">void</span>)initConfig &#123;</span><br><span class="line">    <span class="comment">// 添加滑动手势</span></span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGestureEventHandle:)];</span><br><span class="line">    [<span class="keyword">self</span> addGestureRecognizer:panGesture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑动手势事件处理</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureEventHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="1-3-基本线条绘制"><a href="#1-3-基本线条绘制" class="headerlink" title="1.3. 基本线条绘制"></a>1.3. 基本线条绘制</h3><p>线条的绘制使用贝塞尔曲线，只需要两个点就可以连成一条直线。当两个点之间的距离很小的时候（颗粒度）就会觉得线条很自然。</p><p>第一步，先在手势开始的时候创建一个贝塞尔曲线（每次手势只会创建一次），并记录起点；</p><p>第二步，手势状态发生改变时，把手势移动的位置点拼接到曲线路径上，最后渲染就行了。</p><p><strong><code>DBDrawboardView.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBDrawboardView</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录当前操作路径</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIBezierPath</span> *path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBDrawboardView</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑动手势事件处理</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureEventHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> current_point = [gesture locationInView:gesture.view];</span><br><span class="line">    <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class="line">        <span class="comment">// 1.添加路径起点</span></span><br><span class="line">        <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">        [path moveToPoint:current_point];</span><br><span class="line">        <span class="comment">// 2.记录当前操作路径</span></span><br><span class="line">        <span class="keyword">self</span>.path = path;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class="line">        <span class="comment">// 3.拼接曲线路径</span></span><br><span class="line">        [<span class="keyword">self</span>.path addLineToPoint:current_point];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.绘制到画板上</span></span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制</span></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    [<span class="keyword">self</span>.path stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>通过上面的简单几行代码，就可以绘制出基本线条了。但是每次只能绘制一条连续的线条，正常画板是可以绘制不同状态多个线条的，其实只需要添加一个路径栈就行。</p><h3 id="1-4-路径栈"><a href="#1-4-路径栈" class="headerlink" title="1.4. 路径栈"></a>1.4. 路径栈</h3><p>使用栈来保存每一条路径，等需要绘制的时候，从栈底依次取出。OC中最适合的容器栈就是数组了。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存历史栈</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *pathArray;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑动手势事件处理</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureEventHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> current_point = [gesture locationInView:gesture.view];</span><br><span class="line">    <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class="line">        <span class="comment">// 1.添加路径起点</span></span><br><span class="line">        <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">        [path moveToPoint:current_point];</span><br><span class="line">        <span class="comment">// 2.记录当前操作路径</span></span><br><span class="line">        <span class="keyword">self</span>.path = path;</span><br><span class="line">        <span class="comment">// 3.保存到历史栈</span></span><br><span class="line">        [<span class="keyword">self</span>.pathArray addObject:path];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class="line">        <span class="comment">// 4.拼接曲线路径</span></span><br><span class="line">        [<span class="keyword">self</span>.path addLineToPoint:current_point];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.绘制到画板上</span></span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制</span></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIBezierPath</span> *path <span class="keyword">in</span> <span class="keyword">self</span>.pathArray) &#123;</span><br><span class="line">        [path stroke];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.4和1.3的diff：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *pathArray;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">self</span>.pathArray addObject:path];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">UIBezierPath</span> *path <span class="keyword">in</span> <span class="keyword">self</span>.pathArray) &#123;</span><br><span class="line">    [path stroke];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，整个画板的基础功能就算完成了，只需要把其他高级功能完善。</p><h3 id="1-5-设置颜色和线宽"><a href="#1-5-设置颜色和线宽" class="headerlink" title="1.5. 设置颜色和线宽"></a>1.5. 设置颜色和线宽</h3><p>颜色和线宽在自定义的画板view内部实现后，只需要对外提供接口。由于<code>UIBezierPath</code>不支持设置线条颜色，所以我们需要新建一个子类扩展一个颜色属性。</p><p><strong><code>DBDrawboardView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DBDrawboardView.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBDrawboardView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线宽，默认1.0</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> lineWidth;</span><br><span class="line"><span class="comment">// 颜色，默认黑色</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *lineColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBDrawBezierPath</span> : <span class="title">UIBezierPath</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *lineColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DBDrawboardView.m</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBDrawboardView</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录当前操作路径</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DBDrawBezierPath *path;</span><br><span class="line"><span class="comment">// 保存历史栈</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *pathArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBDrawBezierPath</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化配置</span></span><br><span class="line">- (<span class="keyword">void</span>)initConfig &#123;</span><br><span class="line">    <span class="comment">// 添加滑动手势</span></span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGestureEventHandle:)];</span><br><span class="line">    [<span class="keyword">self</span> addGestureRecognizer:panGesture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置默认状态</span></span><br><span class="line">    <span class="keyword">self</span>.lineColor = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">    <span class="keyword">self</span>.lineWidth = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑动手势事件处理</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureEventHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> current_point = [gesture locationInView:gesture.view];</span><br><span class="line">    <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class="line">        <span class="comment">// 1.添加路径起点</span></span><br><span class="line">        DBDrawBezierPath *path = [DBDrawBezierPath bezierPath];</span><br><span class="line">        [path moveToPoint:current_point];</span><br><span class="line">        <span class="comment">// 2.设置上下文状态</span></span><br><span class="line">        path.lineJoinStyle = kCGLineJoinRound;</span><br><span class="line">        path.lineCapStyle = kCGLineCapRound;</span><br><span class="line">        path.lineColor = <span class="keyword">self</span>.lineColor;</span><br><span class="line">        path.lineWidth = <span class="keyword">self</span>.lineWidth;</span><br><span class="line">        <span class="comment">// 3.记录当前操作路径</span></span><br><span class="line">        <span class="keyword">self</span>.path = path;</span><br><span class="line">        <span class="comment">// 4.保存到历史栈</span></span><br><span class="line">        [<span class="keyword">self</span>.pathArray addObject:path];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class="line">        <span class="comment">// 5.拼接曲线路径</span></span><br><span class="line">        [<span class="keyword">self</span>.path addLineToPoint:current_point];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制</span></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="keyword">for</span> (DBDrawBezierPath *path <span class="keyword">in</span> <span class="keyword">self</span>.pathArray) &#123;</span><br><span class="line">        [path.lineColor set];</span><br><span class="line">        [path stroke];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="1-6-橡皮擦"><a href="#1-6-橡皮擦" class="headerlink" title="1.6. 橡皮擦"></a>1.6. 橡皮擦</h3><p>橡皮擦是真的没有什么要说的，就是一个和画板背景色一样的路径。会Photoshop的同学应该不陌生，毕竟橡皮擦掉的东西也是可以撤回的。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 橡皮擦</span></span><br><span class="line">- (<span class="literal">void</span>)eraser &#123;</span><br><span class="line">    <span class="built_in">self</span>.lineColor = <span class="built_in">self</span>.backgroundColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-清空"><a href="#1-7-清空" class="headerlink" title="1.7. 清空"></a>1.7. 清空</h3><p>把当前路径栈元素清空，重新绘制。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[self.pathArray removeAllObjects]</span><span class="comment">;</span></span><br><span class="line"><span class="section">[self setNeedsDisplay]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="1-8-撤回和重做"><a href="#1-8-撤回和重做" class="headerlink" title="1.8. 撤回和重做"></a>1.8. 撤回和重做</h3><p>同样可以对比Photoshop的历史记录面板，撤回的时候可以重做，重做后还可以撤回，重做的思路和撤回基本一致，一个操作的是当前路径栈，一个操作的移除栈。但是撤回或重做的时候，不管层级关系是怎样的，只要有任何影响画板重绘的操作，重做都会失效。</p><h4 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h4><p>把路径栈栈顶的路径去除，同时把该路径添加到移除栈中，重新绘制。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.pathArray.<span class="built_in">count</span> != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.把最后一个路径移入到移除栈中</span></span><br><span class="line">    [<span class="keyword">self</span>.removeArray addObject:<span class="keyword">self</span>.pathArray.lastObject];</span><br><span class="line">    <span class="comment">// 2.把路径从当前栈中移除</span></span><br><span class="line">    [<span class="keyword">self</span>.pathArray removeLastObject];</span><br><span class="line">    <span class="comment">// 3.重绘</span></span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重做"><a href="#重做" class="headerlink" title="重做"></a>重做</h4><p>把移除栈中的栈顶路径移除，并压入到当前栈，重新绘制。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.removeArray.<span class="built_in">count</span> != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.把移除栈中的最后一个路径移入到当前栈中</span></span><br><span class="line">    [<span class="keyword">self</span>.pathArray addObject:<span class="keyword">self</span>.removeArray.lastObject];</span><br><span class="line">    <span class="comment">// 2.把路径从移除栈中移除</span></span><br><span class="line">    [<span class="keyword">self</span>.removeArray removeLastObject];</span><br><span class="line">    <span class="comment">// 3.重绘</span></span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是仅仅这样做还是有问题的，上面提到其他任何操作都会影响重做是否有效。所以我们需要记录下每个功能的状态，更新重做功能的时效性。并且橡皮擦之后有清空操作，画板颜色如果没有调整，会看不到绘制的内容。</p><h3 id="1-9-优化"><a href="#1-9-优化" class="headerlink" title="1.9. 优化"></a>1.9. 优化</h3><p>新建一个记录画板不同绘制状态的变量。每次操作都记录对应状态，然后及时更新画板就行了。</p><p><strong><code>DBDrawboardView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DBDrawboardView.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, DBDrawboardDrawState) &#123;</span><br><span class="line">    DBDrawboardDrawStateNormal, <span class="comment">// 普通绘制</span></span><br><span class="line">    DBDrawboardDrawStateClear, <span class="comment">// 清空</span></span><br><span class="line">    DBDrawboardDrawStateUndo, <span class="comment">// 撤销</span></span><br><span class="line">    DBDrawboardDrawStateRedo, <span class="comment">// 重做</span></span><br><span class="line">    DBDrawboardDrawStateEraser <span class="comment">// 橡皮擦</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBDrawboardView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线宽，默认1.0</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> lineWidth;</span><br><span class="line"><span class="comment">// 颜色，默认黑色</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *lineColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 清除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)clear;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 撤销</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)undo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 重做</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)redo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 橡皮擦</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)eraser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBDrawBezierPath</span> : <span class="title">UIBezierPath</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *lineColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DBDrawboardView.m</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBDrawboardView</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录当前操作路径</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DBDrawBezierPath *path;</span><br><span class="line"><span class="comment">// 保存历史栈</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *pathArray;</span><br><span class="line"><span class="comment">// 移除保存栈</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *removeArray;</span><br><span class="line"><span class="comment">// 当前绘制状态</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) DBDrawboardDrawState currentState;</span><br><span class="line"><span class="comment">// 正常绘制颜色</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *normalColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBDrawboardView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</span><br><span class="line">    [<span class="keyword">super</span> awakeFromNib];</span><br><span class="line">    [<span class="keyword">self</span> initConfig];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> initConfig];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化配置</span></span><br><span class="line">- (<span class="keyword">void</span>)initConfig &#123;</span><br><span class="line">    <span class="comment">// 添加滑动手势</span></span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGestureEventHandle:)];</span><br><span class="line">    [<span class="keyword">self</span> addGestureRecognizer:panGesture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置默认状态</span></span><br><span class="line">    <span class="keyword">self</span>.lineColor = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">    <span class="keyword">self</span>.lineWidth = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Public Method</span></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line">- (<span class="keyword">void</span>)clear &#123;</span><br><span class="line">    <span class="keyword">self</span>.currentState = DBDrawboardDrawStateClear;</span><br><span class="line">    <span class="comment">// 防止橡皮擦状态直接清空后画笔还是白色</span></span><br><span class="line">    <span class="keyword">self</span>.lineColor = <span class="keyword">self</span>.normalColor;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.pathArray.count != <span class="number">0</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.pathArray removeAllObjects];</span><br><span class="line">        [<span class="keyword">self</span>.removeArray removeLastObject];</span><br><span class="line">        [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销</span></span><br><span class="line">- (<span class="keyword">void</span>)undo &#123;</span><br><span class="line">    <span class="keyword">self</span>.currentState = DBDrawboardDrawStateUndo;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.pathArray.count != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 1.把最后一个路径移入到移除栈中</span></span><br><span class="line">        [<span class="keyword">self</span>.removeArray addObject:<span class="keyword">self</span>.pathArray.lastObject];</span><br><span class="line">        <span class="comment">// 2.把路径从当前栈中移除</span></span><br><span class="line">        [<span class="keyword">self</span>.pathArray removeLastObject];</span><br><span class="line">        <span class="comment">// 3.重绘</span></span><br><span class="line">        [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重做</span></span><br><span class="line">- (<span class="keyword">void</span>)redo &#123;</span><br><span class="line">    <span class="comment">// 防止已经绘制，重做还是有数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.currentState == DBDrawboardDrawStateNormal) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.removeArray removeAllObjects];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.currentState = DBDrawboardDrawStateRedo;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.removeArray.count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 1.把移除栈中的最后一个路径移入到当前栈中</span></span><br><span class="line">            [<span class="keyword">self</span>.pathArray addObject:<span class="keyword">self</span>.removeArray.lastObject];</span><br><span class="line">            <span class="comment">// 2.把路径从移除栈中移除</span></span><br><span class="line">            [<span class="keyword">self</span>.removeArray removeLastObject];</span><br><span class="line">            <span class="comment">// 3.重绘</span></span><br><span class="line">            [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 橡皮擦</span></span><br><span class="line">- (<span class="keyword">void</span>)eraser &#123;</span><br><span class="line">    <span class="keyword">self</span>.currentState = DBDrawboardDrawStateEraser;</span><br><span class="line">    _lineColor = <span class="keyword">self</span>.backgroundColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Private Method</span></span><br><span class="line"><span class="comment">// 滑动手势事件处理</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureEventHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> current_point = [gesture locationInView:gesture.view];</span><br><span class="line">    <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.currentState = DBDrawboardDrawStateNormal;</span><br><span class="line">        <span class="comment">// 1.添加路径起点</span></span><br><span class="line">        DBDrawBezierPath *path = [DBDrawBezierPath bezierPath];</span><br><span class="line">        [path moveToPoint:current_point];</span><br><span class="line">        <span class="comment">// 2.设置上下文状态</span></span><br><span class="line">        path.lineJoinStyle = kCGLineJoinRound;</span><br><span class="line">        path.lineCapStyle = kCGLineCapRound;</span><br><span class="line">        path.lineColor = <span class="keyword">self</span>.lineColor;</span><br><span class="line">        path.lineWidth = <span class="keyword">self</span>.lineWidth;</span><br><span class="line">        <span class="comment">// 3.记录当前操作路径</span></span><br><span class="line">        <span class="keyword">self</span>.path = path;</span><br><span class="line">        <span class="comment">// 4.保存到历史栈</span></span><br><span class="line">        [<span class="keyword">self</span>.pathArray addObject:path];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class="line">        <span class="comment">// 5.拼接曲线路径</span></span><br><span class="line">        [<span class="keyword">self</span>.path addLineToPoint:current_point];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制</span></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> path <span class="keyword">in</span> <span class="keyword">self</span>.pathArray) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([path isKindOfClass:[DBDrawBezierPath <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            DBDrawBezierPath *linePath = (DBDrawBezierPath *)path;</span><br><span class="line">            [linePath.lineColor set];</span><br><span class="line">            [linePath stroke];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([path isKindOfClass:[<span class="built_in">UIImage</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="built_in">UIImage</span> *image = (<span class="built_in">UIImage</span> *)path;</span><br><span class="line">            <span class="built_in">CGFloat</span> margin = <span class="number">30.0</span>;</span><br><span class="line">            [image drawInRect:<span class="built_in">CGRectMake</span>(margin, margin, rect.size.width-margin*<span class="number">2</span>, rect.size.height-margin*<span class="number">2</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Setter and Getter</span></span><br><span class="line">- (<span class="keyword">void</span>)setLineColor:(<span class="built_in">UIColor</span> *)lineColor &#123;</span><br><span class="line">    _lineColor = lineColor;</span><br><span class="line">    <span class="keyword">self</span>.normalColor = lineColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)pathArray &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_pathArray) &#123;</span><br><span class="line">        _pathArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _pathArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)removeArray &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_removeArray) &#123;</span><br><span class="line">        _removeArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _removeArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBDrawBezierPath</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="1-10-保存"><a href="#1-10-保存" class="headerlink" title="1.10. 保存"></a>1.10. 保存</h3><p>把画板内容截屏保存到本地相册。</p><p>注意：相册权限需要配置。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)save:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="comment">// 截屏</span></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="keyword">self</span>.drawboardView.bounds.size);</span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    [<span class="keyword">self</span>.drawboardView.layer drawInContext:ctx];</span><br><span class="line">    <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存到相册</span></span><br><span class="line">    <span class="built_in">UIImageWriteToSavedPhotosAlbum</span>(image, <span class="keyword">self</span>, <span class="keyword">@selector</span>(image:didFinishSavingWithError:contextInfo:), <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片保存结果</span></span><br><span class="line">- (<span class="keyword">void</span>)image:(<span class="built_in">UIImage</span> *)image didFinishSavingWithError:(<span class="built_in">NSError</span> *)error contextInfo:(<span class="keyword">void</span> *)contextInfo &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"保存失败：%@"</span>, error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"保存成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-11-添加照片"><a href="#1-11-添加照片" class="headerlink" title="1.11. 添加照片"></a>1.11. 添加照片</h3><p>照片可以缩小、平移、旋转等形变操作，使用自定义view装载图片，并把形变操作直接应用到这个view上会更好。</p><p>如果直接把图片添加到画板上，将来绘制图片的时候图片就会和画板一样大，不是我们要的效果。如果我们把图片先放到一个和画板尺寸一样的透明view上，在这个透明view上进行形变操作，最后把透明view渲染到画板上就可以解决问题了。</p><h4 id="1-11-1-自定义装载图片的view"><a href="#1-11-1-自定义装载图片的view" class="headerlink" title="1.11.1. 自定义装载图片的view"></a>1.11.1. 自定义装载图片的view</h4><p><strong><code>DBImageContainerView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DBImageContainerView.h</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DBImageContainerViewDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)imageContainerViewForGenerateImage:(<span class="built_in">UIImage</span> *)image;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBImageContainerView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImage</span> *image;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DBImageContainerView.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DBImageContainerView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBImageContainerView</span> ()&lt;<span class="title">UIGestureRecognizerDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImageView</span> *imageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBImageContainerView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">CGRect</span> rect = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, frame.size&#125;;</span><br><span class="line">        <span class="keyword">self</span>.imageView.frame = rect;</span><br><span class="line">        [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.imageView];</span><br><span class="line">        [<span class="keyword">self</span> addGestures];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setImage:(<span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    _image = image;</span><br><span class="line">    <span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加手势</span></span><br><span class="line">- (<span class="keyword">void</span>)addGestures &#123;</span><br><span class="line">    <span class="comment">// 拖拽</span></span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGesture:)];</span><br><span class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:panGesture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 捏合</span></span><br><span class="line">    <span class="built_in">UIPinchGestureRecognizer</span> *pinchGesture = [[<span class="built_in">UIPinchGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(pinchGesture:)];</span><br><span class="line">    pinchGesture.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:pinchGesture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 旋转</span></span><br><span class="line">    <span class="built_in">UIRotationGestureRecognizer</span> *rotationGesture = [[<span class="built_in">UIRotationGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(rotationGesture:)];</span><br><span class="line">    rotationGesture.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:rotationGesture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 长按</span></span><br><span class="line">    <span class="built_in">UILongPressGestureRecognizer</span> *longPressGesture = [[<span class="built_in">UILongPressGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(longPressGesture:)];</span><br><span class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:longPressGesture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拖动</span></span><br><span class="line">- (<span class="keyword">void</span>)panGesture:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> translate_point = [gesture translationInView:gesture.view];</span><br><span class="line">    gesture.view.transform = <span class="built_in">CGAffineTransformTranslate</span>(gesture.view.transform, translate_point.x, translate_point.y);</span><br><span class="line">    [gesture setTranslation:<span class="built_in">CGPointZero</span> inView:gesture.view];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捏合</span></span><br><span class="line">- (<span class="keyword">void</span>)pinchGesture:(<span class="built_in">UIPinchGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    gesture.view.transform = <span class="built_in">CGAffineTransformScale</span>(gesture.view.transform, gesture.scale, gesture.scale);</span><br><span class="line">    gesture.scale = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转</span></span><br><span class="line">- (<span class="keyword">void</span>)rotationGesture:(<span class="built_in">UIRotationGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    gesture.view.transform = <span class="built_in">CGAffineTransformRotate</span>(gesture.view.transform, gesture.rotation);</span><br><span class="line">    gesture.rotation = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长按</span></span><br><span class="line">- (<span class="keyword">void</span>)longPressGesture:(<span class="built_in">UILongPressGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.25</span> animations:^&#123;</span><br><span class="line">            <span class="keyword">self</span>.imageView.alpha = <span class="number">0</span>;</span><br><span class="line">        &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">            [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.25</span> animations:^&#123;</span><br><span class="line">                <span class="keyword">self</span>.imageView.alpha = <span class="number">1</span>;</span><br><span class="line">            &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">                <span class="comment">// 截屏</span></span><br><span class="line">                <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="keyword">self</span>.bounds.size);</span><br><span class="line">                <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">                [<span class="keyword">self</span>.layer renderInContext:ctx];</span><br><span class="line">                <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">                <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>.delegate &amp;&amp; [<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imageContainerViewForGenerateImage:)]) &#123;</span><br><span class="line">                    [<span class="keyword">self</span>.delegate imageContainerViewForGenerateImage:image];</span><br><span class="line">                &#125;</span><br><span class="line">                [<span class="keyword">self</span> removeFromSuperview];</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - UIGestureRecognizerDelegate</span></span><br><span class="line"><span class="comment">// 允许同时支持多个手势</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)gestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)otherGestureRecognizer &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Setter and Getter</span></span><br><span class="line">- (<span class="built_in">UIImageView</span> *)imageView &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_imageView) &#123;</span><br><span class="line">        _imageView = [[<span class="built_in">UIImageView</span> alloc] init];</span><br><span class="line">        _imageView.userInteractionEnabled = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _imageView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h4 id="1-11-2-渲染"><a href="#1-11-2-渲染" class="headerlink" title="1.11.2. 渲染"></a>1.11.2. 渲染</h4><p>在画板视图中绘制添加的图片<br><strong><code>DBImageContainerView.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加照片</span></span><br><span class="line">- (<span class="keyword">void</span>)addPhoto:(<span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    DBImageContainerView *imageContainerView = [[DBImageContainerView alloc] initWithFrame:<span class="keyword">self</span>.bounds];</span><br><span class="line">    imageContainerView.delegate = <span class="keyword">self</span>;</span><br><span class="line">    imageContainerView.image = image;</span><br><span class="line">    [<span class="keyword">self</span> addSubview:imageContainerView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - DBImageContainerViewDelegate</span></span><br><span class="line"><span class="comment">// 生成图片</span></span><br><span class="line">- (<span class="keyword">void</span>)imageContainerViewForGenerateImage:(<span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    [<span class="keyword">self</span>.pathArray addObject:image];</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、完整代码及效果"><a href="#二、完整代码及效果" class="headerlink" title="二、完整代码及效果"></a>二、完整代码及效果</h2><p><img src="http://blog.idbeny.com/6rs9g.gif@normal" alt=""></p><p><strong><code>ViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DBDrawboardView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">UIImagePickerControllerDelegate</span>, <span class="title">UINavigationControllerDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 画板</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> DBDrawboardView *drawboardView;</span><br><span class="line"><span class="comment">// 当前选中的按钮</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIButton</span> *currentBtn;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *firstBtn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span>.currentBtn = <span class="keyword">self</span>.firstBtn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)clear:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    [<span class="keyword">self</span>.drawboardView clear];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)undo:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    [<span class="keyword">self</span>.drawboardView undo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重做</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)redo:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    [<span class="keyword">self</span>.drawboardView redo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 橡皮擦</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)eraser:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    [<span class="keyword">self</span>.drawboardView eraser];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 照片</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)photos:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">UIImagePickerController</span> *pickerVC = [[<span class="built_in">UIImagePickerController</span> alloc] init];</span><br><span class="line">    pickerVC.sourceType = <span class="built_in">UIImagePickerControllerSourceTypeSavedPhotosAlbum</span>;</span><br><span class="line">    pickerVC.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span> presentViewController:pickerVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)save:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="comment">// 截屏</span></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="keyword">self</span>.drawboardView.bounds.size);</span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    [<span class="keyword">self</span>.drawboardView.layer drawInContext:ctx];</span><br><span class="line">    <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存到相册</span></span><br><span class="line">    <span class="built_in">UIImageWriteToSavedPhotosAlbum</span>(image, <span class="keyword">self</span>, <span class="keyword">@selector</span>(image:didFinishSavingWithError:contextInfo:), <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片保存结果</span></span><br><span class="line">- (<span class="keyword">void</span>)image:(<span class="built_in">UIImage</span> *)image didFinishSavingWithError:(<span class="built_in">NSError</span> *)error contextInfo:(<span class="keyword">void</span> *)contextInfo &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"保存失败：%@"</span>, error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"保存成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改颜色</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)colorChanged:(<span class="built_in">UIButton</span> *)sender &#123;</span><br><span class="line">    <span class="keyword">self</span>.currentBtn = sender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改线宽</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)lineWidthChanged:(<span class="built_in">UISlider</span> *)sender &#123;</span><br><span class="line">    <span class="keyword">self</span>.drawboardView.lineWidth = sender.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - UIImagePickerControllerDelegate</span></span><br><span class="line"><span class="comment">// 图片选择完成</span></span><br><span class="line">- (<span class="keyword">void</span>)imagePickerController:(<span class="built_in">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">UIImagePickerControllerInfoKey</span>,<span class="keyword">id</span>&gt; *)info &#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *image = info[<span class="built_in">UIImagePickerControllerOriginalImage</span>];</span><br><span class="line">    [<span class="keyword">self</span>.drawboardView addPhoto:image];</span><br><span class="line">    [picker dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Setter and Getter</span></span><br><span class="line">- (<span class="keyword">void</span>)setCurrentBtn:(<span class="built_in">UIButton</span> *)currentBtn &#123;</span><br><span class="line">    <span class="keyword">if</span> (![_currentBtn isEqual:currentBtn]) &#123;</span><br><span class="line">        _currentBtn.transform = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">        currentBtn.transform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">1.2</span>, <span class="number">1.2</span>);</span><br><span class="line">        _currentBtn = currentBtn;</span><br><span class="line">        <span class="keyword">self</span>.drawboardView.lineColor = currentBtn.backgroundColor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)prefersStatusBarHidden &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong><code>DBDrawboardView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DBDrawboardView.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, DBDrawboardDrawState) &#123;</span><br><span class="line">    DBDrawboardDrawStateNormal, <span class="comment">// 普通绘制</span></span><br><span class="line">    DBDrawboardDrawStateClear, <span class="comment">// 清空</span></span><br><span class="line">    DBDrawboardDrawStateUndo, <span class="comment">// 撤销</span></span><br><span class="line">    DBDrawboardDrawStateRedo, <span class="comment">// 重做</span></span><br><span class="line">    DBDrawboardDrawStateEraser <span class="comment">// 橡皮擦</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBDrawboardView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线宽，默认1.0</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> lineWidth;</span><br><span class="line"><span class="comment">// 颜色，默认黑色</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *lineColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 清除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)clear;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 撤销</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)undo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 重做</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)redo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 橡皮擦</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)eraser;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加图片</span></span><br><span class="line"><span class="comment"> * @param image 图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)addPhoto:(<span class="built_in">UIImage</span> *)image;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBDrawBezierPath</span> : <span class="title">UIBezierPath</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *lineColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DBDrawboardView.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DBDrawboardView.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DBImageContainerView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBDrawboardView</span> ()&lt;<span class="title">DBImageContainerViewDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录当前操作路径</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DBDrawBezierPath *path;</span><br><span class="line"><span class="comment">// 保存历史栈</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *pathArray;</span><br><span class="line"><span class="comment">// 移除保存栈</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *removeArray;</span><br><span class="line"><span class="comment">// 当前绘制状态</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) DBDrawboardDrawState currentState;</span><br><span class="line"><span class="comment">// 正常绘制颜色</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *normalColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBDrawboardView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</span><br><span class="line">    [<span class="keyword">super</span> awakeFromNib];</span><br><span class="line">    [<span class="keyword">self</span> initConfig];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> initConfig];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化配置</span></span><br><span class="line">- (<span class="keyword">void</span>)initConfig &#123;</span><br><span class="line">    <span class="keyword">self</span>.clipsToBounds = <span class="literal">YES</span>;</span><br><span class="line">    <span class="comment">// 添加滑动手势</span></span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGestureEventHandle:)];</span><br><span class="line">    [<span class="keyword">self</span> addGestureRecognizer:panGesture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置默认状态</span></span><br><span class="line">    <span class="keyword">self</span>.lineColor = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">    <span class="keyword">self</span>.lineWidth = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Public Method</span></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line">- (<span class="keyword">void</span>)clear &#123;</span><br><span class="line">    <span class="keyword">self</span>.currentState = DBDrawboardDrawStateClear;</span><br><span class="line">    <span class="comment">// 防止橡皮擦状态直接清空后画笔还是白色</span></span><br><span class="line">    <span class="keyword">self</span>.lineColor = <span class="keyword">self</span>.normalColor;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.pathArray.count != <span class="number">0</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.pathArray removeAllObjects];</span><br><span class="line">        [<span class="keyword">self</span>.removeArray removeLastObject];</span><br><span class="line">        [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销</span></span><br><span class="line">- (<span class="keyword">void</span>)undo &#123;</span><br><span class="line">    <span class="keyword">self</span>.currentState = DBDrawboardDrawStateUndo;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.pathArray.count != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 1.把最后一个路径移入到移除栈中</span></span><br><span class="line">        [<span class="keyword">self</span>.removeArray addObject:<span class="keyword">self</span>.pathArray.lastObject];</span><br><span class="line">        <span class="comment">// 2.把路径从当前栈中移除</span></span><br><span class="line">        [<span class="keyword">self</span>.pathArray removeLastObject];</span><br><span class="line">        <span class="comment">// 3.重绘</span></span><br><span class="line">        [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重做</span></span><br><span class="line">- (<span class="keyword">void</span>)redo &#123;</span><br><span class="line">    <span class="comment">// 防止已经绘制，重做还是有数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.currentState == DBDrawboardDrawStateNormal) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.removeArray removeAllObjects];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.currentState = DBDrawboardDrawStateRedo;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.removeArray.count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 1.把移除栈中的最后一个路径移入到当前栈中</span></span><br><span class="line">            [<span class="keyword">self</span>.pathArray addObject:<span class="keyword">self</span>.removeArray.lastObject];</span><br><span class="line">            <span class="comment">// 2.把路径从移除栈中移除</span></span><br><span class="line">            [<span class="keyword">self</span>.removeArray removeLastObject];</span><br><span class="line">            <span class="comment">// 3.重绘</span></span><br><span class="line">            [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 橡皮擦</span></span><br><span class="line">- (<span class="keyword">void</span>)eraser &#123;</span><br><span class="line">    <span class="keyword">self</span>.currentState = DBDrawboardDrawStateEraser;</span><br><span class="line">    _lineColor = <span class="keyword">self</span>.backgroundColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加照片</span></span><br><span class="line">- (<span class="keyword">void</span>)addPhoto:(<span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    DBImageContainerView *imageContainerView = [[DBImageContainerView alloc] initWithFrame:<span class="keyword">self</span>.bounds];</span><br><span class="line">    imageContainerView.delegate = <span class="keyword">self</span>;</span><br><span class="line">    imageContainerView.image = image;</span><br><span class="line">    [<span class="keyword">self</span> addSubview:imageContainerView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - DBImageContainerViewDelegate</span></span><br><span class="line"><span class="comment">// 生成图片</span></span><br><span class="line">- (<span class="keyword">void</span>)imageContainerViewForGenerateImage:(<span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    [<span class="keyword">self</span>.pathArray addObject:image];</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Private Method</span></span><br><span class="line"><span class="comment">// 滑动手势事件处理</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureEventHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> current_point = [gesture locationInView:gesture.view];</span><br><span class="line">    <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.currentState = DBDrawboardDrawStateNormal;</span><br><span class="line">        <span class="comment">// 1.添加路径起点</span></span><br><span class="line">        DBDrawBezierPath *path = [DBDrawBezierPath bezierPath];</span><br><span class="line">        [path moveToPoint:current_point];</span><br><span class="line">        <span class="comment">// 2.设置上下文状态</span></span><br><span class="line">        path.lineJoinStyle = kCGLineJoinRound;</span><br><span class="line">        path.lineCapStyle = kCGLineCapRound;</span><br><span class="line">        path.lineColor = <span class="keyword">self</span>.lineColor;</span><br><span class="line">        path.lineWidth = <span class="keyword">self</span>.lineWidth;</span><br><span class="line">        <span class="comment">// 3.记录当前操作路径</span></span><br><span class="line">        <span class="keyword">self</span>.path = path;</span><br><span class="line">        <span class="comment">// 4.保存到历史栈</span></span><br><span class="line">        [<span class="keyword">self</span>.pathArray addObject:path];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class="line">        <span class="comment">// 5.拼接曲线路径</span></span><br><span class="line">        [<span class="keyword">self</span>.path addLineToPoint:current_point];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制</span></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> path <span class="keyword">in</span> <span class="keyword">self</span>.pathArray) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([path isKindOfClass:[DBDrawBezierPath <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            DBDrawBezierPath *linePath = (DBDrawBezierPath *)path;</span><br><span class="line">            [linePath.lineColor set];</span><br><span class="line">            [linePath stroke];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([path isKindOfClass:[<span class="built_in">UIImage</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="built_in">UIImage</span> *image = (<span class="built_in">UIImage</span> *)path;</span><br><span class="line">            <span class="built_in">CGFloat</span> margin = <span class="number">30.0</span>;</span><br><span class="line">            [image drawInRect:<span class="built_in">CGRectMake</span>(margin, margin, rect.size.width-margin*<span class="number">2</span>, rect.size.height-margin*<span class="number">2</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Setter and Getter</span></span><br><span class="line">- (<span class="keyword">void</span>)setLineColor:(<span class="built_in">UIColor</span> *)lineColor &#123;</span><br><span class="line">    _lineColor = lineColor;</span><br><span class="line">    <span class="keyword">self</span>.normalColor = lineColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)pathArray &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_pathArray) &#123;</span><br><span class="line">        _pathArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _pathArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)removeArray &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_removeArray) &#123;</span><br><span class="line">        _removeArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _removeArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBDrawBezierPath</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong><code>DBImageContainerView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DBImageContainerView.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DBImageContainerViewDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)imageContainerViewForGenerateImage:(<span class="built_in">UIImage</span> *)image;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBImageContainerView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;DBImageContainerViewDelegate&gt; delegate;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImage</span> *image;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DBImageContainerView.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DBImageContainerView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBImageContainerView</span> ()&lt;<span class="title">UIGestureRecognizerDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImageView</span> *imageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBImageContainerView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">CGRect</span> rect = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, frame.size&#125;;</span><br><span class="line">        <span class="keyword">self</span>.imageView.frame = rect;</span><br><span class="line">        [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.imageView];</span><br><span class="line">        [<span class="keyword">self</span> addGestures];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setImage:(<span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    _image = image;</span><br><span class="line">    <span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加手势</span></span><br><span class="line">- (<span class="keyword">void</span>)addGestures &#123;</span><br><span class="line">    <span class="comment">// 拖拽</span></span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGesture:)];</span><br><span class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:panGesture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 捏合</span></span><br><span class="line">    <span class="built_in">UIPinchGestureRecognizer</span> *pinchGesture = [[<span class="built_in">UIPinchGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(pinchGesture:)];</span><br><span class="line">    pinchGesture.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:pinchGesture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 旋转</span></span><br><span class="line">    <span class="built_in">UIRotationGestureRecognizer</span> *rotationGesture = [[<span class="built_in">UIRotationGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(rotationGesture:)];</span><br><span class="line">    rotationGesture.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:rotationGesture];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 长按</span></span><br><span class="line">    <span class="built_in">UILongPressGestureRecognizer</span> *longPressGesture = [[<span class="built_in">UILongPressGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(longPressGesture:)];</span><br><span class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:longPressGesture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拖动</span></span><br><span class="line">- (<span class="keyword">void</span>)panGesture:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> translate_point = [gesture translationInView:gesture.view];</span><br><span class="line">    gesture.view.transform = <span class="built_in">CGAffineTransformTranslate</span>(gesture.view.transform, translate_point.x, translate_point.y);</span><br><span class="line">    [gesture setTranslation:<span class="built_in">CGPointZero</span> inView:gesture.view];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捏合</span></span><br><span class="line">- (<span class="keyword">void</span>)pinchGesture:(<span class="built_in">UIPinchGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    gesture.view.transform = <span class="built_in">CGAffineTransformScale</span>(gesture.view.transform, gesture.scale, gesture.scale);</span><br><span class="line">    gesture.scale = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转</span></span><br><span class="line">- (<span class="keyword">void</span>)rotationGesture:(<span class="built_in">UIRotationGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    gesture.view.transform = <span class="built_in">CGAffineTransformRotate</span>(gesture.view.transform, gesture.rotation);</span><br><span class="line">    gesture.rotation = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长按</span></span><br><span class="line">- (<span class="keyword">void</span>)longPressGesture:(<span class="built_in">UILongPressGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.0</span> animations:^&#123;</span><br><span class="line"><span class="comment">//            self.imageView.alpha = 0;</span></span><br><span class="line">        &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">            [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.0</span> animations:^&#123;</span><br><span class="line"><span class="comment">//                self.imageView.alpha = 1;</span></span><br><span class="line">            &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">                <span class="comment">// 截屏</span></span><br><span class="line">                <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="keyword">self</span>.bounds.size);</span><br><span class="line">                <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">                [<span class="keyword">self</span>.layer renderInContext:ctx];</span><br><span class="line">                <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">                <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>.delegate &amp;&amp; [<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imageContainerViewForGenerateImage:)]) &#123;</span><br><span class="line">                    [<span class="keyword">self</span>.delegate imageContainerViewForGenerateImage:image];</span><br><span class="line">                &#125;</span><br><span class="line">                [<span class="keyword">self</span> removeFromSuperview];</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - UIGestureRecognizerDelegate</span></span><br><span class="line"><span class="comment">// 允许同时支持多个手势</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)gestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)otherGestureRecognizer &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Setter and Getter</span></span><br><span class="line">- (<span class="built_in">UIImageView</span> *)imageView &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_imageView) &#123;</span><br><span class="line">        _imageView = [[<span class="built_in">UIImageView</span> alloc] init];</span><br><span class="line">        _imageView.userInteractionEnabled = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _imageView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Quartz2D </tag>
            
            <tag> UIBezierPath </tag>
            
            <tag> 画板 </tag>
            
            <tag> 涂鸦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Quartz 2D之图片添加水印、裁剪、截屏</title>
      <link href="/2016/09/13/ios-quartz2d-image/"/>
      <url>/2016/09/13/ios-quartz2d-image/</url>
      
        <content type="html"><![CDATA[<p>图片添加水印和截屏功能都是项目中经常用到的。微博的图片默认会加上一个自己id水印，虽然大部分情况下都是由后端加上的，但也有一些场景是需要App自己添加上去的。苹果手机截图是Home键+关机键同时按下，截取的是整个屏幕，能否让用户截取部分呢？</p><a id="more"></a><h2 id="一、图片添加水印"><a href="#一、图片添加水印" class="headerlink" title="一、图片添加水印"></a>一、图片添加水印</h2><p>水印一般是文字或图标，它的作用就是告诉用户图片从哪个地方来的（即版权）。图片上加水印的做法很简单，就是图片和水印在屏幕上渲染后，把上下文中所有内容合成生成一张新的图片。</p><h3 id="1-1-位图上下文"><a href="#1-1-位图上下文" class="headerlink" title="1.1. 位图上下文"></a>1.1. 位图上下文</h3><p>如果要生成一张图片，也会用到一个上下文。但和之前的图形上下文不一样，这里用到的是位图上下文，并且是需要手动开启的。开启位图上下文并指定尺寸，尺寸决定着生成的图片尺寸。</p><p>注意：手动开启的上下文，一定要手动关闭。</p><p>流程：</p><ul><li>手动开启一个位图上下文；</li><li>把内容绘制到上下文；</li><li>从上下文中生成一张新的图片（新的图片尺寸和上下文尺寸一样）</li><li>关闭上下文</li></ul><h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2. 示例"></a>1.2. 示例</h3><p>场景：图片上添加一个文字水印。</p><p><strong><code>ViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"avatar"</span>];</span><br><span class="line">    <span class="comment">// 1.手动开启一个位图上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(image.size);</span><br><span class="line">    <span class="comment">// 2.把内容绘制到上下文</span></span><br><span class="line">    [image drawAtPoint:<span class="built_in">CGPointZero</span>];</span><br><span class="line">    <span class="comment">// 3.添加水印</span></span><br><span class="line">    <span class="built_in">NSString</span> *watermark = <span class="string">@"@idbeny"</span>;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *watermarkAttriDict = @&#123;</span><br><span class="line">        <span class="built_in">NSFontAttributeName</span> : [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">20.0</span>],</span><br><span class="line">        <span class="built_in">NSForegroundColorAttributeName</span> : [<span class="built_in">UIColor</span> whiteColor]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">CGSize</span> watermark_size = [watermark boundingRectWithSize:<span class="built_in">CGSizeMake</span>(image.size.width, image.size.height) options:<span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span> | <span class="built_in">NSStringDrawingUsesFontLeading</span> attributes:watermarkAttriDict context:<span class="literal">nil</span>].size;</span><br><span class="line">    [watermark drawInRect:<span class="built_in">CGRectMake</span>(image.size.width-watermark_size.width, image.size.height-watermark_size.height, watermark_size.width, watermark_size.height) withAttributes:watermarkAttriDict];</span><br><span class="line">    <span class="comment">// 4.从当前上下文生成一张新的图片</span></span><br><span class="line">    <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="comment">// 5.关闭上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.imageView.image = newImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/gifk3.png@normal" alt=""></p><p>开启上下文除了上面示例提到的一种方法，还有另外一种方法。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 开启上下文</span></span><br><span class="line"><span class="comment"> * @param size 上下文大小</span></span><br><span class="line"><span class="comment"> * @param opaque 不透明度</span></span><br><span class="line"><span class="comment"> * @param scale 缩放比例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="built_in">CGSize</span> size, <span class="built_in">BOOL</span> opaque, <span class="built_in">CGFloat</span> scale);</span><br></pre></td></tr></table></figure><p><code>opaque</code>是不透明度，<code>YES</code>代表不透明，<code>NO</code>代表透明。</p><p><code>scale</code>默认是0.0，但指的是跟随设备主屏幕的<code>scale</code>，即<code>0.0 == [UIScreen mainScreen].scale</code>。</p><p><img src="http://blog.idbeny.com/n9x5a.png@normal" alt=""></p><h2 id="二、裁剪"><a href="#二、裁剪" class="headerlink" title="二、裁剪"></a>二、裁剪</h2><p>图片的裁剪和生成图片类似。裁剪图片的时候应该先设置裁剪区域，再绘制图片，否则图片已经画上去就不能裁剪了。</p><h3 id="2-1-裁剪圆形图片"><a href="#2-1-裁剪圆形图片" class="headerlink" title="2.1. 裁剪圆形图片"></a>2.1. 裁剪圆形图片</h3><p><strong><code>ViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"avatar"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.开启位图上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(image.size);</span><br><span class="line">    <span class="comment">// 2.绘制圆形路径</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:<span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, image.size.width, image.size.height)];</span><br><span class="line">    <span class="comment">// 3.把圆形路径设置为裁剪区域</span></span><br><span class="line">    [path addClip];</span><br><span class="line">    <span class="comment">// 4.图片绘制到上下文</span></span><br><span class="line">    [image drawAtPoint:<span class="built_in">CGPointZero</span>];</span><br><span class="line">    <span class="comment">// 5.生成新图片</span></span><br><span class="line">    <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="comment">// 6.关闭上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.imageView.image = newImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/t56lm.png@normal" alt=""></p><p>注意：<code>addClip</code>仅对后面添加的内容有效，已经绘制到上下文中的内容不会被裁减。</p><h3 id="2-2-裁剪有边框的图片"><a href="#2-2-裁剪有边框的图片" class="headerlink" title="2.2. 裁剪有边框的图片"></a>2.2. 裁剪有边框的图片</h3><p>带边框的图片本质就是背景一个有颜色的实心圆（大圆），再画一个裁剪路径（小圆），把图片绘制到上下文，最后生成的图片就是带边框的圆形裁剪图片。</p><p><strong><code>ViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"avatar"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.开启上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(image.size);</span><br><span class="line">    <span class="comment">// 2.设置颜色填充的圆形</span></span><br><span class="line">    <span class="comment">// 2.1 边框宽度</span></span><br><span class="line">    <span class="built_in">CGFloat</span> border_w = <span class="number">10.0</span>;</span><br><span class="line">    <span class="built_in">UIBezierPath</span> *borderPath = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:<span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, image.size.width, image.size.height)];</span><br><span class="line">    <span class="comment">// 2.2 边框颜色</span></span><br><span class="line">    [[<span class="built_in">UIColor</span> yellowColor] set];</span><br><span class="line">    <span class="comment">// 2.3 填充路径</span></span><br><span class="line">    [borderPath fill];</span><br><span class="line">    <span class="comment">// 3.设置裁剪区域</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *clipPath = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:<span class="built_in">CGRectMake</span>(border_w, border_w, image.size.width-border_w*<span class="number">2</span>, image.size.height-border_w*<span class="number">2</span>)];</span><br><span class="line">    [clipPath addClip];</span><br><span class="line">    <span class="comment">// 4.绘制图片</span></span><br><span class="line">    [image drawAtPoint:<span class="built_in">CGPointZero</span>];</span><br><span class="line">    <span class="comment">// 5.生成新图</span></span><br><span class="line">    <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="comment">// 6.关闭上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.imageView.image = newImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/6y8bt.png@normal" alt=""></p><h2 id="三、截屏"><a href="#三、截屏" class="headerlink" title="三、截屏"></a>三、截屏</h2><p>view上面的元素之所以能够显示出来，主要是layer层。所以如果想要截屏，就把layer层上面的内容渲染到上下文中，然后从上下文中获取图片（即生成一张图片）即可。</p><p><strong>关键代码：<code>[layer renderInContext:ctx]</code>。</strong></p><p>示例：<br><img src="http://blog.idbeny.com/zb2tl.png@normal" alt=""><br>场景：把上面的控制器截屏生成一张图片。</p><p><strong><code>ViewController</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// 1.开启上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="keyword">self</span>.view.bounds.size, <span class="literal">YES</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="comment">// 2.获取上下文（此时的上下文是UIGraphicsBeginImageContext）</span></span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="comment">// 3.把当控制球view的layer所有内容渲染到上下文</span></span><br><span class="line">    [<span class="keyword">self</span>.view.layer renderInContext:ctx];</span><br><span class="line">    <span class="comment">// 4.生成图片</span></span><br><span class="line">    <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 把图片保存到桌面，看下效果（注意：真机只能操作沙盒）</span></span><br><span class="line">    <span class="built_in">NSData</span> *data = <span class="built_in">UIImagePNGRepresentation</span>(newImage);</span><br><span class="line">    [data writeToFile:<span class="string">@"/Users/Developer/Desktop/screen_layer.png"</span> atomically:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果（到桌面查看）：<br><img src="http://blog.idbeny.com/zq6nf.png@normal" alt=""></p><p>注意：<code>UIGraphicsBeginImageContextWithOptions</code>和<code>UIGraphicsBeginImageContext</code>的区别使用，在截屏的时候建议使用前者。</p><h2 id="四、图片自定义区域裁剪和清除"><a href="#四、图片自定义区域裁剪和清除" class="headerlink" title="四、图片自定义区域裁剪和清除"></a>四、图片自定义区域裁剪和清除</h2><p>利用手势可以保留区域内的图片，也可以利用手势删除图片一部分内容。</p><h3 id="4-1-自定义区域裁剪"><a href="#4-1-自定义区域裁剪" class="headerlink" title="4.1. 自定义区域裁剪"></a>4.1. 自定义区域裁剪</h3><p>思路：<br>位图上下文大小是整个imageView控件的大小，裁剪区域设为手势滑动过的遮罩层，再把imageView上的所有内容都渲染到当前位图上下文中，然后再从上下文获取最新图片就行了。</p><p>UI构建：<br><img src="http://blog.idbeny.com/9l8pg.png@normal" alt=""></p><p>示例：<br><strong><code>ViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIView</span> *maskView; <span class="comment">// 遮罩</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGPoint</span> start_point; <span class="comment">// 开始触摸点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGestureActionHandle:)];</span><br><span class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:panGesture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑动手势处理</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureActionHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="comment">// 获取当前手指触摸点</span></span><br><span class="line">    <span class="built_in">CGPoint</span> current_point = [gesture locationInView:gesture.view];</span><br><span class="line">    <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateBegan</span>) &#123; <span class="comment">// 滑动开始</span></span><br><span class="line">        <span class="keyword">self</span>.start_point = current_point;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gesture.state == <span class="built_in">UIGestureRecognizerStateChanged</span>) &#123; <span class="comment">// 滑动值改变</span></span><br><span class="line">        <span class="comment">// 计算遮罩的位置和尺寸</span></span><br><span class="line">        <span class="built_in">CGPoint</span> origin = <span class="keyword">self</span>.start_point;</span><br><span class="line">        <span class="built_in">CGFloat</span> width = current_point.x - <span class="keyword">self</span>.start_point.x;</span><br><span class="line">        <span class="built_in">CGFloat</span> height = current_point.y - <span class="keyword">self</span>.start_point.y;</span><br><span class="line">        <span class="built_in">CGRect</span> frame;</span><br><span class="line">        frame.origin = origin;</span><br><span class="line">        frame.size = <span class="built_in">CGSizeMake</span>(width, height);</span><br><span class="line">        <span class="keyword">self</span>.maskView.frame = frame;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 取消（滑动停止）</span></span><br><span class="line">        <span class="comment">// 1.开启位图上下文</span></span><br><span class="line">        <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="keyword">self</span>.imageView.bounds.size, <span class="literal">NO</span>, <span class="number">0.0</span>);</span><br><span class="line">        <span class="comment">// 2.裁剪</span></span><br><span class="line">        <span class="built_in">UIBezierPath</span> *clipPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="keyword">self</span>.maskView.frame];</span><br><span class="line">        [clipPath addClip];</span><br><span class="line">        <span class="comment">// 裁剪还可以这样</span></span><br><span class="line">        <span class="comment">// UIRectClip(self.maskView.frame);</span></span><br><span class="line">        <span class="comment">// 3.图片渲染到上下文</span></span><br><span class="line">        <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">        [<span class="keyword">self</span>.imageView.layer renderInContext:ctx];</span><br><span class="line">        <span class="comment">// 4.从位图上下文获取最新图片</span></span><br><span class="line">        <span class="built_in">UIImage</span> *newImage =  <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">        <span class="comment">// 5.关闭上下文</span></span><br><span class="line">        <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.imageView.image = newImage;</span><br><span class="line">        [<span class="keyword">self</span>.maskView removeFromSuperview];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)maskView &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_maskView) &#123;</span><br><span class="line">        <span class="built_in">UIView</span> *maskView = [[<span class="built_in">UIView</span> alloc] init];</span><br><span class="line">        maskView.backgroundColor = [[<span class="built_in">UIColor</span> blackColor] colorWithAlphaComponent:<span class="number">0.4</span>];</span><br><span class="line">        [<span class="keyword">self</span>.view addSubview:maskView];</span><br><span class="line">        _maskView = maskView;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _maskView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/84awj.gif@normal" alt=""></p><h3 id="4-2-自定义区域清除"><a href="#4-2-自定义区域清除" class="headerlink" title="4.2. 自定义区域清除"></a>4.2. 自定义区域清除</h3><p>思路：<br>和裁剪类似，当imageView渲染到上下文后，按照指定区域把上下文一部分清除就行了。</p><p>UI构建：和4.1一样</p><p>关键代码：<code>CGContextClearRect(ctx, self.maskView.frame);</code></p><p>示例：<br><strong><code>ViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> _maskView_w;</span><br><span class="line">    <span class="built_in">CGFloat</span> _maskView_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIView</span> *maskView; <span class="comment">// 遮罩</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGPoint</span> start_point; <span class="comment">// 开始触摸点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGestureActionHandle:)];</span><br><span class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:panGesture];</span><br><span class="line">    </span><br><span class="line">    _maskView_w = <span class="number">20.0</span>;</span><br><span class="line">    _maskView_h = <span class="number">20.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑动手势处理</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureActionHandle:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="comment">// 1.获取当前手指触摸点</span></span><br><span class="line">    <span class="built_in">CGPoint</span> current_point = [gesture locationInView:gesture.view];</span><br><span class="line">    <span class="comment">// 2.设置清除遮罩的位置和尺寸（在触摸点的中心）</span></span><br><span class="line">    <span class="keyword">self</span>.maskView.frame = <span class="built_in">CGRectMake</span>(current_point.x - _maskView_w * <span class="number">0.5</span>, current_point.y - _maskView_h * <span class="number">0.5</span>, _maskView_w, _maskView_h);</span><br><span class="line">    <span class="comment">// 3.开启上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="keyword">self</span>.imageView.bounds.size, <span class="literal">NO</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="comment">// 4.当前imageView所有内容渲染到位图上下文中</span></span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    [<span class="keyword">self</span>.imageView.layer renderInContext:ctx];</span><br><span class="line">    <span class="comment">// 5.裁剪上下文maskView所在的区域</span></span><br><span class="line">    <span class="built_in">CGContextClearRect</span>(ctx, <span class="keyword">self</span>.maskView.frame);</span><br><span class="line">    <span class="comment">// 6.获取最新图片</span></span><br><span class="line">    <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="comment">// 7.关闭上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.imageView.image = newImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)maskView &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_maskView) &#123;</span><br><span class="line">        <span class="built_in">UIView</span> *maskView = [[<span class="built_in">UIView</span> alloc] init];</span><br><span class="line">        maskView.backgroundColor = [[<span class="built_in">UIColor</span> blackColor] colorWithAlphaComponent:<span class="number">0.4</span>];</span><br><span class="line">        [<span class="keyword">self</span>.view addSubview:maskView];</span><br><span class="line">        _maskView = maskView;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _maskView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/0fx5o.gif@normal" alt=""></p><p>注意：上面的这种擦除方式仅仅作为对比和了解，实际开发过程中会使用贝塞尔曲线绘制路径，等待全部接收后再生成图片。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Quartz2D </tag>
            
            <tag> UIBezierPath </tag>
            
            <tag> 水印 </tag>
            
            <tag> 截屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Quartz 2D之基本操作</title>
      <link href="/2016/09/10/ios-quartz2d/"/>
      <url>/2016/09/10/ios-quartz2d/</url>
      
        <content type="html"><![CDATA[<p><strong>Quartz 2D</strong>是一个二维绘图引擎，同时支持iOS和Mac系统。</p><a id="more"></a><p>使用<strong>Quartz 2D</strong>可以完成以下事情：</p><ul><li>绘制图形：线条/三角形/矩形/圆/弧等</li><li>绘制文字</li><li>绘制/生成图片</li><li>读取/生成PDF</li><li>截图/裁剪图片</li><li>自定义UI控件</li></ul><p>图表/涂鸦/画板/手势解锁等比较个性化功能使用系统提供的UI控件无法实现，可以利用<strong>Quartz 2D</strong>把控件的结构画出来，代码执行效率高，而且非常灵活。其实，iOS中大部分控件的内容都是通过<strong>Quartz 2D</strong>画出来的。</p><h2 id="一、初识上下文"><a href="#一、初识上下文" class="headerlink" title="一、初识上下文"></a>一、初识上下文</h2><p>图形上下文（Graphics Context）是一个<code>CGContextRef</code>类型的数据。可以理解为一个画布，所有绘画操作都是在画布上进行的。</p><p>作用：</p><ul><li>保存绘图信息、绘图状态；</li><li>决定绘制的内容输出形式是什么样子的（输出形式可以是PDF、Bitmap、Window、Layer等）。</li></ul><h3 id="1-1-自定义view"><a href="#1-1-自定义view" class="headerlink" title="1.1. 自定义view"></a>1.1. 自定义view</h3><h4 id="1-1-1-如何利用Quartz-2D自定义view？"><a href="#1-1-1-如何利用Quartz-2D自定义view？" class="headerlink" title="1.1.1. 如何利用Quartz 2D自定义view？"></a>1.1.1. 如何利用Quartz 2D自定义view？</h4><ul><li>首先，需要有图形上下文，因为它能保存绘图信息，并且决定着绘制到什么地方去；</li><li>其次，那个图形上下文必须跟view相关联，才能将内容绘制到view上面。</li></ul><h4 id="1-1-2-自定义view的步骤"><a href="#1-1-2-自定义view的步骤" class="headerlink" title="1.1.2. 自定义view的步骤"></a>1.1.2. 自定义view的步骤</h4><ol><li>新建一个类，继承自<code>UIView</code>；</li><li>在<code>- (void)drawRect:(CGRect)rect</code>方法内部：<ul><li>取得跟当前view相关联的图形上下文（该方法内部会自动创建和当前view相关联的上下文对象，可以直接获取。无论是创建还是获取，上下文都是以<code>UIGrapnics</code>开头）；</li><li>开始绘制相应的图形内容；</li><li>利用图形上下文将绘制的所有内容渲染显示到view上面；</li><li>参数<code>rect</code>是当前<code>view</code>的<code>bounds</code>。</li></ul></li></ol><p>每次新建view类时，系统都会在实现类中默认创建<code>drawRect</code>代码，并且给出相应的使用说明：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"><span class="comment">// Only override drawRect: if you perform custom drawing.</span></span><br><span class="line"><span class="comment">// An empty implementation adversely affects performance during animation.</span></span><br><span class="line">- (void)drawRect:(CGRect)rect &#123;</span><br><span class="line">    <span class="comment">// Drawing code</span></span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><blockquote><p>如果需要自定义绘制，只需要重写<code>drawRect:</code>方法即可。如果重写了该方法但是没有实现任何内容，在动画期间会影响性能。</p></blockquote><p><strong><code>drawRect:</code>方法调用时机：</strong></p><ol><li>调用时机在<code>viewWillAppear</code>和<code>viewDidAppear</code>之间</li><li>当<code>view</code>的<code>size</code>不为0时调用<code>setNeedsDisplay</code>或<code>setNeedsDisplayInRect:</code>，会触发<code>drawRect:</code></li><li>调用<code>sizeToFit</code>，会触发<code>drawRect:</code></li><li><code>UIView</code>的<code>contentMode</code>属性设置成<code>UIViewContentModeRedraw</code>，每一次设置或更改<code>frame</code>都会触发<code>drawRect:</code></li></ol><h2 id="二、UIBezierPath（贝塞尔曲线）"><a href="#二、UIBezierPath（贝塞尔曲线）" class="headerlink" title="二、UIBezierPath（贝塞尔曲线）"></a>二、UIBezierPath（贝塞尔曲线）</h2><h3 id="2-1-基本线条（直线）"><a href="#2-1-基本线条（直线）" class="headerlink" title="2.1. 基本线条（直线）"></a>2.1. 基本线条（直线）</h3><p>空界面：<br><img src="http://blog.idbeny.com/asy40.png@normal" alt=""></p><p>场景：新建<code>DBDrawView: UIView</code>，实现<code>drawRect:</code>方法：在界面上绘制不同颜色的线条。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="comment">// 1.获取当前view相关联的上下文</span></span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.描述路径(贝塞尔曲线)</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    <span class="comment">// 2.1 添加起点(所有路径和点都是在rect范围内的, 坐标原点相对于当前view是&#123;0, 0&#125;)</span></span><br><span class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">50.0</span>, <span class="number">50.0</span>)];</span><br><span class="line">    <span class="comment">// 2.2 添加路径点()</span></span><br><span class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">150.0</span>, <span class="number">150.0</span>)];</span><br><span class="line">    <span class="comment">// 2.3 可以继续添加点</span></span><br><span class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">200.0</span>, <span class="number">150.0</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.4 路径可以添加多条线</span></span><br><span class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">100.0</span>, <span class="number">100.0</span>)];</span><br><span class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">200.0</span>, <span class="number">100.0</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.5 把上一路径的终点作为下一路径的起点</span></span><br><span class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">80.0</span>, <span class="number">80.0</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 路径添加到上下文（注意传入的路径是CGPathRef类型）</span></span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path.CGPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 把上下文当中需要绘制的所有内容渲染到view的layer层上</span></span><br><span class="line">    <span class="comment">// 渲染方式有两种：</span></span><br><span class="line">    <span class="comment">// 描边：stroke -&gt; CGContextStrokePath(ctx);</span></span><br><span class="line">    <span class="comment">// 填充：fill -&gt; CGContextFillPath(ctx);</span></span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例效果：<br><img src="http://blog.idbeny.com/i1tgc.png@normal" alt=""></p><p>设置线条宽度、颜色</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置上下文状态（线宽、颜色等）</span></span><br><span class="line"><span class="comment">// 设置线条宽度</span></span><br><span class="line"><span class="constructor">CGContextSetLineWidth(<span class="params">ctx</span>, 6.0)</span>;</span><br><span class="line"><span class="comment">// 设置线条连接样式（CGLineJoin枚举类型：）</span></span><br><span class="line"><span class="constructor">CGContextSetLineJoin(<span class="params">ctx</span>, <span class="params">kCGLineJoinRound</span>)</span>;</span><br><span class="line"><span class="comment">// 设置线条顶端样式（CGLineCap枚举类型：）</span></span><br><span class="line"><span class="constructor">CGContextSetLineCap(<span class="params">ctx</span>, <span class="params">kCGLineCapRound</span>)</span>;</span><br><span class="line"><span class="comment">// 设置线条颜色</span></span><br><span class="line"><span class="literal">[[UIC<span class="identifier">olor</span> <span class="identifier">orangeColor</span>]</span> set];</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/wn33m.png@normal" alt=""></p><p>设置颜色有三种形式：</p><ol><li><code>[[UIColor orangeColor] setStroke];</code> 对应绘制渲染<code>CGContextStrokePath(ctx)</code>，否则无效；</li><li><code>[[UIColor orangeColor] setFill];</code> 对应绘制渲染<code>CGContextFillPath(ctx)</code>，否则无效；</li><li><code>[[UIColor orangeColor] set];</code> 自动匹配渲染样式。</li></ol><p>上面绘制直线的时候已经看到<code>UIBezierPath</code>，但他的功能不仅仅是画直线。可以说只要用到自定义绘制，大概率都会用到<code>UIBezierPath</code>，甚至一些动画也是按照指定的曲线路径运动的。</p><p>注意：只要是在view上自定义绘制内容，必须在<code>drawRect</code>执行，否则获取不到上下文。</p><h3 id="2-2-曲线"><a href="#2-2-曲线" class="headerlink" title="2.2. 曲线"></a>2.2. 曲线</h3><p>曲线由两个端点、一个控制点构成，端点决定了曲线的范围，控制点决定了曲线的曲率。<br><img src="http://blog.idbeny.com/8dbzl.png@normal" alt=""></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">50.0</span>, <span class="number">150.0</span>)];</span><br><span class="line">    [path addQuadCurveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">200.0</span>, <span class="number">150.0</span>) controlPoint:<span class="built_in">CGPointMake</span>(<span class="number">80.0</span>, <span class="number">10.0</span>)];</span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path.CGPath);</span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/ivq0p.png@normal" alt=""></p><h3 id="2-3-矩形"><a href="#2-3-矩形" class="headerlink" title="2.3. 矩形"></a>2.3. 矩形</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="built_in">CGRectMake</span>(<span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">200.0</span>, <span class="number">100.0</span>)];</span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path.CGPath);</span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/i2mk9.png@normal" alt=""></p><p>注意：宽度和高度相等时就是正方形。</p><h3 id="2-4-圆角矩形"><a href="#2-4-圆角矩形" class="headerlink" title="2.4. 圆角矩形"></a>2.4. 圆角矩形</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectMake</span>(<span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">200.0</span>, <span class="number">100.0</span>) cornerRadius:<span class="number">20.0</span>];</span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path.CGPath);</span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/k5i7j.png@normal" alt=""></p><p>可以指定边角是否加圆角</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectMake</span>(<span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">200.0</span>, <span class="number">100.0</span>) byRoundingCorners:<span class="built_in">UIRectCornerTopLeft</span> | <span class="built_in">UIRectCornerBottomLeft</span> cornerRadii:<span class="built_in">CGSizeMake</span>(<span class="number">20.0</span>, <span class="number">20.0</span>)];</span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path.CGPath);</span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>cornerRadii</code>出入的<code>size</code>是以宽度为准的，高度可以忽略。</p><p><img src="http://blog.idbeny.com/1us19.png@normal" alt=""></p><h3 id="2-5-椭圆"><a href="#2-5-椭圆" class="headerlink" title="2.5. 椭圆"></a>2.5. 椭圆</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:<span class="built_in">CGRectMake</span>(<span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">200.0</span>, <span class="number">100.0</span>)];</span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path.CGPath);</span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/gonmy.png@normal" alt=""></p><p>当传入的<code>Rect</code>宽度和高度相等的时候，就是圆形</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIBezierPath *path = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(<span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">100.0</span>, <span class="number">100.0</span>)];</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/m3sr5.png@normal" alt=""></p><h3 id="2-6-简洁写法"><a href="#2-6-简洁写法" class="headerlink" title="2.6. 简洁写法"></a>2.6. 简洁写法</h3><p>上面的示例中，都必须手动编写上下文并设置对应状态。其实<code>UIBezierPath</code>可以直接设置相关状态，不需要编写上下文的代码(内部已经帮忙实现)。</p><h4 id="2-6-1-描边"><a href="#2-6-1-描边" class="headerlink" title="2.6.1. 描边"></a>2.6.1. 描边</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">void</span>)drawRect:(CGRect)rect &#123;</span><br><span class="line">    UIBezierPath *path = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(<span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">100.0</span>, <span class="number">100.0</span>)];</span><br><span class="line">    <span class="comment">// 设置线宽</span></span><br><span class="line">    path.lineWidth = <span class="number">6.0</span>;</span><br><span class="line">    <span class="comment">// 设置颜色</span></span><br><span class="line">    [[UIColor orangeColor] <span class="keyword">set</span>];</span><br><span class="line">    <span class="comment">// 绘制形式：描边</span></span><br><span class="line">    [path stroke];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/bw2m7.png@normal" alt=""></p><h4 id="2-6-2-填充"><a href="#2-6-2-填充" class="headerlink" title="2.6.2. 填充"></a>2.6.2. 填充</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:<span class="built_in">CGRectMake</span>(<span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">100.0</span>, <span class="number">100.0</span>)];</span><br><span class="line">    [[<span class="built_in">UIColor</span> orangeColor] set];</span><br><span class="line">    [path fill];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/pijku.png@normal" alt=""></p><p>注意：所有设置必须写在<code>[path stroke]</code>或<code>[path fill]</code>前面。</p><h2 id="三、弧和扇形的绘制"><a href="#三、弧和扇形的绘制" class="headerlink" title="三、弧和扇形的绘制"></a>三、弧和扇形的绘制</h2><h3 id="3-1-弧"><a href="#3-1-弧" class="headerlink" title="3.1. 弧"></a>3.1. 弧</h3><p>弧的本质其实是圆的一部分，所以弧和圆的圆心及半径有直接关系。</p><p><img src="http://blog.idbeny.com/tcit0.png@normal" alt=""></p><p><code>UIBezierPath</code>提供了一个绘制弧路径的方法：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* </span><br><span class="line"> * @brief: 绘制弧</span><br><span class="line"> * @param: center:弧所在圆的圆心</span><br><span class="line"> * @param: radius:弧所在圆的半径</span><br><span class="line"> * @param: startAngle:开始角度</span><br><span class="line"> * @param: endAngle:结束角度</span><br><span class="line"> * @param: clockwise:是否顺时针方向绘制(如果是逆时针，角度必须是负数)</span><br><span class="line"> */</span><br><span class="line">+ (instance<span class="keyword">type</span>)bezierPathWithArcCenter:(<span class="type">CGPoint</span>)center radius:(<span class="type">CGFloat</span>)radius startAngle:(<span class="type">CGFloat</span>)startAngle endAngle:(<span class="type">CGFloat</span>)endAngle clockwise:(<span class="type">BOOL</span>)clockwise;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(CGRect)<span class="built_in">rect</span> &#123;</span><br><span class="line">    <span class="comment">// 圆形（辅助查看）</span></span><br><span class="line">    CGRect circleRect = CGRectMake(<span class="number">30.0</span>, <span class="number">30.0</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span><span class="number">-160.0</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span><span class="number">-160.0</span>);</span><br><span class="line">    UIBezierPath *circlePath = [UIBezierPath bezierPathWithOvalInRect:circleRect];</span><br><span class="line">    [[UIColor grayColor] <span class="built_in">set</span>];</span><br><span class="line">    [circlePath <span class="built_in">stroke</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 弧(和辅助圆同心同径)</span></span><br><span class="line">    CGPoint center = CGPointMake(<span class="number">30.0</span>+circleRect.<span class="built_in">size</span>.<span class="built_in">width</span>*<span class="number">0.5</span>, <span class="number">30.0</span>+circleRect.<span class="built_in">size</span>.<span class="built_in">height</span>*<span class="number">0.5</span>);</span><br><span class="line">    CGFloat radius = circleRect.<span class="built_in">size</span>.<span class="built_in">width</span>*<span class="number">0.5</span>;</span><br><span class="line">    UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:center radius:radius startAngle:<span class="number">0</span> endAngle:-M_PI_4 clockwise:NO];</span><br><span class="line">    path.lineWidth = <span class="number">4.0</span>;</span><br><span class="line">    [[UIColor redColor] <span class="built_in">set</span>];</span><br><span class="line">    [path <span class="built_in">stroke</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/jn3jb.png@normal" alt=""></p><p>上面所有参数不变，只把<code>clockwise</code>换成顺时针，看下效果：<br><img src="http://blog.idbeny.com/d7afs.png@normal" alt=""></p><h3 id="3-2-扇形"><a href="#3-2-扇形" class="headerlink" title="3.2. 扇形"></a>3.2. 扇形</h3><p>扇形就是弧度路径结束后，添加一条到圆心的直线，关闭路径即可。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(CGRect)<span class="built_in">rect</span> &#123;</span><br><span class="line">    <span class="comment">// 圆形（辅助查看）</span></span><br><span class="line">    CGRect circleRect = CGRectMake(<span class="number">30.0</span>, <span class="number">30.0</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span><span class="number">-160.0</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span><span class="number">-160.0</span>);</span><br><span class="line">    UIBezierPath *circlePath = [UIBezierPath bezierPathWithOvalInRect:circleRect];</span><br><span class="line">    [[UIColor grayColor] <span class="built_in">set</span>];</span><br><span class="line">    [circlePath <span class="built_in">stroke</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 弧(和辅助圆同心同径)</span></span><br><span class="line">    CGPoint center = CGPointMake(<span class="number">30.0</span>+circleRect.<span class="built_in">size</span>.<span class="built_in">width</span>*<span class="number">0.5</span>, <span class="number">30.0</span>+circleRect.<span class="built_in">size</span>.<span class="built_in">height</span>*<span class="number">0.5</span>);</span><br><span class="line">    CGFloat radius = circleRect.<span class="built_in">size</span>.<span class="built_in">width</span>*<span class="number">0.5</span>;</span><br><span class="line">    UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:center radius:radius startAngle:<span class="number">0</span> endAngle:-M_PI_4 clockwise:NO];</span><br><span class="line">    path.lineWidth = <span class="number">4.0</span>;</span><br><span class="line">    [[UIColor redColor] <span class="built_in">set</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扇形：添加一条到圆心的线</span></span><br><span class="line">    [path addLineToPoint:center];</span><br><span class="line">    <span class="comment">// 扇形：关闭路径（自动绘制一条从上个路径到弧度另一端的直线）</span></span><br><span class="line">    [path closePath];</span><br><span class="line"></span><br><span class="line">    [path <span class="built_in">stroke</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扇形：添加一条到圆心的线</span></span><br><span class="line">[<span class="meta">path addLineToPoint:center</span>];</span><br><span class="line"><span class="comment">// 扇形：关闭路径（自动绘制一条从路径终点到路径起点的线）</span></span><br><span class="line">[<span class="meta">path closePath</span>];</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/27bfn.png@normal" alt=""></p><p>把填充方式换成<code>fill</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[path fill]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>注意：如果使用的是<code>fill</code>，会自动关闭路径，可以不写<code>[path closePath]</code>。</p><p><img src="http://blog.idbeny.com/zb4dh.png@normal" alt=""></p><h2 id="四、案例"><a href="#四、案例" class="headerlink" title="四、案例"></a>四、案例</h2><h3 id="4-1-圆形进度条"><a href="#4-1-圆形进度条" class="headerlink" title="4.1. 圆形进度条"></a>4.1. 圆形进度条</h3><p><strong><code>ViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DBCircleProgressView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> DBCircleProgressView *progressView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UISlider</span> *slider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// 最大值和最小值</span></span><br><span class="line">    <span class="built_in">CGFloat</span> minValue = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> maxValue = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">self</span>.slider.minimumValue = minValue;</span><br><span class="line">    <span class="keyword">self</span>.slider.maximumValue = maxValue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.progressView.minValue = minValue;</span><br><span class="line">    <span class="keyword">self</span>.progressView.maxValue = maxValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑块值改变时事件</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)progressValueChanged:(<span class="built_in">UISlider</span> *)sender &#123;</span><br><span class="line">    <span class="keyword">self</span>.progressView.value = sender.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong><code>DBCircleProgressView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DBCircleProgressView.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBCircleProgressView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> value;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> minValue;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> maxValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DBCircleProgressView.m</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBCircleProgressView</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *valueLabel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBCircleProgressView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="built_in">CGFloat</span>)value &#123;</span><br><span class="line">    _value = value;</span><br><span class="line">    <span class="keyword">self</span>.valueLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.2f%%"</span>, value];</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="comment">// 圆心</span></span><br><span class="line">    <span class="built_in">CGPoint</span> center = <span class="built_in">CGPointMake</span>(rect.size.width*<span class="number">0.5</span>, rect.size.height*<span class="number">0.5</span>);</span><br><span class="line">    <span class="comment">// 半径</span></span><br><span class="line">    <span class="built_in">CGFloat</span> radius = rect.size.width*<span class="number">0.5</span><span class="number">-60.0</span>;</span><br><span class="line">    <span class="comment">// 角度</span></span><br><span class="line">    <span class="built_in">CGFloat</span> startAngle = -M_PI_2;</span><br><span class="line">    <span class="comment">// 计算1%是多少角度</span></span><br><span class="line">    <span class="built_in">CGFloat</span> angleValue = (M_PI*<span class="number">2</span>)/<span class="keyword">self</span>.maxValue;</span><br><span class="line">    <span class="built_in">CGFloat</span> endAngle = startAngle+<span class="keyword">self</span>.value*angleValue;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:center radius:radius startAngle:startAngle endAngle:endAngle clockwise:<span class="literal">YES</span>];</span><br><span class="line">    path.lineWidth = <span class="number">4.0</span>;</span><br><span class="line">    [[<span class="built_in">UIColor</span> redColor] set];</span><br><span class="line">    [path stroke];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>视图层次</strong><br><img src="http://blog.idbeny.com/hou03.png@normal" alt=""></p><p><strong>效果</strong><br><img src="http://blog.idbeny.com/ljwzv.gif@normal" alt=""></p><h3 id="4-2-扇形饼图"><a href="#4-2-扇形饼图" class="headerlink" title="4.2. 扇形饼图"></a>4.2. 扇形饼图</h3><p><strong><code>ViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> DBSectorView *sectorView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span>.sectorView.numbers = @[@<span class="number">20</span>, @<span class="number">30</span>, @<span class="number">10</span>, @<span class="number">40</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong><code>DBSectorView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBSectorView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setNumbers:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSNumber</span> *&gt; *)numbers &#123;</span><br><span class="line">    _numbers = numbers;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> center = <span class="built_in">CGPointMake</span>(rect.size.width*<span class="number">0.5</span>, rect.size.height*<span class="number">0.5</span>);</span><br><span class="line">    <span class="built_in">CGFloat</span> radius = rect.size.width*<span class="number">0.5</span><span class="number">-60.0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> startAngle = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> endAngle = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSNumber</span> *number <span class="keyword">in</span> <span class="keyword">self</span>.numbers) &#123;</span><br><span class="line">        startAngle = endAngle;</span><br><span class="line">        endAngle = startAngle + number.floatValue/<span class="number">100.0</span> * M_PI * <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:center radius:radius startAngle:startAngle endAngle:endAngle clockwise:<span class="literal">YES</span>];</span><br><span class="line">        [path addLineToPoint:center];</span><br><span class="line">        </span><br><span class="line">        [[<span class="keyword">self</span> getRandomColor] set];</span><br><span class="line">        [path fill];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取随机颜色</span></span><br><span class="line">- (<span class="built_in">UIColor</span> *)getRandomColor &#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> color_r = arc4random_uniform(<span class="number">256</span>)/<span class="number">255.0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> color_g = arc4random_uniform(<span class="number">256</span>)/<span class="number">255.0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> color_b = arc4random_uniform(<span class="number">256</span>)/<span class="number">255.0</span>;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRed:color_r green:color_g blue:color_b alpha:<span class="number">1.0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><img src="http://blog.idbeny.com/z4zgr.png@normal" alt=""></p><h2 id="五、drawRect方法的其他用法"><a href="#五、drawRect方法的其他用法" class="headerlink" title="五、drawRect方法的其他用法"></a>五、drawRect方法的其他用法</h2><p>drawRect还可以绘制文字、图片等，只要能显示的任何UI内容，都可以通过drawRect绘制。</p><h3 id="5-1-绘制文字"><a href="#5-1-绘制文字" class="headerlink" title="5.1. 绘制文字"></a>5.1. 绘制文字</h3><p><strong><code>DBDrawTextView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *text = <span class="string">@"idbeny"</span>;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *attriDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    <span class="comment">// 字体</span></span><br><span class="line">    [attriDict setObject:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">36.0</span>] forKey:<span class="built_in">NSFontAttributeName</span>];</span><br><span class="line">    <span class="comment">// 颜色</span></span><br><span class="line">    [attriDict setObject:[<span class="built_in">UIColor</span> redColor] forKey:<span class="built_in">NSForegroundColorAttributeName</span>];</span><br><span class="line">    <span class="comment">// 描边</span></span><br><span class="line">    [attriDict setObject:[<span class="built_in">UIColor</span> blueColor] forKey:<span class="built_in">NSStrokeColorAttributeName</span>];</span><br><span class="line">    <span class="comment">// 描边宽度</span></span><br><span class="line">    [attriDict setObject:@<span class="number">3</span> forKey:<span class="built_in">NSStrokeWidthAttributeName</span>];</span><br><span class="line">    <span class="comment">// 阴影</span></span><br><span class="line">    <span class="built_in">NSShadow</span> *shadow = [[<span class="built_in">NSShadow</span> alloc] init];</span><br><span class="line">    shadow.shadowOffset = <span class="built_in">CGSizeMake</span>(<span class="number">5.0</span>, <span class="number">5.0</span>);</span><br><span class="line">    shadow.shadowColor = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">    [attriDict setObject:shadow forKey:<span class="built_in">NSShadowAttributeName</span>];</span><br><span class="line">    </span><br><span class="line">    [text drawAtPoint:<span class="built_in">CGPointZero</span> withAttributes:attriDict];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/bt7ws.png@normal" alt=""></p><p>注意：设置<code>NSStrokeColorAttributeName</code>后，<code>NSForegroundColorAttributeName</code>就会失效。</p><h3 id="5-2-绘制图片"><a href="#5-2-绘制图片" class="headerlink" title="5.2. 绘制图片"></a>5.2. 绘制图片</h3><p><strong><code>DBDrawImageView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBDrawImageView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"test"</span>];</span><br><span class="line">    [image drawInRect:rect];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/6o3qh.png@normal" alt=""></p><h2 id="六、深入理解上下文（状态栈）"><a href="#六、深入理解上下文（状态栈）" class="headerlink" title="六、深入理解上下文（状态栈）"></a>六、深入理解上下文（状态栈）</h2><p>抽象上来说上下文分为两块区域，一块区域存放路径，另一块区域存放状态。每次渲染都是从存放路径的区域取出路径，并应用当前状态。上下文状态默认只有一份，为了能够有多种状态可重复利用，就有了上下文状态栈。上下文状态栈可以保存和恢复对应的状态，是一个栈结构，每保存一次相当于向栈中添加一次状态，恢复一次就是把栈顶的状态取出并应用。</p><p>小技巧：上下文状态栈也可以理解为历史记录。</p><p><strong>保存当前上下文状态：</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGContextSaveGState(<span class="name">ctx</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><strong>取出(恢复)上下文状态栈中栈顶状态：</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGContextRestoreGState(<span class="name">ctx</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="comment">// 1.获取上下文</span></span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    <span class="comment">// 2.描述路径</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">50.0</span>, <span class="number">20.0</span>)];</span><br><span class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">250.0</span>, <span class="number">20.0</span>)];</span><br><span class="line">    <span class="comment">// 3.路径添加到上下文</span></span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path.CGPath);</span><br><span class="line">    <span class="comment">// 4.设置上下文状态</span></span><br><span class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">10.0</span>);</span><br><span class="line">    [[<span class="built_in">UIColor</span> redColor] set];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存当前状态到上下文状态栈中（线宽10，红色）</span></span><br><span class="line">    <span class="built_in">CGContextSaveGState</span>(ctx);</span><br><span class="line">    <span class="comment">// 5.渲染</span></span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.新增路径</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path2 = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    [path2 moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">50.0</span>, <span class="number">70.0</span>)];</span><br><span class="line">    [path2 addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">250.0</span>, <span class="number">70.0</span>)];</span><br><span class="line">    <span class="comment">// 2.路径添加到上下文</span></span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path2.CGPath);</span><br><span class="line">    <span class="comment">// 3.设置上下文状态</span></span><br><span class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">20.0</span>);</span><br><span class="line">    [[<span class="built_in">UIColor</span> blueColor] set];</span><br><span class="line">    <span class="comment">// 保存当前状态到上下文状态栈中（线宽20，蓝色）</span></span><br><span class="line">    <span class="built_in">CGContextSaveGState</span>(ctx);</span><br><span class="line">    <span class="comment">// 4.渲染</span></span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.新增路径</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path3 = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    [path3 moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">50.0</span>, <span class="number">120.0</span>)];</span><br><span class="line">    [path3 addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">250.0</span>, <span class="number">120.0</span>)];</span><br><span class="line">    <span class="comment">// 2.路径添加到上下文</span></span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path3.CGPath);</span><br><span class="line">    <span class="comment">// 3.取出上下文状态栈栈顶状态并应用（取出：线宽20，蓝色）</span></span><br><span class="line">    <span class="built_in">CGContextRestoreGState</span>(ctx);</span><br><span class="line">    <span class="comment">// 4.渲染</span></span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.新增路径</span></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path4 = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    [path4 moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">50.0</span>, <span class="number">170.0</span>)];</span><br><span class="line">    [path4 addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">250.0</span>, <span class="number">170.0</span>)];</span><br><span class="line">    <span class="comment">// 2.路径添加到上下文</span></span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path4.CGPath);</span><br><span class="line">    <span class="comment">// 3.取出上下文状态栈栈顶状态并应用（取出：线宽10，红色）</span></span><br><span class="line">    <span class="built_in">CGContextRestoreGState</span>(ctx);</span><br><span class="line">    <span class="comment">// 4.渲染</span></span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="http://blog.idbeny.com/080i6.png@normal" alt=""></p><p><strong>扩展-上下文的矩阵操作</strong><br>上下文内容在添加到渲染进程中前可以对内容进行一些矩阵变换（形变）。</p><ul><li><code>CGContextTranslateCTM</code> 平移</li><li><code>CGContextScaleCTM</code> 缩放</li><li><code>CGContextRotateCTM</code> 旋转</li></ul><p>注意：上下文中的矩阵变换坐标系和UIView中的坐标系不一样。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Quartz2D </tag>
            
            <tag> UIBezierPath </tag>
            
            <tag> 绘制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】事件响应链</title>
      <link href="/2016/09/02/ios-responder/"/>
      <url>/2016/09/02/ios-responder/</url>
      
        <content type="html"><![CDATA[<p>在iOS中不是任何对象都能处理事件，只有继承了<code>UIResponder</code>的对象才能接收并处理事件，我们称之为<strong>响应者对象</strong>。</p><a id="more"></a><h2 id="一、UIResponder"><a href="#一、UIResponder" class="headerlink" title="一、UIResponder"></a>一、UIResponder</h2><p><code>UIApplication</code>，<code>UIViewController</code>、<code>UIView</code>都继承自<code>UIResponder</code>，因此他们都是响应者对象，都能接收并处理事件。</p><p><code>UIResponder</code>内部提供了以下方法来处理事件：</p><h3 id="1-1-触摸事件"><a href="#1-1-触摸事件" class="headerlink" title="1.1. 触摸事件"></a>1.1. 触摸事件</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</span><br><span class="line">- (<span class="keyword">void</span>)touchesMoved:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</span><br><span class="line">- (<span class="keyword">void</span>)touchesEnded:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</span><br><span class="line">- (<span class="keyword">void</span>)touchesCancelled:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</span><br></pre></td></tr></table></figure><p><code>touches</code>是一个集合对象，集合存放的对象都是<code>UITouch</code>类型。为什么要放到集合里面呢？因为每一根手指对应一个<code>UITouch</code>对象，多个手指就会对应多个<code>UITouch</code>对象，所以要放到一个集合里面。</p><h4 id="UITouch"><a href="#UITouch" class="headerlink" title="UITouch"></a>UITouch</h4><p>作用：</p><ul><li>保存手指触摸相关的信息，比如触摸的位置、时间、阶段等；</li><li>当手指移动时，系统会更新同一个<code>UITouch</code>对象，使之能够一直保存该手指所在的触摸位置；</li><li>当手指离开屏幕时，系统会销毁对应的<code>UITouch</code>对象。</li></ul><h5 id="UITouch常用属性"><a href="#UITouch常用属性" class="headerlink" title="UITouch常用属性"></a>UITouch常用属性</h5><ul><li><p>触摸产生时所处的窗口</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>,<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">UIWindow</span> *window;</span><br></pre></td></tr></table></figure></li><li><p>触摸产生时所处的视图</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>,<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">UIView</span> *view;</span><br></pre></td></tr></table></figure></li><li><p>短时间内点按屏幕的次数，可以根据tapCount判断单击、双击或多次点击</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">NSUInteger</span> tapCount;</span><br></pre></td></tr></table></figure></li><li><p>记录了触摸事件产生或变化时的时间，单位是秒</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">NSTimeInterval</span> timestamp;</span><br></pre></td></tr></table></figure></li><li><p>当前触摸事件所处的状态</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">UITouchPhase</span> phase;</span><br></pre></td></tr></table></figure></li></ul><h5 id="UITouch常用方法"><a href="#UITouch常用方法" class="headerlink" title="UITouch常用方法"></a>UITouch常用方法</h5><ul><li><p>获取触摸点的坐标</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">CGPoint</span>)locationInView:(<span class="keyword">nullable</span> <span class="built_in">UIView</span> *)view;</span><br></pre></td></tr></table></figure><ul><li>返回值表示触摸在view上的位置；</li><li>这里返回的位置是针对触摸view的坐标系的（以view的左上角为原点<code>{0, 0}</code>）；</li><li>调用时传入的view参数为<code>nil</code>的话，返回的是触摸点在<code>UIWindow</code>的位置。</br></li></ul></li><li><p>获取触摸view上一个触摸点坐标（上一个触摸位置的历史记录点）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">CGPoint</span>)previousLocationInView:(<span class="keyword">nullable</span> <span class="built_in">UIView</span> *)view;</span><br></pre></td></tr></table></figure></li></ul><h4 id="UIEvent"><a href="#UIEvent" class="headerlink" title="UIEvent"></a>UIEvent</h4><p><code>UIEvent</code>称为事件对象，记录事件产生的时刻和类型。每产生一个事件，就会产生一个<code>UIEvent</code>对象。</p><h5 id="UIEvent常用属性"><a href="#UIEvent常用属性" class="headerlink" title="UIEvent常用属性"></a>UIEvent常用属性</h5><ul><li><p>事件类型</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">UIEventType</span> type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">UIEventSubtype</span> subtype;</span><br></pre></td></tr></table></figure></li><li><p>事件产生的时间</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">NSTimeInterval</span> timestamp;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-加速计事件"><a href="#1-2-加速计事件" class="headerlink" title="1.2. 加速计事件"></a>1.2. 加速计事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)motionBegan:(UIEventSubtype)motion withEvent:(nullable UIEvent *)event API_AVAILABLE(ios(3.0));</span><br><span class="line">- (void)motionEnded:(UIEventSubtype)motion withEvent:(nullable UIEvent *)event API_AVAILABLE(ios(3.0));</span><br><span class="line">- (void)motionCancelled:(UIEventSubtype)motion withEvent:(nullable UIEvent *)event API_AVAILABLE(ios(3.0));</span><br></pre></td></tr></table></figure><h3 id="1-3-远程控制事件"><a href="#1-3-远程控制事件" class="headerlink" title="1.3. 远程控制事件"></a>1.3. 远程控制事件</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">void</span>)remoteControlReceivedWithEvent:(<span class="literal">null</span>able UIEvent *)event API_AVAILABLE(ios(<span class="number">4.0</span>));</span><br></pre></td></tr></table></figure><h3 id="1-4-3DTouch事件"><a href="#1-4-3DTouch事件" class="headerlink" title="1.4. 3DTouch事件"></a>1.4. 3DTouch事件</h3><p>3DTouch是iOS9新增的事件，只有iPhone6s以上机型才支持。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)pressesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UIPress</span> *&gt; *)presses withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIPressesEvent</span> *)event API_AVAILABLE(ios(<span class="number">9.0</span>));</span><br><span class="line">- (<span class="keyword">void</span>)pressesChanged:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UIPress</span> *&gt; *)presses withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIPressesEvent</span> *)event API_AVAILABLE(ios(<span class="number">9.0</span>));</span><br><span class="line">- (<span class="keyword">void</span>)pressesEnded:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UIPress</span> *&gt; *)presses withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIPressesEvent</span> *)event API_AVAILABLE(ios(<span class="number">9.0</span>));</span><br><span class="line">- (<span class="keyword">void</span>)pressesCancelled:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UIPress</span> *&gt; *)presses withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIPressesEvent</span> *)event API_AVAILABLE(ios(<span class="number">9.0</span>));</span><br></pre></td></tr></table></figure><h2 id="二、事件的产生和传递"><a href="#二、事件的产生和传递" class="headerlink" title="二、事件的产生和传递"></a>二、事件的产生和传递</h2><p>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication</code>管理的事件队列中。</p><p><code>UIApplication</code>会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口(就是<code>UIApplication</code>的<code>keyWindow</code>)。</p><p>主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。</p><p>找到合适的视图控件后，就会调用视图控件的<code>touches</code>系列方法来作具体的事件处理。</p><p>触摸事件的传递是从父控件传递到子控件，如果父控件不能接收触摸事件，那么子控件就不可能接收到触摸事件。</p><p><strong>什么情况下UIView不接收事件呢？</strong></p><ul><li>不接收用户交互 <code>userInteractionEnabled = NO;</code></li><li>视图隐藏 <code>hidden = YES;</code></li><li>透明 <code>alpha &lt;= 0.01</code></li></ul><p>注意：<code>UIImageView</code>的<code>userInteractionEnabled</code>默认值是<code>NO</code>，所以<code>UIImageView</code>及其子控件默认是不能接收事件的。</p><p>我们通过一个示例程序，看下事件传递过程：<br><img src="http://blog.idbeny.com/5bpba.png@normal" alt=""></p><p>示例中视图的层级关系：<br><img src="http://blog.idbeny.com/1oj2g.png@normal" alt=""></p><p>点击红色view时事件传递：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; UIA<span class="function"><span class="title">pplication</span> -&gt;</span> UIW<span class="function"><span class="title">indow</span>（keyWindow）-&gt;</span> 白色<span class="function"><span class="title">view</span>（或控制器view）-&gt;</span> 红色view</span><br></pre></td></tr></table></figure><p>点击紫色view时事件传递：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; UIA<span class="function"><span class="title">pplication</span> -&gt;</span> UIW<span class="function"><span class="title">indow</span>（keyWindow）-&gt;</span> 白色<span class="function"><span class="title">view</span>（或控制器view）-&gt;</span> 黄色<span class="function"><span class="title">view</span> -&gt;</span> 蓝色<span class="function"><span class="title">view</span> -&gt;</span> 紫色view</span><br></pre></td></tr></table></figure><h3 id="2-1-hitTest"><a href="#2-1-hitTest" class="headerlink" title="2.1. hitTest"></a>2.1. hitTest</h3><p>这个方法是<code>UIView</code>提供的，当事件传递给当前view时，会调用当前view的该方法看自己及其子类是否能够接收事件，最终返回能够接收事件的view对象。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event</span><br></pre></td></tr></table></figure><ul><li>point：触摸点</li><li>event：事件信息</li><li>返回值：处理事件的view</li></ul><p>我们通过上面案例看下该方法的响应过程：</p><p><strong><code>ViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"控制器"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>DBRedView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"RedView-Touch"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"RedView"</span>);</span><br><span class="line">    <span class="built_in">UIView</span> *fitView = [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"RedView：%@"</span>, fitView);</span><br><span class="line">    <span class="keyword">return</span> fitView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>DBGreenView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"GreenView-Touch"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"GreenView"</span>);</span><br><span class="line">    <span class="built_in">UIView</span> *fitView = [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"GreenView：%@"</span>, fitView);</span><br><span class="line">    <span class="keyword">return</span> fitView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>DBYellowView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"YellowView-Touch"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"YellowView"</span>);</span><br><span class="line">    <span class="built_in">UIView</span> *fitView = [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"YellowView：%@"</span>, fitView);</span><br><span class="line">    <span class="keyword">return</span> fitView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>DBBlueView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"BlueView-Touch"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"BlueView"</span>);</span><br><span class="line">    <span class="built_in">UIView</span> *fitView = [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"BlueView：%@"</span>, fitView);</span><br><span class="line">    <span class="keyword">return</span> fitView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>DBPurpleView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"PurpleView-Touch"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"PurpleView"</span>);</span><br><span class="line">    <span class="built_in">UIView</span> *fitView = [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"PurpleView：%@"</span>, fitView);</span><br><span class="line">    <span class="keyword">return</span> fitView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>DBTealView</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"TealView-Touch"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"TealView"</span>);</span><br><span class="line">    <span class="built_in">UIView</span> *fitView = [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"TealView：%@"</span>, fitView);</span><br><span class="line">    <span class="keyword">return</span> fitView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击控制器白色view时，输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">15</span>:<span class="number">44</span>:<span class="number">06.321289</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26021</span>:<span class="number">1537173</span>] RedView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">15</span>:<span class="number">44</span>:<span class="number">06.325440</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26021</span>:<span class="number">1537173</span>] RedView：(<span class="literal">null</span>)</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">15</span>:<span class="number">44</span>:<span class="number">06.328733</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26021</span>:<span class="number">1537173</span>] YellowView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">15</span>:<span class="number">44</span>:<span class="number">06.328981</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26021</span>:<span class="number">1537173</span>] YellowView：(<span class="literal">null</span>)</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">15</span>:<span class="number">44</span>:<span class="number">06.330303</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26021</span>:<span class="number">1537173</span>] 控制器</span><br></pre></td></tr></table></figure><p>点击红色view时，输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">10.479834</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] RedView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">10.480586</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] GreenView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">10.481762</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] GreenView：(<span class="literal">null</span>)</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">10.482075</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] RedView：&lt;DBRedView: <span class="number">0x7ff8bef0acb0</span>; frame = (<span class="number">61</span> <span class="number">142</span>; <span class="number">240</span> <span class="number">128</span>); <span class="built_in">auto</span>resize = RM+BM; layer = &lt;CALayer: <span class="number">0x6000028c1be0</span>&gt;&gt;</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">10.483538</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] RedView-Touch</span><br></pre></td></tr></table></figure><p>点击紫色view时，输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.484942</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] RedView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.485866</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] RedView：(<span class="literal">null</span>)</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.486541</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] YellowView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.488789</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] BlueView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.489842</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] TealView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.493370</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] TealView：(<span class="literal">null</span>)</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.494274</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] PurpleView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.495143</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] PurpleView：&lt;DBPurpleView: <span class="number">0x7ff8bef0be20</span>; frame = (<span class="number">23</span> <span class="number">20</span>; <span class="number">138</span> <span class="number">86</span>); <span class="built_in">auto</span>resize = RM+BM; layer = &lt;CALayer: <span class="number">0x6000028c1b00</span>&gt;&gt;</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.496871</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] BlueView：&lt;DBPurpleView: <span class="number">0x7ff8bef0be20</span>; frame = (<span class="number">23</span> <span class="number">20</span>; <span class="number">138</span> <span class="number">86</span>); <span class="built_in">auto</span>resize = RM+BM; layer = &lt;CALayer: <span class="number">0x6000028c1b00</span>&gt;&gt;</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.497910</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] YellowView：&lt;DBPurpleView: <span class="number">0x7ff8bef0be20</span>; frame = (<span class="number">23</span> <span class="number">20</span>; <span class="number">138</span> <span class="number">86</span>); <span class="built_in">auto</span>resize = RM+BM; layer = &lt;CALayer: <span class="number">0x6000028c1b00</span>&gt;&gt;</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">35.499034</span>+<span class="number">0800</span> ResponderDemo[<span class="number">26986</span>:<span class="number">1550250</span>] PurpleView-Touch</span><br></pre></td></tr></table></figure><ul><li>分析点击紫色view事件传递过程：<ul><li>查看<code>UIWindow</code>上的视图，把事件传递给控制器view；</li><li>倒序遍历控制器view子视图<code>[Yellow, RedView]</code>，把事件传递给<code>RedView</code>；</li><li>遍历<code>RedView</code>的子视图，发现是空的，且不是最适合接收事件的对象，返回<code>nil</code>，把事件传递给<code>YellowView</code>；</li><li>遍历<code>YellowView</code>的子视图<code>[BlueView]</code>，把事件传递给<code>BlueView</code>；</li><li>遍历<code>BlueView</code>的子视图<code>[PurpleView, TealView]</code>，把事件传递给<code>TealView</code>；</li><li>遍历<code>TealView</code>的子视图，发现是空的，且不是最适合接收事件的对象，返回<code>nil</code>，把事件传递给<code>PurpleView</code>；</li><li>遍历<code>PurpleView</code>的子视图，发现是空的，但是自己是最适合接收事件的对象，返回自己，并把这个返回值依次往上传递给自己的父视图（<code>BlueView</code>，<code>YellowView</code>），最后执行<code>Touch</code>方法；</li></ul></li></ul><p>通过上面案例我们可以总结以下结论：</p><p>系统触摸事件到App进程后，由<code>UIApplication</code>的事件队列进行管理，之后会按照数组倒序形式匹配适合的视图来接收事件，并把事件传递给子控件，调用子控件的<code>hitTest:withEvent:</code>方法，如果子控件没有找到最适合的view，那么自己就是最适合接收事件的view，最终执行<code>Touch</code>方法。</p><p><strong>问题来了，怎样判断一个视图就是最适合接收事件的视图呢？</strong></p><p>继续往下看……</p><h3 id="2-2-pointInside"><a href="#2-2-pointInside" class="headerlink" title="2.2. pointInside"></a>2.2. pointInside</h3><p>这个方法也是<code>UIView</code>提供的，当事件传递给当前视图时，会判断触摸点是否在当前视图范围内，以此来判断是否可以有效接收事件。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)pointInside:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</span><br></pre></td></tr></table></figure><ul><li>point：触摸点</li><li>event：事件信息</li><li>返回值：YES代表点在view的范围内，NO代表触摸点不在范围内</li></ul><p>继续研究上面的案例：<br><strong><code>DBYellowView</code>新增<code>pointInside:</code>方法</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"YellowView-Touch"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)pointInside:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"YellowView-pointInside"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击紫色view时，输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">56.407022</span>+<span class="number">0800</span> ResponderDemo[<span class="number">29351</span>:<span class="number">1579409</span>] RedView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">56.407183</span>+<span class="number">0800</span> ResponderDemo[<span class="number">29351</span>:<span class="number">1579409</span>] RedView：(<span class="literal">null</span>)</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">56.407358</span>+<span class="number">0800</span> ResponderDemo[<span class="number">29351</span>:<span class="number">1579409</span>] YellowView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">56.407619</span>+<span class="number">0800</span> ResponderDemo[<span class="number">29351</span>:<span class="number">1579409</span>] YellowView-pointInside</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">56.408169</span>+<span class="number">0800</span> ResponderDemo[<span class="number">29351</span>:<span class="number">1579409</span>] YellowView：(<span class="literal">null</span>)</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">56.410258</span>+<span class="number">0800</span> ResponderDemo[<span class="number">29351</span>:<span class="number">1579409</span>] 控制器</span><br></pre></td></tr></table></figure><p><code>pointInside</code>方法返回<code>NO</code>时，事件没有继续往下传递，<code>touches</code>相关方法也就不再执行了。而且事件往下传递前调用了<code>pointInside:withEvent:</code>方法，最后在<code>hitTest:withEvent:</code>方法中返回了<code>nil</code>。</p><p>把黄色view中的<code>pointInside</code>返回<code>YES</code>，点击控制器view时，输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">23.508077</span>+<span class="number">0800</span> ResponderDemo[<span class="number">30341</span>:<span class="number">1594278</span>] RedView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">23.508731</span>+<span class="number">0800</span> ResponderDemo[<span class="number">30341</span>:<span class="number">1594278</span>] RedView：(<span class="literal">null</span>)</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">23.509501</span>+<span class="number">0800</span> ResponderDemo[<span class="number">30341</span>:<span class="number">1594278</span>] YellowView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">23.510144</span>+<span class="number">0800</span> ResponderDemo[<span class="number">30341</span>:<span class="number">1594278</span>] YellowView-pointInside</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">23.510786</span>+<span class="number">0800</span> ResponderDemo[<span class="number">30341</span>:<span class="number">1594278</span>] BlueView</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">23.511459</span>+<span class="number">0800</span> ResponderDemo[<span class="number">30341</span>:<span class="number">1594278</span>] BlueView：(<span class="literal">null</span>)</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">23.512512</span>+<span class="number">0800</span> ResponderDemo[<span class="number">30341</span>:<span class="number">1594278</span>] YellowView：&lt;DBYellowView: <span class="number">0x7fa89df113a0</span>; frame = (<span class="number">32</span> <span class="number">335</span>; <span class="number">269</span> <span class="number">143</span>); <span class="built_in">auto</span>resize = RM+BM; layer = &lt;CALayer: <span class="number">0x600002317a80</span>&gt;&gt;</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">23.514456</span>+<span class="number">0800</span> ResponderDemo[<span class="number">30341</span>:<span class="number">1594278</span>] YellowView-Touch</span><br></pre></td></tr></table></figure><p>为什么点击控制器view时，<code>YellowView</code>会执行<code>Touch</code>方法？因为事件传递给黄色view时，黄色view把该触摸点认为是在自身范围内的，所以最终在<code>hitTest</code>方法中返回自己。</p><p>这在正常逻辑中是错误的行为，因为<code>pointInside</code>方法必须是和方法调用者在同一个坐标系。默认情况下，由系统判断一个点是否在view的范围内时，是根据触摸点的坐标是否超出view的范围来判断的，如果超出view的范围，就不应该触发<code>touch</code>方法。</p><h3 id="2-3-hitTest方法的内部实现"><a href="#2-3-hitTest方法的内部实现" class="headerlink" title="2.3. hitTest方法的内部实现"></a>2.3. hitTest方法的内部实现</h3><p>上面了解事件传递的规则后，我们尝试手动实现其内部逻辑代码。</p><p>内部逻辑：</p><ol><li>判断自己能否接收事件；</li><li>点在不在自己身上；</li><li>倒序遍历子控件，把事件传递给子控件，调用子控件的<code>hitTest:withEvent</code>方法；</li><li>如果子控件没有找到最适合的view，那么自己就是最适合的view。</li></ol><p>内部实现代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="comment">// 1.判断自己是否可以接收事件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.userInteractionEnabled == <span class="literal">NO</span> || <span class="keyword">self</span>.hidden == <span class="literal">YES</span> || <span class="keyword">self</span>.alpha &lt;= <span class="number">0.01</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.判断触摸点是否在自己范围内</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> pointInside:point withEvent:event]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.逆序遍历自己的子控件，事件传递给子控件，调用子控件的hitTest:withEvent方法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *subView <span class="keyword">in</span> [<span class="keyword">self</span>.subviews reverseObjectEnumerator]) &#123;</span><br><span class="line">        <span class="comment">// 此处不要直接传上面的point和event，子视图和父视图不在同一个坐标系，需要把当前触摸点的坐标系转换为subView的坐标系</span></span><br><span class="line">        <span class="comment">// CGPoint convertPoint = [self convertPoint:point toView:subView]; // 两个方法通用</span></span><br><span class="line">        <span class="built_in">CGPoint</span> convertPoint = [subView convertPoint:point fromView:<span class="keyword">self</span>];</span><br><span class="line">        <span class="built_in">UIView</span> *fitView = [subView hitTest:convertPoint withEvent:event];</span><br><span class="line">        <span class="keyword">if</span> (fitView) &#123;</span><br><span class="line">            <span class="keyword">return</span> fitView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.没有找到更合适的view，就把自己返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、案例分析"><a href="#三、案例分析" class="headerlink" title="三、案例分析"></a>三、案例分析</h2><p>场景：一个view覆盖到按钮上面，按钮绑定的事件和view的点击事件互不影响。<br><img src="http://blog.idbeny.com/27oy0.png@normal" alt=""></p><p>代码实现：<br><strong><code>DBTealView.h</code></strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">DBTealView </span>: UIView</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><p><strong><code>DBTealView.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"DBTealView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBTealView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"TealView-Touch"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong><code>DBTouchButtonViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"DBTouchButtonViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DBTealView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DBTouchButtonViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *redBtn;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> DBTealView *tealView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBTouchButtonViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)redBtnTouch:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>点击蓝色view输出：<code>TealView-Touch</code><br>点击红色按钮输出：<code>-[DBTouchButtonViewController redBtnTouch:]</code><br>点击红色按钮和蓝色view的交集（覆盖面）输出：<code>TealView-Touch</code></p><p>很显然不是我们想要的结果，利用上面介绍的知识修改下代码就可以。<br><strong><code>DBTouchButtonViewController.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span>.tealView.bindBtn = <span class="keyword">self</span>.redBtn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>DBTealView.h</code></strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">DBTealView </span>: UIView</span><br><span class="line"></span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong) UIButton *bindBtn;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><p><strong><code>DBTealView.m</code></strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (UIView *)<span class="string">hitTest:</span>(CGPoint)point <span class="string">withEvent:</span>(UIEvent *)event &#123;</span><br><span class="line">    CGPoint btnPoint = [self <span class="string">convertPoint:</span>point <span class="string">toView:</span>self.bindBtn];</span><br><span class="line">    <span class="keyword">if</span> ([self.bindBtn <span class="string">pointInside:</span>btnPoint <span class="string">withEvent:</span>event]) &#123;</span><br><span class="line">        <span class="keyword">return</span> self.bindBtn;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> <span class="string">hitTest:</span>point <span class="string">withEvent:</span>event];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击蓝色view输出：<code>TealView-Touch</code><br>点击红色按钮输出：<code>-[DBTouchButtonViewController redBtnTouch:]</code><br>点击红色按钮和蓝色view的交集（覆盖面）输出：<code>-[DBTouchButtonViewController redBtnTouch:]</code></p><p>结果符合预期。</p><p>结论：当遇到事件冲突或者需要事件转移的时候，应首先考虑让哪个视图在什么样的条件下成为事件最终处理者。在平时开发中，通过该方式可以增加视图的热区（触摸）范围。</p><h2 id="四、事件的响应链"><a href="#四、事件的响应链" class="headerlink" title="四、事件的响应链"></a>四、事件的响应链</h2><p><strong>响应链条</strong>：由多个响应者对象连接起来的链条。<br><strong>作用</strong>：能够很清楚的看见每个响应者之间的关系，并且可以让一个事件多个对象处理。</p><p><img src="http://blog.idbeny.com/bpdfo.png@normal" alt=""></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>UI构建还是以上面的示例程序为参考<br><img src="http://blog.idbeny.com/5bpba.png@normal" alt=""></p><p>自定义Application、Window、然后重写他们以及界面上view的<code>touchesBegan:withEvent:</code>方法</p><p><strong><code>main.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> * appDelegateClassName;</span><br><span class="line">    <span class="built_in">NSString</span> * applicationClassName;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        appDelegateClassName = <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]);</span><br><span class="line">        applicationClassName = <span class="built_in">NSStringFromClass</span>([DBApplication <span class="keyword">class</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, applicationClassName, appDelegateClassName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>DBApplication.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBApplication</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">    [<span class="keyword">super</span> touchesBegan:touches withEvent:event];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong><code>DBWindow</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DBWindow</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">    [<span class="keyword">super</span> touchesBegan:touches withEvent:event];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong><code>AppDelegate.m</code></strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="keyword">self</span>.window = [[DBWindow alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIStoryboard</span> *storyboard = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Main"</span> bundle:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">UIViewController</span> *rootVC = [storyboard instantiateInitialViewController];</span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = rootVC;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他view都参照<code>DBWindow</code>，重写<code>touchesBegan:withEvent:</code>方法，并调用父类的方法。</p><p>点击紫色view输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">16.940994</span>+<span class="number">0800</span> ResponderDemo[<span class="number">59378</span>:<span class="number">1948636</span>] -[DBPurpleView touchesBegan:withEvent:]</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">16.941752</span>+<span class="number">0800</span> ResponderDemo[<span class="number">59378</span>:<span class="number">1948636</span>] -[DBBlueView touchesBegan:withEvent:]</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">16.942950</span>+<span class="number">0800</span> ResponderDemo[<span class="number">59378</span>:<span class="number">1948636</span>] -[DBYellowView touchesBegan:withEvent:]</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">16.947504</span>+<span class="number">0800</span> ResponderDemo[<span class="number">59378</span>:<span class="number">1948636</span>] -[ViewController touchesBegan:withEvent:]</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">16.947691</span>+<span class="number">0800</span> ResponderDemo[<span class="number">59378</span>:<span class="number">1948636</span>] -[DBWindow touchesBegan:withEvent:]</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-02</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">16.948315</span>+<span class="number">0800</span> ResponderDemo[<span class="number">59378</span>:<span class="number">1948636</span>] -[DBApplication touchesBegan:withEvent:]</span><br></pre></td></tr></table></figure><h3 id="事件处理的流程"><a href="#事件处理的流程" class="headerlink" title="事件处理的流程"></a>事件处理的流程</h3><ol><li>先将事件对象由上往下传递（由父控件传递给子控件），找到合适的控件来处理这个事件；</li><li>调用最合适控件的<code>touches..</code>系列方法；</li><li>如果调用了<code>[super touches...]</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者；</li><li>接着就会调用上一个响应者的<code>touches..</code>系列方法；</li><li>如果没有响应者或响应者对象是<code>UIApplication</code>，则事件终止。</li></ol><h3 id="如何判断上一个响应者？"><a href="#如何判断上一个响应者？" class="headerlink" title="如何判断上一个响应者？"></a>如何判断上一个响应者？</h3><ul><li>如果当前view是控制器的view，那么控制器就是上一个响应者；</li><li>如果当前view不是控制器的view，那么父控件就是上一个响应者。</li></ul><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>如果想监听一个view上面的触摸事件，需要自定义view，实现view的touches方法，在方法内部实现具体处理代码。但这种方式实现起来有明显的缺点：必须自定义view，由于在view内部touches方法中监听事件，因此默认情况下，无法让其他外界对象监听view的触摸事件，而且实现用户的具体手势行为非常繁琐。因此苹果给我们提供了手势识别功能（Gesture Recognizer），简单易用，开发效率大大提升。</p><hr><p>注意：<code>hitTest</code>和<code>pointInside</code>方法系统会执行两次，文中的相关输出都是经过过滤的。至于为什么会执行两次，苹果工程师给出了以下答复(<a href="https://lists.apple.com/archives/cocoa-dev/2014/Feb/msg00118.html" target="_blank" rel="noopener">查看原文回复</a>)</p><blockquote><p>Yes, it’s normal. The system may tweak the point being hit tested between the calls. Since hitTest should be a pure function with no side-effects, this should be fine.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Responder </tag>
            
            <tag> Events </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】KVC和KVO的应用及本质</title>
      <link href="/2016/08/21/ios-kvc-kvo/"/>
      <url>/2016/08/21/ios-kvc-kvo/</url>
      
        <content type="html"><![CDATA[<p>对于私有属性或成员变量如何进行读写？</p><a id="more"></a><h2 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h2><p>KVC（Key Value Coding）键值编码，可以通过Key名直接读写对象属性或成员变量，即使有些成员变量是私有的也可以。KVC是一个基于<code>NSKeyValueCoding</code>非正式协议实现的机制，KVC的定义是通过<code>NSObject</code>的分类<code>NSKeyValueCoding</code>实现的，所以一切继承自<code>NSObject</code>的对象都可以实现KVC。</p><h3 id="案例一（属性）"><a href="#案例一（属性）" class="headerlink" title="案例一（属性）"></a>案例一（属性）</h3><p><strong>案例一声明：</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YBPerson </span>: NSObject</span><br><span class="line"></span><br><span class="line"><span class="variable">@property</span> (nonatomic,   copy) NSString *name; <span class="comment">// 姓名</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) NSInteger  age; <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> YBPerson</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><p><strong>案例一使用：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YBPerson *person = <span class="literal">[[YBP<span class="identifier">erson</span> <span class="identifier">alloc</span>]</span> init];</span><br><span class="line">person.name = @<span class="string">"idbeny"</span>;</span><br><span class="line">person.age = <span class="number">10</span>;</span><br><span class="line"><span class="constructor">NSLog(@<span class="string">"%@-%ld"</span>, <span class="params">person</span>.<span class="params">name</span>, <span class="params">person</span>.<span class="params">age</span>)</span>;</span><br><span class="line"><span class="comment">// 输出：idbeny-10</span></span><br></pre></td></tr></table></figure><p>我们正常访问一个属性是通过上述点语法的方式，如果是成员变量如何访问呢？</p><h3 id="案例二（成员变量-公共）"><a href="#案例二（成员变量-公共）" class="headerlink" title="案例二（成员变量-公共）"></a>案例二（成员变量-公共）</h3><p><strong>案例二声明：</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YBPerson </span>: NSObject</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">@public</span></span><br><span class="line">    NSString *_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@property</span> (nonatomic) NSInteger age;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> YBPerson</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><p><strong>案例二使用：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YBPerson *person = <span class="literal">[[YBP<span class="identifier">erson</span> <span class="identifier">alloc</span>]</span> init];</span><br><span class="line">person -&gt; _name = @<span class="string">"idbeny"</span>;</span><br><span class="line">person.age = <span class="number">10</span>;</span><br><span class="line"><span class="constructor">NSLog(@<span class="string">"%@-%ld"</span>, <span class="params">person</span> -&gt; <span class="params">_name</span>, <span class="params">person</span>.<span class="params">age</span>)</span>;</span><br><span class="line"><span class="comment">// 输出：idbeny-10</span></span><br></pre></td></tr></table></figure><p>上面案例二可以看到成员变量使用了<code>@public</code>关键词修饰，如果不修饰或使用<code>@private</code>还能正常读写么？</p><h3 id="案例三（成员变量-私有）"><a href="#案例三（成员变量-私有）" class="headerlink" title="案例三（成员变量-私有）"></a>案例三（成员变量-私有）</h3><p><strong>案例三声明：</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YBPerson </span>: NSObject</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">@private</span> <span class="comment">// 可以不写，默认就是私有的</span></span><br><span class="line">    NSString *_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@property</span> (nonatomic) NSInteger age;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> YBPerson</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><p><strong>案例三使用：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">YBPerson *<span class="keyword">person</span> = <span class="comment">[<span class="comment">[YBPerson alloc]</span> init]</span>;</span><br><span class="line"><span class="keyword">person</span> -&gt; _name = @<span class="string">"idbeny"</span>;</span><br><span class="line"><span class="keyword">person</span>.age = 10;</span><br><span class="line">NSLog(@<span class="string">"%@-%ld"</span>, <span class="keyword">person</span> -&gt; _name, <span class="keyword">person</span>.age);</span><br></pre></td></tr></table></figure><p>案例三代码编译报错<br><img src="http://blog.idbeny.com/lfq7k.png@normal" alt="访问私有变量"></p><h3 id="案例四（KVC）"><a href="#案例四（KVC）" class="headerlink" title="案例四（KVC）"></a>案例四（KVC）</h3><p><strong>案例四声明：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 人</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YBPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">@private</span></span><br><span class="line">    <span class="built_in">NSString</span> *_name; <span class="comment">// 姓名</span></span><br><span class="line">    YBPet *_pet; <span class="comment">// 宠物</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> age; <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YBPerson</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宠物</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YBPet</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *type; <span class="comment">// 宠物类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YBPet</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>案例四使用：</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">YBPerson *person = [[YBPerson alloc] init];</span><br><span class="line">YBPet *pet = [[YBPet alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// setValue:forKey:、valueForKey:</span></span><br><span class="line">[person <span class="string">setValue:</span>@<span class="string">"idbeny-key"</span> <span class="string">forKey:</span>@<span class="string">"name"</span>];</span><br><span class="line">[person <span class="string">setValue:</span>pet <span class="string">forKey:</span>@<span class="string">"pet"</span>];</span><br><span class="line">NSLog(@<span class="string">"%@-%@"</span>, [person <span class="string">valueForKey:</span>@<span class="string">"name"</span>], [person <span class="string">valueForKey:</span>@<span class="string">"pet"</span>]);</span><br><span class="line"><span class="comment">// 输出：idbeny-key-&lt;YBPet: 0x6000017658a0&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setValue:forKeyPath:、valueForKey:、valueForKeyPath:</span></span><br><span class="line">[person <span class="string">setValue:</span>@<span class="string">"idbeny-keyPath"</span> <span class="string">forKeyPath:</span>@<span class="string">"name"</span>];</span><br><span class="line">[person <span class="string">setValue:</span>@<span class="string">"dog"</span> <span class="string">forKeyPath:</span>@<span class="string">"pet.type"</span>];</span><br><span class="line">NSLog(@<span class="string">"%@-%@"</span>, [person <span class="string">valueForKey:</span>@<span class="string">"name"</span>], [person <span class="string">valueForKeyPath:</span>@<span class="string">"pet.type"</span>]);</span><br><span class="line"><span class="comment">// 输出：idbeny-keyPath-dog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setValuesForKeysWithDictionary:、dictionaryWithValuesForKeys</span></span><br><span class="line">NSDictionary *dict = @&#123;</span><br><span class="line">    @<span class="string">"name"</span> : @<span class="string">"idbeny-dict"</span>,</span><br><span class="line">    @<span class="string">"age"</span>  : @<span class="string">"10"</span></span><br><span class="line">&#125;;</span><br><span class="line">[person <span class="string">setValuesForKeysWithDictionary:</span>dict];</span><br><span class="line">NSLog(@<span class="string">"%@"</span>, [person <span class="string">dictionaryWithValuesForKeys:</span>@[@<span class="string">"name"</span>, @<span class="string">"age"</span>]]);</span><br><span class="line"><span class="comment">// 输出：&#123;age = 10; name = "idbeny-dict";&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译正常、运行报错 *** Terminating app due to uncaught exception 'NSUnknownKeyException', reason: '[&lt;YBPerson 0x6000032cfde0&gt; setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key sex.' </span></span><br><span class="line">[person <span class="string">setValue:</span>@<span class="string">"1"</span> <span class="string">forKey:</span>@<span class="string">"sex"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果同上</span></span><br><span class="line">[person <span class="string">setValue:</span>@<span class="string">"1"</span> <span class="string">forKeyPath:</span>@<span class="string">"sex"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译正常、运行报错 *** Terminating app due to uncaught exception 'NSUnknownKeyException', reason: '[&lt;YBPerson 0x600000a9b600&gt; valueForUndefinedKey:]: this class is not key value coding-compliant for the key sex.'</span></span><br><span class="line">[person <span class="string">valueForKey:</span>@<span class="string">"sex"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果同上</span></span><br><span class="line">[person <span class="string">valueForKeyPath:</span>@<span class="string">"sex"</span>];</span><br></pre></td></tr></table></figure><p>我们可以看下相关方法的注释说明，官方文档写的非常非常详细，具体就不在此翻译了，接下来只说重点。</p><p><strong>写操作：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forUndefinedKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setValuesForKeysWithDictionary:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)keyedValues;</span><br></pre></td></tr></table></figure><ul><li><code>setValue:forKey:</code> 该方法的key值只能是一个属性，不能多级使用（不能使用点语法）；</li><li><code>setValue:forKeyPath:</code> key值可以多级属性（使用点语法），将来系统会自动解析，该方法可以直接给单个属性赋值（即上面的方法），所以一般使用该方法；</li><li><code>setValuesForKeysWithDictionary:</code> 可以接收一个字典，字典的key和value对应属性名和属性值；</li><li><code>setValue:forUndefinedKey:</code> 系统自动调用，当key或keyPath找不到时，系统会触发该方法，无须我们手动调用，但我们可以利用（重写）该方法做一些拦截操作；</li><li><code>setNilValueForKey:</code> 如果设置的value是空的，会调用该方法，同<code>setValue:forUndefinedKey:</code>一样，都是系统自动调用，我们可以重写进行拦截。</li></ul><p><strong>读操作：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForUndefinedKey:(<span class="built_in">NSString</span> *)key;</span><br></pre></td></tr></table></figure><ul><li><code>valueForKey:</code> 对应的是<code>setValue:forKey:</code></li><li><code>valueForKeyPath:</code> 对应的是<code>setValue:forKeyPath:</code></li><li><code>valueForUndefinedKey:</code> 系统自动调用，当key不存在时会触发该方法，无须我们手动调用，但我们可以利用（重写）该方法做一些拦截操作。</li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>使用KVC还可以进行一些计算操作。虽然并不常用，但可以作为一个了解，正常开发中我们会使用C语言库中的<code>math</code>函数（OC已将这些标准库集成到开发环境中）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">YBPerson *person1 = [[YBPerson alloc] init];</span><br><span class="line">person1.age = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">YBPerson *person2 = [[YBPerson alloc] init];</span><br><span class="line">person2.age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">YBPerson *person3 = [[YBPerson alloc] init];</span><br><span class="line">person3.age = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">NSArray</span> *personList = @[person1, person2, person3];</span><br><span class="line"><span class="keyword">id</span> count = [personList valueForKeyPath:<span class="string">@"@count"</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"数组长度：%@"</span>, count);</span><br><span class="line"><span class="comment">// 输出：数组长度：3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">id</span> max = [personList valueForKeyPath:<span class="string">@"@max.age"</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"最大值：%@"</span>, max);</span><br><span class="line"><span class="comment">// 输出：最大值：6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">id</span> min = [personList valueForKeyPath:<span class="string">@"@min.age"</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"最小值：%@"</span>, min);</span><br><span class="line"><span class="comment">// 输出：最小值：1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">id</span> avg = [personList valueForKeyPath:<span class="string">@"@avg.age"</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"平均值：%@"</span>, avg);</span><br><span class="line"><span class="comment">// 输出：平均值：3.3333333333333333333333333333333333333</span></span><br></pre></td></tr></table></figure><h2 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h2><p>KVO（Key Value Observing）键值监听，其实是一种观察者模式，为对象的某一个属性值变化进行监听。KVO也是通过<code>NSObject</code>的分类<code>NSKeyValueObserverRegistration</code>实现的，所以一切继承自<code>NSObject</code>的对象都可以实现KVO。</p><p><code>NSKeyValueObserverRegistration</code>一共提供了三个方法：</p><p><strong>添加观察者</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">addObserver:</span>(NSObject *)observer <span class="string">forKeyPath:</span>(NSString *)keyPath <span class="string">options:</span>(NSKeyValueObservingOptions)options <span class="string">context:</span>(nullable <span class="keyword">void</span> *)context;</span><br></pre></td></tr></table></figure><ul><li><code>observer</code>：观察者</li><li><code>keyPath</code>：需要观察的属性</li><li><code>options</code>：观察配置选项（观察值变化，并把需要观察的属性值传递给观察方法）<ul><li><code>NSKeyValueObservingOptionNew</code> 修改之前的值</li><li><code>NSKeyValueObservingOptionOld</code> 修改之后的值</li><li><code>NSKeyValueObservingOptionInitial</code> 属性被重新赋值，注册后会立马调用一次（之后只要属性被重新赋值一次就会调用一次）</li><li><code>NSKeyValueObservingOptionPrior</code> 值修改前后各调用一次</li></ul></li><li><code>context</code>：上下文，可以携带参数（移除观察者时必须匹配）</li></ul><p><strong>移除观察者</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (<span class="selector-tag">void</span>)<span class="selector-tag">removeObserver</span><span class="selector-pseudo">:(NSObject</span> *)<span class="selector-tag">observer</span> <span class="selector-tag">forKeyPath</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">keyPath</span> <span class="selector-tag">context</span><span class="selector-pseudo">:(nullable</span> <span class="selector-tag">void</span> *)<span class="selector-tag">context</span> <span class="selector-tag">API_AVAILABLE</span>(<span class="selector-tag">macos</span>(10<span class="selector-class">.7</span>), <span class="selector-tag">ios</span>(5<span class="selector-class">.0</span>), <span class="selector-tag">watchos</span>(2<span class="selector-class">.0</span>), <span class="selector-tag">tvos</span>(9<span class="selector-class">.0</span>));</span><br><span class="line"><span class="selector-tag">-</span> (<span class="selector-tag">void</span>)<span class="selector-tag">removeObserver</span><span class="selector-pseudo">:(NSObject</span> *)<span class="selector-tag">observer</span> <span class="selector-tag">forKeyPath</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">keyPath</span>;</span><br></pre></td></tr></table></figure><p>上面的两个移除方法，一个有<code>context</code>，一个没有。官方建议使用<code>removeObserver:forKeyPath:context:</code>，因为该方法更加精确知道要移除哪个观察者。</p><p>如果观察同一个对象同一个属性不同的<code>context</code>，观察结束后使用<code>removeObserver:forKeyPath:</code>进行移除则会发生未知错误，因为系统不知道你要移除哪个观察者（毕竟上下文不一样）。如果使用<code>context</code>进行校验，则很清楚知道移除哪个观察者。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>案例声明</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YBPerson </span>: NSObject</span><br><span class="line"></span><br><span class="line"><span class="variable">@property</span> (nonatomic) NSInteger age;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> YBPerson</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><p><strong>案例使用</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">YBPerson</span> <span class="string">*person = [[YBPerson alloc] init];</span></span><br><span class="line"><span class="meta">person.age</span> = <span class="string">10;</span></span><br><span class="line"><span class="meta">//</span> <span class="string">添加观察者（为person的age属性添加观察者self）</span></span><br><span class="line"><span class="meta">//</span> <span class="string">kNilOptions</span></span><br><span class="line"><span class="meta">//</span> <span class="string">[person addObserver:self forKeyPath:@"age" options:kNilOptions context:nil];</span></span><br><span class="line"></span><br><span class="line"><span class="meta">//</span> <span class="string">NSKeyValueObservingOptionNew</span></span><br><span class="line"><span class="meta">//</span> <span class="string">[person addObserver:self forKeyPath:@"age" options:NSKeyValueObservingOptionNew context:nil];</span></span><br><span class="line"></span><br><span class="line"><span class="meta">//</span> <span class="string">NSKeyValueObservingOptionOld</span></span><br><span class="line"><span class="meta">//</span> <span class="string">[person addObserver:self forKeyPath:@"age" options:NSKeyValueObservingOptionOld context:nil];</span></span><br><span class="line"></span><br><span class="line"><span class="meta">//</span> <span class="string">NSKeyValueObservingOptionInitial</span></span><br><span class="line"><span class="meta">//</span> <span class="string">[person addObserver:self forKeyPath:@"age" options:NSKeyValueObservingOptionInitial context:nil];</span></span><br><span class="line"></span><br><span class="line"><span class="meta">//</span> <span class="string">NSKeyValueObservingOptionPrior</span></span><br><span class="line"><span class="meta">//</span> <span class="string">[person addObserver:self forKeyPath:@"age" options:NSKeyValueObservingOptionPrior context:nil];</span></span><br><span class="line"></span><br><span class="line"><span class="meta">//</span> <span class="string">NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld</span></span><br><span class="line"><span class="meta">[person</span> <span class="string">addObserver:self forKeyPath:@"age" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionNew context:@"idbeny"];</span></span><br><span class="line"></span><br><span class="line"><span class="meta">person.age</span> = <span class="string">20;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">//</span> <span class="string">被观察对象的属性发生改变时自动调用该方法</span></span><br><span class="line"><span class="meta">-</span> <span class="string">(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</span></span><br><span class="line">    <span class="meta">NSLog(@"keypath</span>:<span class="string">%@ object:%@ change:%@ context:%@", keyPath, object, change, context);</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">/**</span> <span class="string">kNilOptions</span></span><br><span class="line">     <span class="attr">输出：</span></span><br><span class="line">     <span class="attr">keypath</span>:<span class="string">age</span></span><br><span class="line">     <span class="attr">object</span>:<span class="string">&lt;YBPerson: 0x60000218a5e0&gt;</span></span><br><span class="line">     <span class="attr">change</span>:<span class="string">&#123;</span></span><br><span class="line">         <span class="attr">kind</span> = <span class="string">1;</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">     <span class="attr">context</span>:<span class="string">(null)</span></span><br><span class="line">     <span class="attr">*/</span></span><br><span class="line"></span><br><span class="line">     <span class="meta">/**</span> <span class="string">NSKeyValueObservingOptionNew</span></span><br><span class="line">     <span class="attr">输出：</span></span><br><span class="line">     <span class="attr">keypath</span>:<span class="string">age</span></span><br><span class="line">     <span class="attr">object</span>:<span class="string">&lt;YBPerson: 0x600000c363c0&gt;</span></span><br><span class="line">     <span class="attr">change</span>:<span class="string">&#123;</span></span><br><span class="line">         <span class="attr">kind</span> = <span class="string">1;</span></span><br><span class="line">         <span class="attr">new</span> = <span class="string">20;</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">     <span class="attr">context</span>:<span class="string">(null)</span></span><br><span class="line">     <span class="attr">*/</span></span><br><span class="line"></span><br><span class="line">     <span class="meta">/**</span> <span class="string">NSKeyValueObservingOptionOld</span></span><br><span class="line">     <span class="attr">输出：</span></span><br><span class="line">     <span class="attr">keypath</span>:<span class="string">age</span></span><br><span class="line">     <span class="attr">object</span>:<span class="string">&lt;YBPerson: 0x600000daece0&gt;</span></span><br><span class="line">     <span class="attr">change</span>:<span class="string">&#123;</span></span><br><span class="line">         <span class="attr">kind</span> = <span class="string">1;</span></span><br><span class="line">         <span class="attr">old</span> = <span class="string">10;</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">     <span class="attr">context</span>:<span class="string">(null)</span></span><br><span class="line">     <span class="attr">*/</span></span><br><span class="line"></span><br><span class="line">     <span class="meta">/**</span> <span class="string">NSKeyValueObservingOptionInitial</span></span><br><span class="line">     <span class="attr">输出：</span></span><br><span class="line">     <span class="attr">keypath</span>:<span class="string">age</span></span><br><span class="line">     <span class="attr">object</span>:<span class="string">&lt;YBPerson: 0x600000ae4840&gt;</span></span><br><span class="line">     <span class="attr">change</span>:<span class="string">&#123;</span></span><br><span class="line">         <span class="attr">kind</span> = <span class="string">1;</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">     <span class="attr">context</span>:<span class="string">(null)</span></span><br><span class="line">     <span class="attr">*/</span></span><br><span class="line"></span><br><span class="line">     <span class="meta">/**</span> <span class="string">NSKeyValueObservingOptionPrior</span></span><br><span class="line">     <span class="attr">输出：</span></span><br><span class="line">     <span class="attr">keypath</span>:<span class="string">age</span></span><br><span class="line">     <span class="attr">object</span>:<span class="string">&lt;YBPerson: 0x60000226a960&gt;</span></span><br><span class="line">     <span class="attr">change</span>:<span class="string">&#123;</span></span><br><span class="line">         <span class="attr">kind</span> = <span class="string">1;</span></span><br><span class="line">         <span class="attr">notificationIsPrior</span> = <span class="string">1; // 有此属性代表修改前调用，反之修改后调用</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">     <span class="attr">context</span>:<span class="string">(null)</span></span><br><span class="line"></span><br><span class="line">     <span class="attr">keypath</span>:<span class="string">age</span></span><br><span class="line">     <span class="attr">object</span>:<span class="string">&lt;YBPerson: 0x60000226a960&gt;</span></span><br><span class="line">     <span class="attr">change</span>:<span class="string">&#123;</span></span><br><span class="line">         <span class="attr">kind</span> = <span class="string">1;</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">     <span class="attr">context</span>:<span class="string">(null)</span></span><br><span class="line">     <span class="attr">*/</span></span><br><span class="line"></span><br><span class="line">     <span class="meta">/**</span> <span class="string">NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld</span></span><br><span class="line">     <span class="attr">输出：</span></span><br><span class="line">     <span class="attr">keypath</span>:<span class="string">age</span></span><br><span class="line">     <span class="attr">object</span>:<span class="string">&lt;YBPerson: 0x6000001659e0&gt;</span></span><br><span class="line">     <span class="attr">change</span>:<span class="string">&#123;</span></span><br><span class="line">         <span class="attr">kind</span> = <span class="string">1;</span></span><br><span class="line">         <span class="attr">new</span> = <span class="string">20;</span></span><br><span class="line">         <span class="attr">old</span> = <span class="string">10;</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">     <span class="attr">context</span>:<span class="string">idbeny</span></span><br><span class="line">     <span class="attr">*/</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>上面案例可以看到各种<code>options</code>的输出，开发中最常用就是<code>NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld</code>。每次在不需要观察后，记得把观察者移除<code>[self.person removeObserver:self forKeyPath:@&quot;age&quot;];</code>，如果有<code>context</code>，则使用<code>[self.person removeObserver:self forKeyPath:@&quot;age&quot; context:@&quot;idbeny&quot;];</code>。</p><p>KVO的本质就是在底层监听并执行了属性的<code>setter</code>方法</p><ul><li>值改变之前调用<code>willChangeValueForKey:</code>；</li><li>修改值；</li><li>修改值后调用<code>didChangeValueForKey:</code>；</li><li>给观察对象发送消息<code>observeValueForKeyPath:ofObject:change:context</code></li></ul><p>在被观察者对象的实现文件里，重写<code>willChangeValueForKey</code>，<code>didChangeValueForKey</code>做拦截操作。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> KVC </tag>
            
            <tag> KVO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】沙盒</title>
      <link href="/2016/07/02/ios-sandbox/"/>
      <url>/2016/07/02/ios-sandbox/</url>
      
        <content type="html"><![CDATA[<p>沙盒（英语：sandbox，又译为沙箱），计算机专业术语，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。</p><a id="more"></a><p>每个iOS应用都有自己的应用沙盒，iOS系统为每个应用程序创建自己的目录，每个应用程序只能访问自己的目录，不能直接通信。</p><p>iOS的沙盒文件系统根目录：<br><img src="http://blog.idbeny.com/mgklm.png@normal" alt=""></p><h2 id="获取路径"><a href="#获取路径" class="headerlink" title="获取路径"></a>获取路径</h2><p>每次编译运行都会生成一个新的沙盒路径，而真机不会生成新的沙盒。</p><p>获取沙盒根目录和tmp路径，系统提供了两个简易函数：<br><strong>沙盒目录路径：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *<span class="built_in">NSHomeDirectory</span>(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><p><strong>tmp目录路径：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *<span class="built_in">NSTemporaryDirectory</span>(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><p>iOS中获取沙盒目录下面指定文件夹路径有系统API提供支持</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSSearchPathDirectory</span> directory, <span class="built_in">NSSearchPathDomainMask</span> domainMask, <span class="built_in">BOOL</span> expandTilde);</span><br></pre></td></tr></table></figure><ul><li>这是一个返回值为数组的函数，一共有三个参数<ul><li><code>directory</code>：<code>NSSearchPathDirectory</code>枚举类型，iOS常用：<ul><li><code>NSDocumentDirectory</code>：Documents</li><li><code>NSLibraryDirectory</code>：Library</li><li><code>NSCachesDirectory</code>：Library/Caches</li></ul></li><li><code>domainMask</code>：<code>NSSearchPathDomainMask</code>枚举类型，iOS当前固定填写<code>NSNetworkDomainMask</code>；</li><li><code>expandTilde</code>：是否展开波浪号，iOS开发固定为<code>YES</code>，<code>NO</code>是用在<code>MacOS</code>系统上的，因为一般只有PC才有破浪号<code>~</code>代表用户根路径。</li></ul></li></ul><p>由于返回值是一个数组，但一般情况下我们都会选择第一个元素，因为默认情况下只有一个元素。</p><h2 id="Documents"><a href="#Documents" class="headerlink" title="Documents"></a>Documents</h2><p>保存应用运行时生成的需要持久化的数据，iTunes同步设备时<font color='red'>会备份</font>该目录。</p><p>获取<code>Documents</code>目录路径：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *documentsPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject;</span><br><span class="line">// 输出：/Users/Developer/Library/Developer/CoreSimulator/Devices/<span class="number">025F3833</span>-<span class="number">218B-4695</span>-B37F-135C289C6678/data/Containers/Data/Application/EACD6012-<span class="number">0638</span>-49DF-B7D7-E7E6722F4D69/Documents</span><br></pre></td></tr></table></figure><h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><p><code>Library</code>里面包含两个文件夹（<code>Caches</code>和<code>Preferences</code>）</p><p>获取<code>Library</code>目录路径：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *libraryPath = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES).firstObject;</span><br><span class="line">// 输出：/Users/Developer/Library/Developer/CoreSimulator/Devices/<span class="number">025F3833</span>-<span class="number">218B-4695</span>-B37F-135C289C6678/data/Containers/Data/Application/EACD6012-<span class="number">0638</span>-49DF-B7D7-E7E6722F4D69/Library</span><br></pre></td></tr></table></figure><h3 id="Caches"><a href="#Caches" class="headerlink" title="Caches"></a>Caches</h3><p>保存应用运行时生成的需要持久化的数据，iTunes同步设备时<font color='red'>不会备份</font>该目录。内存不足时会被清除，应用没有运行时，可能会被清除。一般存储体积大、不需要备份的非重要数据，比如图片、音视频等。</p><p>获取<code>Caches</code>目录路径：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *cachesPath = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES).firstObject;</span><br><span class="line">// 输出：/Users/Developer/Library/Developer/CoreSimulator/Devices/<span class="number">025F3833</span>-<span class="number">218B-4695</span>-B37F-135C289C6678/data/Containers/Data/Application/EACD6012-<span class="number">0638</span>-49DF-B7D7-E7E6722F4D69/Library/Caches</span><br></pre></td></tr></table></figure><h3 id="Preferences"><a href="#Preferences" class="headerlink" title="Preferences"></a>Preferences</h3><p>保存应用的所有偏好设置，iTunes同步设备时<font color='red'>会备份</font>该目录。</p><p><code>NSUserDefaults</code>默认存放在此文件夹</p><h2 id="tmp"><a href="#tmp" class="headerlink" title="tmp"></a>tmp</h2><p>保存应用的运行时所需的临时数据，iTunes同步设备时<font color='red'>不会备份</font>该目录。应用使用完毕会清除该目录下的数据。</p><p>获取<code>tmp</code>目录路径：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *tmp = NSTemporaryDirectory();</span><br><span class="line">// 输出：/Users/Developer/Library/Developer/CoreSimulator/Devices/<span class="number">025F3833</span>-<span class="number">218B-4695</span>-B37F-135C289C6678/data/Containers/Data/Application/EACD6012-<span class="number">0638</span>-49DF-B7D7-E7E6722F4D69/tmp/</span><br></pre></td></tr></table></figure><h2 id="探究NSUserDefaults存储方式"><a href="#探究NSUserDefaults存储方式" class="headerlink" title="探究NSUserDefaults存储方式"></a>探究<code>NSUserDefaults</code>存储方式</h2><p>前面我们提到<code>NSUserDefaults</code>保存的数据默认存放在<code>Library/Preferences</code>。我们通过一个小案例看下。</p><p>创建两个按钮，分别做读写操作：</p><h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (IBAction)writeAction &#123;</span><br><span class="line">    NSUserDefaults *<span class="keyword">user</span>Defaults = [NSUserDefaults standardUserDefaults];</span><br><span class="line">    [<span class="keyword">user</span>Defaults <span class="built_in">set</span>Object:@<span class="string">"idbeny"</span> <span class="keyword">for</span>Key:@<span class="string">"name"</span>];</span><br><span class="line">    [<span class="keyword">user</span>Defaults <span class="built_in">set</span>Bool:YES <span class="keyword">for</span>Key:@<span class="string">"isHungry"</span>];</span><br><span class="line">    [<span class="keyword">user</span>Defaults <span class="built_in">set</span>Integer:<span class="number">30</span> <span class="keyword">for</span>Key:@<span class="string">"age"</span>];</span><br><span class="line">    </span><br><span class="line">    NSLog(@<span class="string">"%@"</span>, NSHomeDirectory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入沙盒，看到在<strong>Library/Perferences</strong>目录下生成了一个<code>bundleId</code>同名的<code>plist</code>文件<br><img src="http://blog.idbeny.com/ocyxz.png@normal" alt=""></p><p>打开文件，查看数据，确实是刚才写入的数据<br><img src="http://blog.idbeny.com/wnuj1.png@normal" alt=""></p><h3 id="读"><a href="#读" class="headerlink" title="读"></a>读</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)readAction &#123;</span><br><span class="line">    <span class="built_in">NSUserDefaults</span> *userDefaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line">    <span class="built_in">NSString</span> *name = [userDefaults objectForKey:<span class="string">@"name"</span>];</span><br><span class="line">    <span class="built_in">BOOL</span> isHungry = [userDefaults boolForKey:<span class="string">@"isHungry"</span>];</span><br><span class="line">    <span class="built_in">NSInteger</span> age = [userDefaults integerForKey:<span class="string">@"age"</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@-%d-%ld"</span>, name, isHungry, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：idbeny-1-30</p><p>读取的和写入的数据一样，所以<code>NSUserDefaults</code>的本质就是一个字典类型的<code>plist</code>文件，文件名是<code>bundleId</code>，数据是以<code>key-value</code>的形式保存的。</p><p><em>注意：既然<code>NSUserDefaults</code>本质是一个<code>plist</code>文件，所以不能存储自定义对象，除非该对象实现<code>NSCoding</code>。</em></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 沙盒 </tag>
            
            <tag> NSUserDefaults </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】C语言基本语法（五）</title>
      <link href="/2016/06/10/c-syntax-basic-05/"/>
      <url>/2016/06/10/c-syntax-basic-05/</url>
      
        <content type="html"><![CDATA[<p>数组是什么？为什么下标是从0开始的？</p><a id="more"></a><h2 id="一、什么是数组？"><a href="#一、什么是数组？" class="headerlink" title="一、什么是数组？"></a>一、什么是数组？</h2><p>从字面上看，就是一组数据的意思，它的作用就是用来存储一组数据。数组中存放的每一个数据，一般称为“元素”。</p><h3 id="1-1-声明一个数组"><a href="#1-1-声明一个数组" class="headerlink" title="1.1. 声明一个数组"></a>1.1. 声明一个数组</h3><p>格式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素类型 数组名[元素的数量]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组ages，并且进行初始化，ages可以存放5个int类型的元素</span></span><br><span class="line"><span class="built_in">int</span> ages[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">60</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个数组heights，并且进行初始化，heights可以存放5个float类型的元素</span></span><br><span class="line"><span class="built_in">float</span> heights[<span class="number">5</span>] = &#123;<span class="number">1.68</span>, <span class="number">1.75</span>, <span class="number">2.01</span>, <span class="number">1.85</span>, <span class="number">1.92</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-2-数组元素的访问"><a href="#1-2-数组元素的访问" class="headerlink" title="1.2. 数组元素的访问"></a>1.2. 数组元素的访问</h3><p>数组中的每一个元素都有一个唯一的索引（index，也叫做下标），是从0开始计算的。我们可以元素的索引访问元素。</p><p>示例：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> ages[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">60</span>&#125;;</span><br></pre></td></tr></table></figure><p>上面示例数组的下标：<br>| 索引 | 0 | 1 | 2 | 3 | 4 |<br>| :-: | :-: | :-: | :-: | :-: | :-: |<br>| 元素 | 10 | 20 | 50 | 40 | 60 |</p><p>访问示例数组的元素：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, ages[<span class="number">1</span>]); <span class="comment">// 输出：20</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, ages[<span class="number">3</span>]); <span class="comment">// 输出：40</span></span><br><span class="line"></span><br><span class="line">ages[<span class="number">1</span>] = <span class="number">100</span>; <span class="comment">// 赋值</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, ages[<span class="number">1</span>]); <span class="comment">// 输出：100</span></span><br></pre></td></tr></table></figure><p>示例数组的元素重新赋值后：<br>| 索引 | 0 | 1 | 2 | 3 | 4 |<br>| :-: | :-: | :-: | :-: | :-: | :-: |<br>| 元素 | 10 | <font color=red>100</font> | 50 | 40 | 60 |</p><h3 id="1-3-数组的遍历"><a href="#1-3-数组的遍历" class="headerlink" title="1.3. 数组的遍历"></a>1.3. 数组的遍历</h3><p>遍历的意思是：将数组里面的每一个元素都访问一遍。遍历数组常用手法就是循环遍历。</p><p>示例：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int ages[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">60</span>&#125;;</span><br><span class="line"></span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    printf(<span class="string">"%d<span class="subst">\n</span>"</span>, ages[i]);</span><br><span class="line">    if (i == <span class="number">2</span>) &#123;</span><br><span class="line">        ages[i] = ages[i] * <span class="number">100</span>;</span><br><span class="line">        printf(<span class="string">"索引i=%d被修改后的值%d<span class="subst">\n</span>"</span>, i, ages[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    10</span></span><br><span class="line"><span class="comment">    20</span></span><br><span class="line"><span class="comment">    50</span></span><br><span class="line"><span class="comment">    索引i=2被修改后的值5000</span></span><br><span class="line"><span class="comment">    40</span></span><br><span class="line"><span class="comment">    60</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h2 id="二、内存细节"><a href="#二、内存细节" class="headerlink" title="二、内存细节"></a>二、内存细节</h2><p>数组占用内存大小 = 元素类型占用内存大小 * 元素个数。</p><p>示例：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> ages[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">60</span>&#125;;</span><br><span class="line">printf(<span class="string">"%zd\n"</span>, sizeof(ages)); <span class="comment">// 输出：20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析：数组ages存放了五个元素，元素类型是int类型，int类型占用内存4个字节，所以数组ages占用内存4*5=20个字节</span></span><br></pre></td></tr></table></figure><p>分析元素内存地址：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"&amp;ages=%p\n"</span>, ages)<span class="comment">;</span></span><br><span class="line">for (<span class="name">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 5; i++) &#123;</span></span><br><span class="line">    printf(<span class="string">"&amp;ages[%d]=%p\n"</span>, i, <span class="symbol">&amp;ages</span>[i])<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">  输出：</span><br><span class="line">    <span class="symbol">&amp;ages=0x7fbff560</span></span><br><span class="line">    <span class="symbol">&amp;ages</span>[<span class="number">0</span>]=0x7fbff560</span><br><span class="line">    <span class="symbol">&amp;ages</span>[<span class="number">1</span>]=0x7fbff564</span><br><span class="line">    <span class="symbol">&amp;ages</span>[<span class="number">2</span>]=0x7fbff568</span><br><span class="line">    <span class="symbol">&amp;ages</span>[<span class="number">3</span>]=0x7fbff56c</span><br><span class="line">    <span class="symbol">&amp;ages</span>[<span class="number">4</span>]=0x7fbff570</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><p>从上面的内地地址可以看出：</p><ul><li>数组元素的地址是连续分配的，且每个元素占用对应类型的字节数（如int类型占用4个字节）；</li><li>数组的地址等于数组首元素的地址。</li></ul><h2 id="三、数组的初始化细节"><a href="#三、数组的初始化细节" class="headerlink" title="三、数组的初始化细节"></a>三、数组的初始化细节</h2><ul><li><p>如果没有初始化，数组元素的值是不确定的</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[<span class="number">3</span>];</span><br><span class="line">printf(<span class="string">"%d"</span>, a[<span class="number">0</span>]); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="comment">// 注意：每次输出虽然是0，那是因为编译器做了优化，在实际开发中不建议这样使用</span></span><br></pre></td></tr></table></figure></li><li><p>可以先声明，后初始化</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">30</span>;</span><br></pre></td></tr></table></figure></li><li><p>如果在声明的同时进行初始化，可以不指定元素的数量</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="built_in">int</span> a[<span class="number">3</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>可以在声明的时候只初始化部分元素，其他元素默认会初始化为0</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">int</span> <span class="string">a[5]</span> <span class="string">=</span> <span class="string">&#123;10,</span> <span class="number">20</span><span class="string">,</span> <span class="number">30</span><span class="string">&#125;;</span></span><br><span class="line"><span class="string">//</span> <span class="string">&#123;10,</span> <span class="number">20</span><span class="string">,</span> <span class="number">30</span><span class="string">,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">int</span> <span class="string">b[5]</span> <span class="string">=</span> <span class="string">&#123;0&#125;;</span></span><br><span class="line"><span class="string">//</span> <span class="string">&#123;0,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">int</span> <span class="string">c[5]</span> <span class="string">=</span> <span class="string">&#123;&#125;;</span></span><br><span class="line"><span class="string">//</span> <span class="string">&#123;0,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span><span class="string">&#125;</span> <span class="string">和上面第一种情况类似，虽然编译器支持，但不要这样写</span></span><br></pre></td></tr></table></figure></li><li><p>可以在大括号里面指定索引（注意：指定索引时，一定要标注索引0从哪个位置开始，否则会数据异常）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例一：</span></span><br><span class="line"><span class="built_in">int</span> ages[<span class="number">5</span>] = &#123;[<span class="number">4</span>]=<span class="number">40</span>, [<span class="number">0</span>]=<span class="number">10</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    printf(<span class="string">"%d\n"</span>, ages[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    10</span></span><br><span class="line"><span class="comment">    22</span></span><br><span class="line"><span class="comment">    33</span></span><br><span class="line"><span class="comment">    44</span></span><br><span class="line"><span class="comment">    40</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例二：</span></span><br><span class="line"><span class="built_in">int</span> ages[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, [<span class="number">1</span>]=<span class="number">200</span>, <span class="number">33</span>, <span class="number">44</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    printf(<span class="string">"%d\n"</span>, ages[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    10</span></span><br><span class="line"><span class="comment">    200</span></span><br><span class="line"><span class="comment">    33</span></span><br><span class="line"><span class="comment">    44</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure></li><li><p>数组的初始化元素数量不能超过数组的长度</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译器会警告</span></span><br><span class="line"><span class="built_in">int</span> ages[<span class="number">3</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">printf(<span class="string">"%d"</span>, ages[<span class="number">3</span>]); <span class="comment">// 输出：-652672928</span></span><br></pre></td></tr></table></figure></li><li><p>数组在声明的同时进行初始化，其长度不能是变量</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> count = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 错误写法，编译器报错</span></span><br><span class="line"><span class="built_in">int</span> ages[count] = &#123;<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在数组声明以后，不能再通过大括号进行赋值</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> ages[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 编译器报错</span></span><br><span class="line">ages[<span class="number">3</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样更不可能了，ages代表是数组的内存地址，是一个固定值</span></span><br><span class="line">ages = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>数组的索引越界后，访问的数值是不确定的</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> ages[<span class="number">3</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">printf(<span class="string">"%d"</span>, ages[<span class="number">3</span>]); <span class="comment">// 输出：-652672928</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="四、数组的索引为什么是从0开始的？"><a href="#四、数组的索引为什么是从0开始的？" class="headerlink" title="四、数组的索引为什么是从0开始的？"></a>四、数组的索引为什么是从0开始的？</h2><p>访问一个数组元素的值，是从0开始的，为什么呢？我们从内存角度分析下。</p><p>示例：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int a[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    printf(<span class="string">"a的内存地址：%p<span class="subst">\n</span>"</span>, a);</span><br><span class="line">    for (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        printf(<span class="string">"a[%d]的内存地址：%p<span class="subst">\n</span>"</span>, i, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     输出：</span></span><br><span class="line"><span class="comment">        a的内存地址：0x7fbff560</span></span><br><span class="line"><span class="comment">        a[0]的内存地址：0x7fbff560    a + 0 * 4 = a + 0</span></span><br><span class="line"><span class="comment">        a[1]的内存地址：0x7fbff564    a + 1 * 4 = a + 4</span></span><br><span class="line"><span class="comment">        a[2]的内存地址：0x7fbff568    a + 2 * 4 = a + 8</span></span><br><span class="line"><span class="comment">        a[3]的内存地址：0x7fbff56c    a + 3 * 4 = a + 12</span></span><br><span class="line"><span class="comment">        a[4]的内存地址：0x7fbff570    a + 4 * 4 = a + 16</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure><p>从上面的代码输出可以看出，数组的地址是数组首元素的地址，<br>可以推算出：<code>数组的元素地址 = 数组首元素地址 + 数组的索引 * 元素类型占用内存大小</code><br>数组a的内存地址：<code>0x7fbff560</code><br>数组元素索引为2的地址：<code>&amp;a[2] = 0x7fbff560 + 1 * 4 = 0x7fbff564</code></p><p><strong>假设：如果数组的索引从1开始</strong><br>数组元素索引为1的地址（即首元素）：<code>&amp;a[1] = 0x7fbff560 + 1 * 4 = 0x7fbff564</code><br>数组元素索引为2的地址：<code>&amp;a[2] = 0x7fbff560 + 2 * 4 = 0x7fbff568</code><br>数组a的内存地址：<code>0x7fbff564</code></p><p>可以看出，如果元素所以从1开始，数组前面就会空出4个字节，浪费内存空间。</p><p>假如这时候把索引进行<code>-1</code>操作呢？<br>数组元素索引为1的地址（即首元素）：<code>&amp;a[1] = 0x7fbff560 + (1 - 1)  * 4 = 0x7fbff560</code><br>数组元素索引为2的地址：<code>&amp;a[2] = 0x7fbff560 + (2 - 1) * 4 = 0x7fbff564</code><br>数组a的内存地址：<code>0x7fbff560</code></p><p>发现，如果数组的索引从1开始，然后对索引进行<code>-1</code>操作，确实解决了内存空间问题。但是，这样代码运行效率就变得有点低效了，因为每次都要进行减法运算。所以从0开始不仅可以解决内存空间问题，也能让代码快速高效地运行。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】C语言基本语法（四）</title>
      <link href="/2016/04/07/c-syntax-basic-04/"/>
      <url>/2016/04/07/c-syntax-basic-04/</url>
      
        <content type="html"><![CDATA[<p>流程控制在开发中必然会用到，其实高中数学也会讲流程控制，但仅仅是初级阶段。</p><a id="more"></a><h2 id="一、流程控制"><a href="#一、流程控制" class="headerlink" title="一、流程控制"></a>一、流程控制</h2><p>按照执行流程的不同，可以将平时编写的代码分为3大结构：</p><ul><li>顺序结构：默认的流程结构，按照代码的书写顺序执行每一句代码</li><li>选择结构：根据表达式的真假性，决定执行哪一段代码</li><li>循环结构：在表达式为真的情况下，重复执行某一段代码</li></ul><h3 id="1-1-顺序结构"><a href="#1-1-顺序结构" class="headerlink" title="1.1. 顺序结构"></a>1.1. 顺序结构</h3><p>无论执行多少次<code>main</code>函数，打印结果都是顺序执行：1234</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"2"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"3"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"4"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-选择结构"><a href="#1-2-选择结构" class="headerlink" title="1.2. 选择结构"></a>1.2. 选择结构</h3><ul><li><code>if</code>语句</li><li><code>if-else</code>语句</li><li><code>else if</code>语句</li><li><code>switch</code>语句</li></ul><h3 id="1-3-循环结构"><a href="#1-3-循环结构" class="headerlink" title="1.3. 循环结构"></a>1.3. 循环结构</h3><ul><li><code>while</code>语句</li><li><code>do-while</code>语句</li><li><code>for</code>语句</li></ul><h2 id="二、选择结构"><a href="#二、选择结构" class="headerlink" title="二、选择结构"></a>二、选择结构</h2><h3 id="2-1-if语句"><a href="#2-1-if语句" class="headerlink" title="2.1. if语句"></a>2.1. if语句</h3><p>格式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">代码<span class="number">1</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">if (表达式) &#123;</span><br><span class="line">  代码<span class="number">2</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">代码<span class="number">3</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>如果表达式为假，不会执行大括号中的代码2；</li><li>如果表达式为真，就会执行大括号中的代码2。</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入本次考试成绩："</span>);</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;score);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"表现优秀\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"加油\n"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：请输入本次考试成绩：30</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    加油</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：请输入本次考试成绩：90</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    表现优秀</span></span><br><span class="line"><span class="comment">    加油</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h3 id="2-2-if-else语句"><a href="#2-2-if-else语句" class="headerlink" title="2.2. if-else语句"></a>2.2. if-else语句</h3><p>格式：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">代码<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">  代码<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  代码<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">代码<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>如果表达式为真，就会执行代码2，不会执行代码3；</li><li>如果表达式为假，就会执行代码3，不会执行代码1。</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入本次考试成绩："</span>);</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;score);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"表现优秀\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"再接再厉\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"加油\n"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：请输入本次考试成绩：30</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    再接再厉</span></span><br><span class="line"><span class="comment">    加油</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：请输入本次考试成绩：90</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    表现优秀</span></span><br><span class="line"><span class="comment">    加油</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h3 id="2-3-if语句-和-if-else语句"><a href="#2-3-if语句-和-if-else语句" class="headerlink" title="2.3. if语句 和 if-else语句"></a>2.3. if语句 和 if-else语句</h3><p>案例一：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"表现优秀"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"再接再厉"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：表现优秀</span></span><br></pre></td></tr></table></figure><p>案例二：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"表现优秀"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (score &lt; <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"再接再厉"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：再接再厉</span></span><br></pre></td></tr></table></figure><ul><li>案例一的代码更简洁，省掉了不必要的判断（案例二的<code>score &lt; 80</code>）；</li><li>案例一的代码执行效率更高，只需要进行1次表达式判断；</li><li>案例二的代码需要进行2次表达式判断；<ul><li><code>score &gt;= 80</code></li><li><code>score &lt; 80</code></li></ul></li><li>所以推荐使用案例一。</li></ul><h3 id="2-4-else-if语句"><a href="#2-4-else-if语句" class="headerlink" title="2.4. else if语句"></a>2.4. else if语句</h3><p>格式：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>) &#123;</span><br><span class="line">  代码<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">2</span>) &#123;</span><br><span class="line">  代码<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">3</span>) &#123;</span><br><span class="line">  代码<span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  代码<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">代码<span class="number">5</span>;</span><br></pre></td></tr></table></figure><ul><li>表达式对应的大括号代码是一一对应的，如果表达式成立，就执行大括号中的代码（不会再判断后面的表达式），否则进入下一个表达式判断；</li><li>应该把小范围写在前面，大范围写在后面，否则就永远不会进入后面的表达式判断。</li></ul><p>案例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"良\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"中\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"差\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：良</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的代码永远不会进入score &gt;= 80和score &gt;= 90</span></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"中\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"良\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"差\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：中</span></span><br></pre></td></tr></table></figure><h3 id="2-5-if语句-和-else-if语句"><a href="#2-5-if语句-和-else-if语句" class="headerlink" title="2.5. if语句 和 else if语句"></a>2.5. if语句 和 else if语句</h3><p>案例一：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123; <span class="comment">// 范围：[90, +∞)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123; <span class="comment">// 范围：[80, 90)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"良\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123; <span class="comment">// 范围：[60, 80)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"中\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 范围：(-∞, 60)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"差\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输出：良</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1.判断score &gt;= 90，不符合条件（即条件为假），进入下一个判断</span></span><br><span class="line"><span class="comment">    2.判断score &gt;= 80，符合条件（即条件为真），输出：良，不再执行该流程结构（即其他条件不再判断）</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>案例二：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123; <span class="comment">// 范围：[90, +∞)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123; <span class="comment">// 范围：[80, +∞)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"良\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123; <span class="comment">// 范围：[60, +∞)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"中\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (score &lt; <span class="number">60</span>) &#123; <span class="comment">// 范围：(-∞, 60)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"差\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：良 中</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">    1.判断score &gt;= 90，不符合条件（即条件为假），顺序执行代码</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    2.判断score &gt;= 80，符合条件（即条件为真），输出：良，顺序执行代码</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    3.判断score &gt;= 60，符合条件（即条件为真），输出：中，顺序执行代码</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    4.判断score &lt; 60，不符合条件（即条件为假），顺序执行代码</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>案例三：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">num</span> = <span class="number">0</span>;</span><br><span class="line">scanf(<span class="string">"%d"</span>, &amp;<span class="built_in">num</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">num</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"正数\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">num</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"自然数\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"负数\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">num</span> &amp; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"奇数\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"偶数\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：8</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    正数</span></span><br><span class="line"><span class="comment">    偶数</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：11</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    正数</span></span><br><span class="line"><span class="comment">    奇数</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：-12</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    负数</span></span><br><span class="line"><span class="comment">    偶数</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：0</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    自然数</span></span><br><span class="line"><span class="comment">    偶数</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>三个案例比较后发现，如果判断体是互斥且单一的，用<code>else if</code>，如果需要多个判断体验证多套逻辑，就用<code>if</code>。</p><h3 id="2-6-表达式的等价性"><a href="#2-6-表达式的等价性" class="headerlink" title="2.6. 表达式的等价性"></a>2.6. 表达式的等价性</h3><p><img src="http://blog.idbeny.com/wst8x.png@normal" alt=""></p><p>案例一：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">90</span> &lt;=score &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优秀"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"其他"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：优秀</span></span><br></pre></td></tr></table></figure><p>案例二：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">if</span> (!(<span class="number">90</span> &lt;=score &amp;&amp; score &lt;= <span class="number">100</span>)) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"其他"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优秀"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：优秀</span></span><br></pre></td></tr></table></figure><p>案例三：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">if</span> (score &lt; <span class="number">90</span> || score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"其他"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优秀"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：优秀</span></span><br></pre></td></tr></table></figure><p>以上三个案例都是等价的</p><h3 id="2-7-if语句-省略大括号"><a href="#2-7-if语句-省略大括号" class="headerlink" title="2.7. if语句-省略大括号"></a>2.7. if语句-省略大括号</h3><p><code>if</code>、<code>else</code>后可以省略大括号，只会跟其后的第一条语句进行关联。</p><p>案例一：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"加油"</span>);</span><br><span class="line"><span class="comment">// 输出：优  加油</span></span><br></pre></td></tr></table></figure><p>案例一等价写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"加油"</span>);</span><br><span class="line"><span class="comment">// 输出：优  加油</span></span><br></pre></td></tr></table></figure><p>案例二：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"其他\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"加油"</span>);</span><br><span class="line"><span class="comment">// 输出：其他  加油</span></span><br></pre></td></tr></table></figure><p>案例二等价写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"其他\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"加油"</span>);</span><br><span class="line"><span class="comment">// 输出：其他  加油</span></span><br></pre></td></tr></table></figure><hr><p>多个<code>if-else</code>一起使用的时候，<code>else</code>后会跟其前面最接近的<code>if</code>相关联</p><p>案例一：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (b &gt; <span class="number">2</span>)</span><br><span class="line">printf(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">printf(<span class="string">"2"</span>);</span><br><span class="line"><span class="comment">// 输出：1</span></span><br></pre></td></tr></table></figure><p>案例一等价写法：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        printf(<span class="string">"1"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printf(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：1</span></span><br></pre></td></tr></table></figure><hr><p>编译错误案例：<br>案例一：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"666\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"再接再厉\n"</span>);</span><br></pre></td></tr></table></figure><p>案例一等价拆解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"666\n"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"再接再厉\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-8-注意点"><a href="#2-8-注意点" class="headerlink" title="2.8. 注意点"></a>2.8. 注意点</h3><p>案例一：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">0</span>); &#123;</span><br><span class="line">    printf(<span class="string">"%d"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：10</span></span><br></pre></td></tr></table></figure><p>案例一分析：if条件判断后面是一个空实现体，分号代表了if结构的结束，所以后面的大括号和if没有任何关系</p><p>案例二：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (a = <span class="number">1</span>) &#123;</span><br><span class="line">    printf(<span class="string">"%d"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价拆解</span></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    printf(<span class="string">"%d"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法</span></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> == a) &#123;</span><br><span class="line">    printf(<span class="string">"%d"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br></pre></td></tr></table></figure><p>案例二分析：不管a的原始值是多少，都会打印a的值，因为条件表达式里面是赋值操作而不是逻辑判断，相当于先给a赋值，再判断a是否等于0。所以在开发中<font style="color:red">一般建议把数值写在左边，变量写在右边，如果这样，即使错把==写成了=，在代码编写及编译阶段就会报错。</font></p><hr><h3 id="2-9-if-else语句和条件运算符"><a href="#2-9-if-else语句和条件运算符" class="headerlink" title="2.9. if-else语句和条件运算符"></a>2.9. if-else语句和条件运算符</h3><p>一些简单的<code>if-else</code>语句可以使用条件运算符来替代，这样能够使代码更简洁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"差\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：差</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用条件运算符</span></span><br><span class="line"><span class="comment">// 写法一：</span></span><br><span class="line">score &gt;= <span class="number">90</span> ? <span class="built_in">printf</span>(<span class="string">"优\n"</span>) : <span class="built_in">printf</span>(<span class="string">"差\n"</span>);</span><br><span class="line"><span class="comment">// 输出：差</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二：</span></span><br><span class="line"><span class="built_in">printf</span>(score &gt;= <span class="number">90</span> ? <span class="string">"优\n"</span> : <span class="string">"差\n"</span>);</span><br><span class="line"><span class="comment">// 输出：差</span></span><br></pre></td></tr></table></figure><p>稍微复杂的代码就不能用条件运算符了：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> score = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    printf(<span class="string">"优\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">20</span> + a;</span><br><span class="line">    printf(<span class="string">"差 - %d\n"</span>, a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：差 - 40</span></span><br></pre></td></tr></table></figure><h3 id="2-10-switch语句"><a href="#2-10-switch语句" class="headerlink" title="2.10. switch语句"></a>2.10. switch语句</h3><p>格式：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">  <span class="keyword">case</span> 表达式<span class="number">1</span>:</span><br><span class="line">      代码<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 表达式<span class="number">2</span>:</span><br><span class="line">      代码<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">      代码<span class="number">3</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch语句用if语句表示：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式 == 表达式<span class="number">1</span>) &#123;</span><br><span class="line">    代码<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式 == 表达式<span class="number">2</span>) &#123;</span><br><span class="line">    代码<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    代码<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>可以没有<code>default</code>语句；</li><li>表达式、表达式1、表达式2都必须是整形表达式；</li><li>表达式1、表达式2都必须是常量表达式；</li><li><code>case</code>中的表达式不能重复，并且不能带有变量。</li></ul><p>案例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> score = <span class="string">'C'</span>;</span><br><span class="line"><span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"优"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"良"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"中"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"差"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价if语句的写法</span></span><br><span class="line"><span class="keyword">if</span> (score == <span class="string">'A'</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"优"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score == <span class="string">'B'</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"良"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score == <span class="string">'C'</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"中"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"差"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：中</span></span><br></pre></td></tr></table></figure><hr><p><code>case</code>表达式后面如果没有声明新的变量，大括号可加可不加。如果想在<code>case</code>表达式后面声明新的变量，那就必须加上大括号，否则编译出错。</p><p>案例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> score = <span class="string">'C'</span>;</span><br><span class="line"><span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'A'</span>: &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"优"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'B'</span>: &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"良"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"中"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"差"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：中</span></span><br></pre></td></tr></table></figure><hr><ul><li><p>在<code>switch</code>语句中，<code>break</code>语句的作用就是终止<code>switch</code>语句执行；</p></li><li><p>如果<code>case</code>、<code>default</code>后面没有<code>break</code>语句，会出现“贯穿”现象，会继续往下执行其他<code>case</code>、<code>default</code>中的代码，直到遇到<code>break</code>语句或<code>switch</code>语句的结尾为止；</p></li><li><p><code>case</code>、<code>default</code>没有可以自由调换顺序。</p></li></ul><p>案例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入1~12的月份："</span>);</span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;month);</span><br><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"3"</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"4"</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"5"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"春季"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"非法输入"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"夏季"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">10</span>: <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"秋季"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>: <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"冬季"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：3</span></span><br><span class="line"><span class="comment">  输出：345春季</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：4</span></span><br><span class="line"><span class="comment">  输出：45春季</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：11</span></span><br><span class="line"><span class="comment">  输出：秋季</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：13</span></span><br><span class="line"><span class="comment">  输出：非法输入</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><hr><p><code>if</code>和<code>switch</code>相互替代</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"正数"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"负数"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：11</span></span><br><span class="line"><span class="comment">  输出：正数</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：-9</span></span><br><span class="line"><span class="comment">  输出：负数</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：0</span></span><br><span class="line"><span class="comment">  输出：0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价写法</span></span><br><span class="line"><span class="keyword">switch</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"正数"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">switch</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"负数"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：11</span></span><br><span class="line"><span class="comment">  输出：正数</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：-9</span></span><br><span class="line"><span class="comment">  输出：负数</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：0</span></span><br><span class="line"><span class="comment">  输出：0</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><blockquote><p>思考：什么时候用<code>if</code>，什么时候用<code>switch</code>? 当表示一个范围时，使用<code>if</code>，当判断一个变量是否等于固定值时，两者都可以，但只要<code>switch</code>能表达的，必然都可以用<code>if</code>。</p></blockquote><h2 id="三、循环结构"><a href="#三、循环结构" class="headerlink" title="三、循环结构"></a>三、循环结构</h2><p>循环结构包括：</p><ul><li><code>while</code>语句</li><li><code>do-while</code>语句</li><li><code>for</code>语句</li></ul><h3 id="3-1-while语句"><a href="#3-1-while语句" class="headerlink" title="3.1. while语句"></a>3.1. while语句</h3><p>格式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (表达式) &#123;</span><br><span class="line">  循环体<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">代码<span class="number">1</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p><code>while</code>语句也叫<code>while</code>循环，<code>while</code>语句大括号中的代码，称为循环体。</p><p>特点：</p><ul><li>如果表达式为假，不会执行循环体，直接终止<code>while</code>语句；</li><li>如果表达式为真，执行循环体；</li><li>执行完循环体后，会再次回到第一步，根据表达式的真假来做出选择；</li><li><code>while</code>语句执行完成后，才会继续往下执行代码1，否则将会一直循环，直到循环结束。</li></ul><p>案例一：（输入正整数n，使用<code>while</code>语句依次打印区间[1, n]的整数）</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">// 方法一：</span><br><span class="line"><span class="keyword">printf</span>(<span class="string">"请输入一个正整数："</span>);</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">times</span> = <span class="number">1</span>, num = <span class="number">1</span>;</span><br><span class="line">scanf(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">times</span> &lt;= num) &#123;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">times</span>);</span><br><span class="line">    <span class="keyword">times</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">printf</span>(<span class="string">"完成"</span>);</span><br><span class="line">/*</span><br><span class="line">  输入：<span class="number">5</span></span><br><span class="line">  输出：</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">    完成</span><br><span class="line">  *<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 方法二：</span></span><br><span class="line"><span class="regexp">printf("请输入一个正整数：");</span></span><br><span class="line"><span class="regexp">int times = 1, num = 1;</span></span><br><span class="line"><span class="regexp">scanf("%d", &amp;num);</span></span><br><span class="line"><span class="regexp">while (times++ &lt;= num) &#123;</span></span><br><span class="line"><span class="regexp">    printf("%d\n", times-1);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">printf("完成");</span></span><br><span class="line"><span class="regexp">/</span>*</span><br><span class="line">  输入：<span class="number">5</span></span><br><span class="line">  输出：</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">    完成</span><br><span class="line">  *<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 方法三：</span></span><br><span class="line"><span class="regexp">printf("请输入一个正整数：");</span></span><br><span class="line"><span class="regexp">int times = 1, num = 1;</span></span><br><span class="line"><span class="regexp">scanf("%d", &amp;num);</span></span><br><span class="line"><span class="regexp">while (++times &lt;= num+1) &#123;</span></span><br><span class="line"><span class="regexp">    printf("%d\n", times-1);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">printf("完成");</span></span><br><span class="line"><span class="regexp">/</span>*</span><br><span class="line">  输入：<span class="number">5</span></span><br><span class="line">  输出：</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">    完成</span><br><span class="line">  *<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 方法四……（方法有很多，不再举例）</span></span><br></pre></td></tr></table></figure><p>案例二：（输入一个1 ~ 100之间的正整数n，求1~n之间的整数相加结果）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int n = 0;</span><br><span class="line"><span class="keyword">while</span> (n &lt; 1 || 100 &lt; n) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入1~100之间的整数："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="built_in">times</span> = 1, sum = 0;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">times</span> &lt;= n) &#123;</span><br><span class="line">    sum += <span class="built_in">times</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"times：%d\n"</span>, <span class="built_in">times</span>); // 打印每次相加的值看起来更明显</span><br><span class="line">    <span class="built_in">times</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"结果：%d\n"</span>, sum);</span><br><span class="line">/*</span><br><span class="line">  输入：5</span><br><span class="line">  输出：</span><br><span class="line">    <span class="built_in">times</span>：1</span><br><span class="line">    <span class="built_in">times</span>：2</span><br><span class="line">    <span class="built_in">times</span>：3</span><br><span class="line">    <span class="built_in">times</span>：4</span><br><span class="line">    <span class="built_in">times</span>：5</span><br><span class="line">    结果：15</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><p>案例二延伸：（求1~n之间奇数相加，偶数相减的结果）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int n = 0;</span><br><span class="line"><span class="keyword">while</span> (n &lt; 1 || 100 &lt; n) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入1~100之间的整数："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="built_in">times</span> = 1, sum = 0;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">times</span> &lt;= n) &#123;</span><br><span class="line">    sum += (<span class="built_in">times</span> &amp; 1) ? <span class="built_in">times</span> : -<span class="built_in">times</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"times：%d\n"</span>, <span class="built_in">times</span>); // 打印每次相加的值看起来更明显</span><br><span class="line">    <span class="built_in">times</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"结果：%d\n"</span>, sum);</span><br><span class="line">/*</span><br><span class="line">  输入：5</span><br><span class="line">  输出：</span><br><span class="line">    <span class="built_in">times</span>：1</span><br><span class="line">    <span class="built_in">times</span>：2</span><br><span class="line">    <span class="built_in">times</span>：3</span><br><span class="line">    <span class="built_in">times</span>：4</span><br><span class="line">    <span class="built_in">times</span>：5</span><br><span class="line">    结果：3</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><p>案例二延伸：（求1~n之间奇数相加的结果）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">int n = 0;</span><br><span class="line"><span class="keyword">while</span> (n &lt; 1 || 100 &lt; n) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入1~100之间的整数："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="built_in">times</span> = 1, sum = 0;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">times</span> &lt;= n) &#123;</span><br><span class="line">    sum += (<span class="built_in">times</span> &amp; 1) ? <span class="built_in">times</span> : 0;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"times：%d\n"</span>, <span class="built_in">times</span>); // 打印每次相加的值看起来更明显</span><br><span class="line">    <span class="built_in">times</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"结果：%d\n"</span>, sum);</span><br><span class="line">/*</span><br><span class="line">  输入：5</span><br><span class="line">  输出：</span><br><span class="line">    <span class="built_in">times</span>：1</span><br><span class="line">    <span class="built_in">times</span>：2</span><br><span class="line">    <span class="built_in">times</span>：3</span><br><span class="line">    <span class="built_in">times</span>：4</span><br><span class="line">    <span class="built_in">times</span>：5</span><br><span class="line">    结果：9</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> 优化版本：</span><br><span class="line"> 上面的做法循环体会执行n次，其实没必要，这样比较浪费性能。如果把偶数直接在外面过滤掉就会好很多。</span><br><span class="line"> */ </span><br><span class="line">int n = 0;</span><br><span class="line"><span class="keyword">while</span> (n &lt; 1 || 100 &lt; n) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入1~100之间的整数："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="built_in">times</span> = 1, sum = 0;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">times</span> &lt;= n) &#123;</span><br><span class="line">    sum += <span class="built_in">times</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"times：%d\n"</span>, <span class="built_in">times</span>); // 打印每次相加的值看起来更明显</span><br><span class="line">    <span class="built_in">times</span> += 2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"结果：%d\n"</span>, sum);</span><br><span class="line">/*</span><br><span class="line">  输入：5</span><br><span class="line">  输出：</span><br><span class="line">    <span class="built_in">times</span>：1</span><br><span class="line">    <span class="built_in">times</span>：3</span><br><span class="line">    <span class="built_in">times</span>：5</span><br><span class="line">    结果：9</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><h3 id="3-2-for语句"><a href="#3-2-for语句" class="headerlink" title="3.2. for语句"></a>3.2. for语句</h3><p>格式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (代码<span class="number">1</span><span class="comment">; 表达式; 代码2) &#123;</span></span><br><span class="line">  循环体<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">代码<span class="number">3</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p><code>for</code>语句也叫<code>for</code>循环，<code>for</code>语句大括号中的代码，称为循环体。</p><p>特点：</p><ul><li>无论表达式是真还是假，都会先执行代码1；</li><li>如果表达式为假，不会执行循环体、代码2，直接终止<code>for</code>语句；</li><li>如果表达式为真，依次执行循环体、代码2；</li><li>执行完循环体后，会再次回到第二步，根据表达式的真假来做出选择；</li><li><code>for</code>语句执行完成后，才会继续往下执行代码3，否则将会一直循环，直到循环结束。</li></ul><p>注意点：</p><ul><li>代码2后面不能加分号(;)；</li><li>无论表达式是真是假，都会在第一次执行代码1，并且在for语句后面的执行过程中，都不会在执行代码1。</li></ul><h3 id="3-3-for语句和while语句比较"><a href="#3-3-for语句和while语句比较" class="headerlink" title="3.3. for语句和while语句比较"></a>3.3. for语句和while语句比较</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (代码<span class="number">1</span>; 表达式; 代码<span class="number">3</span>) &#123;</span><br><span class="line">  代码<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价while</span></span><br><span class="line">代码<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (表达式) &#123;</span><br><span class="line">  代码<span class="number">2</span>;</span><br><span class="line">  代码<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">for</span> <span class="string">(int</span> <span class="string">i</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span> <span class="string">i</span> <span class="string">&lt;=</span> <span class="number">5</span><span class="string">;</span> <span class="string">i++)</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">printf("%d\n",</span> <span class="string">i);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">  <span class="string">*/</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">while语句</span></span><br><span class="line"><span class="string">int</span> <span class="string">i</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line"><span class="string">while</span> <span class="string">(i</span> <span class="string">&lt;=</span> <span class="number">5</span><span class="string">)</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">printf("%d\n",</span> <span class="string">i);</span></span><br><span class="line">    <span class="string">i++;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line"><span class="string">*/</span></span><br></pre></td></tr></table></figure><p>根据代码的执行顺序我们可以得出下面的结论：</p><ul><li><p>表达式后面的代码可以拿出来</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">for</span> <span class="string">(int</span> <span class="string">i</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span> <span class="string">i</span> <span class="string">&lt;=</span> <span class="number">5</span><span class="string">;)</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">printf("%d\n",</span> <span class="string">i);</span></span><br><span class="line">    <span class="string">i++;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">  <span class="string">*/</span></span><br></pre></td></tr></table></figure></li><li><p>表达式后面可以使用逗号运算符</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">for</span> <span class="string">(int</span> <span class="string">i</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span> <span class="string">i</span> <span class="string">&lt;=</span> <span class="number">5</span><span class="string">;</span> <span class="string">printf("%d\n",</span> <span class="string">i),</span> <span class="string">i++)</span> <span class="string">&#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">  <span class="string">*/</span></span><br></pre></td></tr></table></figure></li><li><p>表达式前面声明变量时可以同时声明多个变量</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++, j += <span class="number">1</span>) &#123;</span><br><span class="line">    printf(<span class="string">"i：%d - j：%d\n"</span>, i, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    i：1 - j：0</span></span><br><span class="line"><span class="comment">    i：2 - j：1</span></span><br><span class="line"><span class="comment">    i：3 - j：2</span></span><br><span class="line"><span class="comment">    i：4 - j：3</span></span><br><span class="line"><span class="comment">    i：5 - j：4</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure></li><li><p>表达式前后的分号不能省略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">int</span> <span class="string">i</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line"><span class="string">for</span> <span class="string">(;</span> <span class="string">i</span> <span class="string">&lt;=</span> <span class="number">5</span><span class="string">;</span> <span class="string">)</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">printf("%d\n",</span> <span class="string">i);</span></span><br><span class="line">    <span class="string">i++;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">  <span class="string">*/</span></span><br></pre></td></tr></table></figure></li></ul><p>案例：（输入一个1 ~ 100之间的正整数n，求1~n之间的整数相加结果）</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">n</span> = <span class="number">0</span>;</span><br><span class="line">for (; <span class="built_in">n</span> &lt; <span class="number">1</span> || <span class="number">100</span> &lt; <span class="built_in">n</span>;) &#123;</span><br><span class="line">    printf(<span class="string">"请输入1~100之间的整数："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;<span class="built_in">n</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">n</span>; i++) &#123;</span><br><span class="line">    printf(<span class="string">"i：%d\n"</span>, i); // 打印每次相加的值看起来更明显</span><br><span class="line">    <span class="built_in">sum</span> += i;</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"结果：%d\n"</span>, <span class="built_in">sum</span>);</span><br><span class="line">/*</span><br><span class="line">  输入：<span class="number">5</span></span><br><span class="line">  输出：</span><br><span class="line">    i：<span class="number">1</span></span><br><span class="line">    i：<span class="number">2</span></span><br><span class="line">    i：<span class="number">3</span></span><br><span class="line">    i：<span class="number">4</span></span><br><span class="line">    i：<span class="number">5</span></span><br><span class="line">    结果：<span class="number">15</span></span><br><span class="line">  */</span><br></pre></td></tr></table></figure><p>上面的案例可以看出，<code>while</code>循环写出的代码一定可以用<code>for</code>循环实现。只是有时候<code>while</code>写出的代码可能会更加简洁，在实际开发过程中应根据业务场景选择更合适的循环语句。</p><h3 id="3-4-do-while语句"><a href="#3-4-do-while语句" class="headerlink" title="3.4. do-while语句"></a>3.4. do-while语句</h3><p>格式：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  循环体;</span><br><span class="line">&#125; <span class="keyword">while</span> (表达式);</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>无论表达式是真是假，先执行一次循环体；</li><li>如果表达式为假，不会执行循环体，直接终止<code>while</code>语句；</li><li>如果表达式为真，就会执行循环体；</li><li>执行完循环体后，会再次回到第二步根据表达式的真假来做出选择。</li></ul><p>注意点：</p><ul><li><code>while</code>表达式后面一定要加分号(<code>;</code>)；</li><li>无论表达式真假，都会在开头先执行一次循环体。</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">5</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：1</span></span><br><span class="line"><span class="comment">  输出：12345</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  输入：6</span></span><br><span class="line"><span class="comment">  输出：6</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// while语句</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：1</span></span><br><span class="line"><span class="comment">  输出：12345</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  输入：6</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for语句</span></span><br><span class="line"><span class="keyword">for</span> (; i &lt;= <span class="number">5</span>;) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：1</span></span><br><span class="line"><span class="comment">  输出：12345</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  输入：6</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>总结：很多时候，使用<code>while</code>、<code>do-while</code>，<code>for</code>可以完成一样的功能，只是书写格式不一样。</p><p>案例一：<br>(场景：提示输入一个1 ~ 100之间的正整数n，如果输入错误，要求重新输入，直到输入正确为止)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入一个1~100之间的正整数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125; <span class="keyword">while</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入正确：%d"</span>, n);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：-10</span></span><br><span class="line"><span class="comment">  输出：请输入一个1~100之间的正整数：</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：102</span></span><br><span class="line"><span class="comment">  输出：请输入一个1~100之间的正整数：</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：20</span></span><br><span class="line"><span class="comment">  输出：输入正确：20</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>案例一对比：（使用<code>while</code>语句比较）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入一个1~100之间的正整数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入正确：%d"</span>, n);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：-10</span></span><br><span class="line"><span class="comment">  输出：请输入一个1~100之间的正整数：</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：102</span></span><br><span class="line"><span class="comment">  输出：请输入一个1~100之间的正整数：</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：20</span></span><br><span class="line"><span class="comment">  输出：输入正确：20</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>总结：对比<code>while</code>语句发现，<code>do-while</code>语句会少一次最初没有必要的判断，因为不论表达式真假，都会先执行一次循环体。</p><h3 id="3-5-循环嵌套"><a href="#3-5-循环嵌套" class="headerlink" title="3.5. 循环嵌套"></a>3.5. 循环嵌套</h3><p>场景一：严格要求输入一个1~20之间的正整数n，输入n行n列的图形，图形用<code>#</code>表示。</p><p>图示：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入一个<span class="number">1</span>~<span class="number">20</span>之间的正整数：<span class="number">5</span></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#####</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"请输入一个1~20之间的正整数："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125; <span class="keyword">while</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">  输入：<span class="number">5</span></span><br><span class="line">  输出：</span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">  *<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>场景二：严格要求输入一个1~20之间的正整数n，输入n行n列的图形，图形用<code>#</code>表示。</p><p>图示：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入一个<span class="number">1</span>~<span class="number">20</span>之间的正整数：<span class="number">5</span></span><br><span class="line">#</span><br><span class="line">##</span><br><span class="line">###</span><br><span class="line">####</span><br><span class="line">#####</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"请输入一个1~20之间的正整数："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125; <span class="keyword">while</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">  输入：<span class="number">5</span></span><br><span class="line">  输出：</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment">###</span></span><br><span class="line">    <span class="comment">####</span></span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">  *<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>场景三：严格要求输入一个1~20之间的正整数n，输入n行n列的图形，图形用<code>#</code>表示。</p><p>图示：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入一个<span class="number">1</span>~<span class="number">20</span>之间的正整数：<span class="number">5</span></span><br><span class="line">#####</span><br><span class="line">####</span><br><span class="line">###</span><br><span class="line">##</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入一个1~20之间的正整数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125; <span class="keyword">while</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：5</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    #####</span></span><br><span class="line"><span class="comment">    ####</span></span><br><span class="line"><span class="comment">    ###</span></span><br><span class="line"><span class="comment">    ##</span></span><br><span class="line"><span class="comment">    #</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt;= i; j--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：5</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">    #####</span></span><br><span class="line"><span class="comment">    ####</span></span><br><span class="line"><span class="comment">    ###</span></span><br><span class="line"><span class="comment">    ##</span></span><br><span class="line"><span class="comment">    #</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>场景四：严格要求输入一个1~20之间的正整数n，输入n行n列的图形，图形用<code>#</code>表示。</p><p>图示：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入一个<span class="number">1</span>~<span class="number">20</span>之间的正整数：<span class="number">5</span></span><br><span class="line">#####</span><br><span class="line">$$$$$</span><br><span class="line">#####</span><br><span class="line">$$$$$</span><br><span class="line">#####</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">int n;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    printf(<span class="string">"请输入一个1~20之间的正整数："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125; <span class="keyword">while</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    char c = (i &amp; <span class="number">1</span>) ? <span class="string">'#'</span> : <span class="string">'$'</span>;</span><br><span class="line">    <span class="keyword">for</span> (int j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        printf(<span class="string">"%c"</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">  输入：<span class="number">5</span></span><br><span class="line">  输出：</span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">    <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">    <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">  */</span><br></pre></td></tr></table></figure><p>场景五：严格要求输入一个1~20之间的正整数n，输入n行n列的图形，图形用<code>#</code>表示。</p><p>图示：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入一个<span class="number">1</span>~<span class="number">20</span>之间的正整数：<span class="number">5</span></span><br><span class="line">#####</span><br><span class="line">#$$$#</span><br><span class="line">#$$$#</span><br><span class="line">#$$$#</span><br><span class="line">#####</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"请输入一个1~20之间的正整数："</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">&#125; <span class="keyword">while</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        char c;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span> || i == n || j == <span class="number">1</span> || j == n) &#123;</span><br><span class="line">            c = <span class="string">'#'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c = <span class="string">'$'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">  输入：<span class="number">5</span></span><br><span class="line">  输出：</span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">    <span class="comment">#$$$#</span></span><br><span class="line">    <span class="comment">#$$$#</span></span><br><span class="line">    <span class="comment">#$$$#</span></span><br><span class="line">    <span class="comment">#####</span></span><br><span class="line">  *<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>场景六：输出九九乘法表</p><p>图示：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>x1=<span class="number">1</span></span><br><span class="line"><span class="number">1</span>x2=<span class="number">2</span>   <span class="number">2</span>x2=<span class="number">4</span></span><br><span class="line"><span class="number">1</span>x3<span class="number">-3</span>   <span class="number">2</span>x3=<span class="number">6</span>   <span class="number">3</span>x3=<span class="number">9</span></span><br><span class="line">……</span><br><span class="line"><span class="number">1</span>x9=<span class="number">9</span>   <span class="number">2</span>x9=<span class="number">18</span>  ……      <span class="number">9</span>x9=<span class="number">81</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">for (int i = 1; i <span class="tag">&lt;<span class="name">=</span> <span class="attr">9</span>; <span class="attr">i</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">    for (int j = 1; j <span class="tag">&lt;<span class="name">=</span> <span class="attr">i</span>; <span class="attr">j</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">        printf("%dx%d=%d\t", i, j, i * j);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    printf("\n");</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">/*</span></span><br><span class="line"><span class="xml">  输出：</span></span><br><span class="line"><span class="xml">    1x1=1</span></span><br><span class="line"><span class="xml">    2x1=2    2x2=4</span></span><br><span class="line"><span class="xml">    3x1=3    3x2=6    3x3=9</span></span><br><span class="line"><span class="xml">    4x1=4    4x2=8    4x3=12    4x4=16</span></span><br><span class="line"><span class="xml">    5x1=5    5x2=10    5x3=15    5x4=20    5x5=25</span></span><br><span class="line"><span class="xml">    6x1=6    6x2=12    6x3=18    6x4=24    6x5=30    6x6=36</span></span><br><span class="line"><span class="xml">    7x1=7    7x2=14    7x3=21    7x4=28    7x5=35    7x6=42    7x7=49</span></span><br><span class="line"><span class="xml">    8x1=8    8x2=16    8x3=24    8x4=32    8x5=40    8x6=48    8x7=56    8x8=64</span></span><br><span class="line"><span class="xml">    9x1=9    9x2=18    9x3=27    9x4=36    9x5=45    9x6=54    9x7=63    9x8=72    9x9=81</span></span><br><span class="line"><span class="xml">  */</span></span><br></pre></td></tr></table></figure><h3 id="3-6-break语句"><a href="#3-6-break语句" class="headerlink" title="3.6. break语句"></a>3.6. break语句</h3><p><code>break</code>语句只用在<code>while</code>、<code>do-while</code>、<code>for</code>、<code>switch</code>语句中，它的作用就是终止并跳出所在的循环语句。</p><p>示例：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">for (<span class="name">int</span> i = <span class="number">1</span><span class="comment">; i &lt;= 5; i++) &#123;</span></span><br><span class="line">    if (<span class="name">i</span> == <span class="number">4</span>) break<span class="comment">;</span></span><br><span class="line">    for (<span class="name">int</span> j = <span class="number">1</span><span class="comment">; j &lt;= 5; j++) &#123;</span></span><br><span class="line">        if (<span class="name">j</span> == <span class="number">3</span>) break<span class="comment">;</span></span><br><span class="line">        printf(<span class="string">"#"</span>)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"\n"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"end"</span>)<span class="comment">;</span></span><br><span class="line">/*</span><br><span class="line">  输出：</span><br><span class="line">    ##</span><br><span class="line">    ##</span><br><span class="line">    ##</span><br><span class="line">    end</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><h3 id="3-7-continue语句"><a href="#3-7-continue语句" class="headerlink" title="3.7. continue语句"></a>3.7. continue语句</h3><p><code>continue</code>语句只用在<code>while</code>、<code>do-while</code>、<code>for</code>语句中，它的作用是跳过所在循环语句的循环体剩余部分</p><p>示例：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (<span class="name">int</span> i = <span class="number">1</span><span class="comment">; i &lt;= 5; i++) &#123;</span></span><br><span class="line">    if (<span class="name">i</span> == <span class="number">3</span>) continue<span class="comment">;</span></span><br><span class="line">    printf(<span class="string">"%c"</span>, (<span class="name">i</span> &amp; <span class="number">1</span>) ? '#' : '$')<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">// 输出：#$$#</span><br></pre></td></tr></table></figure><h3 id="3-8-goto语句"><a href="#3-8-goto语句" class="headerlink" title="3.8. goto语句"></a>3.8. goto语句</h3><p><code>goto</code>语句的作用：可以为所欲为地灵活跳转</p><p>示例：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">n</span> = <span class="number">1</span>;</span><br><span class="line">co<span class="symbol">de:</span></span><br><span class="line">    printf(<span class="string">"#"</span>);</span><br><span class="line">    <span class="built_in">n</span>++;</span><br><span class="line"><span class="built_in">if</span> (<span class="built_in">n</span> &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">    printf(<span class="string">"%d"</span>, <span class="built_in">n</span>);</span><br><span class="line">    goto <span class="built_in">code</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 输出：#<span class="number">2</span>#<span class="number">3</span>#<span class="number">4</span>#<span class="number">5</span>#</span><br></pre></td></tr></table></figure><p><code>goto</code>语句使用起来非常灵活，在一定情况下，可以提高程序的效率，但是他破坏了结构化的设计风格，容易造成代码执行流程的混乱（一般情况下，代码的执行顺序是从上到下），导致代码难以调试和维护。所以非常不建议使用<code>goto</code>语句（这也是在开发中几乎看不到<code>goto</code>语句的原因）。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> if </tag>
            
            <tag> switch </tag>
            
            <tag> while </tag>
            
            <tag> do-while </tag>
            
            <tag> for </tag>
            
            <tag> goto </tag>
            
            <tag> 流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】C语言基本语法（三）</title>
      <link href="/2016/03/15/c-syntax-basic-03/"/>
      <url>/2016/03/15/c-syntax-basic-03/</url>
      
        <content type="html"><![CDATA[<p>C语言中常用的运算符，如下表所示</p><a id="more"></a><p><img src="http://blog.idbeny.com/qtt5z.png@normal" alt=""></p><h2 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、算术运算符</h2><p><img src="http://blog.idbeny.com/5e1mq.png@normal" alt=""></p><h3 id="1-1-加减乘除"><a href="#1-1-加减乘除" class="headerlink" title="1.1. 加减乘除"></a>1.1. 加减乘除</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">printf</span>(<span class="string">"%d %d %d %d\n"</span>, a + b, a - b, a * b, a / b); <span class="regexp">//</span> 输出：<span class="number">30</span> -<span class="number">10</span> <span class="number">200</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><em>注意：乘法a*b，并不是axb；除法a/b，并不是a÷b</em></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = -<span class="number">20</span>;</span><br><span class="line"><span class="keyword">printf</span>(<span class="string">"%d %d %d %d\n"</span>, +a, -a, +b, -b); <span class="regexp">//</span> 输出：<span class="number">10</span> -<span class="number">10</span> -<span class="number">20</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="1-1-1-整数与整数进行运算，结果依然是整数："><a href="#1-1-1-整数与整数进行运算，结果依然是整数：" class="headerlink" title="1.1.1. 整数与整数进行运算，结果依然是整数："></a>1.1.1. 整数与整数进行运算，结果依然是整数：</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">7</span> / <span class="number">4</span>); <span class="comment">// 输出：1</span></span><br></pre></td></tr></table></figure><p><em>整数除以整数时，直接剔除小数部分，不会四舍五入</em></p><h4 id="1-1-2-浮点数与浮点数进行运算，结果依然是浮点数："><a href="#1-1-2-浮点数与浮点数进行运算，结果依然是浮点数：" class="headerlink" title="1.1.2. 浮点数与浮点数进行运算，结果依然是浮点数："></a>1.1.2. 浮点数与浮点数进行运算，结果依然是浮点数：</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"%f<span class="subst">\n</span>"</span>, <span class="number">7.0</span> / <span class="number">4.0</span>); <span class="comment">// 输出：1.750000</span></span><br></pre></td></tr></table></figure><h4 id="1-1-3-整数与浮点数进行运算，结果是浮点数："><a href="#1-1-3-整数与浮点数进行运算，结果是浮点数：" class="headerlink" title="1.1.3. 整数与浮点数进行运算，结果是浮点数："></a>1.1.3. 整数与浮点数进行运算，结果是浮点数：</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下结果全部输出：1.750000</span></span><br><span class="line">printf(<span class="string">"%f<span class="subst">\n</span>"</span>, <span class="number">7.0</span> / <span class="number">4</span>);</span><br><span class="line">printf(<span class="string">"%f<span class="subst">\n</span>"</span>, <span class="number">7</span> / <span class="number">4.0</span>);</span><br><span class="line">printf(<span class="string">"%f<span class="subst">\n</span>"</span>, (double)<span class="number">7</span> / <span class="number">4</span>);</span><br><span class="line">printf(<span class="string">"%f<span class="subst">\n</span>"</span>, <span class="number">7</span> / (double)<span class="number">4</span>);</span><br><span class="line">printf(<span class="string">"%f<span class="subst">\n</span>"</span>, (double)<span class="number">7</span> / (double)<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意点</span></span><br><span class="line">printf(<span class="string">"%f<span class="subst">\n</span>"</span>, (double)(<span class="number">7</span> / <span class="number">4</span>)); <span class="comment">// 输出：1.000000</span></span><br><span class="line">printf(<span class="string">"%d"</span>, <span class="number">3333</span> / <span class="number">1000</span> * <span class="number">1000</span>); <span class="comment">// 输出：3000</span></span><br><span class="line">printf(<span class="string">"%d"</span>, <span class="number">2</span> / <span class="number">0</span>); <span class="comment">// 错误写法（编译器会报警告，部分编译器会输出NaN）</span></span><br></pre></td></tr></table></figure><h3 id="1-2-模"><a href="#1-2-模" class="headerlink" title="1.2. 模"></a>1.2. 模</h3><p>模运算符的作用是求余数，所以，也叫做求余运算符、取余运算符、余数运算符。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">20</span> % <span class="number">5</span>); <span class="comment">// 输出：0</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">21</span> % <span class="number">5</span>); <span class="comment">// 输出：1</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">22</span> % <span class="number">5</span>); <span class="comment">// 输出：2</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">23</span> % <span class="number">5</span>); <span class="comment">// 输出：3</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">24</span> % <span class="number">5</span>); <span class="comment">// 输出：4</span></span><br></pre></td></tr></table></figure><h4 id="1-2-1-模运算符不能用在浮点数上，否则编译器会报错："><a href="#1-2-1-模运算符不能用在浮点数上，否则编译器会报错：" class="headerlink" title="1.2.1. 模运算符不能用在浮点数上，否则编译器会报错："></a>1.2.1. 模运算符不能用在浮点数上，否则编译器会报错：</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">10.0</span> % <span class="number">5</span>);</span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">10</span> % <span class="number">5.0</span>);</span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">10.0</span> % <span class="number">5.0</span>);</span><br></pre></td></tr></table></figure><h4 id="1-2-2-同样的，0不能作为被除数取余："><a href="#1-2-2-同样的，0不能作为被除数取余：" class="headerlink" title="1.2.2. 同样的，0不能作为被除数取余："></a>1.2.2. 同样的，0不能作为被除数取余：</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"%d"</span>, <span class="number">10</span> / <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="1-2-3-模运算结果的正负性跟随运算符左边的操作数："><a href="#1-2-3-模运算结果的正负性跟随运算符左边的操作数：" class="headerlink" title="1.2.3. 模运算结果的正负性跟随运算符左边的操作数："></a>1.2.3. 模运算结果的正负性跟随运算符左边的操作数：</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">10</span> % <span class="number">7</span>); <span class="comment">// 输出：3</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">10</span> % <span class="number">-7</span>); <span class="comment">// 输出：3</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">-10</span> % <span class="number">7</span>); <span class="comment">// 输出：-3</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">-10</span> % <span class="number">-7</span>); <span class="comment">// 输出：-3</span></span><br></pre></td></tr></table></figure><p>案例：提示用户输入秒数，输出格式00时00分00秒</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"请输入秒数："</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">input</span><span class="comment">;</span></span><br><span class="line">scanf(<span class="string">"%d"</span>, &amp;<span class="keyword">input</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> hour = <span class="keyword">input</span> / <span class="number">3600</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> minutes = <span class="keyword">input</span> / <span class="number">60</span> - hour*<span class="number">60</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> seconds = <span class="keyword">input</span> % <span class="number">60</span><span class="comment">;</span></span><br><span class="line">printf(<span class="string">"%02d时%02d分%02d秒\n"</span>, hour, minutes, seconds)<span class="comment">;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输入：7592</span></span><br><span class="line"><span class="comment"> 输出：02时06分32秒</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="1-3-隐式类型转换"><a href="#1-3-隐式类型转换" class="headerlink" title="1.3. 隐式类型转换"></a>1.3. 隐式类型转换</h3><h4 id="1-3-1-在进行一些算数运算时，小类型会被隐式转换成大类型"><a href="#1-3-1-在进行一些算数运算时，小类型会被隐式转换成大类型" class="headerlink" title="1.3.1. 在进行一些算数运算时，小类型会被隐式转换成大类型"></a>1.3.1. 在进行一些算数运算时，小类型会被隐式转换成大类型</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> &lt; <span class="keyword">short</span> &lt; <span class="keyword">int</span> &lt; <span class="keyword">long</span> &lt; <span class="keyword">long</span> <span class="keyword">long</span> &lt; <span class="keyword">float</span> &lt; <span class="keyword">double</span> &lt; <span class="keyword">long</span> <span class="keyword">double</span></span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">10.5</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, d + i); <span class="comment">// 输出：30.500000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> l = <span class="number">10L</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, l + i); <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-任何小于int的整数类型，在运算时会隐式转换为int类型"><a href="#1-3-2-任何小于int的整数类型，在运算时会隐式转换为int类型" class="headerlink" title="1.3.2. 任何小于int的整数类型，在运算时会隐式转换为int类型"></a>1.3.2. 任何小于int的整数类型，在运算时会隐式转换为int类型</h4><p>案例：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">char c = <span class="number">97</span><span class="comment">;</span></span><br><span class="line">short s = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">printf(<span class="string">"%zd %zd\n"</span>, sizeof(<span class="name">c</span>), sizeof(<span class="name">s</span>))<span class="comment">; // 输出：1 2</span></span><br><span class="line">printf(<span class="string">"%zd %zd\n"</span>, sizeof(<span class="name">+c</span>), sizeof(<span class="name">-s</span>))<span class="comment">; // 输出：4 4</span></span><br><span class="line">printf(<span class="string">"%zd %zd\n"</span>, sizeof(<span class="name">c</span> + s), sizeof(<span class="name">c</span> / s))<span class="comment">; // 输出： 4 4</span></span><br></pre></td></tr></table></figure><p>经典案例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%zd\n"</span>, <span class="keyword">sizeof</span>(<span class="string">'A'</span>)); <span class="comment">// 输出：4</span></span><br></pre></td></tr></table></figure><p>为什么会输出4呢？因为在C语言中，字符的本质是整数，而我们没有声明要把这个字符当char来使用，所以是4个字节。</p><h3 id="1-4-运算符的优先级"><a href="#1-4-运算符的优先级" class="headerlink" title="1.4. 运算符的优先级"></a>1.4. 运算符的优先级</h3><p>当一个表达式中同时使用多个运算符时，会根据运算符的<strong>优先级</strong>和<strong>结合性</strong>，来决定运算符的执行顺序。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">4</span> + <span class="number">2</span> - <span class="number">1</span>); <span class="comment">// 输出：5</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">4</span> * <span class="number">2</span> / <span class="number">2</span>); <span class="comment">// 输出：4</span></span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, <span class="number">4</span> + <span class="number">2</span> * <span class="number">3</span> - <span class="number">3</span> / <span class="number">2</span>); <span class="comment">// 输出：9</span></span><br></pre></td></tr></table></figure><ul><li>优先级越高（优先级值越小），越先被执行；</li><li>优先级一样，根据结合性决定执行顺序。</li></ul><p><img src="http://blog.idbeny.com/n8lyn.png@normal" alt=""><br><img src="http://blog.idbeny.com/7wtyp.png@normal" alt=""></p><p>案例：<br>可以使用小括号来调整优先级</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b * c); <span class="comment">// 输出：7</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (a + b) * c); <span class="comment">// 输出：9</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ((a / b) * b) + (a % b)); <span class="comment">// 输出：1</span></span><br></pre></td></tr></table></figure><p>当自己记不住（不确定）运算符的优先级时，多使用小括号即可，根本不用刻意去背运算符的优先级。当然，为了代码的可读性，也应该多使用小括号。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = <span class="number">1</span>, <span class="keyword">b </span>= <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line">printf(<span class="string">"%d\n"</span>, a &gt; <span class="number">0</span> ? a + <span class="keyword">b </span>? a - <span class="keyword">b </span>: <span class="keyword">b </span>+ c : <span class="keyword">b </span>- c)<span class="comment">; // 输出：-1</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, (a &gt; <span class="number">0</span>) ? ((a + <span class="keyword">b) </span>? (a - <span class="keyword">b) </span>: (<span class="keyword">b </span>+ c)) : (<span class="keyword">b </span>- c))<span class="comment">; // 输出：-1</span></span><br></pre></td></tr></table></figure><h2 id="二、赋值运算符"><a href="#二、赋值运算符" class="headerlink" title="二、赋值运算符"></a>二、赋值运算符</h2><p><img src="http://blog.idbeny.com/jqbqn.png@normal" alt=""><br>案例：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">40</span>, b = <span class="number">30</span>, c = <span class="number">20</span>, d = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> e = a -= b = c += d %= <span class="number">8</span>;</span><br><span class="line"><span class="keyword">printf</span>(<span class="string">"%d %d %d %d %d\n"</span>, a, b, c, d, e); <span class="regexp">//</span> 输出：<span class="number">18</span> <span class="number">22</span> <span class="number">22</span> <span class="number">2</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="2-1-自增-自减运算符"><a href="#2-1-自增-自减运算符" class="headerlink" title="2.1. 自增/自减运算符"></a>2.1. 自增/自减运算符</h3><p>自增/自减运算符包括：</p><ul><li>前缀<ul><li>自增运算符：++a</li><li>自减运算符：–a</li></ul></li><li>后缀<ul><li>自增运算符：a++</li><li>自减运算符：a–<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">++a; <span class="comment">// 等价于 a += 1;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a); <span class="comment">// 输出：2</span></span><br><span class="line"></span><br><span class="line">a++; <span class="comment">// 等价于 a += 1;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a); <span class="comment">// 输出：3</span></span><br><span class="line"></span><br><span class="line">--a; <span class="comment">// 等价于 a -= 1;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a); <span class="comment">// 输出：2</span></span><br><span class="line"></span><br><span class="line">a--; <span class="comment">// 等价于 a -= 1;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a); <span class="comment">// 输出：1</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>案例一：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>, b = <span class="number">3</span>;</span><br><span class="line">b = ++a;</span><br><span class="line">printf(<span class="string">"%d %d"</span>, a, b); <span class="comment">// 输出：2 2</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  b = ++a;</span></span><br><span class="line"><span class="comment">  等效代码：</span></span><br><span class="line"><span class="comment">  a += 1;</span></span><br><span class="line"><span class="comment">  b = a;</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>案例二：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>, b = <span class="number">3</span>;</span><br><span class="line">b = a++;</span><br><span class="line">printf(<span class="string">"%d %d"</span>, a, b); <span class="comment">// 输出：2 1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  b = a++;</span></span><br><span class="line"><span class="comment">  等效代码：</span></span><br><span class="line"><span class="comment">  b = a;</span></span><br><span class="line"><span class="comment">  a += 1;</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>注意：以下代码不容易理解，可读性差，结果具有不确定性（有些编译器会报警告），所以不建议在实际开发中编写此类代码。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">int</span> <span class="string">a</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line"><span class="string">int</span> <span class="string">b</span> <span class="string">=</span> <span class="string">++a</span> <span class="string">+</span> <span class="string">++a</span> <span class="string">+</span> <span class="string">++a</span> <span class="string">+</span> <span class="string">++a;</span></span><br><span class="line"><span class="string">printf("%d</span> <span class="string">%d\n",</span> <span class="string">a,</span> <span class="string">b);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"> <span class="string">输出：</span></span><br><span class="line"> <span class="string">微软编译器：b</span> <span class="string">=</span> <span class="number">5</span> <span class="string">+</span> <span class="number">5</span> <span class="string">+</span> <span class="number">5</span> <span class="string">+</span> <span class="number">5</span> <span class="string">=</span> <span class="number">20</span></span><br><span class="line"> <span class="string">GCC：b</span> <span class="string">=</span> <span class="number">3</span> <span class="string">+</span> <span class="number">3</span> <span class="string">+</span> <span class="number">4</span> <span class="string">+</span> <span class="number">5</span> <span class="string">=</span> <span class="number">15</span></span><br><span class="line"> <span class="string">Clang：b</span> <span class="string">=</span> <span class="number">2</span> <span class="string">+</span> <span class="number">3</span> <span class="string">+</span> <span class="number">4</span> <span class="string">+</span> <span class="number">5</span></span><br><span class="line"> <span class="string">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-2-最大吞噬规则"><a href="#2-2-最大吞噬规则" class="headerlink" title="2.2. 最大吞噬规则"></a>2.2. 最大吞噬规则</h3><p>当多个运算符紧挨在一起时，编译器会按照最大吞噬规则去解析。</p><p>案例一：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c = a +++ b; <span class="regexp">//</span> 等价代码：<span class="keyword">int</span> c = (a++) + b</span><br><span class="line"><span class="keyword">printf</span>(<span class="string">"%d %d %d\n"</span>, a, b, c); <span class="regexp">//</span> 输出:<span class="number">2</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>案例二（错误代码）：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> c = a +++++ b;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 等价代码：</span></span><br><span class="line"><span class="comment"> int c = (a++) ++ + (b);</span></span><br><span class="line"><span class="comment"> 编译器不知道中间的++是作用于a还是b，所以就会在编译阶段报错</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="三、比较运算符"><a href="#三、比较运算符" class="headerlink" title="三、比较运算符"></a>三、比较运算符</h2><p><img src="http://blog.idbeny.com/60k4d.png@normal" alt=""><br>比较运算符，也称为关系运算符，运算结果只可能shi整数0和1。</p><ul><li>当指定关系成立时，就返回整数1，表明是真的，正确的；</li><li>当指定关系不成立时，就返回整数0，表明是假的，错误的。</li></ul><p>案例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">int</span> <span class="string">a</span> <span class="string">=</span> <span class="number">10</span><span class="string">;</span></span><br><span class="line"><span class="string">int</span> <span class="string">b</span> <span class="string">=</span> <span class="number">8</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">&gt;</span> <span class="number">5</span><span class="string">);</span> <span class="string">//</span> <span class="string">输出：1</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">&gt;=</span> <span class="string">b);</span> <span class="string">//</span> <span class="string">输出：1</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">!=</span> <span class="string">b);</span> <span class="string">//</span> <span class="string">输出：1</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">&lt;</span> <span class="number">6</span><span class="string">);</span> <span class="string">//</span> <span class="string">输出：0</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">&lt;=</span> <span class="number">3</span><span class="string">);</span> <span class="string">//</span> <span class="string">输出：0</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">==</span> <span class="number">13</span><span class="string">);</span> <span class="string">//</span> <span class="string">输出：0</span></span><br><span class="line"></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="number">3</span> <span class="string">&gt;</span> <span class="number">4</span> <span class="string">+</span> <span class="number">7</span><span class="string">);</span> <span class="string">//</span> <span class="string">输出：0</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：0</span></span><br><span class="line">  <span class="string">分解：</span></span><br><span class="line">      <span class="number">3</span> <span class="string">&gt;</span> <span class="number">4</span> <span class="string">+</span> <span class="number">7</span></span><br><span class="line">      <span class="number">3</span> <span class="string">&gt;</span> <span class="number">11</span></span><br><span class="line">      <span class="number">0</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">(3</span> <span class="string">&gt;</span> <span class="number">4</span><span class="string">)</span> <span class="string">+</span> <span class="number">7</span><span class="string">);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：7</span></span><br><span class="line">  <span class="string">分解：</span></span><br><span class="line">      <span class="string">(3</span> <span class="string">&gt;</span> <span class="number">4</span><span class="string">)</span> <span class="string">+</span> <span class="number">7</span></span><br><span class="line">      <span class="number">0</span> <span class="string">+</span> <span class="number">7</span></span><br><span class="line">      <span class="number">7</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="number">5</span> <span class="string">!=</span> <span class="number">4</span> <span class="string">+</span> <span class="number">2</span> <span class="string">*</span> <span class="number">7</span> <span class="string">&gt;</span> <span class="number">3</span> <span class="string">==</span> <span class="number">10</span><span class="string">);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：0</span></span><br><span class="line">  <span class="string">分解：</span></span><br><span class="line">    <span class="number">5</span> <span class="string">!=</span> <span class="number">4</span> <span class="string">+</span> <span class="number">2</span> <span class="string">*</span> <span class="number">7</span> <span class="string">&gt;</span> <span class="number">3</span> <span class="string">==</span> <span class="number">10</span></span><br><span class="line">    <span class="number">5</span> <span class="string">!=</span> <span class="number">4</span> <span class="string">+</span> <span class="number">14</span> <span class="string">&gt;</span> <span class="number">3</span> <span class="string">==</span> <span class="number">10</span></span><br><span class="line">    <span class="number">5</span> <span class="string">!=</span> <span class="number">18</span> <span class="string">&gt;</span> <span class="number">3</span> <span class="string">==</span> <span class="number">10</span></span><br><span class="line">    <span class="number">5</span> <span class="string">!=</span> <span class="number">1</span> <span class="string">==</span> <span class="number">10</span></span><br><span class="line">    <span class="number">1</span> <span class="string">==</span> <span class="number">10</span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">  <span class="string">*/</span></span><br></pre></td></tr></table></figure><h2 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、逻辑运算符</h2><p>在C语言中，任何值都有真假性：</p><ul><li>任何非0的值都为“真”（比如10、1、19、-92、”123”、”kk”、’a’等）；</li><li>只有数值0才为“假”（比如0、0.0、’\0’(空字符)等）。</li></ul><p><img src="http://blog.idbeny.com/27msf.png@normal" alt=""></p><p>逻辑运算符的运算数可以是任何值，运算结果要么是真、要么是假：</p><ul><li>运算结果为真，返回整数1</li><li>运算结果为假，返回整数0</li></ul><h3 id="4-1-逻辑非（-）"><a href="#4-1-逻辑非（-）" class="headerlink" title="4.1. 逻辑非（!）"></a>4.1. 逻辑非（!）</h3><p><code>!a</code>（对a的真假进行取反，就是说，真的变假，假的变真）：</p><ul><li>如果a是真，则!a的运算结果是假，返回整数0；<br>如果a是假，则!a的运算结果是真，返回整数1；</li><li>优先级：逻辑非 &gt; 加减乘除 &gt; 关系运算符；</li><li>连续偶数个<code>!!</code>相当于没有做任何取反；</li><li>字符串不管是否包含字符（即长度&gt;=0），一定是真。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !a); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="number">100</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="number">-20</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="number">0</span>); <span class="comment">// 输出：1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !+<span class="number">0</span>); <span class="comment">// 输出：1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="number">-0</span>); <span class="comment">// 输出：1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="string">'a'</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="string">"idbeny"</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="number">0.0</span>); <span class="comment">// 输出：1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="number">0.0001</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="number">0.1</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="number">1.0</span>); <span class="comment">// 输出：0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !a&gt;<span class="number">5</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (!a)&gt;<span class="number">5</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !(a&gt;<span class="number">5</span>)); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !(a &lt; <span class="number">5</span>) * <span class="number">2</span> + !(a / <span class="number">20</span>)); <span class="comment">// 输出：3</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输出：3</span></span><br><span class="line"><span class="comment">  分解：</span></span><br><span class="line"><span class="comment">    !(a &lt; 5) * 2 + !(a / 20)</span></span><br><span class="line"><span class="comment">    !0 * 2 + !0</span></span><br><span class="line"><span class="comment">    1 * 2 + 1</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !!(a &lt; <span class="number">20</span>)); <span class="comment">// 输出：1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !!!(a &lt; <span class="number">20</span>)); <span class="comment">// 输出：0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="string">'0'</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="string">'\0'</span>); <span class="comment">// 输出：1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="string">""</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="string">"0"</span>); <span class="comment">// 输出：0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !<span class="string">"000"</span>); <span class="comment">// 输出：0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2-逻辑与（-amp-amp-）"><a href="#4-2-逻辑与（-amp-amp-）" class="headerlink" title="4.2. 逻辑与（&amp;&amp;）"></a>4.2. 逻辑与（&amp;&amp;）</h3><p><code>a &amp;&amp; b</code></p><ul><li>只有a、b都为真时，运算结果才为真，返回整数1</li><li>只要a、b其一为假，运算结果就为假，返回整数0</li><li>在表示范围时，逻辑与（&amp;&amp;）是取交集（∩），<code>exp(a) ∩ exp(b)</code></li><li>短路现象：如果多个条件同时判断，只要前面条件判断为假，后面条件不会继续执行，直接跳过</li><li>优先级：加减乘除 &gt; 关系运算符 &gt; 逻辑与</li></ul><p>案例一：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">int b = <span class="number">-20</span><span class="comment">;</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, a <span class="symbol">&amp;&amp;</span> b)<span class="comment">; // 输出：1</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, a <span class="symbol">&amp;&amp;</span> <span class="number">0</span>)<span class="comment">; // 输出：0</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, b <span class="symbol">&amp;&amp;</span> <span class="number">0.0</span>)<span class="comment">; // 输出：0</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, !a <span class="symbol">&amp;&amp;</span> b)<span class="comment">; // 输出：0</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, a <span class="symbol">&amp;&amp;</span> !'\<span class="number">0</span>')<span class="comment">; // 输出：1</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, !(<span class="name">a</span> <span class="symbol">&amp;&amp;</span> 'k'))<span class="comment">; // 输出：0</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, a &gt; <span class="number">3</span> <span class="symbol">&amp;&amp;</span> b &lt; <span class="number">0</span>)<span class="comment">; // 输出：1</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, (<span class="name">a</span> &gt; <span class="number">3</span>) <span class="symbol">&amp;&amp;</span> (<span class="name">b</span> &lt; <span class="number">0</span>))<span class="comment">; // 输出：1</span></span><br></pre></td></tr></table></figure><p>案例二（逻辑与的短路现象）：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = <span class="number">1</span>, b =<span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>, m = <span class="number">2</span>, n = <span class="number">2</span>;</span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, (m = a &gt; b) &amp;&amp; (n = c &gt; d)); <span class="comment">// 输出：0</span></span><br><span class="line">printf(<span class="string">"%d %d<span class="subst">\n</span>"</span>, m, n); <span class="comment">// 输出：0 2</span></span><br></pre></td></tr></table></figure><h3 id="4-3-逻辑或（-）"><a href="#4-3-逻辑或（-）" class="headerlink" title="4.3. 逻辑或（||）"></a>4.3. 逻辑或（||）</h3><p><code>a || b</code></p><ul><li>只要a、b其一为真，运算结果就为真，返回整数1；</li><li>只有a、b都为假时，运算结果才为假，返回整数0；</li><li>在表示范围时，逻辑或（||）是取并集（∪），<code>exp(a) ∪ exp(b)</code>；</li><li>短路现象：如果多个条件同时判断，只要前面条件判断为真，后面条件不会继续执行，直接跳过；</li><li>优先级：加减乘除 &gt; 关系运算符 &gt; 逻辑与 &gt; 逻辑或。</li></ul><p>案例一：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">int b = <span class="number">-20</span><span class="comment">;</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, a || b)<span class="comment">; // 输出：1</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, a || <span class="number">0</span>)<span class="comment">; // 输出：1</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, a || <span class="number">0.0</span>)<span class="comment">; // 输出：1</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, !a || b)<span class="comment">; // 输出：1</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, a || !'\<span class="number">0</span>')<span class="comment">; // 输出：1</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, !(<span class="name">a</span> || 'a'))<span class="comment">; // 输出：0</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, a &gt; <span class="number">3</span> || b &lt; <span class="number">0</span>)<span class="comment">; // 输出：1</span></span><br><span class="line">printf(<span class="string">"%d\n"</span>, (<span class="name">a</span> &gt; <span class="number">3</span>) || (<span class="name">b</span> &lt; <span class="number">0</span>))<span class="comment">; // 输出：1</span></span><br></pre></td></tr></table></figure><p>案例二（逻辑或的短路现象）：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = <span class="number">1</span>, b =<span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>, m = <span class="number">2</span>, n = <span class="number">2</span>;</span><br><span class="line">printf(<span class="string">"%d<span class="subst">\n</span>"</span>, (m = a &lt; b) || (n = c &gt; d)); <span class="comment">// 输出：1</span></span><br><span class="line">printf(<span class="string">"%d %d<span class="subst">\n</span>"</span>, m, n); <span class="comment">// 输出：1 2</span></span><br></pre></td></tr></table></figure><h2 id="五、条件运算符"><a href="#五、条件运算符" class="headerlink" title="五、条件运算符"></a>五、条件运算符</h2><p>条件运算符，一般也叫做三目运算符或三元运算符。</p><p>格式：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a ? b : <span class="type">c</span></span><br></pre></td></tr></table></figure><ul><li>如果a为真，返回b</li><li>如果a为假，返回c</li></ul><p>案例一：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">5</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">0</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">printf(<span class="string">"%d %d\n"</span>, a, b); <span class="comment">// 输出：1 2</span></span><br></pre></td></tr></table></figure><p>案例二：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">int</span> a = <span class="number">1</span>, <span class="keyword">b </span>= <span class="number">2</span>, c = <span class="number">3</span><span class="comment">;</span></span><br><span class="line">// 易读性差</span><br><span class="line"><span class="symbol">printf</span>(<span class="string">"%d\n"</span>, a &gt; <span class="number">0</span> ? a + <span class="keyword">b </span>? a - <span class="keyword">b </span>: <span class="keyword">b </span>+ c : <span class="keyword">b </span>- c)<span class="comment">; // 输出：-1</span></span><br><span class="line"></span><br><span class="line">// 相比第一种好，但易读性还是相对较差</span><br><span class="line"><span class="symbol">printf</span>(<span class="string">"%d\n"</span>, a &gt; <span class="number">0</span> ? (a + <span class="keyword">b </span>? a - <span class="keyword">b </span>: <span class="keyword">b </span>+ c) : <span class="keyword">b </span>- c)<span class="comment">; // 输出：-1</span></span><br><span class="line"></span><br><span class="line">// 推荐写法</span><br><span class="line"><span class="symbol">printf</span>(<span class="string">"%d\n"</span>, (a &gt; <span class="number">0</span>) ? ((a + <span class="keyword">b) </span>? (a - <span class="keyword">b) </span>: (<span class="keyword">b </span>+ c)) : (<span class="keyword">b </span>- c))<span class="comment">; // 输出：-1</span></span><br></pre></td></tr></table></figure><p>案例三：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  场景：有一个每行8列的表格，每个格子只能存放一个数值，如果一共有n个数值需要存放，请问这个表格至少需要多少行？</span></span><br><span class="line"><span class="comment">  问题等价：如果一共有n条数据需要分页显示，每一页最多8条数据，求一共有多少页数据？</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">printf("请输入数据总条数：");</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">scanf("%d", &amp;<span class="keyword">input</span>);</span><br><span class="line">printf("请输入每页最多展示数据条数（默认：8条）：");</span><br><span class="line"><span class="type">int</span> cols = <span class="number">8</span>;</span><br><span class="line">scanf("%d", &amp;cols);</span><br><span class="line">// 思想：<span class="keyword">input</span> % cols 的结果如果是<span class="number">0</span>，代表没有多余数据，每页全部占满；如果结果是<span class="number">1</span>，代表有不足cols条数的数据，并且需要新增一行来显示</span><br><span class="line"><span class="type">int</span> <span class="keyword">rows</span> = (<span class="keyword">input</span> % cols) ? (<span class="keyword">input</span> / cols + <span class="number">1</span>) : (<span class="keyword">input</span> / cols);</span><br><span class="line">// 等价计算(这种方式小心内存溢出风险)</span><br><span class="line">// <span class="type">int</span> <span class="keyword">rows</span> = (<span class="keyword">input</span> + cols - <span class="number">1</span>) / cols;</span><br><span class="line">printf("一共%d页数据\n", <span class="keyword">rows</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  请输入数据总条数：7</span></span><br><span class="line"><span class="comment">  请输入每页最多展示数据条数（默认：8条）：8</span></span><br><span class="line"><span class="comment">  一共1页数据</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  请输入数据总条数：99</span></span><br><span class="line"><span class="comment">  请输入每页最多展示数据条数（默认：8条）：8</span></span><br><span class="line"><span class="comment">  一共13页数据</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h2 id="六、逗号运算符"><a href="#六、逗号运算符" class="headerlink" title="六、逗号运算符"></a>六、逗号运算符</h2><p>表达式<code>(a, b, ...)</code>，从左到右依次执行表达式，返回最后一个表达式的运算结果。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="built_in">int</span> b = (a += <span class="number">2</span>, a = a &gt; <span class="number">0</span> ? <span class="number">100</span> : <span class="number">-100</span>, a++);</span><br><span class="line">printf(<span class="string">"%d %d\n"</span>, a, b); <span class="comment">// 输出：101 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等效代码</span></span><br><span class="line"><span class="number">10</span>;</span><br><span class="line"><span class="number">20</span>;</span><br><span class="line"><span class="built_in">int</span> a = <span class="number">30</span>;</span><br><span class="line">a += <span class="number">2</span>;</span><br><span class="line">a = a &gt; <span class="number">0</span> ? <span class="number">100</span> : <span class="number">-100</span></span><br><span class="line"><span class="built_in">int</span> b = a++;</span><br><span class="line">printf(<span class="string">"%d %d\n"</span>, a, b); <span class="comment">// 输出：101 100</span></span><br></pre></td></tr></table></figure><h2 id="七、位运算符"><a href="#七、位运算符" class="headerlink" title="七、位运算符"></a>七、位运算符</h2><p>位运算符属于算术运算符，位运算符的运算数只能是整数。<br><img src="http://blog.idbeny.com/0vciq.png@normal" alt=""></p><h3 id="7-1-位移运算符"><a href="#7-1-位移运算符" class="headerlink" title="7.1. 位移运算符"></a>7.1. 位移运算符</h3><p>位移运算符包含<strong>按位左移（也叫逐位左移）</strong>和<strong>按位右移（也叫逐位右移）</strong>，移动的位数不能是负数。</p><h4 id="7-1-1-按位左移（也叫逐位左移）"><a href="#7-1-1-按位左移（也叫逐位左移）" class="headerlink" title="7.1.1. 按位左移（也叫逐位左移）"></a>7.1.1. 按位左移（也叫逐位左移）</h4><p><strong>格式：</strong><code>a &lt;&lt; b</code><br>特点：a左移b位，低位补0</p><p>案例一：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">5</span>;</span><br><span class="line">printf(<span class="string">"%d\n"</span>, a &lt;&lt; <span class="number">3</span>); <span class="comment">// 输出：40</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/lkngi.png@normal" alt=""></p><p>整数5向左移3位后<br>$$2^0 + 2^2 =&gt; 2^3 + 2^5 = (2^0 + 2^2) * 2^3$$</p><p>案例二：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">-5</span>;</span><br><span class="line">printf(<span class="string">"%d\n"</span>, a &lt;&lt; <span class="number">3</span>); <span class="comment">// 输出：-40</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/b6bxy.png@normal" alt=""></p><p><code>a &lt;&lt; b</code>结果：$a*2^b$</p><h4 id="7-1-2-按位右移（也叫逐位右移）"><a href="#7-1-2-按位右移（也叫逐位右移）" class="headerlink" title="7.1.2. 按位右移（也叫逐位右移）"></a>7.1.2. 按位右移（也叫逐位右移）</h4><p><strong>格式：</strong><code>a &gt;&gt; b</code><br>特点：a右移b位，高位用符号位填充</p><p>案例一：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">40</span>;</span><br><span class="line">printf(<span class="string">"%d\n"</span>, a &gt;&gt; <span class="number">3</span>); <span class="comment">// 输出：5</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/sso4k.png@normal" alt=""></p><p>整数40向右移3位后<br>$$2^3 + 2^5 =&gt; 2^0 + 2^2 = (2^3 + 2^5) * 2^{-3} = (2^3 + 2^5) / 2^3$$</p><p>案例二：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">-40</span>;</span><br><span class="line">printf(<span class="string">"%d\n"</span>, a &gt;&gt; <span class="number">3</span>); <span class="comment">// 输出：-5</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/xniby.png@normal" alt=""></p><p><code>a &gt;&gt; b</code>结果：$a/2^b$</p><h3 id="7-2-按位逻辑运算符"><a href="#7-2-按位逻辑运算符" class="headerlink" title="7.2. 按位逻辑运算符"></a>7.2. 按位逻辑运算符</h3><h4 id="7-2-1-按位非"><a href="#7-2-1-按位非" class="headerlink" title="7.2.1. 按位非"></a>7.2.1. 按位非</h4><p>按位非也叫做按位取反。</p><p><strong>格式：</strong><code>~a</code><br>特点：将a的所有二进制位（包括符号位）取反，即0变1，1变0。</p><p>案例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">int</span> <span class="string">c</span> <span class="string">=</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">~c);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：-1</span></span><br><span class="line">  <span class="string">分析：</span></span><br><span class="line">    <span class="string">c：</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="string">=</span> <span class="number">0</span><span class="string">(十进制)</span></span><br><span class="line">    <span class="string">~c：11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="string">=</span> <span class="number">-1</span><span class="string">(十进制)</span></span><br><span class="line">  <span class="string">*/</span></span><br><span class="line"></span><br><span class="line"><span class="string">c</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">~c);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">输出：-2</span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line">    <span class="string">c：</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> <span class="string">=</span> <span class="number">1</span><span class="string">(十进制)</span></span><br><span class="line">    <span class="string">~c：11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111110</span> <span class="string">=</span> <span class="number">-2</span><span class="string">(十进制)</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"></span><br><span class="line"><span class="string">c</span> <span class="string">=</span> <span class="number">19</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">~c);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">输出：-20</span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line">    <span class="string">c：</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010011</span> <span class="string">=</span> <span class="number">19</span><span class="string">(十进制)</span></span><br><span class="line">    <span class="string">~c：11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11101100</span> <span class="string">=</span> <span class="number">-20</span><span class="string">(十进制)</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"></span><br><span class="line"><span class="string">c</span> <span class="string">=</span> <span class="number">-20</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">~c);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">输出：19</span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line">    <span class="string">c：</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11101100</span> <span class="string">=</span> <span class="number">-20</span><span class="string">(十进制)</span></span><br><span class="line">    <span class="string">~c：00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010011</span> <span class="string">=</span> <span class="number">19</span><span class="string">(十进制)</span></span><br><span class="line"><span class="string">*/</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/oet2b.png@normal" alt=""></p><p><code>~a</code>结果：$-(a+1)$</p><h4 id="7-2-2-按位与"><a href="#7-2-2-按位与" class="headerlink" title="7.2.2. 按位与"></a>7.2.2. 按位与</h4><p><strong>格式：</strong><code>a &amp; b</code><br>特点：</p><ul><li>只有当2个二进制位都为1时，运算结果才为1</li><li>只要有1个二进制位为0，运算结果就为0</li></ul><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">int</span> <span class="string">a</span> <span class="string">=</span> <span class="number">140</span><span class="string">;</span></span><br><span class="line"><span class="string">int</span> <span class="string">b</span> <span class="string">=</span> <span class="number">200</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">&amp;</span> <span class="string">b);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：136</span></span><br><span class="line">  <span class="string">分析：</span></span><br><span class="line">    <span class="string">a：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">10001100</span></span><br><span class="line">    <span class="string">b：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11001000</span></span><br><span class="line">    <span class="string">a</span> <span class="string">&amp;</span> <span class="string">b：00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">10001000</span></span><br><span class="line">  <span class="string">*/</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/pthwe.png@normal" alt=""></p><h4 id="7-2-3-按位或"><a href="#7-2-3-按位或" class="headerlink" title="7.2.3. 按位或"></a>7.2.3. 按位或</h4><p><strong>格式：</strong><code>a | b</code><br>特点：</p><ul><li>只要有1个二进制位为1，运算结果就为1</li><li>只有当2个二进制位都为0时，运算结果才为0</li></ul><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">int</span> <span class="string">a</span> <span class="string">=</span> <span class="number">140</span><span class="string">;</span></span><br><span class="line"><span class="string">int</span> <span class="string">b</span> <span class="string">=</span> <span class="number">200</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">|</span> <span class="string">b);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：204</span></span><br><span class="line">  <span class="string">分析：</span></span><br><span class="line">    <span class="string">a：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">10001100</span></span><br><span class="line">    <span class="string">b：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11001000</span></span><br><span class="line">    <span class="string">a</span> <span class="string">|</span> <span class="string">b：00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11001100</span></span><br><span class="line">  <span class="string">*/</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/1a1ll.png@normal" alt=""></p><h4 id="7-2-4-按位异或"><a href="#7-2-4-按位异或" class="headerlink" title="7.2.4. 按位异或"></a>7.2.4. 按位异或</h4><p><strong>格式：</strong><code>a ^ b</code><br>特点：</p><ul><li>当2个二进制位的值不相等时，运算结果为1</li><li>当2个二进制位的值相等时，运算结果为0</li></ul><p>运算顺序：</p><ul><li><code>a ^ b == b ^ a</code></li><li><code>(a ^ b) ^ c == a ^ (b ^ c) == (a ^ c) ^ b</code></li></ul><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">int</span> <span class="string">a</span> <span class="string">=</span> <span class="number">140</span><span class="string">;</span></span><br><span class="line"><span class="string">int</span> <span class="string">b</span> <span class="string">=</span> <span class="number">200</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">^</span> <span class="string">b);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：68</span></span><br><span class="line">  <span class="string">分析：</span></span><br><span class="line">    <span class="string">a：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">10001100</span></span><br><span class="line">    <span class="string">b：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11001000</span></span><br><span class="line">    <span class="string">a</span> <span class="string">^</span> <span class="string">b：00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">01000100</span></span><br><span class="line">  <span class="string">*/</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/lfo6v.png@normal" alt=""></p><p>经典案例：</p><ul><li><p><code>a ^ 0</code>的结果是a</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">int</span> <span class="string">a</span> <span class="string">=</span> <span class="number">10</span><span class="string">;</span></span><br><span class="line"><span class="string">int</span> <span class="string">b</span> <span class="string">=</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">^</span> <span class="string">b);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：10</span></span><br><span class="line">  <span class="string">分析：</span></span><br><span class="line">    <span class="string">a：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001010</span></span><br><span class="line">    <span class="string">b：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">    <span class="string">a</span> <span class="string">^</span> <span class="string">b：00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001010</span></span><br><span class="line">  <span class="string">*/</span></span><br><span class="line"></span><br><span class="line"><span class="string">int</span> <span class="string">a</span> <span class="string">=</span> <span class="number">-10</span><span class="string">;</span></span><br><span class="line"><span class="string">int</span> <span class="string">b</span> <span class="string">=</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">^</span> <span class="string">b);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：-10</span></span><br><span class="line">  <span class="string">分析：</span></span><br><span class="line">    <span class="string">a：</span>    <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11110110</span></span><br><span class="line">    <span class="string">b：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">    <span class="string">a</span> <span class="string">^</span> <span class="string">b：11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11110110</span></span><br><span class="line">  <span class="string">*/</span></span><br></pre></td></tr></table></figure></li><li><p><code>a ^ a</code>的结果是0</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">int</span> <span class="string">a</span> <span class="string">=</span> <span class="number">-10</span><span class="string">;</span></span><br><span class="line"><span class="string">int</span> <span class="string">b</span> <span class="string">=</span> <span class="number">-10</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">^</span> <span class="string">b);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：0</span></span><br><span class="line">  <span class="string">分析：</span></span><br><span class="line">    <span class="string">a：</span>    <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11110110</span></span><br><span class="line">    <span class="string">b：</span>    <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11110110</span></span><br><span class="line">    <span class="string">a</span> <span class="string">^</span> <span class="string">b：00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">  <span class="string">*/</span></span><br><span class="line"></span><br><span class="line"><span class="string">int</span> <span class="string">a</span> <span class="string">=</span> <span class="number">10</span><span class="string">;</span></span><br><span class="line"><span class="string">int</span> <span class="string">b</span> <span class="string">=</span> <span class="number">10</span><span class="string">;</span></span><br><span class="line"><span class="string">printf("%d\n",</span> <span class="string">a</span> <span class="string">^</span> <span class="string">b);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line">  <span class="string">输出：0</span></span><br><span class="line">  <span class="string">分析：</span></span><br><span class="line">    <span class="string">a：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001010</span></span><br><span class="line">    <span class="string">b：</span>    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001010</span></span><br><span class="line">    <span class="string">a</span> <span class="string">^</span> <span class="string">b：00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">  <span class="string">*/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="7-2-5-场景练习"><a href="#7-2-5-场景练习" class="headerlink" title="7.2.5. 场景练习"></a>7.2.5. 场景练习</h4><p>在开发中，尽量使用位运算取代乘除模运算，因为位运算的效率比他们高很多。</p><p>场景一：用<code>a &amp; 1</code>判断<code>a</code>的奇偶性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：利用对2取余结果为0或1进行判断，0为偶数，1为奇数</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, (a % <span class="number">2</span>) ? <span class="string">"奇数"</span> : <span class="string">"偶数"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：10</span></span><br><span class="line"><span class="comment">  输出：偶数</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：87</span></span><br><span class="line"><span class="comment">  输出：奇数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：利用按位与，判断结果是否都为1，如果最后一位是0，则是偶数，结果为0；如果最后一位是1，则是奇数，结果为1。</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, (a ^ <span class="number">1</span>) ? <span class="string">"奇数"</span> : <span class="string">"偶数"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：10</span></span><br><span class="line"><span class="comment">  输出：偶数</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：87</span></span><br><span class="line"><span class="comment">  输出：奇数</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>场景二：用<code>a &lt;&lt; b</code>取代<code>a * 2^b(2的b次方)</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译器可能会警告，加减乘除模的运算级别优先于位移运算</span></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">20</span>;</span><br><span class="line">printf(<span class="string">"%d\n"</span>, a &lt;&lt; <span class="number">2</span> + <span class="number">6</span>); <span class="comment">// 输出：5120</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对位移操作加上小括号提高运算级别</span></span><br><span class="line"><span class="built_in">int</span> b = <span class="number">20</span>;</span><br><span class="line">printf(<span class="string">"%d\n"</span>, (b &lt;&lt; <span class="number">2</span>) + <span class="number">6</span>); <span class="comment">// 输出：86</span></span><br></pre></td></tr></table></figure><p>场景三：用<code>a &gt;&gt; b</code>取代<code>a / 2^b(2的b次方)</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">25</span>;</span><br><span class="line">printf(<span class="string">"%d\n"</span>, (a &gt;&gt; <span class="number">2</span>) + <span class="number">6</span>); <span class="comment">// 输出：12</span></span><br></pre></td></tr></table></figure><p>场景四：不使用第三方变量交换2个整形变量的值</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">int</span> a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line"><span class="symbol">int</span> <span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 方法一：使用加减法</span><br><span class="line">a = a + <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">b </span>= a - <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">a </span>= a - <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">printf("a:%d </span><span class="keyword">b:%d\n", </span>a, <span class="keyword">b);</span></span><br><span class="line"><span class="keyword">/*</span></span><br><span class="line"><span class="keyword"> </span> 输出：a:<span class="number">20</span> <span class="keyword">b:10</span></span><br><span class="line"><span class="keyword"> </span> 分析：</span><br><span class="line">    a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line">    a = a + <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">b </span>= a - <span class="keyword">b </span>= (a + <span class="keyword">b) </span>- <span class="keyword">b </span>= a + (<span class="keyword">b </span>- <span class="keyword">b) </span>= a + <span class="number">0</span> = a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">    a = a - <span class="keyword">b </span>= (a + <span class="keyword">b) </span>- a = a - a + <span class="keyword">b </span>= <span class="number">0</span> + <span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">// 方法二：使用减加法</span><br><span class="line">a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line">a = a - <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">b </span>= a + <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">a </span>= <span class="keyword">b </span>- a<span class="comment">;</span></span><br><span class="line"><span class="symbol">printf</span>(<span class="string">"a:%d b:%d\n"</span>, a, <span class="keyword">b);</span></span><br><span class="line"><span class="keyword">/*</span></span><br><span class="line"><span class="keyword"> </span> 输出：a:<span class="number">20</span> <span class="keyword">b:10</span></span><br><span class="line"><span class="keyword"> </span> 分析：</span><br><span class="line">    a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line">    a = a - <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">b </span>= a + <span class="keyword">b </span>= (a - <span class="keyword">b) </span>+ <span class="keyword">b </span>= a - (<span class="keyword">b </span>- <span class="keyword">b) </span>= a - <span class="number">0</span> = a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">    a = <span class="keyword">b </span>- a = a - (a - <span class="keyword">b) </span>= a - a + <span class="keyword">b </span>= <span class="number">0</span> + <span class="keyword">b </span>= <span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">// 方法三：使用积除法</span><br><span class="line">a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line">a = a * <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">b </span>= a / <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">a </span>= a / <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">printf("a:%d </span><span class="keyword">b:%d\n", </span>a, <span class="keyword">b);</span></span><br><span class="line"><span class="keyword">/*</span></span><br><span class="line"><span class="keyword"> </span> 输出：a:<span class="number">20</span> <span class="keyword">b:10</span></span><br><span class="line"><span class="keyword"> </span> 分析：</span><br><span class="line">    a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line">    a = a * <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">b </span>= a / <span class="keyword">b </span>= (a * <span class="keyword">b) </span>/ <span class="keyword">b </span>= a * (<span class="keyword">b </span>/ <span class="keyword">b) </span>= a * <span class="number">1</span> = a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">    a = a / <span class="keyword">b </span>= (a * <span class="keyword">b) </span>/ a = (a / a) * <span class="keyword">b </span>= <span class="number">1</span> * <span class="keyword">b </span>= <span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">// 方法四：使用异或</span><br><span class="line">a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line">a = a ^ <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">b </span>= a ^ <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">a </span>= a ^ <span class="keyword">b;</span></span><br><span class="line"><span class="keyword">printf("a:%d </span><span class="keyword">b:%d\n", </span>a, <span class="keyword">b);</span></span><br><span class="line"><span class="keyword">/*</span></span><br><span class="line"><span class="keyword"> </span> 输出：a:<span class="number">20</span> <span class="keyword">b:10</span></span><br><span class="line"><span class="keyword"> </span> 分析：</span><br><span class="line">    a = <span class="number">10</span><span class="comment">; 0b00000000 00000000 00000000 00001010</span></span><br><span class="line">    <span class="keyword">b </span>= <span class="number">20</span><span class="comment">; 0b00000000 00000000 00000000 00010100</span></span><br><span class="line">    a = a ^ <span class="keyword">b</span></span><br><span class="line"><span class="keyword"> </span>       <span class="number">0b00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001010</span></span><br><span class="line">      ^  <span class="number">0b00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010100</span></span><br><span class="line">    ---------------------------------------------</span><br><span class="line">        <span class="number">0b00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011110</span>(<span class="number">30</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">b </span>= a ^ <span class="keyword">b </span>= (a ^ <span class="keyword">b) </span>^ <span class="keyword">b </span>= a ^ (<span class="keyword">b </span>^ <span class="keyword">b) </span>= a ^ <span class="number">0</span> = a</span><br><span class="line">        <span class="number">0b00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011110</span></span><br><span class="line">      ^  <span class="number">0b00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010100</span></span><br><span class="line">    ------------------------------------------------</span><br><span class="line">        <span class="number">0b00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001010</span>(<span class="number">10</span>)</span><br><span class="line">  </span><br><span class="line">    a = a ^ <span class="keyword">b </span>= (a ^ <span class="keyword">b) </span>^ a = (a ^ a) ^ <span class="keyword">b </span>= <span class="number">0</span> ^ <span class="keyword">b </span>= <span class="keyword">b</span></span><br><span class="line"><span class="keyword"> </span>       <span class="number">0b00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011110</span></span><br><span class="line">      ^  <span class="number">0b00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001010</span></span><br><span class="line">    ------------------------------------------------</span><br><span class="line">        <span class="number">0b00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010100</span>(<span class="number">20</span>)</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><blockquote><p>思考：上面由先加后减方法推出了先减后加，能否根据先乘后除推出先除后乘呢？</p><p>答案是否定的，因为两数相除的话会影响数据的精度（a / b是取整操作）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 运算符 </tag>
            
            <tag> 按位非 </tag>
            
            <tag> 按位或 </tag>
            
            <tag> 按位与 </tag>
            
            <tag> 按位异或 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】C语言基本语法（二）</title>
      <link href="/2016/03/10/c-syntax-basic-02/"/>
      <url>/2016/03/10/c-syntax-basic-02/</url>
      
        <content type="html"><![CDATA[<p>C语言的数据类型有很多，可以分为4大类型：</p><a id="more"></a><ul><li>void类型</li><li>基本类型<ul><li>字符类型</li><li>有符号整数类型</li><li>无符号整数类型</li><li>浮点类型</li></ul></li><li>枚举类型</li><li>派生类型<ul><li>数组类型</li><li>结构体类型</li><li>联合体类型（也叫共同体类型）</li><li>函数类型</li><li>指针类型</li></ul></li></ul><h2 id="一、基本类型"><a href="#一、基本类型" class="headerlink" title="一、基本类型"></a>一、基本类型</h2><ul><li><p>有符号整数类型</p><ul><li><code>char</code>（等价类型：<code>signed char</code>）</li><li><code>short</code>（等价类型：<code>signed short</code>、<code>short int</code>、<code>signed short int</code>）</li><li><code>int</code>（等价类型：<code>signed int</code>、<code>signed</code>）</li><li><code>long</code>（等价类型：<code>signed long</code>、<code>long int</code>、<code>signed long int</code>）（C99起）</li><li><code>long long</code>（等价类型：<code>signed long long</code>、<code>long long int</code>、<code>signed long long in</code>t`）（C99起）</li></ul></li><li><p>无符号整数类型</p><ul><li>unsigned char</li><li>unsigned short（等价类型：<code>unsigned short int</code>）</li><li>unsigned int（等价类型：<code>unsigned</code>）</li><li>unsigned long（等价类型：<code>unsigned long int</code>）（C99起）</li><li>unsigned long long（等价类型：<code>unsigned long long int</code>）（C99起）</li></ul></li><li><p>字符类型</p><ul><li><code>char</code></li></ul></li><li><p>浮点类型</p><ul><li><code>float</code></li><li><code>double</code></li><li><code>long double</code></li></ul></li></ul><h3 id="1-1-整数类型"><a href="#1-1-整数类型" class="headerlink" title="1.1. 整数类型"></a>1.1. 整数类型</h3><h4 id="1-1-1-整数类型大小"><a href="#1-1-1-整数类型大小" class="headerlink" title="1.1.1. 整数类型大小"></a>1.1.1. 整数类型大小</h4><p>C标准规定</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="keyword">sizeof</span>(<span class="keyword">char</span>)</span><br><span class="line">  &lt;= <span class="keyword">sizeof</span>(<span class="keyword">short</span>)</span><br><span class="line">  &lt;= <span class="keyword">sizeof</span>(<span class="keyword">int</span>)</span><br><span class="line">  &lt;= <span class="keyword">sizeof</span>(<span class="keyword">long</span>)</span><br><span class="line">  &lt;= <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>)</span><br></pre></td></tr></table></figure><h4 id="1-1-2-数据模型"><a href="#1-1-2-数据模型" class="headerlink" title="1.1.2. 数据模型"></a>1.1.2. 数据模型</h4><p>关于基本类型大小的是实现方案，统称为：数据模型。有4种常见的数据模型</p><ul><li><p>32bit系统（指针为32位）</p><ul><li>LP32<ul><li>Win16 API</li></ul></li><li>ILP32<ul><li>Win32 API</li><li>Unix、类Unix系统（Linux、Mac OS X）</li></ul></li></ul></li><li><p>64bit系统（指针为64位）</p><ul><li>LLP64<ul><li>Win64 API</li></ul></li><li>LP64<ul><li>Unix、类Unix系统（Linux、Mac OS X）</li></ul></li></ul></li><li><p>比较少见的数据模型</p><ul><li>ILP64：int、long、指针均为64位<ul><li>仅出现在早期64位Unix系统（例如 Unicos on Cray）</li></ul></li></ul></li></ul><p><img src="http://blog.idbeny.com/zmwjx.png@normal" alt="">  </p><h4 id="1-1-3-有符号整数类型和无符号整数类型区别"><a href="#1-1-3-有符号整数类型和无符号整数类型区别" class="headerlink" title="1.1.3. 有符号整数类型和无符号整数类型区别"></a>1.1.3. 有符号整数类型和无符号整数类型区别</h4><p>整数类型可分为：有符号整数类型、无符号整数类型。<br><img src="http://blog.idbeny.com/xov4u.png@normal" alt=""></p><h4 id="1-1-4-有符号整数char、无符号整数unsigned-char"><a href="#1-1-4-有符号整数char、无符号整数unsigned-char" class="headerlink" title="1.1.4. 有符号整数char、无符号整数unsigned char"></a>1.1.4. 有符号整数char、无符号整数unsigned char</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">0xBD</span> &lt;=&gt; <span class="number">0b10111101</span></span><br><span class="line">char c1 = <span class="number">0xBD</span>;</span><br><span class="line">unsigned char c2 = <span class="number">0xBD</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, c1, c2); // 输出：-<span class="number">67</span> <span class="number">189</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/boemg.png@normal" alt=""></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">0x43</span> &lt;=&gt; <span class="number">0b01000011</span></span><br><span class="line">char c1 = <span class="number">0x43</span>;</span><br><span class="line">unsigned char c2 = <span class="number">0x43</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, c1, c2); // 输出：<span class="number">67</span> <span class="number">67</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/p5pri.png@normal" alt=""></p><ul><li>c1、c2变量在内存中存放的二进制数据是完全一样的；</li><li>对于同一份二进制数据，分别以有符号数形式、无符号数形式解读出来的含义可能是不一样的。</li></ul><h4 id="1-1-5-整数的取值范围"><a href="#1-1-5-整数的取值范围" class="headerlink" title="1.1.5. 整数的取值范围"></a>1.1.5. 整数的取值范围</h4><p><code>char</code>、<code>unsigned char</code> 都只占用一个字节，能够存放的二进制数据范围都是<code>[0b0000 0000, 0b1111 1111]</code>。<br><img src="http://blog.idbeny.com/qt35f.png@normal" alt=""></p><ul><li><code>char</code>的取值范围：$[-128, 127] = [-2^7, 2^7-1]$</li><li><code>unsigned char</code>的取值范围：$[0, 255] = [0, 2^8-1]$</li><li>有n个二进制位的有符号数的取值范围$[-2^{n-1}, 2^{n-1}-1]$</li><li>有n个二进制位的无符号数的取值范围$[0, 2^n-1]$</li></ul><table><thead><tr><th align="center">位数</th><th align="center">符号</th><th align="center">最小值</th><th align="center">最大值</th></tr></thead><tbody><tr><td align="center">8</td><td align="center">有符号</td><td align="center">$$-2^7(128)$$</td><td align="center">$$2^7-1(127)$$</td></tr><tr><td align="center">8</td><td align="center">无符号</td><td align="center">0</td><td align="center">$$2^8-1(255)$$</td></tr><tr><td align="center">16</td><td align="center">有符号</td><td align="center">$$-2^{15}(-32768)$$</td><td align="center">$$2^{15}-1(32767)$$</td></tr><tr><td align="center">16</td><td align="center">无符号</td><td align="center">0</td><td align="center">$$2^{16}-1(65535)$$</td></tr><tr><td align="center">32</td><td align="center">有符号</td><td align="center">$$-2^{31}(-2147483648)$$</td><td align="center">$$2^{31}-1(2147483647)$$</td></tr><tr><td align="center">32</td><td align="center">无符号</td><td align="center">0</td><td align="center">$$2^{32}-1(4294967295)$$</td></tr><tr><td align="center">64</td><td align="center">有符号</td><td align="center">$$-2^{63}(-922337203685477808)$$</td><td align="center">$$2^{63}-1(922337203685477807)$$</td></tr><tr><td align="center">64</td><td align="center">无符号</td><td align="center">0</td><td align="center">$$2^{64}-1(18446744073709551615)$$</td></tr></tbody></table><h4 id="1-1-6-溢出（Overflow）"><a href="#1-1-6-溢出（Overflow）" class="headerlink" title="1.1.6. 溢出（Overflow）"></a>1.1.6. 溢出（Overflow）</h4><p>溢出指的是内容超过了已知容器的容量。</p><p>例：<code>short s;</code></p><ul><li><code>short</code>类型的变量s有2个字节的内存空间</li><li>如果要将超过2个字节（比如4个字节）的数据存储到变量s中去，就会产生内存溢出</li></ul><p>案例一：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">16909292</span>;</span><br><span class="line">short s = <span class="number">16909292</span>;</span><br><span class="line"><span class="keyword">char</span> c = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i); <span class="comment">// 输出：16909292</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s); <span class="comment">// 输出：1004</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c); <span class="comment">// 输出：-20</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/mwldo.png@normal" alt=""></p><ul><li>当出现溢出时，会优先保留低字节的数据，舍弃高字节的数据；</li><li>所以在给取值范围小的变量赋值时要注意防止数据溢出，否则结果可能会跟预期不符合。</li></ul><blockquote><p>思考：那是不是以后都统一使用取值范围比较大的变量就好了？<br>应该根据已知的数据范围选择合适大小的变量，不然会造成内存空间的浪费</p></blockquote><p>案例二：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">16909292</span>;</span><br><span class="line"><span class="keyword">char</span> c = i;</span><br><span class="line">i = c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i); <span class="comment">// 输出：-20</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c); <span class="comment">// 输出：-20</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/yq9eg.png@normal" alt=""></p><p>案例三：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c1 = <span class="number">255</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/1gq03.png@normal" alt=""></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="number">1</span> = <span class="keyword">c</span><span class="number">1</span> + <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="comment">c2 = c2 + 1;</span></span><br><span class="line"><span class="comment">printf("c1=%d, c2=%d", c1, c2); // 输出：c1=0, c2=0</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/x8dk0.png@normal" alt=""></p><p>案例四：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/7f2d7.png@normal" alt=""></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="number">1</span> = <span class="keyword">c</span><span class="number">1</span> - <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="comment">c2 = c2 - 1;</span></span><br><span class="line"><span class="comment">printf("c1=%d, c2=%d", c1, c2); // 输出：c1=255, c2=-1</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/25z21.png@normal" alt=""></p><p>案例五：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c1 = <span class="number">127</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="number">127</span>;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/2qf6x.png@normal" alt=""></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="number">1</span> = <span class="keyword">c</span><span class="number">1</span> + <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="comment">c2 = c2 + 1;</span></span><br><span class="line"><span class="comment">printf("c1=%d, c2=%d", c1, c2); // 输出：c1=128, c2=-128</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/urq0c.png@normal" alt=""></p><p>案例六：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c1 = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="number">-128</span>;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/aeaw4.png@normal" alt=""></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="number">1</span> = <span class="keyword">c</span><span class="number">1</span> - <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="comment">c2 = c2 - 1;</span></span><br><span class="line"><span class="comment">printf("c1=%d, c2=%d", c1, c2); // 输出：c1=127, c2=127</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/rreu2.png@normal" alt=""></p><p>案例七：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c1 = <span class="number">255</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/5avxl.png@normal" alt=""></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="number">1</span> = <span class="keyword">c</span><span class="number">1</span> + <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="comment">c2 = c2 + 1;</span></span><br><span class="line"><span class="comment">printf("c1=%d, c2=%d", c1, c2); // 输出：c1=0, c2=0</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/n66h6.png@normal" alt=""></p><p>案例八：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/17tym.png@normal" alt=""></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="number">1</span> = <span class="keyword">c</span><span class="number">1</span> - <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="comment">c2 = c2 - 1;</span></span><br><span class="line"><span class="comment">printf("c1=%d, c2=%d", c1, c2); // 输出：c1=255, c2=-1</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/s44xs.png@normal" alt=""></p><h4 id="1-1-7-unsigned-char、char的取值范围"><a href="#1-1-7-unsigned-char、char的取值范围" class="headerlink" title="1.1.7. unsigned char、char的取值范围"></a>1.1.7. unsigned char、char的取值范围</h4><p><img src="http://blog.idbeny.com/d31io.png@normal" alt=""></p><h3 id="1-2-浮点类型"><a href="#1-2-浮点类型" class="headerlink" title="1.2. 浮点类型"></a>1.2. 浮点类型</h3><p>浮点类型可以用来表示小数（比如3.14），包括<code>float</code>,<code>double</code>,<code>long double</code>类型</p><p>最常用的浮点类型是<code>float</code>和<code>double</code>，一般在数值后面加上f或者F表示十float类型的数值</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span> f = <span class="number">3.14</span>F;</span><br><span class="line"><span class="built_in">double</span> d = <span class="number">10.24</span>;</span><br><span class="line">printf(<span class="string">"%f %f"</span>, f, d); <span class="comment">// 输出：3.140000 10.240000</span></span><br></pre></td></tr></table></figure><ul><li><code>float</code>：单精度（Single）浮点类型，占用32bit，可以保证精确到小数点后6位<ul><li>最小值：$$-3.4*10^{38}$$</li><li>最大值：$$3.4*10^{38}$$</li></ul></li><li><code>double</code>：双精度（Double）浮点类型，占用64bit，可以保证精确到小数点后15位<ul><li>最小值：$$-1.8*10^{308}$$</li><li>最大值：$$1.8*10^{308}$$</li></ul></li></ul><h4 id="1-2-1-浮点类型的存储细节"><a href="#1-2-1-浮点类型的存储细节" class="headerlink" title="1.2.1. 浮点类型的存储细节"></a>1.2.1. 浮点类型的存储细节</h4><blockquote><p>思考：为什么32bit的<code>unsigned int</code>最大值是2^32-1，而32bit的<code>float</code>最大值是3.4 * 10^38？<br>因为他们的存储方式不一样，浮点数在计算机中是按照IEEE 754标准存储的。</p></blockquote><p><img src="http://blog.idbeny.com/hxa9o.png@normal" alt=""><br><img src="http://blog.idbeny.com/eed5s.png@normal" alt=""></p><h3 id="1-3-整数、浮点数字面量"><a href="#1-3-整数、浮点数字面量" class="headerlink" title="1.3. 整数、浮点数字面量"></a>1.3. 整数、浮点数字面量</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">char c = <span class="number">10</span>;</span><br><span class="line">unsigned char uc = <span class="number">10</span>;</span><br><span class="line">short s = <span class="number">10</span>;</span><br><span class="line">unsigned short us = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> i = <span class="number">10</span>;</span><br><span class="line">unsigned <span class="built_in">int</span> ui1 = <span class="number">10</span>u;</span><br><span class="line">unsigned <span class="built_in">int</span> ui2 = <span class="number">10</span>U;</span><br><span class="line"></span><br><span class="line">long l1 = <span class="number">10</span>l;</span><br><span class="line">long l2 = <span class="number">10</span>L;</span><br><span class="line">unsigned long ul1 = <span class="number">10</span>ul;</span><br><span class="line">unsigned long ul2 = <span class="number">10</span>UL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能是lL或Ll</span></span><br><span class="line">long long ll1 = <span class="number">10</span>ll;</span><br><span class="line">long long ll2 = <span class="number">10</span>ll;</span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span> f1 = <span class="number">10.24</span>F;</span><br><span class="line"><span class="built_in">double</span> d1 = <span class="number">10.24</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小数部分可选：1.0</span></span><br><span class="line"><span class="built_in">float</span> f2 = <span class="number">1.</span>F;</span><br><span class="line"><span class="built_in">double</span> d2 = <span class="number">1.</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整数部分可选：0.1</span></span><br><span class="line"><span class="built_in">float</span> f3 = <span class="number">.1</span>F;</span><br><span class="line"><span class="built_in">double</span> d3 = <span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十进制小数 1.2 * 10^3 = 1200.0</span></span><br><span class="line"><span class="built_in">float</span> f4 = <span class="number">1.2e3</span>F; <span class="comment">// 1.2E3F</span></span><br><span class="line"><span class="built_in">double</span> d4 = <span class="number">1.2e3</span>; <span class="comment">// 1.2E3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制小数 1.125 * 2^10 = 1152.0</span></span><br><span class="line"><span class="built_in">float</span> f5 = <span class="number">0x1</span><span class="number">.2</span>p10F; <span class="comment">// 0x1.2P10F</span></span><br><span class="line"><span class="built_in">double</span> d5 = <span class="number">0x1</span><span class="number">.2</span>p10; <span class="comment">// 0x1.2P10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 十进制 1.875 * 2^3 = 15.0</span></span><br><span class="line">printf(<span class="string">"%f"</span>, <span class="number">0x1</span>.ep+<span class="number">3</span>); <span class="comment">// 可写：0x1.EP+3 输出：15.000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 十进制 1.875 * 2^(-2) = 0.46875</span></span><br><span class="line">printf(<span class="string">"%f"</span>, <span class="number">0x1</span>.ep<span class="number">-2</span>); <span class="comment">// 可写：0x1.EP-2 输出：0.468750</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> v <span class="number">0xE</span>+<span class="number">2</span>; <span class="comment">// 错误</span></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">0xe</span>+<span class="number">2</span>; <span class="comment">// 错误</span></span><br><span class="line"><span class="built_in">int</span> y = <span class="number">0xA</span>+<span class="number">2</span>; <span class="comment">// OK</span></span><br><span class="line"><span class="built_in">int</span> z = <span class="number">0xE</span> +<span class="number">2</span>; <span class="comment">// OK</span></span><br><span class="line"><span class="built_in">int</span> q = (<span class="number">0xE</span>)+<span class="number">2</span> <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><h3 id="1-4-printf中的转换格式指定符"><a href="#1-4-printf中的转换格式指定符" class="headerlink" title="1.4. printf中的转换格式指定符"></a>1.4. printf中的转换格式指定符</h3><p><img src="http://blog.idbeny.com/6zizm.png@normal" alt=""></p><h4 id="1-4-1-案例一"><a href="#1-4-1-案例一" class="headerlink" title="1.4.1. 案例一"></a>1.4.1. 案例一</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%zd\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 输出：4</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> age = <span class="number">10L</span>L;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, age); <span class="comment">// 输出：10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> no = <span class="number">8U</span>L;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, no); <span class="comment">// 输出：8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *name = <span class="string">"idbeny"</span>;</span><br><span class="line"><span class="keyword">char</span> *place = <span class="string">"1024星球"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"我是%s，欢迎来到%s\n"</span>, name, place); <span class="comment">// 输出：我是idbeny，欢迎来到1024星球</span></span><br></pre></td></tr></table></figure><h4 id="1-4-2-案例二"><a href="#1-4-2-案例二" class="headerlink" title="1.4.2. 案例二"></a>1.4.2. 案例二</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用%%来显示一个%</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%%%d\n"</span>, <span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 输出：10%20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// %6d表示占用6个字符位置，默认靠右对齐（左边空白）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"welcome%6d24星球\n"</span>, i1); <span class="comment">// 输出：welcome    1024星球</span></span><br><span class="line"><span class="comment">// %-6d表示占用6个字符位置，靠左对齐（右边空白）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"welcome%-6d24星球\n"</span>, i1); <span class="comment">// 输出：welcome10    24星球</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">-6</span>;</span><br><span class="line"><span class="comment">// %+6d：加号(+)表示显示正负号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%+6d和%+-6d\n"</span>, i1, i2); <span class="comment">// 输出：   +10和-6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="comment">// 四舍五入保留2位小数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, d); <span class="comment">// 输出：3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 占用10个字符位置</span></span><br><span class="line"><span class="comment"> * 四舍五入保留4位小数</span></span><br><span class="line"><span class="comment"> * 显示正负号</span></span><br><span class="line"><span class="comment"> * 靠左对齐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1%+-10.4f2\n"</span>, d); <span class="comment">// 输出：1+3.1416          2</span></span><br></pre></td></tr></table></figure><h3 id="1-5-scanf中的转换格式指定符"><a href="#1-5-scanf中的转换格式指定符" class="headerlink" title="1.5. scanf中的转换格式指定符"></a>1.5. scanf中的转换格式指定符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用%%来匹配一个%</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%%%d"</span>, &amp;age); <span class="comment">// 输入：%30</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"age is %d\n"</span>, age); <span class="comment">// 输出：age is 30</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：30</span></span><br><span class="line"><span class="comment">  输出：age is 10</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：%30</span></span><br><span class="line"><span class="comment">  输出：age is 30</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在scanf中，float类型用%f</span></span><br><span class="line"><span class="keyword">float</span> f;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;f);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在scanf中，double类型用%lf</span></span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在printf中，float、double都可以用%f、%lf</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f %lf %f %lf"</span>, f, f, d, d);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：10（回车）20</span></span><br><span class="line"><span class="comment">  输出：10.000000 10.000000 20.000000 20.000000</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// %*3d是跳过长度为3的整数</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%2d%*3d%4d"</span>, &amp;i1, &amp;i2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i1=%d,i2=%d"</span>, i1, i2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：10   20   40</span></span><br><span class="line"><span class="comment">  输出：i1=10,i2=40</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：10111140</span></span><br><span class="line"><span class="comment">  输出：i1=10,i2=140</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h3 id="1-6-类型转换"><a href="#1-6-类型转换" class="headerlink" title="1.6. 类型转换"></a>1.6. 类型转换</h3><p><strong>格式：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型<span class="number">1</span> v1 = xx;</span><br><span class="line">类型<span class="number">2</span> v2 = (类型<span class="number">1</span>)v1;</span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i); <span class="comment">// 输出：65</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">200</span>;</span><br><span class="line">short s = (short)i2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s); <span class="comment">// 输出：200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 会丢失精度</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> i3 = (<span class="keyword">int</span>)d;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i3); <span class="comment">// 输出：3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i4 = <span class="number">333</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = (<span class="keyword">double</span>)i4;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, d2); <span class="comment">// 输出：333.000000</span></span><br></pre></td></tr></table></figure><p>其实在很多时候，编译器都会进行隐式类型转换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">int</span> i = c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i); <span class="comment">// 输出：65</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">200L</span>;</span><br><span class="line">short s = i2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s); <span class="comment">// 输出：200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> i3 = d;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i3); <span class="comment">// 输出：3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i4 = <span class="number">333</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = i4;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, d2); <span class="comment">// 输出：333.000000</span></span><br></pre></td></tr></table></figure><p>大类型转小类型的时候，可能会丢失精度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, d); <span class="comment">// 输出：3.140000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = d;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i); <span class="comment">// 输出：3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> d2 = <span class="number">1.1234567890123456789123</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.20f\n"</span>, d2); <span class="comment">// 输出：1.12345678901234569125</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f = d2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.20f\n"</span>, f); <span class="comment">// 输出：1.12345683574676513672</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 整型 </tag>
            
            <tag> 浮点型 </tag>
            
            <tag> 字面量 </tag>
            
            <tag> 类型转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】C语言基本语法（一）</title>
      <link href="/2016/03/07/c-syntax-basic-01/"/>
      <url>/2016/03/07/c-syntax-basic-01/</url>
      
        <content type="html"><![CDATA[<p>C语言是全世界最流行的编程语言之一，再过去是几年中长期霸占语言热度排行榜前3名（TIOBE）</p><a id="more"></a><h2 id="一、认识C语言"><a href="#一、认识C语言" class="headerlink" title="一、认识C语言"></a>一、认识C语言</h2><h3 id="1-1-标准"><a href="#1-1-标准" class="headerlink" title="1.1. 标准"></a>1.1. 标准</h3><ul><li>目前最新的标准是：<code>ISO/IEC 9899:2011</code>，简称为<code>C11</code>标准</li><li>还有部分开发人员在使用<code>ISO/IEC 9899:1999</code>，简称为<code>C99</code>标准</li></ul><h3 id="1-2-用途"><a href="#1-2-用途" class="headerlink" title="1.2. 用途"></a>1.2. 用途</h3><p>基本上大部分的计算机语言都是基于C语言进行扩展的，它的性能极其优越，其他编程语言无法取代</p><ul><li>操作系统（Linux、Unix等操作系统就是利用C语言编写的）</li><li>数据库开发</li><li>高性能服务器开发</li><li>嵌入式开发</li><li>游戏开发</li><li>……</li></ul><h3 id="1-3-开发工具"><a href="#1-3-开发工具" class="headerlink" title="1.3. 开发工具"></a>1.3. 开发工具</h3><ul><li>记事本（txt）<ul><li>功能单一、体验差、易出错、开发效率低</li></ul></li><li>IDE（Integrated Development Environment）：集成开发环境<ul><li>智能提示、高亮识别、语法检测、开发效率高等强大功能</li><li>常见的C语言IDE：Visual Studio、Qt Creator、CLion、Dev-C++、Xcode（Mac操作系统）</li></ul></li></ul><h2 id="二、程序的结构"><a href="#二、程序的结构" class="headerlink" title="二、程序的结构"></a>二、程序的结构</h2><p>任何一个C语言程序都由一个或多个函数构成，每个函数都由自己的功能，所以以后编写的C语言代码，基本上都是写在函数中。</p><h3 id="2-1-main函数"><a href="#2-1-main函数" class="headerlink" title="2.1. main函数"></a>2.1. main函数</h3><p>每一个函数都有自己的名称（标识符），并且每一个函数的名称都是唯一的。</p><p>大部分程序运行时都有一个入口，而这个入口就是<code>main</code>函数，C语言就是这样，如果没有main函数，程序就无法运行。</p><h3 id="2-2-Hello-World"><a href="#2-2-Hello-World" class="headerlink" title="2.2. Hello World"></a>2.2. Hello World</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>printf</code> ：将双引号中的文字显示到屏幕上。</li></ul><h3 id="2-3-语法须知"><a href="#2-3-语法须知" class="headerlink" title="2.3. 语法须知"></a>2.3. 语法须知</h3><ul><li>C语言源代码文件的扩展名是<code>.c</code>；</li><li>每一条语句后面都要以分号<code>;</code>结尾；</li><li>括号都是成对出现的，小括号<code>()</code>，中括号<code>[]</code>，大/花括号<code>{}</code>；</li><li>区分大小写；</li><li>代码中的符号必须是英文符号（注释、字符、字符串等内容除外，其实所有编程语言代码中的符号都是只支持英文符号的，除了易语言）。</li></ul><h2 id="三、计算机关联"><a href="#三、计算机关联" class="headerlink" title="三、计算机关联"></a>三、计算机关联</h2><h3 id="3-1-计算机0和1由来"><a href="#3-1-计算机0和1由来" class="headerlink" title="3.1. 计算机0和1由来"></a>3.1. 计算机0和1由来</h3><p>计算机是由电路机演变而来的，电路的逻辑只有0和1两种状态，0表示低电平，1表示高电平，因此现在的电子计算机只能识别0和1。</p><ul><li>除了电子计算机、还有光子计算机、量子计算机、生物计算机、纳米计算机等高精端计算机（这些高端计算机不是只能识别0和1的）</li><li>我们平时说的计算机，就是指的电子计算机</li></ul><h3 id="3-2-计算机如何识别C语言代码"><a href="#3-2-计算机如何识别C语言代码" class="headerlink" title="3.2. 计算机如何识别C语言代码"></a>3.2. 计算机如何识别C语言代码</h3><p>我们编写好的代码交给计算机后，计算机是怎么识别出的？</p><p>上面提到计算机只能识别0和1，要想计算机能够正常识别代码，就需要经过以下流程：</p><blockquote><p>源代码(<em>.c) -&gt; 编译(compile) -&gt; 编译文件(</em>.o) -&gt; 链接(link) -&gt; 可执行文件(*.exe)</p></blockquote><ul><li>编译：将C语言源代码文件编译成目标文件（二进制文件），由编译器完成；</li><li>链接：将所有的目标文件以及所需要的库文件合并成一个可执行文件，由链接器完成。</li></ul><h3 id="3-3-常见的C语言编译器（已内置链接器）"><a href="#3-3-常见的C语言编译器（已内置链接器）" class="headerlink" title="3.3. 常见的C语言编译器（已内置链接器）"></a>3.3. 常见的C语言编译器（已内置链接器）</h3><ul><li>MSVC：微软出品（用在Windows中）</li><li>GCC：GNU Compiler Collection缩写，GNU出品</li><li>MinGW：Minimalist GNU for windows的缩写，GNU出品</li><li>LLVM：常用在苹果开发工具中</li><li>……</li></ul><p>同一分源代码，用不同的编译器编译出来的目标文件是不一样的，主要体现在体积、格式、运行效率等。</p><p>不同操作系统最后链接产生的可执行文件（应用程序）格式也是不同的：</p><ul><li>Windows：PE格式（常以<code>.exe</code>作为文件扩展名）</li><li>Linux：ELF格式</li><li>Mac：Mach-O格式</li></ul><h3 id="3-4-什么是BUG？"><a href="#3-4-什么是BUG？" class="headerlink" title="3.4. 什么是BUG？"></a>3.4. 什么是BUG？</h3><ul><li>BUG一般指的是程序漏洞、缺陷、错误，程序出现Bug后可能会导致程序无法正常运行；</li><li>来源：很早之前一位计算机科学家在调试设备时出现了故障，后来发现是有只飞蛾跑进了设备内部，卡住了机器的电路，导致机器无法运行，于是后来就把程序故障成为Bug（臭虫），排除程序故障排叫做DeBug。</li></ul><h3 id="3-5-硬盘和内存"><a href="#3-5-硬盘和内存" class="headerlink" title="3.5. 硬盘和内存"></a>3.5. 硬盘和内存</h3><p><img src="http://blog.idbeny.com/z8l07.png@normal" alt=""></p><p><em>在CPU、硬盘、内存3者之中，对我们开发者来说，最需要关注的内存，因为内存在程序运行过程中才执行的，而程序是运行在内存中的</em></p><h2 id="四、注释"><a href="#四、注释" class="headerlink" title="四、注释"></a>四、注释</h2><h3 id="4-1-什么是注释？"><a href="#4-1-什么是注释？" class="headerlink" title="4.1. 什么是注释？"></a>4.1. 什么是注释？</h3><ul><li>注释常用来解释某段代码的具体含义、作用</li><li>注释并不会被当做正常代码进行编译</li></ul><h3 id="4-2-注释有2种书写格式"><a href="#4-2-注释有2种书写格式" class="headerlink" title="4.2. 注释有2种书写格式"></a>4.2. 注释有2种书写格式</h3><ul><li>单行注释</li><li>多行注释</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入C语言基础库（这是一段单行注释）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 这是程序入口函数</span></span><br><span class="line"><span class="comment"> 函数运行后会打印一段文字</span></span><br><span class="line"><span class="comment"> （这就是多行注释）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-写注释的好处："><a href="#4-3-写注释的好处：" class="headerlink" title="4.3. 写注释的好处："></a>4.3. 写注释的好处：</h3><ul><li>方便回忆，检查旧代码</li><li>方便程序员之间团队协作，提高开发效率</li><li>方便旧项目的交接</li></ul><h2 id="五、变量"><a href="#五、变量" class="headerlink" title="五、变量"></a>五、变量</h2><p>变量的作用，可以存储程序运行过程中会变化的数据。</p><h3 id="5-1-如何声明一个变量？"><a href="#5-1-如何声明一个变量？" class="headerlink" title="5.1. 如何声明一个变量？"></a>5.1. 如何声明一个变量？</h3><p>格式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量类型 变量名<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">year</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">month</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">day</span></span><br></pre></td></tr></table></figure><ul><li>变量类型决定了变量能够存储什么类型的数据（上面的示例：int类型决定了变量能够存储整数）。</li></ul><h3 id="5-2-如何给变量赋值？"><a href="#5-2-如何给变量赋值？" class="headerlink" title="5.2. 如何给变量赋值？"></a>5.2. 如何给变量赋值？</h3><p>赋值：将数据交给变量去存储</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 = 数据<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li><p>这个等号表示赋值，会把右边的数据赋值给左边的变量</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> month = <span class="number">12</span></span><br><span class="line"><span class="built_in">int</span> day = <span class="number">30</span></span><br></pre></td></tr></table></figure></li><li><p>在变量声明完成后，直接通过变量名访问变量（不需要再带上变量类型（也不能带上变量类型））</p></li><li><p>变量可以被多次赋值，新值会覆盖旧值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">num</span> = <span class="number">20</span>;</span><br><span class="line">printf(<span class="string">"%d"</span>, <span class="built_in">num</span>); <span class="comment">// 输出：20</span></span><br></pre></td></tr></table></figure></li><li><p>变量的第一次赋值，一般叫做初始化（init）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个变量，未初始化</span></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">num</span>;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="built_in">num</span> = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 不是初始化，是赋值</span></span><br><span class="line"><span class="built_in">num</span> = <span class="number">30</span>;</span><br><span class="line">printf(<span class="string">"%d"</span>, <span class="built_in">num</span>); <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure></li><li><p>变量声明的同时也可以进行初始化（开发中大部分操作）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量num，并对变量进行初始化，变量初始值为10</span></span><br><span class="line"><span class="built_in">int</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>变量在未初始化之前，他的值是不确定的</p></li><li><p>变量在使用之前必须先进行初始化</p></li><li><p>可以同时声明多个同类型的变量</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">year</span>, <span class="built_in">month</span>, <span class="built_in">day</span> = <span class="number">30</span>;</span><br></pre></td></tr></table></figure></li><li><p>可以将一个变量的值赋给另一个变量</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">num1 = num2;</span><br><span class="line"><span class="keyword">printf</span>(<span class="string">"%d--%d"</span>, num1, num2); <span class="regexp">//</span> 输出：<span class="number">20</span>--<span class="number">20</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3-变量的作用域"><a href="#5-3-变量的作用域" class="headerlink" title="5.3. 变量的作用域"></a>5.3. 变量的作用域</h3><p>变量的作用域，就是指变量的作用范围，有效使用范围</p><ul><li>从声明变量的那条语句开始，直到变量所在的大括号结束</li><li>在同一个作用域内，不允许有同名的变量</li></ul><h2 id="六、字符串"><a href="#六、字符串" class="headerlink" title="六、字符串"></a>六、字符串</h2><p>字符串由若干个字符组成的一串数据。</p><ul><li><p>字符串用双引号包裹</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"Hello World"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>如果字符串中出现了变量名，是不会去访问变量的，使用字符串时，会保留原来的字符内容</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">day</span> = <span class="number">30</span>;</span><br><span class="line">printf(<span class="string">"day = %d"</span>, <span class="built_in">day</span>); // 输出：<span class="built_in">day</span> = <span class="number">30</span></span><br></pre></td></tr></table></figure></li><li><p>字符串中的<code>%d</code>，是整数的占位符，到时会用对应的整数取代占位符，生成一个新的字符串</p></li></ul><h2 id="七、标识符"><a href="#七、标识符" class="headerlink" title="七、标识符"></a>七、标识符</h2><p>标识符，由开发者自定义的一些名称（比如变量名、函数名等）。</p><h3 id="7-1-标识符的命名规则如下："><a href="#7-1-标识符的命名规则如下：" class="headerlink" title="7.1. 标识符的命名规则如下："></a>7.1. 标识符的命名规则如下：</h3><ul><li>不限长度</li><li>可以使用数字、下划线、英文字符</li><li>可以使用\u及\U转义记号指定的Unicode字符（C99开始）</li><li>不能以数字开头</li><li>不能使用关键字（关键字，也叫做保留字，是编程语言内部已经定义好的一些有特殊含义的符号）</li></ul><h3 id="7-2-命名规范："><a href="#7-2-命名规范：" class="headerlink" title="7.2. 命名规范："></a>7.2. 命名规范：</h3><ul><li>小驼峰（第一个单词的首字母小写，其他单词的首字母大写），<code>myNameAndAge</code></li><li>大驼峰（所有单词的首字母大写），<code>MyNameAndAge</code></li><li>下划线连接，<code>my_name_and_age</code>，也有大写<code>MY_NAME_AND_AGE</code></li></ul><h2 id="八、字面量"><a href="#八、字面量" class="headerlink" title="八、字面量"></a>八、字面量</h2><p>顾名思义，就是一个固定值。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">height</span> = <span class="number">1.88</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="keyword">word</span> = <span class="string">"a"</span>;</span><br></pre></td></tr></table></figure><p>上面的代码中，等号右边的固定值都叫做字面量。</p><h2 id="九、进制"><a href="#九、进制" class="headerlink" title="九、进制"></a>九、进制</h2><p>什么是进制？进制是一种数字的表示形式；是一种带进位的计数方法。</p><p>计算机领域常见的进制有：十进制、二进制、八进制、十六进制。</p><h3 id="9-1-十进制（逢十进一）"><a href="#9-1-十进制（逢十进一）" class="headerlink" title="9.1. 十进制（逢十进一）"></a>9.1. 十进制（逢十进一）</h3><p>由十个数字符号构成所有的数值：0、1、2、3、4、5、6、7、8、9</p><h3 id="9-2-八进制（逢八进一）"><a href="#9-2-八进制（逢八进一）" class="headerlink" title="9.2. 八进制（逢八进一）"></a>9.2. 八进制（逢八进一）</h3><p>由八个数字符号构成所有的数值：0、1、2、3、4、5、6、7</p><h3 id="9-3-二进制（逢二进一）"><a href="#9-3-二进制（逢二进一）" class="headerlink" title="9.3. 二进制（逢二进一）"></a>9.3. 二进制（逢二进一）</h3><p>由两个数字符号构成所有的数值：0、1</p><h3 id="9-4-十六进制（逢十六进一）"><a href="#9-4-十六进制（逢十六进一）" class="headerlink" title="9.4. 十六进制（逢十六进一）"></a>9.4. 十六进制（逢十六进一）</h3><p>由十六个数字及字母符号构成所有的数值：0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F。</p><ul><li>A、B、C、D、E、F分别表示十、十一、十二、十三、十四、十五</li><li>也可以用小写字母表示：a、b、c、c、e、f</li></ul><p>同一个数可以用不同的进制来表示：比如三十三</p><ul><li>十进制：33</li><li>二进制：100001</li><li>八进制：41</li><li>十六进制：21</li></ul><h3 id="9-5-基数"><a href="#9-5-基数" class="headerlink" title="9.5. 基数"></a>9.5. 基数</h3><p>进制中有个叫“基数”（或者底数）的概念</p><ul><li>基数是指可以使用的数字符号的数目</li><li>十进制的基数是十、二进制的基数是二、八进制的基数是八、十六进制的基数是十六</li></ul><h3 id="9-6-进制转换（任意R进制-gt-十进制）"><a href="#9-6-进制转换（任意R进制-gt-十进制）" class="headerlink" title="9.6. 进制转换（任意R进制 -&gt; 十进制）"></a>9.6. 进制转换（任意R进制 -&gt; 十进制）</h3><p>一个R进制表示的数转为十进制：$ k_3 k_2 k_1 k_0.s_1 s_2 s_3 $</p><ul><li><p>公式：$$ (k_3 * R^3) + (k_2 * R^2) + (k_1 * R^1) + (k_0 * R^0) + (s_1 * R^{-1}) + (s_2 * R^{-2}) + (s_3 * R^{-3})$$</p></li><li><p>二进制 -&gt; 十进制</p><ul><li>$$(1101.011)_2 = (1 * 2^3) + (1 * 2^2) + (0 * 2^1) + (1 * 2^0) + (0 * 2^{-1}) + (1 * 2^{-2}) + (1 * 2^{-3}) = 13.375$$</li></ul></li><li><p>八进制 -&gt; 十进制</p><ul><li>$$(537.34)_8 = (5 * 8^2) + (3 * 8^1) + (7 * 8^0) + (3 * 8^{-1}) + (4 * 8^{-2}) = 351.4375$$</li></ul></li><li><p>十六进制 -&gt; 十进制</p><ul><li>$$(4DA.CB)_16 = (4 * 16^2) + (13 * 16^1) + (10 * 16^0) + (12 * 16^{-1}) + (11 * 16^{-2}) \approx 1242.79$$</li></ul></li></ul><h3 id="9-7-十进制-gt-任意R进制"><a href="#9-7-十进制-gt-任意R进制" class="headerlink" title="9.7. 十进制 -&gt; 任意R进制"></a>9.7. 十进制 -&gt; 任意R进制</h3><p>十进制数转换成R进制数，须将整数部分和小数部分分别转换</p><ul><li><strong>整数转换（除R取余法）</strong><ul><li>用十进制数的整数部分除以R、取余数作为转换后的R进制数据的整数部分最低位数字；</li><li>再用所得的商除以R、取余数作为转换后的R进制数据的高一位数字；</li><li>重复上面第二次的操作，一直到商为0结束。</li></ul></li></ul><p>求115的二进制：$$115 = (1110011)_2$$<br><img src="http://blog.idbeny.com/jzmkq.png@normal" alt=""></p><ul><li><strong>小数转换（乘R取整法）</strong><ul><li>十进制数的小数部分乘以R、取乘积的整数部分作为转换后R进制数据的小数点后第一位数字；</li><li>再用所得的乘积的小数部分乘以R、然后取新乘积的整数部分作为转换后的R进制小数的低一位数字；</li><li>重复上面第二次的操作，一直到乘积的小数部分为0为止，或者一直到已得到要求的精度数位为止。</li></ul></li></ul><p>求0.625的二进制：$$0.625 \approx (0.101)_2$$<br><img src="http://blog.idbeny.com/j6khg.png@normal" alt=""></p><ul><li><strong>小数转换（整数退位法）</strong><ul><li>0.321换成二进制数，保留7位<br>$$0.321 * 2^7 = 41.088$$</li><li>取整数41 $$41 = (101001)_2$$</li><li>只有6位但要求保留7位，退位，在前面补0，所以是0.0101001</li></ul></li></ul><h3 id="9-8-二进制与十六进制之间的转换"><a href="#9-8-二进制与十六进制之间的转换" class="headerlink" title="9.8. 二进制与十六进制之间的转换"></a>9.8. 二进制与十六进制之间的转换</h3><p>4位二进制数恰好有16种组合状态，也就是说，1位十六进制数与4位二进制数是一一对应的<br><img src="http://blog.idbeny.com/abm5i.png@normal" alt=""></p><p>计算：</p><ul><li>$$(111010110.11)<em>2 = (0001 1101 0110.1100)_2 = (1D6.C)</em>{16}$$</li><li>$$(4AF8B.E)_{16} = (0100 1010 1111 1000 1011.1110)_2 = (1001010111110001011.111)_2$$</li></ul><h3 id="9-9-二进制与八进制之间的转换"><a href="#9-9-二进制与八进制之间的转换" class="headerlink" title="9.9. 二进制与八进制之间的转换"></a>9.9. 二进制与八进制之间的转换</h3><p>3位二进制数恰好有8种组合状态，也就是说，1位八进制数与3位二进制数是一一对应的<br><img src="http://blog.idbeny.com/sp86v.png@normal" alt=""></p><p>计算：</p><ul><li>$$(111010110.11)_2 = (011 010 110.110)_2 = (326.6)_8$$</li><li>$$(2476.4)_8 = (010 100 111 110.100)_2 = (10100111110.1)_2$$</li></ul><h3 id="9-10-代码中的进制书写形式"><a href="#9-10-代码中的进制书写形式" class="headerlink" title="9.10. 代码中的进制书写形式"></a>9.10. 代码中的进制书写形式</h3><p>C语言标准规定</p><ul><li>默认是十进制，比如89，表示【八十九】</li><li>以0开头的是八进制，比如024，表示【二十】</li><li>以0x或0X开头的是十六进制，比如0x2B，表示【四十三】</li></ul><p>C语言标准并不支持二进制的书写形式</p><ul><li>但是部分编译器支持，比如GCC规定以0b或0B开头的是二进制</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">i1</span> = <span class="number">20</span>; // 十进制</span><br><span class="line">int i2 = <span class="number">024</span>; // 八进制</span><br><span class="line">int i3 = <span class="number">0x14</span>; // 十六进制</span><br><span class="line">int i4 = <span class="number">0b10100</span>; // 二进制</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d %d"</span>, <span class="built_in">i1</span>, i2, i3, i4) // 输出：<span class="number">20</span> <span class="number">20</span> <span class="number">20</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="十、内存"><a href="#十、内存" class="headerlink" title="十、内存"></a>十、内存</h2><h3 id="10-1-存储单位"><a href="#10-1-存储单位" class="headerlink" title="10.1. 存储单位"></a>10.1. 存储单位</h3><p>字节（Byte，B）是一种基本存储单位（在计算机领域用来计量存储容量）。</p><p><strong>单位换算：</strong><br>1字 = 2B（字的英文是word，1字等于2字节）</p><ul><li>1KB = 1024B（千字节）</li><li>1MB = 1024KB（兆字节）</li><li>1GB = 1024MB（千兆字节）</li><li>1TB = 1024GB（太字节）</li><li>1PB = 1024TB（拍字节）</li><li>1EB = 1024PB， 1ZB = 1024EB， 1YB = 1024ZB，</li><li>1BB = 1024YB， 1NB = 1024BB， 1DB = 1024NB，</li></ul><h2 id="10-2-内存地址"><a href="#10-2-内存地址" class="headerlink" title="10.2. 内存地址"></a>10.2. 内存地址</h2><p>4GB的内存一共有多少字节？<br>4GB = 4<em>1024MB = 4</em>1024<em>1024KB = 4</em>1024<em>1024</em>1024B = 4294967296B = 2^32B</p><p>内存中的每一个字节都有自己的编号<br><img src="http://blog.idbeny.com/mdyns.png@normal" alt=""></p><ul><li>上面图示是4GB内存空间</li><li>如果把内存比作是酒店，<ul><li>那么字节就是酒店的房间，字节的编号就是房间号</li><li>相邻的2个房间，房号是连续的，那么相邻的2个字节，编号是连续的</li><li>房间是拿来住人的，存放物品的，那么字节是拿来存储数据的</li></ul></li><li>每一个字节的编号，也叫做字节的内存地址</li></ul><h3 id="10-3-变量的存储空间"><a href="#10-3-变量的存储空间" class="headerlink" title="10.3. 变量的存储空间"></a>10.3. 变量的存储空间</h3><p>变量是用来存储数据的，凡是数据，或多或少会占用一定的存储空间。</p><p>变量的数据是存储在硬盘还是内存中呢？</p><ul><li>内存。因为变量是用来存储程序运行过程中会变化的数据</li></ul><p>一个变量会占用多大的存储空间呢？（占用多少字节）</p><ul><li>取决于变量所存储数据的类型（也就是变量类型）</li><li>比如C语言标准规定，一个int类型的变量至少占用2个字节的内存空间</li><li>在Win64 API中，一个int类型的变量占用4个字节的内存空间</li></ul><p>在C语言中，怎么查看变量占用了多少内存空间呢？</p><h3 id="10-4-sizeof运算符"><a href="#10-4-sizeof运算符" class="headerlink" title="10.4. sizeof运算符"></a>10.4. sizeof运算符</h3><p>使用<code>sizeof</code>可以获得某一数据类型的大小（所占多少字节的内存空间）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="keyword">sizeof</span>(age)); <span class="comment">// 输出：4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="keyword">sizeof</span> age); <span class="comment">// 输出：4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 输出：4</span></span><br></pre></td></tr></table></figure><h3 id="10-5-变量的内存地址"><a href="#10-5-变量的内存地址" class="headerlink" title="10.5. 变量的内存地址"></a>10.5. 变量的内存地址</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;a); <span class="comment">// 输出：0x00bff578</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;b); <span class="comment">// 输出：0x00bff574</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/ksahr.png@normal" alt=""></p><ul><li>变量的内存地址：变量首字节（地址值最小的那个字节）的内存地址</li><li>越晚定义的变量，内存地址越小</li></ul><h2 id="十一、位（Bit）"><a href="#十一、位（Bit）" class="headerlink" title="十一、位（Bit）"></a>十一、位（Bit）</h2><ul><li>由于计算机只能识别0和1，所以每一个字节中的数据都是以二进制形式存储的</li><li>一个字节包含8个二进制位，位是计算机领域最小存储单位，每一个二进制存储一个0或1</li><li>1Byte = 8bit， 简写： 1B = 8b<br><img src="http://blog.idbeny.com/mp3rx.png@normal" alt=""></li></ul><h3 id="11-1-有符号数的二进制表示方法"><a href="#11-1-有符号数的二进制表示方法" class="headerlink" title="11.1. 有符号数的二进制表示方法"></a>11.1. 有符号数的二进制表示方法</h3><p><code>int</code>类型属于有符号整数类型</p><ul><li>可以表示正数、负数<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">-20</span>;</span><br></pre></td></tr></table></figure></li><li>有符号数的二进制有3种表示方法：源码、反码、补码</li><li>三种表示方法均有<strong>符号位</strong>和<strong>数值位</strong>两部分<ul><li>符号位：最高位作为符号位，用0表示“正”，用1表示“负”</li><li>数值位：三种表示方法各不相同</li></ul></li></ul><h3 id="11-2-原码"><a href="#11-2-原码" class="headerlink" title="11.2. 原码"></a>11.2. 原码</h3><ul><li>最高位：作为符号位，用0表示“正”，用1表示“负”</li><li>其余位：作为数值位，表示绝对值的大小（所以原码又称为带符号的绝对值）</li></ul><p><img src="http://blog.idbeny.com/zul45.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/48jne.png@normal" alt=""></p><h3 id="11-3-反码"><a href="#11-3-反码" class="headerlink" title="11.3. 反码"></a>11.3. 反码</h3><ul><li>正数的反码：和原码一样</li><li>负数的反码：原码保持符号位不变，数值位按位取反（0变1，1变0），得到反码</li></ul><p><img src="http://blog.idbeny.com/bxpok.png@normal" alt=""></p><h3 id="11-4-补码"><a href="#11-4-补码" class="headerlink" title="11.4. 补码"></a>11.4. 补码</h3><ul><li>正数的补码：和原码一样</li><li>负数的补码：反码的末位加1，得到补码</li></ul><p><img src="http://blog.idbeny.com/4rvt6.png@normal" alt=""></p><p>在计算机中，数值一律用补码来表示和存储。<br>比如，下面2个变量在内存中存储的二进制数值是（假设<code>int</code>类型的变量占用4字节）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">20</span>; </span><br><span class="line"><span class="built_in">int</span> b = <span class="number">-20</span>;</span><br></pre></td></tr></table></figure><ul><li>a: 0000 0000 0000 0000 0000 0000 0001 0100</li><li>b: 1111 1111 1111 1111 1111 1111 1110 1100</li></ul><h2 id="十二、大小端模式"><a href="#十二、大小端模式" class="headerlink" title="十二、大小端模式"></a>十二、大小端模式</h2><p>大小端模式：决定了多字节数据的字节存储顺序</p><ul><li><p>大端模式：高低低高</p><ul><li>高字节放在低地址，低字节放在高地址</li></ul></li><li><p>小端模式：高高低低</p><ul><li>高字节放在高地址，低字节放在低地址</li></ul></li></ul><p><img src="http://blog.idbeny.com/wr3jx.png@normal" alt=""></p><blockquote><p>不同CPU架构的模式不一样，比如x86架构师小端模式，有些CPU架构师大端模式，目前比较常见的是小端模式。</p></blockquote><h2 id="十三、char类型"><a href="#十三、char类型" class="headerlink" title="十三、char类型"></a>十三、char类型</h2><p><code>char</code>类型属于字符类型。</p><ul><li><p>字符用单引号</p></li><li><p>打印的占位符：<code>%c</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'k'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'9'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c"</span>, c1, c2); <span class="comment">// 输出：k 9</span></span><br></pre></td></tr></table></figure></li><li><p>一个<code>char</code>类型的变量占用1个字节的内存，所以它只能存储1个单字节字符</p></li><li><p>26个英文字母（a ~ z，A ~ Z），10个阿拉伯数字（0~9）都是单字节字符</p></li></ul><p>下面的代码有问题：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不能存储超过1个单字节字符</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'idbeny'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个中文字符至少占用2个字节</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'你'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串是双引号，字符是用单引号</span></span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">"i"</span>;</span><br></pre></td></tr></table></figure><h3 id="13-1-字符的存储细节"><a href="#13-1-字符的存储细节" class="headerlink" title="13.1. 字符的存储细节"></a>13.1. 字符的存储细节</h3><p>计算机中的数据都是以二进制形式存储的，字符数据也不例外。每一个字符都会被转化成对应的整数值进行存储。</p><p>在1967年，美国发布了ASCII码表，里面规定了128个单字节字符对应的整数值（ASCII码值）。</p><ul><li>数字0对应的码值是48</li><li>大写字母A对应的码值是65</li><li>小写字母a对应的码值是97</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">97</span>;</span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %p\n %p\n %p\n %p\n"</span>, &amp;i, &amp;c1, &amp;c2, &amp;c3); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 0x00b7EC19</span></span><br><span class="line"><span class="comment"> 0x00b7EC1A</span></span><br><span class="line"><span class="comment"> 0x00b7EC1B</span></span><br><span class="line"><span class="comment"> 0x00b7EC2C</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/27jp7.png@normal" alt=""></p><h2 id="十四、ASCII码表"><a href="#十四、ASCII码表" class="headerlink" title="十四、ASCII码表"></a>十四、ASCII码表</h2><p>ASCII被译为“美国信息交换标准码”，是一种标准的单字节字符编码方案。</p><p>共128个字符，码值范围：0~127（也就是0x00 ~ 0x7F）</p><ul><li><p>33个是控制字符或通信专用字符，码值范围：0~31，127</p><ul><li>控制字符：LF（换行）、DEL（删除）、BS（退格）等</li><li>通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等</li></ul></li><li><p>95个可显示字符，码值范围：32~126</p><ul><li>48 ~ 57：十个阿拉伯数字（0~9）</li><li>65 ~ 90：26个大写英文字母（A~Z）</li><li>97 ~ 122：26个小写英文字母（a~z）</li><li>其余为标点符号、运算字符等</li></ul></li></ul><p>没有必要记住所有字符码值，只需要记住常用的两个就行了：</p><ul><li>小写字母a的ASCII码值：97</li><li>小写字母的ASCII码值 = 大写字母ASCII码值 + 32</li><li>大写字母的ASCII码值 = 小写字母ASCII码值 - 32</li><li>阿拉伯数字0的ASCII码值：48</li></ul><p><strong>注意使用细节：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, c1, c2); <span class="comment">// 输出：97 65</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">97</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">65</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c\n"</span>, i1, i2); <span class="comment">// 输出：a A</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c3 + <span class="number">10</span>); <span class="comment">// 输出：75</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i3 = <span class="number">67</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, i3 + <span class="number">10</span>); <span class="comment">// 输出：M</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i4 = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> c4 = <span class="number">97</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i4, c4); <span class="comment">// 输出：97 97</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c\n"</span>, i4, c4); <span class="comment">// 输出：a a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完全可以将char类型当做整数类型来使用</span></span><br><span class="line"><span class="keyword">char</span> c5 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> c6 = c5 + <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> c7 = c5 + c6 + <span class="number">30</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, c7); <span class="comment">// 输出：70</span></span><br></pre></td></tr></table></figure><p><strong>大小写字母之间的转换</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'n'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = c1 - <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">'Q'</span>;</span><br><span class="line"><span class="keyword">char</span> c4 = c3 + <span class="number">32</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c"</span>, c2, c4); <span class="comment">// 输出：N q</span></span><br></pre></td></tr></table></figure><h3 id="14-1-数字整数、数字字符在内存中的区别"><a href="#14-1-数字整数、数字字符在内存中的区别" class="headerlink" title="14.1. 数字整数、数字字符在内存中的区别"></a>14.1. 数字整数、数字字符在内存中的区别</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'9'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, i, c); <span class="comment">// 输出：9 57</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/et3bn.png@normal" alt=""></p><ul><li>变量i在内存中利用4个字节存储数值9</li><li>变量c在内存中利用1个字节存储数值57</li></ul><blockquote><p>疑问：中文、日文、韩文等非英文字符是如何存储在计算机中的？<br>可以肯定的是，必然是以二进制的形式存储在计算机中的，只是每个字符对应的二进制数值取决于具体的编码方案（GBK、UTF-8、Unicode等），<br>GBK主要支持的是CJK汉字字符（C-中国、J-日本、K-朝鲜），而UTF-8支持几乎世界上所有的字符。</p></blockquote><h2 id="14-2-转义序列"><a href="#14-2-转义序列" class="headerlink" title="14.2. 转义序列"></a>14.2. 转义序列</h2><p>转义序列，一般也叫作转义字符，是一些有特殊含义的字符<br><img src="http://blog.idbeny.com/3hvo3.png@normal" alt=""></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"我叫'idbeny'，在\"1024星球\"等你"</span>); <span class="comment">// 输出：我叫'idbeny'，在"1024星球"等你</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'\''</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'"'</span>;</span><br><span class="line">printf(<span class="string">"\n%c\t%c\\"</span>, c1, c2); <span class="comment">// 输出：'    "\</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">'\063'</span>;</span><br><span class="line">printf(<span class="string">"%d %c"</span>, c3, c3); <span class="comment">// 输出：51 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "\0115"是"\011"和"5"的组合</span></span><br><span class="line"><span class="comment">// "\011"就是水平制表符"\t"</span></span><br><span class="line">printf(<span class="string">"\0115"</span>); <span class="comment">// 输出：5</span></span><br><span class="line"></span><br><span class="line">错误写法：</span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'\X4A'</span>; <span class="comment">// 不能是大写X</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'\0x4A'</span>; <span class="comment">// 不能是0x</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'\0X4A'</span>; <span class="comment">// 不能是0X</span></span><br></pre></td></tr></table></figure><h2 id="十五、scanf函数"><a href="#十五、scanf函数" class="headerlink" title="十五、scanf函数"></a>十五、scanf函数</h2><ul><li><p><code>printf</code>函数的功能是：输出（output），将数据显示在屏幕上</p></li><li><p><code>scanf</code>函数的功能是：输入（input），读取数据（比如读取通过键盘输入的数据）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;age); <span class="comment">// 终端输入：20</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"age: %d"</span>, age); <span class="comment">// 输出：age: 20</span></span><br></pre></td></tr></table></figure></li><li><p>scanf函数开始执行后，会等待用户输入</p><ul><li>程序会卡在scanf函数，不会执行scanf函数后面的代码</li><li>当用户敲Enter键（回车键）时，表示输入完毕</li><li>程序才会开始执行scanf函数后面的代码</li></ul></li></ul><h3 id="15-1-匹配的细节"><a href="#15-1-匹配的细节" class="headerlink" title="15.1. 匹配的细节"></a>15.1. 匹配的细节</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"你输入的整数是: %d"</span>, i);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：30idbeny</span></span><br><span class="line"><span class="comment">  输出：你输入的整数是: 30</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：22.88</span></span><br><span class="line"><span class="comment">  输出：你输入的整数是: 22</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：a</span></span><br><span class="line"><span class="comment">  输出：你输入的整数是: 10 // 原因：变量i默认值是10</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：你好1024</span></span><br><span class="line"><span class="comment">  输出：你输入的整数是: 10</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"你输入的字母是：%c\n"</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"对应ASCII码值是：%d"</span>, c);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：i</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">      你输入的字母是：i</span></span><br><span class="line"><span class="comment">      对应ASCII码值是：105</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  输入：hello</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">      你输入的字母是：h</span></span><br><span class="line"><span class="comment">      对应ASCII码值是：104</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  输入：97</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">      你输入的字母是：9</span></span><br><span class="line"><span class="comment">      对应ASCII码值是：57</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>从左到右开始字符匹配，当中途匹配失败时，将结束匹配</li><li>当尝试把输入的数字赋值给字符变量时，scanf把输入的数字当成是数字字符来处理，而不是把输入的数字当成字符的ASCII码值来处理</li></ul><h3 id="15-2-scanf函数的空白字符"><a href="#15-2-scanf函数的空白字符" class="headerlink" title="15.2. scanf函数的空白字符"></a>15.2. scanf函数的空白字符</h3><p>空白字符包括：空格（’ ‘）、Tab（’\t’）、Enter（’\n’）</p><ul><li><p>如果在输入整数的开头，有一段任意长（长度≥0）连续空白字符，是不需要与格式化字符串中的字符进行匹配的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"age is %d"</span>, age);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：        30</span></span><br><span class="line"><span class="comment">  输出：age is 30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>在格式化字符串中，任意长（长度≥0）连续空白字符，能匹配输入的任意长（长度≥0）连续空白字符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"  %d"</span>, &amp;age); <span class="comment">// %d左边有空格</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"age is %d"</span>, age);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：        30</span></span><br><span class="line"><span class="comment">  输出：age is 30</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d   "</span>, &amp;age); <span class="comment">// %d右边有空格</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"age is %d"</span>, age);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：        30</span></span><br><span class="line"><span class="comment">  输出：age is 30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 变量 </tag>
            
            <tag> 进制 </tag>
            
            <tag> 内存 </tag>
            
            <tag> 位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】Git的基本使用</title>
      <link href="/2016/01/19/git-basic/"/>
      <url>/2016/01/19/git-basic/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Git？"><a href="#什么是Git？" class="headerlink" title="什么是Git？"></a>什么是Git？</h3><p>版本控制系统（VCS：Version Control System）</p><a id="more"></a><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul><li>分布式版本控制</li><li>多个开发人员协调工作</li><li>有效监听谁做的修改</li><li>本地及远程操作</li></ul><h3 id="下载Git："><a href="#下载Git：" class="headerlink" title="下载Git："></a>下载Git：</h3><ul><li>Mac：<a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">https://git-scm.com/download/mac</a></li><li>Windows：<a href="https://git-scm.com/downloadwin" target="_blank" rel="noopener">https://git-scm.com/downloadwin</a></li></ul><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><ul><li><code>git init</code> 初始化本地git仓库</li><li><code>git add &lt;file&gt;</code> 添加文件</li><li><code>git status</code> 查看状态</li><li><code>git commit</code> 提交</li><li><code>git push</code> 推送到仓库</li><li><code>git pull</code> 从远程仓库拉取数据</li><li><code>git clone</code> 从远程仓库拷贝数据</li></ul><h3 id="初始化-amp-提交代码"><a href="#初始化-amp-提交代码" class="headerlink" title="初始化&amp;提交代码"></a>初始化&amp;提交代码</h3><ol><li><p>创建好项目后，初始化仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure></li><li><p>全局配置用户名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">'用户名'</span></span><br></pre></td></tr></table></figure></li><li><p>全局配置邮箱</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">'邮箱地址'</span></span><br></pre></td></tr></table></figure></li><li><p>添加代码到缓存区</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> 文件名</span></span><br></pre></td></tr></table></figure><p>例：git add index.html</p></li></ol><ul><li>添加某一类文件： git add *.html</li><li>添加所有文件： git add .</li><li>如果文件添加缓存区后又修改了内容，再次git add 文件名即可</li></ul><ol start="5"><li>移除已缓存文件<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">rm</span> --cached &lt;<span class="keyword">file</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git rm –cached index.html</li></ul><ol start="6"><li>查看工作区和缓冲区文件状态<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git status</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>添加/修改/移除等内容后，一般要配合git status使用，以便及时看到每个文件的状态</li></ul><ol start="7"><li>放弃工作区文件修改（工作区和缓存区有同一个文件时）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">restore</span> &lt;<span class="keyword">file</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git restore index.html</li></ul><ol start="8"><li>提交代码到本地仓库<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git commit</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>命令输完后，在新的界面填写本次提交描述，然后保存退出即可</li><li>完整命令： git commit -m ‘提交描述’</li></ul><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><ol><li><p>创建忽略文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-class">.gitignore</span></span><br></pre></td></tr></table></figure></li><li><p>编辑.gitignore</p></li></ol><ul><li>忽略具体文件：直接把文件全名写上即可（注意路径和扩展名），例：log.txt</li><li>忽略具体文件夹：填写文件夹路径，例：/dir</li></ul><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ol><li>新建分支<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>分支名</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git branch login</li></ul><ol start="2"><li>切换分支<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout 分支名</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git checkout login</li></ul><ol start="3"><li>合并分支<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">merge</span> 待合并的分支名</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：把login分支合并到master上，先把分支切换到master上，然后开始合并git merge login</li></ul><h3 id="推送远端仓库"><a href="#推送远端仓库" class="headerlink" title="推送远端仓库"></a>推送远端仓库</h3><ol><li>添加远程仓库<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin 远端仓库地址</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>例：<a href="mailto:git@github.com">git@github.com</a>:idbeny/homework.git</li></ul><ol start="2"><li><p>连接远程仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git remote</span></span><br></pre></td></tr></table></figure></li><li><p>推送到远程仓库</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure></li></ol><ul><li>连上远程仓库后，推送只需要git push</li></ul><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">仓库地址</span></span><br></pre></td></tr></table></figure><ul><li>例：git clone <a href="mailto:git@github.com">git@github.com</a>:idbeny/homework.git</li></ul><h3 id="Git和Github区别"><a href="#Git和Github区别" class="headerlink" title="Git和Github区别"></a>Git和Github区别</h3><ul><li>Git是代码管理工具</li><li>Github是基于Git实现的代码托管平台</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】imageNamed和imageWithContentsOfFile的区别</title>
      <link href="/2015/07/23/ios-image-loadstyle/"/>
      <url>/2015/07/23/ios-image-loadstyle/</url>
      
        <content type="html"><![CDATA[<p>本地图片的加载方式，我们都很熟悉，而且我们经常用<code>imageNamed</code>，偶尔看到<code>imageWithContentsOfFile</code>，那么这两者在使用方式上有什么区别呢？</p><a id="more"></a><h3 id="imageNamed"><a href="#imageNamed" class="headerlink" title="imageNamed:"></a>imageNamed:</h3><p><code>[UIImage imageNamed:]</code>加载时，图片使用完毕后会缓存到内存中，内存会累加，而且无法释放内存，但加载速度快，不会重复加载相同的图片。这是因为该方法使用了缓存机制，每次使用该图片时，会优先从缓存读取，CPU开销基本忽略。</p><h3 id="imageWithContentsOfFile"><a href="#imageWithContentsOfFile" class="headerlink" title="imageWithContentsOfFile:"></a>imageWithContentsOfFile:</h3><p><code>[UIImage imageWithContentsOfFile:]</code>，图片直接从bundle根目录读取并加载到内存中，当不需要使用的时候，就会随对象一起从内存中释放掉，缺点就是加载速度慢（其实相对于正常开发来讲可以忽略），而且相同的图片会被重复加载到内存当中，CPU开销不断增大。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>其实这两者没有本质的使用界限，但如果图片是在<code>Assets.xcassets</code>中，则只能使用<code>imageNamed:</code>。而<code>imageWithContentsOfFile:</code>只能从指定的本地路径读取。</p><ul><li>如果有些图片时需要重复加载的，且图片较小，建议使用<code>imageNamed:</code>，因为速度快，用户体验好；</li><li>如果图片只用到一两次，且图片较大，建议使用<code>imageWithContentsOfFile:</code>，因为不会占用内存。</li></ul><h4 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h4><h5 id="imageNamed-1"><a href="#imageNamed-1" class="headerlink" title="imageNamed"></a>imageNamed</h5><p><img src="http://blog.idbeny.com/ug1ll.png@normal" alt="模拟器-imageNamed"></p><h5 id="imageWithContentsOfFile-1"><a href="#imageWithContentsOfFile-1" class="headerlink" title="imageWithContentsOfFile"></a>imageWithContentsOfFile</h5><p><img src="http://blog.idbeny.com/4esiu.png@normal" alt="模拟器-imageWithContentsOfFile"></p><h4 id="真机"><a href="#真机" class="headerlink" title="真机"></a>真机</h4><h5 id="imageNamed-2"><a href="#imageNamed-2" class="headerlink" title="imageNamed"></a>imageNamed</h5><p><img src="http://blog.idbeny.com/eawy5.png@normal" alt="真机-imageNamed"></p><h5 id="imageWithContentsOfFile-2"><a href="#imageWithContentsOfFile-2" class="headerlink" title="imageWithContentsOfFile"></a>imageWithContentsOfFile</h5><p><img src="http://blog.idbeny.com/g28dh.png@normal" alt="真机-imageWithContentsOfFile"></p><h3 id="推荐使用"><a href="#推荐使用" class="headerlink" title="推荐使用"></a>推荐使用</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="name">UIImage</span> *)imageWithContentsOfFile:(NSString *)path</span><br></pre></td></tr></table></figure><p>在开发中我们可以通过添加<code>UIImage</code>分类的形式重写<code>imageNamed:</code>的方法。但不建议这样做，因为这样会把所有的图片加载方式都统一处理了。在某些地方还是需要使用<code>imageNamed:</code>加载图片的，此时我们可以扩展一个加载bundle根目录图片的方法。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span>(<span class="title">YBImage</span>) </span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">UIImage</span>*)imageFromMainBundleFile:(<span class="built_in">NSString</span>*)aFileName; &#123;</span><br><span class="line">    <span class="built_in">NSString</span>* bundlePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:aFileName ofType:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageWithContentsOfFile:bundlePath];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIImage </tag>
            
            <tag> imageWithContentsOfFile </tag>
            
            <tag> imageNamed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】instancetype和id的区别</title>
      <link href="/2015/07/19/ios-instancetype-id/"/>
      <url>/2015/07/19/ios-instancetype-id/</url>
      
        <content type="html"><![CDATA[<p>在很早之前编译器没有提供<code>instancetype</code>关键字，我们在写函数/方法返回值时都用的是<code>id</code>。clang编译器有了<code>instancetype</code>之后，让我们的代码能够更加严谨且高效。</p><a id="more"></a><p><code>instancetype</code>和<code>id</code>的最大区别就是编译时期的类型检测，而且<code>instancetype</code>不能作为参数类型传递。</p><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><p>例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明类</span></span><br><span class="line"><span class="variable">@interface</span> <span class="attribute">YBPerson </span>: NSObject</span><br><span class="line"></span><br><span class="line"><span class="variable">@property</span> (nonatomic,   copy) NSString *name; <span class="comment">// 姓名</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) NSInteger  age; <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化方法</span></span><br><span class="line"><span class="comment"> * @param name 姓名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">-</span> (id)<span class="selector-tag">initWithName</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">name</span>;</span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure><p><strong>方式一（使用id）：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YBPerson</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过姓名初始化</span></span><br><span class="line">- (<span class="keyword">id</span>)initWithName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><ul><li><p>使用NSArray类型指针接收</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">NSArray</span> *person = [[<span class="symbol">YBPerson</span> alloc] initWithName:@<span class="string">"idbeny"</span>];</span><br><span class="line"><span class="symbol">NSLog</span>(@<span class="string">"%ld"</span>, [person count]);</span><br></pre></td></tr></table></figure></li><li><p>编译，没问题</p></li><li><p>运行，崩溃（因为YBPerson的实例没有找到count这个方法）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[YBPerson count]: unrecognized selector sent <span class="keyword">to</span><span class="built_in"> instance </span>0x60000382ca40</span><br></pre></td></tr></table></figure></li></ul><p>方式一（改造）：</p><ul><li><p>使用YBPerson类型指针接收</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">NSArray</span> *person = [[<span class="symbol">YBPerson</span> alloc] initWithName:@<span class="string">"idbeny"</span>];</span><br><span class="line"><span class="symbol">NSLog</span>(@<span class="string">"%ld"</span>, [person count]);</span><br></pre></td></tr></table></figure></li><li><p>编译器警告</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Incompatible pointer types initializing <span class="string">'NSArray *'</span> with an expression of<span class="built_in"> type </span><span class="string">'YBPerson *'</span></span><br></pre></td></tr></table></figure></li><li><p>运行，崩溃（因为YBPerson的实例没有找到count这个方法）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[YBPerson count]: unrecognized selector sent <span class="keyword">to</span><span class="built_in"> instance </span>0x60000382ca40</span><br></pre></td></tr></table></figure></li></ul><p><strong>方式二（使用instancetype）：</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YBPerson</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过姓名初始化</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><ul><li><p>使用NSArray指针接收：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">NSArray</span> *person = [[<span class="symbol">YBPerson</span> alloc] initWithName:@<span class="string">"idbeny"</span>];</span><br><span class="line"><span class="symbol">NSLog</span>(@<span class="string">"%ld"</span>, [person count]);</span><br></pre></td></tr></table></figure></li><li><p>编译器警告</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Incompatible pointer types initializing <span class="string">'NSArray *'</span> with an expression of<span class="built_in"> type </span><span class="string">'YBPerson *'</span></span><br></pre></td></tr></table></figure></li><li><p>运行，崩溃（因为YBPerson的实例没有找到count这个方法）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[YBPerson count]: unrecognized selector sent <span class="keyword">to</span><span class="built_in"> instance </span>0x60000382ca40</span><br></pre></td></tr></table></figure></li></ul><p>通过上面的案例说明，使用<code>id</code>和<code>instancetype</code>都可以作为返回值使用，<code>instancetype</code>可以在编写代码时就能检测类型匹配问题，而<code>id</code>是不可以的。</p><h3 id="参数类型传递"><a href="#参数类型传递" class="headerlink" title="参数类型传递"></a>参数类型传递</h3><p><strong><code>instancetype</code>作为参数类型</strong></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (instance<span class="keyword">type</span>)initWithName:(instancetype)name;</span><br></pre></td></tr></table></figure><p>编译报错</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Expected a type</span><br><span class="line">Type name requires a specifier <span class="keyword">or</span> qualifier</span><br></pre></td></tr></table></figure><p><strong><code>id</code>作为参数类型</strong></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (instance<span class="keyword">type</span>)initWithName:(id)name;</span><br></pre></td></tr></table></figure><p>编译，运行，都没有问题。所以，<code>id</code>可以作为参数的类型传递，<code>instancetype</code>不可以。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> instancetype </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
