<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Blog】Mac上搭建基于GitHub的Hexo博客</title>
      <link href="/2020/06/01/hexo-blog/"/>
      <url>/2020/06/01/hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>先前书写CSDN、简书等平台，到后来购买云虚拟主机、ECS、也都尝试搭建自己的一套Blog系统，Wordpress、自己打包上传build包等形式都已尝试过。越往后越觉得累，也觉得没有这个必要了。主要原因还是自己的服务器需要各种安全防御，否则各种病毒和蛀虫就开始肆虐了，有段时间因为工作忙，等准备写文章的时候发现，服务器已经宕机了。更有意思的是，有一次因为自己忘记续费，也没有快照，然后……你懂得……，所以后来就想着用Github托管可能会好一点。</p><a id="more"></a><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网</a>对环境配置已经描述的很清楚了，我就不搬砖了</p><h3 id="初见Hexo"><a href="#初见Hexo" class="headerlink" title="初见Hexo"></a>初见Hexo</h3><h4 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><p>有的文章命令是<code>$ sudo npm install -g hexo</code>，都可以安装，没有影响。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>终端cd到一个你选定的目录，执行初始化命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init blog</span></span><br></pre></td></tr></table></figure><p><code>blog</code>是最终建立的文件夹名称。<code>cd</code>到<code>blog</code>文件夹下，安装对应的<code>node</code>包：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p>开启hexo服务器</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/assets/ifmjk.png@normal" alt=""><br><em>补充：<code>hexo s</code>是<code>hexo server</code>的一种简写</em></p><p>打开<code>http://localhost:4000</code>在本地预览界面<br><img src="http://blog.idbeny.com/assets/57fka.png@normal" alt=""></p><h3 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h3><ol><li>使用<code>vim</code>或者直接用编辑器打开blog根目录下的<code>_config.yml</code>文件，修改如下配置（在文件最下方）<br><img src="http://blog.idbeny.com/assets/qg97x.png@normal" alt=""></li></ol><p><em>注意：repository是在github上已经初始化的项目地址</em></p><ol start="2"><li>在blog文件夹下生成静态页面<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span>或者：hexo g</span><br></pre></td></tr></table></figure></li></ol><p><em>补充：<code>hexo g</code>是<code>hexo generate</code>的一种简写</em></p><ol start="3"><li>配置/部署<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo deploy</span></span><br></pre></td></tr></table></figure></li></ol><p><em>补充：<code>hexo d</code>是<code>hexo deploy</code>的一种简写</em></p><blockquote><p>注意：若执行命令报错：无法连接git或找不到git，则执行如下命令来安装<code>hexo-deployer-git</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save        </span></span><br></pre></td></tr></table></figure><p>再次执行<code>hexo d</code>即可</p></blockquote><ol start="4"><li>鉴权github<br><img src="http://blog.idbeny.com/assets/f0m3c.png@normal" alt=""></li></ol><h3 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h3><ol><li>在blog文件夹下，执行新建文章命令<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"helloworld"</span></span><br></pre></td></tr></table></figure></li></ol><p><em>文件类型是<code>markdown</code>，文件地址在<code>/blog/source/_posts</code>目录下</em></p><ol start="2"><li><p>发布文章</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure><p>以上基本上就完成了博客的搭建和生产内容的基本设施。</p></li></ol><p>补充：新建-部署文章三步走</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> hexo clean<span class="comment">//清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line"><span class="symbol">$</span> hexo g<span class="comment">//生成缓存和静态文件</span></span><br><span class="line"><span class="symbol">$</span> hexo d<span class="comment">//重新部署到服务器</span></span><br></pre></td></tr></table></figure><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>要想页面漂亮并规范一点，可以配置个主题。我们一般在Hexo官网中搜索喜欢的主题，我们以<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT主题</a>为例。<br><img src="http://blog.idbeny.com/assets/mxyfe.png@normal" alt=""></p><p>把主题下载到<code>blog/themes/next</code>目录下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/iissnan/</span>hexo-theme-<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>修改<code>_config.yml</code>里的<code>theme</code>为<code>next</code><br><img src="http://blog.idbeny.com/assets/si4gm.png@normal" alt=""></p><p>主题的名称、描述等属性修改在<code>blog/themes/next/_config.yml</code>文件中，具体可参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">文档</a>。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>如果觉得github的二级域名使用不方便，我们可以通过绑定自己的一级域名来直接访问（实际上就是做了一次CDN跳转）</p><ul><li><p>在<code>/blog/themes/next/source</code>目录下新建文件名为<code>CNAME</code>的文件（注意没有后缀名），直接将自己的域名如：idbeny.com写入。</p></li><li><p>和发布文章一样，三步走即可（clean - g - d）</p></li><li><p>添加解析</p></li></ul><table><thead><tr><th align="center">记录类型</th><th align="center">主机记录</th><th align="center">解析线路</th><th align="center">记录值</th><th align="center">TTL</th></tr></thead><tbody><tr><td align="center">CNAME</td><td align="center">@</td><td align="center">默认</td><td align="center">idbeny.github.io.</td><td align="center">10分钟</td></tr></tbody></table><p><em>注意：记录值<code>idbeny.github.io.</code>结尾有一个点<code>.</code></em></p><h3 id="快速访问"><a href="#快速访问" class="headerlink" title="快速访问"></a>快速访问</h3><p>Github是国外网站，所以我们在天朝访问的时候总是有点慢，甚至有时候打不开，这时候我们就可以把文章同时部署到国内的托管平台（<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a> | <a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>等）。同时也能够保证突然某一天其中一个平台的大变动（当然，不管是哪一种，一定要在本地备份，一定要在本地备份，血的教训……）。</p><ol><li><p>首先到码云上注册并新建一个项目（步骤同<code>Github</code>），项目名称和用户个性后缀相同（方便二级域名访问博客），然后配置<code>Gitee Pages</code>服务；<br><img src="http://blog.idbeny.com/assets/jf23y.png@normal" alt=""></p></li><li><p>直接点击启动即可（需要绑定手机号，如果没有绑定，不能启动）<br><img src="http://blog.idbeny.com/assets/b0yeu.png@normal" alt=""></p></li><li><p>启动完成后，会提示已开启服务<br><img src="http://blog.idbeny.com/assets/fij4q.png@normal" alt=""></p></li></ol><ol start="4"><li><p>打开本地<code>blog</code>目录下的<code>_config.yml</code>文件，修改如下（之后的步骤和Github一致）：<br><img src="http://blog.idbeny.com/assets/nydar.png@normal" alt=""></p></li><li><p>部署三步走（<code>clean - d - g</code>）</p></li><li><p>域名解析</p></li></ol><table><thead><tr><th align="center">记录类型</th><th align="center">主机记录</th><th align="center">解析线路</th><th align="center">记录值</th><th align="center">TTL</th></tr></thead><tbody><tr><td align="center">CNAME</td><td align="center">@</td><td align="center">海外</td><td align="center">idbeny.github.io.</td><td align="center">10分钟</td></tr><tr><td align="center">CNAME</td><td align="center">@</td><td align="center">默认</td><td align="center">idbeny.gitee.io.</td><td align="center">10分钟</td></tr></tbody></table><p>如果是<code>Coding</code>平台，还需要到<code>blog/source</code>目录下新建<code>Staticfile</code>文件（名字必须是<code>Staticfile</code>），其他步骤都基本一致。</p><p>至此，<code>Blog</code>系统搭建完毕。</p><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官网</a> | <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网</a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Flutter】图片组件注意事项</title>
      <link href="/2020/03/23/flutter-widget-image-note/"/>
      <url>/2020/03/23/flutter-widget-image-note/</url>
      
        <content type="html"><![CDATA[<h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><ul><li>在<code>lib</code>同级文件夹新建<code>assets</code>资源文件夹</li><li><code>assets</code>文件夹通常包含<code>fonts</code>和<code>images</code>两个文件夹</li><li>如果有@2x或@3x图片怎么办？<ul><li>新建两个文件夹，文件名称分别为2.0x和3.0x，把对应尺寸的图片放到文件夹中，flutter会自动识别并找到对应图片的</li></ul></li><li>必须在<code>pubspec.yaml</code>配置文件中配置<code>assets</code>，如下：<a id="more"></a><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">assets:</span></span><br><span class="line">    - assets<span class="meta-keyword">/images/</span></span><br></pre></td></tr></table></figure></li><li>新建工程时，系统默认把assets相关配置注释掉，我们只需要把注释打开然后修改为我们需要的路径即可；</li><li>注意点：assets前面一定不要有空格，否则打包会报错；</li><li>最后点击<code>Android Studio</code>上面的<code>Packages get</code><br><img src="http://blog.idbeny.com/7gk7s.png@normal" alt=""></li></ul><p>使用图片Widget有时候让传ImageProvider类型，有时候让传一个Widget，怎么区分呢？</p><h4 id="ImageProvider"><a href="#ImageProvider" class="headerlink" title="ImageProvider"></a>ImageProvider</h4><p>NetworkImage<br>AssetImage<br>FileImage<br>…</p><h4 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h4><p>Image.network<br>Image.asset<br>…</p><ul><li>可以看出Image.*基本上都是继承自Widge</li><li>*Image基本上是ImageProvider类型</li></ul><p><strong>图片占位图（FadeInImage）</strong><br><img src="http://blog.idbeny.com/v4w8s.gif@normal" alt=""></p><ul><li>当网络图片加载完成前优先显示一张默认图片；</li><li>使用<code>FadeInImage</code>进行图片显示的时候会有一个动画过程，可以通过属性设置动画时间；</li><li><code>fadeOutDuration</code>动画时间默认300毫秒，<code>fadeInDuration</code>动画时间默认700毫秒；<br><img src="http://blog.idbeny.com/hlaf0.png@normal" alt=""></li></ul><h4 id="图片缓存"><a href="#图片缓存" class="headerlink" title="图片缓存"></a>图片缓存</h4><ul><li>参考：<a href="https://api.flutter.dev/flutter/widgets/image-class.html" target="_blank" rel="noopener">https://api.flutter.dev/flutter/widgets/image-class.html</a></li><li>flutter默认会对图片进行缓存的；</li><li>注意：图片默认最多缓存1000张，总大小100MB（可以调整）</li></ul><h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><ul><li>Icon继承自<code>StatelessWidget</code>，所以Icon是一个Widget；</li><li>Icon是字体图标（是一个矢量图，前端开发经常会用到），可以设置颜色和大小，用法和字体几乎无差别；</li><li>在创建的时候，开发工具可以帮助我们显示对应的图标样式；<br><img src="http://blog.idbeny.com/g76ew.png@normal" alt=""></li></ul><p>既然Icon是一个字体图标，那么可以用<code>Text组件</code>显示么？当然可以。</p><ul><li><p>Icons.people是一个16进制的IconData<br><img src="http://blog.idbeny.com/xynvl.png@normal" alt=""></p></li><li><p>Text组件本质也是让传入一个data，我们把<code>Icons.people</code>的十六进制转换成Unicode编码试下（0xe7fb =&gt; \ue7fb）<br><img src="http://blog.idbeny.com/kci5l.png@normal" alt=""></p></li><li><p>表明：在一个字体库、同一个编码下IconData就能使用Text显示</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Dart】Dart基本语法（二）</title>
      <link href="/2020/03/06/dart-syntax-02/"/>
      <url>/2020/03/06/dart-syntax-02/</url>
      
        <content type="html"><![CDATA[<h3 id="一、运算符"><a href="#一、运算符" class="headerlink" title="一、运算符"></a>一、运算符</h3><p>Dart中的基本运算符和其他语言无差异，但有几个运算符是其他平台没有的</p><a id="more"></a><h4 id="1-1-除法、整除、取模运算"><a href="#1-1-除法、整除、取模运算" class="headerlink" title="1.1. 除法、整除、取模运算"></a>1.1. 除法、整除、取模运算</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span> / <span class="number">3</span>); <span class="comment">// 除法操作, 结果2.3333..</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span> ~/ <span class="number">3</span>); <span class="comment">// 整除操作, 结果2;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">num</span> % <span class="number">3</span>); <span class="comment">// 取模操作, 结果1;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-赋值运算"><a href="#1-2-赋值运算" class="headerlink" title="1.2. ??=赋值运算"></a>1.2. ??=赋值运算</h4><ul><li>当变量有值时，使用自己原来的值。</li><li>当变量为null时，使用后面的内容进行赋值。<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'idbeny'</span>;</span><br><span class="line">  name ??= <span class="string">'1024星球'</span>; </span><br><span class="line">  <span class="built_in">print</span>(name); <span class="comment">// 当name初始化有值时（idbeny），结果为初始化值，当初始化为null时，取后面的值（1024星球）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-3-条件运算符"><a href="#1-3-条件运算符" class="headerlink" title="1.3. 条件运算符"></a>1.3. 条件运算符</h4><ul><li>如果expr1非null，直接使用expr1的结果。</li><li>如果expr1是null，则返回expr2的结果;<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">name</span> = null;</span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">name</span> ?? <span class="string">'1024星球'</span>;</span><br><span class="line">print(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure></li></ul><p>赋值运算符和条件运算符很容易混淆；</p><ul><li><code>??=</code>类似于三目运算符；</li><li><code>??</code>就是一个条件判断</li></ul><h4 id="1-4-级联语法（-）"><a href="#1-4-级联语法（-）" class="headerlink" title="1.4. 级联语法（..）"></a>1.4. 级联语法（..）</h4><p>场景：不需要新创建对象，直接连续操作对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">$name</span> is running"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="comment">// 常规操作</span></span><br><span class="line">  <span class="keyword">final</span> p1 = Person();</span><br><span class="line">  p1.name = <span class="string">'idbeny'</span>;</span><br><span class="line">  p1.run();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 级联语法</span></span><br><span class="line">  <span class="keyword">final</span> p2 = Person()</span><br><span class="line">              ..name = <span class="string">"idbeny"</span></span><br><span class="line">              ..run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、逻辑判断"><a href="#二、逻辑判断" class="headerlink" title="二、逻辑判断"></a>二、逻辑判断</h3><p>和其他语言用法一样，但是<code>if else</code>语句和其他平台不一样：<strong>不存在非空即真或者非0即真，必须有明确的bool类型</strong></p><h3 id="三、类和对象"><a href="#三、类和对象" class="headerlink" title="三、类和对象"></a>三、类和对象</h3><h4 id="3-1-定义类和对象"><a href="#3-1-定义类和对象" class="headerlink" title="3.1. 定义类和对象"></a>3.1. 定义类和对象</h4><p>格式：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">  类型 成员名;</span><br><span class="line">  返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    方法体</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建对象</span></span><br><span class="line"><span class="comment">// var p = new Person();</span></span><br><span class="line"><span class="keyword">var</span> p = Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.属性赋值</span></span><br><span class="line">p.name = <span class="string">'idbeny'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.调用方法</span></span><br><span class="line">p.run();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'<span class="subst">$name</span>在奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>在方法中使用成员变量并没有加this；</li><li>在方法中通常使用成员变量时，会省略this，但是有命名冲突时，this不能省略；</li><li>从Dart2开始，new关键字可以省略。</li></ul><h4 id="3-2-构造方法"><a href="#3-2-构造方法" class="headerlink" title="3.2. 构造方法"></a>3.2. 构造方法</h4><p>普通构造方法</p><ul><li>当通过类创建一个对象时，会调用这个类的构造方法。没有明确指定构造方法时，将默认拥有一个无参的构造方法。</li><li>当自定义构造方法时，默认的构造方法将会失效；</li><li>Dart不支持函数的重载。</li><li>参数赋值的语法糖：<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">Person(String <span class="params">name</span>, <span class="params">int</span> <span class="params">age</span>)</span> &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="constructor">Person(<span class="params">this</span>.<span class="params">name</span>, <span class="params">this</span>.<span class="params">age</span>)</span>;</span><br></pre></td></tr></table></figure></li></ul><p>命名构造方法（解决函数重载问题）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  final String name;</span><br><span class="line">  final <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span><span class="keyword">with</span><span class="constructor">Params(<span class="params">this</span>.<span class="params">name</span>, <span class="params">this</span>.<span class="params">age</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化列表</p><p>官方很多示例程序及源码大量使用了初始化列表，在创建一个构造方法时经常用到</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultAge = <span class="number">28</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Person</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误写法</span></span><br><span class="line">  <span class="comment">// Point(this.name) &#123;</span></span><br><span class="line">  <span class="comment">//   age = 28;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正确的写法</span></span><br><span class="line">  Point(<span class="keyword">this</span>.name) : age = defaultAge;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重定向构造方法</p><p>在一个构造方法中去调用另外一个构造方法, 这个时候可以使用重定向构造方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="constructor">Person(<span class="params">this</span>.<span class="params">name</span>, <span class="params">this</span>.<span class="params">age</span>)</span>;</span><br><span class="line">  <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>from<span class="constructor">Name(String <span class="params">name</span>)</span> : this(name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：冒号后面使用this调用</strong></p><p>常量构造方法</p><p>场景：相同的参数创建相同的对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = <span class="keyword">const</span> Person(<span class="string">'idbeny'</span>);</span><br><span class="line">  <span class="keyword">var</span> p2 = <span class="keyword">const</span> Person(<span class="string">'idbeny'</span>);</span><br><span class="line">  <span class="built_in">print</span>(identical(p1, p2)); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Person(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法用const修饰，那么可以保证同一个参数，创建出来的对象是相同的</li><li>常量构造方法的类中，所有的成员变量必须是final修饰的.</li><li>变量用const修饰时，对象const可以省略.</li></ul><p>工厂构造方法（常量构造方法升级版）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = Person(<span class="string">'idbeny'</span>);</span><br><span class="line">  <span class="keyword">var</span> p2 = Person(<span class="string">'idbeny'</span>);</span><br><span class="line">  <span class="built_in">print</span>(identical(p1, p2)); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Person&gt; _cache = &lt;<span class="built_in">String</span>, Person&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Person(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_cache.containsKey(name)) &#123;</span><br><span class="line">      <span class="keyword">return</span> _cache[name];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> p = Person._internal(name);</span><br><span class="line">      _cache[name] = p;</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person._internal(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-setter和getter"><a href="#3-3-setter和getter" class="headerlink" title="3.3. setter和getter"></a>3.3. setter和getter</h4><ul><li>默认情况下，Dart中类定义的属性是可以直接被外界访问的。</li><li>如果要监听类的属性变化，使用set和get</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;<span class="keyword">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">final</span> p = Person(<span class="string">"idbeny"</span>);</span><br><span class="line">  p.setName = <span class="string">"1024星球"</span>;</span><br><span class="line">  <span class="built_in">print</span>(p.getName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">  <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">String</span> <span class="built_in">get</span> getName &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="built_in">set</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-类的继承"><a href="#3-4-类的继承" class="headerlink" title="3.4. 类的继承"></a>3.4. 类的继承</h4><ul><li>使用extends关键字，子类中使用super访问父类。</li><li>父类中的所有成员变量和方法都会被继承（构造方法除外）。</li><li>子类可以拥有自己的成员变量, 并且可以对父类的方法进行重写：</li><li>子类的构造方法在执行前，将隐含调用父类的默认构造方法（无参）</li><li>如果父类没有默认构造方法，则子类的构造方法必须在初始化列表中通过super显式调用父类的某个构造方法。<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">  p.age = <span class="number">28</span>;</span><br><span class="line">  p.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'继承在奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  Person(<span class="built_in">String</span> name, <span class="built_in">int</span> age) : name=name, <span class="keyword">super</span>(age);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'<span class="subst">$name</span>在奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5-抽象类"><a href="#3-5-抽象类" class="headerlink" title="3.5. 抽象类"></a>3.5. 抽象类</h4><p>父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法，我们可以定义为抽象方法。</p><ul><li>抽象方法定义：没有具体实现的方法。</li><li>抽象方法必须存在于抽象类中。</li><li>抽象类是使用abstract声明的类。</li></ul><p>下面的代码中, Shape类就是一个抽象类, 其中包含一个抽象方法.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  getArea();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  double r;</span><br><span class="line"></span><br><span class="line">  <span class="type">Circle</span>(<span class="keyword">this</span>.r);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> r * r * <span class="number">3.14</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reactangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  double w;</span><br><span class="line">  double h;</span><br><span class="line"></span><br><span class="line">  <span class="type">Reactangle</span>(<span class="keyword">this</span>.w, <span class="keyword">this</span>.h);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> w * h;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项:</p><ul><li>抽象类不能实例化；</li><li>抽象类中的抽象方法必须被子类实现，抽象类中的已经被实现方法，可以不被子类重写。</li></ul><h4 id="3-6-隐式接口"><a href="#3-6-隐式接口" class="headerlink" title="3.6. 隐式接口"></a>3.6. 隐式接口</h4><p>Dart中没有关键字来声明接口，在默认情况下，定义的每个类都相当于默认也声明了一个接口，可以由其他的类来实现(因为Dart不支持多继承)</p><ul><li>在开发中，我们通常将用于给别人实现的类声明为抽象类:</li><li>用implements实现某个类时，类中所有的方法都必须被重新实现</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> </span>&#123;</span><br><span class="line">  run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Runner</span>, <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'超人在奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  fly() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'超人在飞'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-Mixin混入"><a href="#3-7-Mixin混入" class="headerlink" title="3.7. Mixin混入"></a>3.7. Mixin混入</h4><p>但是某些情况下，一个类可能希望直接复用之前类的原有实现方案，怎么做呢?</p><ul><li>Dart只支持单继承，那么意味着你只能复用一个类的实现。</li><li>Dart提供了另外一种方案: Mixin混入的方式<ul><li>除了可以通过class定义类之外，也可以通过mixin关键字来定义一个类。</li><li>只是通过mixin定义的类用于被其他类混入使用，通过with关键字来进行混入。<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  var superMan = SuperMain();</span><br><span class="line">  superMan.run();</span><br><span class="line">  superMan.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mixin</span> Runner &#123;</span><br><span class="line">  run() &#123;</span><br><span class="line">    print(<span class="string">'在奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mixin</span> Flyer &#123;</span><br><span class="line">  fly() &#123;</span><br><span class="line">    print(<span class="string">'在飞翔'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implements的方式要求必须对其中的方法进行重新实现</span></span><br><span class="line"><span class="comment">// class SuperMan implements Runner, Flyer &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">SuperMain</span> <span class="symbol">with</span> <span class="symbol">Runner, <span class="symbol">Flyer</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-8-类的成员和方法"><a href="#3-8-类的成员和方法" class="headerlink" title="3.8. 类的成员和方法"></a>3.8. 类的成员和方法</h4><p>用static关键字来定义:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = Person();</span><br><span class="line">  p.name = <span class="string">'idbeny'</span>;</span><br><span class="line">  p.age = <span class="number">28</span>;</span><br><span class="line">  p.eat();</span><br><span class="line"></span><br><span class="line">  Person.food = <span class="string">'米饭'</span>;</span><br><span class="line">  Person.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> food;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'<span class="subst">$name</span>在吃饭'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'奔跑'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-9-枚举类型"><a href="#3-9-枚举类型" class="headerlink" title="3.9. 枚举类型"></a>3.9. 枚举类型</h4><p>枚举在开发中也非常常见, 枚举也是一种特殊的类, 通常用于表示固定数量的常量值。</p><h5 id="3-9-1-枚举"><a href="#3-9-1-枚举" class="headerlink" title="3.9.1. 枚举"></a>3.9.1. 枚举</h5><ul><li>用enum关键字</li><li>仅支持字符串类型</li><li>枚举类型中有两个比较常见的属性:<ul><li>index: 用于表示每个枚举常量的索引, 从0开始.</li><li>values: 包含每个枚举值的List.<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  print(NetworkCode.success);</span><br><span class="line">  print(NetworkCode.success.index);</span><br><span class="line">  print(NetworkCode.values);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">NetworkCode</span> &#123;</span></span><br><span class="line">  success,</span><br><span class="line">  failure,</span><br><span class="line">  redirect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>注意事项：枚举不能子类化、混合或实现枚举。</p><h3 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h3><p>如果类型只能是字符串类型可以使用继承</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="type">List</span>&lt;<span class="type">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="comment">// 不成立</span></span><br><span class="line">  <span class="type">Person</span> p1 = <span class="type">Person</span>&lt;int&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  print(p1.x.runtimeType);</span><br><span class="line"></span><br><span class="line">  <span class="type">Person</span> p2 = <span class="type">Person</span>&lt;<span class="type">String</span>&gt;(<span class="symbol">'idben</span>y', <span class="symbol">'1024</span>星球');</span><br><span class="line">  print(p2.x.runtimeType); <span class="comment">// String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person&lt;T</span> <span class="keyword">extends</span> <span class="title">String&gt;</span> </span>&#123;</span><br><span class="line">  <span class="type">T</span> name;</span><br><span class="line">  <span class="type">T</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="type">Person</span>(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、库的使用"><a href="#五、库的使用" class="headerlink" title="五、库的使用"></a>五、库的使用</h3><p>Dart中任何一个dart文件都是一个库</p><h4 id="5-1-库的导入"><a href="#5-1-库的导入" class="headerlink" title="5.1. 库的导入"></a>5.1. 库的导入</h4><p>语法：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> '库所在的uri';</span></span><br></pre></td></tr></table></figure><p>URI有三种不同的形式</p><ul><li><p>前缀表示Dart的标准库</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'dart:io';</span></span><br></pre></td></tr></table></figure></li><li><p>相对路径</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">import</span></span> <span class="string">'../test/test.dart'</span>;</span><br></pre></td></tr></table></figure></li><li><p>Pub包管理第三方的库用前缀package</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'package:flutter/material.dart';</span></span><br></pre></td></tr></table></figure></li></ul><p>库文件中内容的显示和隐藏<br>如果希望只导入库中某些内容，或者刻意隐藏库里面某些内容，可以使用show和hide关键字</p><ul><li>show：导入需要的函数</li><li>hide：隐藏相关函数<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lib/test/test.dart'</span> <span class="keyword">show</span> Sum, Mul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib/test/test.dart'</span> <span class="keyword">hide</span> Sum;</span><br></pre></td></tr></table></figure></li></ul><p>当各个库有命名冲突的时候，使用as关键字来使用命名空间</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import 'lib/<span class="keyword">test</span>/<span class="keyword">test</span>.dart' <span class="keyword">as</span> <span class="keyword">Test</span>;</span><br><span class="line"></span><br><span class="line">final <span class="keyword">sum</span> = new <span class="keyword">Test</span>.<span class="built_in">Sum</span>();</span><br></pre></td></tr></table></figure><h4 id="5-2-库的定义"><a href="#5-2-库的定义" class="headerlink" title="5.2. 库的定义"></a>5.2. 库的定义</h4><h5 id="library"><a href="#library" class="headerlink" title="library"></a>library</h5><p>使用library关键字给库起一个名字。</p><p>但目前我发现，库的名字并不影响导入，因为import语句用的是字符串URI</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">library math<span class="comment">;</span></span><br></pre></td></tr></table></figure><h5 id="part"><a href="#part" class="headerlink" title="part"></a>part</h5><p>在之前我们使用student.dart作为演练的时候，只是将该文件作为一个库。</p><p>在开发中，如果一个库文件太大，将所有内容保存到一个文件夹是不太合理的，我们有可能希望将这个库进行拆分，这个时候就可以使用part关键字了</p><p>不过官方已经不建议使用这种方式了：</p><ul><li><a href="https://dart.dev/guides/libraries/create-library-packages" target="_blank" rel="noopener">https://dart.dev/guides/libraries/create-library-packages</a></li></ul><p>mathUtils.dart文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">part of <span class="string">"utils.dart"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dateUtils.dart文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">"utils.dart"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> dateFormat(<span class="built_in">DateTime</span> date) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"2020-12-12"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>utils.dart文件</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">part <span class="string">"mathUtils.dart"</span><span class="comment">;</span></span><br><span class="line">part <span class="string">"dateUtils.dart"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>test_libary.dart文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"lib/utils.dart"</span>;</span><br><span class="line"></span><br><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="built_in">print</span>(sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">  <span class="built_in">print</span>(dateFormat(<span class="built_in">DateTime</span>.now()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="export关键字"><a href="#export关键字" class="headerlink" title="export关键字"></a>export关键字</h5><p>官方不推荐使用part关键字，那如果库非常大，如何进行管理呢？</p><ul><li>将每一个dart文件作为库文件，使用export关键字在某个库文件中单独导入</li></ul><p>mathUtils.dart文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dateUtils.dart文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">String</span> <span class="title">dateFormat</span><span class="params">(DateTime date)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"2020-12-12"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>utils.dart文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">library utils;</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="string">"mathUtils.dart"</span>;</span><br><span class="line"><span class="builtin-name">export</span> <span class="string">"dateUtils.dart"</span>;</span><br></pre></td></tr></table></figure><p>test_libary.dart文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"lib/utils.dart"</span>;</span><br><span class="line"></span><br><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="built_in">print</span>(sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">  <span class="built_in">print</span>(dateFormat(<span class="built_in">DateTime</span>.now()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Dart】Dart基本语法（一）</title>
      <link href="/2020/03/05/dart-syntax-01/"/>
      <url>/2020/03/05/dart-syntax-01/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Dart介绍和安装"><a href="#一、Dart介绍和安装" class="headerlink" title="一、Dart介绍和安装"></a>一、Dart介绍和安装</h3><h4 id="1-1-认识Dart"><a href="#1-1-认识Dart" class="headerlink" title="1.1. 认识Dart"></a>1.1. 认识Dart</h4><p>Flutter的实现是基于Dart语言的，学习一门新的语言，主要是学习他的语法。Dart的语法对前端开发更友好一些，但如果仅有iOS或Android开发经验，学习Dart的时候其实也能够很快上手。之前有Java、Swift、Objective-C、C++、React、Vue等开发经验的同学，会在Dart中看到很多你熟悉的影子，因为Dart借鉴了各种语言的特性，甚至有点像大杂烩。</p><a id="more"></a><h4 id="1-2-安装Dart"><a href="#1-2-安装Dart" class="headerlink" title="1.2. 安装Dart"></a>1.2. 安装Dart</h4><blockquote><p>如果仅仅是单独学习和运行Dart，我们需要安装Dart SDK。但在正常开发Flutter项目时是不需要安装的，因为在安装Flutter SDK的时候，已经内置了Dart SDK</p></blockquote><p>下载Dart SDK（安装方式参照官网即可）：<a href="https://dart.dev/get-dart" target="_blank" rel="noopener">https://dart.dev/get-dart</a></p><h4 id="1-3-开发工具配置"><a href="#1-3-开发工具配置" class="headerlink" title="1.3. 开发工具配置"></a>1.3. 开发工具配置</h4><p><strong>VSCode</strong>建议安装的三个插件：Dart、Flutter、Code Runner</p><ul><li>Dart：为编写Dart代码提供支持；</li><li>Flutter：编写Flutter的环境支持；</li><li>Code Runner：运行和调试Flutter代码使用</li></ul><p><strong>Android Studio</strong>建议安装两个插件：Dart、Flutter</p><h3 id="二、体验Dart"><a href="#二、体验Dart" class="headerlink" title="二、体验Dart"></a>二、体验Dart</h3><p>新建一个helloworld.dart文件，添加下面的内容：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端：<code>dart helloworld.dart</code>，就能看到执行结果了。</p><p><em>从上面一个简单的main函数即可看出Dart和大部分语言一样都需要一个入口main函数，在函数体内即可执行相关代码；同时每个语句结束也是以分号结尾。</em></p><h3 id="三-定义变量"><a href="#三-定义变量" class="headerlink" title="三. 定义变量"></a>三. 定义变量</h3><h4 id="3-1-明确声明"><a href="#3-1-明确声明" class="headerlink" title="3.1. 明确声明"></a>3.1. 明确声明</h4><p>格式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量类型 变量名称 = 赋值<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> name = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="built_in">int</span> age = <span class="number">28</span>;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">height</span> = <span class="number">1.80</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项: 已经定义的变量可以修改值, 但是不能赋值其他类型</p></blockquote><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line">content = <span class="string">'1024星球'</span>; <span class="comment">// 正确的</span></span><br><span class="line">content = <span class="number">1234</span>; <span class="comment">// 错误的, 将一个int值赋值给一个String变量</span></span><br></pre></td></tr></table></figure><p>以上代码中，变量name已经指定为字符串类型了，这时候如果修改name为其他字符串类型是可以的，如果赋值其他类型（如浮点型、整形）就会报错。</p><h4 id="3-2-类型推导"><a href="#3-2-类型推导" class="headerlink" title="3.2. 类型推导"></a>3.2. 类型推导</h4><p>格式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var 变量名称 = 赋值<span class="comment">;</span></span><br><span class="line">dynamic 变量名称 = 赋值<span class="comment">;</span></span><br><span class="line">const 变量名称 = 赋值<span class="comment">;</span></span><br><span class="line">final 变量名称 = 赋值<span class="comment">;</span></span><br></pre></td></tr></table></figure><h5 id="3-2-1-var的使用"><a href="#3-2-1-var的使用" class="headerlink" title="3.2.1. var的使用"></a>3.2.1. var的使用</h5><p>示例：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="keyword">name</span> = <span class="string">'1024星球'</span>;</span><br><span class="line">print(<span class="keyword">name</span>.runtimeType); <span class="comment">// String</span></span><br></pre></td></tr></table></figure><p>错误用法：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">28</span>;</span><br><span class="line">age = <span class="string">'idbeny'</span>; <span class="comment">// 不能把String赋值给一个int类型</span></span><br></pre></td></tr></table></figure><ul><li>因为变量在初始化的时候已经确定了该变量的类型，所以在后续使用的时候是不能再赋值其他类型的。</li><li>用var修饰的变量不能赋值不同类型的值,但是可以使用dynamic来修饰。</li></ul><h5 id="3-2-2-dynamic的使用"><a href="#3-2-2-dynamic的使用" class="headerlink" title="3.2.2. dynamic的使用"></a>3.2.2. dynamic的使用</h5><p>示例：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dynamic</span> <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line">print(<span class="keyword">name</span>.runtimeType); <span class="comment">// String</span></span><br><span class="line"><span class="keyword">name</span> = <span class="number">28</span>;</span><br><span class="line">print(<span class="keyword">name</span>.runtimeType); <span class="comment">// int</span></span><br></pre></td></tr></table></figure><p><em>dynamic在开发中也会经常遇到，但建议谨慎使用，因为是运行时判断，所以会引发一些未知的错误</em></p><h5 id="3-2-3-final和const的使用"><a href="#3-2-3-final和const的使用" class="headerlink" title="3.2.3. final和const的使用"></a>3.2.3. final和const的使用</h5><p>final和const都是用于定义常量的（定义之后值都不可以修改）</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">final <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="keyword">name</span> = <span class="string">'1024星球'</span>; <span class="comment">// 错误做法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">28</span>;</span><br><span class="line">age = <span class="number">18</span>; <span class="comment">// 错误做法</span></span><br></pre></td></tr></table></figure><p>final和const的区别?</p><ul><li><p>const在赋值时, 赋值的内容必须是在编译期间就确定下来的；</p></li><li><p>final在赋值时, 可以动态获取， 但是final一旦被赋值后就有确定的结果, 不会再次赋值；</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="comment">// const time = DateTime.now(); // 错误的赋值方式</span></span><br><span class="line">  <span class="keyword">final</span> time = <span class="built_in">DateTime</span>.now();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>const可以修饰创建的对象。</p></li></ul><h3 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h3><h4 id="4-1-数字类型（int-double）"><a href="#4-1-数字类型（int-double）" class="headerlink" title="4.1. 数字类型（int/double）"></a>4.1. 数字类型（int/double）</h4><p>整形和浮点型</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">28</span>; <span class="comment">// 整形</span></span><br><span class="line"><span class="built_in">print</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> <span class="built_in">height</span> = <span class="number">1.80</span>; <span class="comment">// 浮点型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">height</span>);</span><br></pre></td></tr></table></figure><p>字符串和数字之间的转化:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.字符串转数字</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">int</span>.parse(<span class="string">'1234'</span>);</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">double</span>.parse(<span class="string">'12.34'</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$&#123;num1&#125;</span> <span class="subst">$&#123;num1.runtimeType&#125;</span>'</span>); <span class="comment">// 1234 int</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$&#123;num2&#125;</span> <span class="subst">$&#123;num2.runtimeType&#125;</span>'</span>); <span class="comment">// 12.34 double</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.数字转字符串</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">12.345</span>;</span><br><span class="line"><span class="keyword">var</span> num1Str = num1.toString();</span><br><span class="line"><span class="keyword">var</span> num2Str = num2.toString();</span><br><span class="line"><span class="keyword">var</span> num2PointStr = num2.toStringAsFixed(<span class="number">2</span>); <span class="comment">// 保留两位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$num1Str</span> <span class="subst">$&#123;num1Str.runtimeType&#125;</span>'</span>); <span class="comment">// 1234 String</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$num2Str</span> <span class="subst">$&#123;num2Str.runtimeType&#125;</span>'</span>); <span class="comment">// 12.345 String</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$num2PointStr</span> <span class="subst">$&#123;num2PointStr.runtimeType&#125;</span>'</span>); <span class="comment">// 12.35 String</span></span><br></pre></td></tr></table></figure><h4 id="4-2-布尔类型（Bool）"><a href="#4-2-布尔类型（Bool）" class="headerlink" title="4.2. 布尔类型（Bool）"></a>4.2. 布尔类型（Bool）</h4><p>布尔类型中,Dart提供了一个bool的类型, 取值为true和false</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$isFlag</span> <span class="subst">$&#123;isFlag.runtimeType&#125;</span>'</span>); <span class="comment">// true bool</span></span><br></pre></td></tr></table></figure><p>注意: Dart中不能判断非0即真, 或者非空即真</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">name</span> = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">name</span>) &#123; // <span class="keyword">name</span>不会打印</span><br><span class="line">  <span class="built_in">print</span>(<span class="keyword">name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-字符串类型（String）"><a href="#4-3-字符串类型（String）" class="headerlink" title="4.3. 字符串类型（String）"></a>4.3. 字符串类型（String）</h4><p>创建一个字符串：单引号或双引号</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">'Hello World'</span>;</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">"Hello'World"</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"idbeny"</span>;</span><br></pre></td></tr></table></figure><p>多行字符串：三个单引号或者双引号</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var message1 = <span class="string">'''</span></span><br><span class="line"><span class="string">  你好啊</span></span><br><span class="line"><span class="string">  很高兴</span></span><br><span class="line"><span class="string">  认识你'''</span>;</span><br></pre></td></tr></table></figure><h4 id="4-4-集合类型（List-Set-Map）"><a href="#4-4-集合类型（List-Set-Map）" class="headerlink" title="4.4. 集合类型（List/Set/Map）"></a>4.4. 集合类型（List/Set/Map）</h4><p>List</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.类型推导</span></span><br><span class="line"><span class="keyword">var</span> words = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.明确类型</span></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>Set</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.类型推导</span></span><br><span class="line"><span class="keyword">var</span> words = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.明确类型</span></span><br><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>Set和List最大的区别：Set是无序的，并且元素是不重复的。</li><li>常见操作<ul><li>length（获取集合的长度）</li><li>add（添加元素）</li><li>remove（移除元素）</li><li>contains（包含元素）</li><li>removeAt（根据索引未知删除元素–List持有，Set没有）<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers.length<span class="comment">;</span></span><br><span class="line">numbers.add(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">numbers.remove(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">numbers.contains(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">numbers.removeAt(<span class="number">1</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>Map（字典）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.类型推导</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="string">'name'</span>: <span class="string">'idbeny'</span>, <span class="string">'age'</span>: <span class="number">28</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.明确类型</span></span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map = &#123;<span class="string">'name'</span>: <span class="string">'idbeny'</span>, <span class="string">'address'</span>: <span class="string">'www.idbeny.com'</span>, <span class="string">'age'</span>: <span class="number">28</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>常见操作<ul><li>根据key获取value <code>map[&#39;name&#39;]</code></li><li>获取所有的entries <code>map.entries</code></li><li>获取所有的keys <code>map.keys</code></li><li>获取所有的values <code>map.values</code></li><li>判断是否包含某个key或者value <code>map.containsKey(&#39;name&#39;); map.containsValue(28)</code></li><li>根据key删除元素 <code>map.remove(&#39;name&#39;)</code></li></ul></li></ul><h3 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h3><h4 id="5-1-函数的定义"><a href="#5-1-函数的定义" class="headerlink" title="5.1. 函数的定义"></a>5.1. 函数的定义</h4><p>Dart是面向对象语言，函数也是对象，所有也有类型, 类型就是Function，并且函数可以作为变量定义或者作为其他函数的参数或者返回值使用。</p><p>格式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回值 函数的名称(参数列表) &#123;</span><br><span class="line">  函数体</span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> sum(<span class="built_in">num</span> num1, <span class="built_in">num</span> num2) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果我们省略函数返回类型，函数依然是可以运行的，但是如果是公共函数，建议把类型加上</li><li>如果函数中只有一个表达式, 那么可以使用箭头函数</li><li>注意, 这里面只能是一个表达式, 不能是一个语句<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum<span class="comment">(num1, num2)</span> =&gt; <span class="symbol">num1</span> + <span class="symbol">num2</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-2-函数的参数"><a href="#5-2-函数的参数" class="headerlink" title="5.2. 函数的参数"></a>5.2. 函数的参数</h4><h5 id="参数（必传和可选）"><a href="#参数（必传和可选）" class="headerlink" title="参数（必传和可选）"></a>参数（必传和可选）</h5><ul><li>位置可选参数：使用中括号包裹<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：位置可选参数: [param1, param2, ...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">Person(<span class="built_in">String</span> name, [<span class="built_in">int</span> age, <span class="built_in">double</span> height]) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'name=<span class="subst">$name</span> age=<span class="subst">$age</span> height=<span class="subst">$height</span>'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="string">'idbeny'</span>, <span class="number">28</span>);</span><br><span class="line">Person(<span class="string">'idbeny'</span>, <span class="number">28</span>, <span class="number">1.80</span>);</span><br></pre></td></tr></table></figure></li><li>命名可选参数：使用大括号包裹。可以指定某个参数是必传的（使用@required）<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：&#123;param1, param2, ...&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="constructor">Person(String <span class="params">name</span>, &#123;<span class="params">int</span> <span class="params">age</span>, <span class="params">double</span> <span class="params">height</span>, @<span class="params">required</span> String <span class="params">address</span>&#125;)</span> &#123;</span><br><span class="line">  print('name=$name age=$age height=$height address=$address');</span><br><span class="line">&#125;</span><br><span class="line"><span class="constructor">Person('<span class="params">idbeny</span>', <span class="params">age</span>: 28, <span class="params">address</span>: '<span class="params">www</span>.<span class="params">idbeny</span>.<span class="params">com</span>')</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h5><p>只有可选参数才可以有默认值, 必传参数不能有默认值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数的默认值</span></span><br><span class="line">Person(<span class="built_in">String</span> name, &#123;<span class="built_in">int</span> age = <span class="number">28</span>, <span class="built_in">String</span> address=<span class="string">"www.idbeny.com"</span>&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'name=<span class="subst">$name</span> age=<span class="subst">$age</span> address=<span class="subst">$address</span>'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-匿名函数"><a href="#5-3-匿名函数" class="headerlink" title="5.3. 匿名函数"></a>5.3. 匿名函数</h4><p>JS中有匿名函数，Dart其实也是支持匿名函数的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="keyword">List</span>&lt;String&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> words = [<span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>, <span class="string">'ddd'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 有名字的函数</span></span><br><span class="line">  readWords(item) &#123;</span><br><span class="line">    <span class="keyword">print</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">  words.<span class="keyword">forEach</span>(readWords);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 匿名函数</span></span><br><span class="line">  words.<span class="keyword">forEach</span>((item) &#123;</span><br><span class="line">    <span class="keyword">print</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  words.<span class="keyword">forEach</span>((item) =&gt; <span class="keyword">print</span>(item));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-作用域"><a href="#5-4-作用域" class="headerlink" title="5.4. 作用域"></a>5.4. 作用域</h3><ul><li>Dart是根据代码的结构<code>({})</code>来决定作用域范围的</li><li>和大部分语言类似，优先使用自己作用域中的变量，如果没有找到，则一级级向外查找。</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li><p><code>runtimeType</code>：获取变量当前的类型；</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> name = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="built_in">print</span>(name.runtimeType); <span class="comment">// String</span></span><br></pre></td></tr></table></figure></li><li><p><code>identical</code>：比较两个对象是否相同；</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">final p1 = Person()<span class="comment">;</span></span><br><span class="line">final p2 = Person()<span class="comment">;</span></span><br><span class="line">print(<span class="name">identical</span>(<span class="name">p1</span>, p2))<span class="comment">; // false</span></span><br></pre></td></tr></table></figure></li><li><p><code>${expression}</code>：字符串拼接，如果只是一个标识符，不需要加{}，如果是表达式，则必须加{}；</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> name = <span class="string">'idbeny'</span>;</span><br><span class="line"><span class="keyword">final</span> age = <span class="number">28</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;name.runtimeType&#125;</span>'</span>); <span class="comment">// idbeny String</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'<span class="subst">$age</span> <span class="subst">$&#123;age.runtimeType&#125;</span>'</span>); <span class="comment">// 28 int</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Flutter】初识Flutter</title>
      <link href="/2020/03/03/flutter-first/"/>
      <url>/2020/03/03/flutter-first/</url>
      
        <content type="html"><![CDATA[<p><img src="http://blog.idbeny.com/7ybl8.png" alt=""></p><h3 id="一、Flutter是什么？"><a href="#一、Flutter是什么？" class="headerlink" title="一、Flutter是什么？"></a>一、Flutter是什么？</h3><p><strong>官网介绍：</strong><br>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。</p><a id="more"></a><ul><li>官网：<a href="https://flutter.dev/" target="_blank" rel="noopener">https://flutter.dev/</a></li><li>中文网站：<a href="https://flutterchina.club/" target="_blank" rel="noopener">https://flutterchina.club/</a></li></ul><p><strong>总结：</strong></p><ul><li>Flutter是一个UI SDK（Software Development Kit）</li><li>可以进行移动端（iOS、Android），Web端（Beta），桌面（technical preview），跨平台解决方案；</li><li>到Flutter的几个特点：美观、快速、高效、开放。</li></ul><h3 id="二、Flutter的特点"><a href="#二、Flutter的特点" class="headerlink" title="二、Flutter的特点"></a>二、Flutter的特点</h3><p><strong>快速开发</strong></p><ul><li>毫秒级的热重载，修改后，您的应用界面会立即更新。使用丰富的、完全可定制的widget在几分钟内构建原生界面。</li><li>Flutter的热重载可帮助您快速地进行测试、构建UI、添加功能并更快地修复错误。在iOS和Android模拟器或真机上可以在亚秒内重载，并且不会丢失状态。</li></ul><p><img src="http://blog.idbeny.com/kp9xi.gif@normal" alt=""></p><p><strong>美观：富有表现力和灵活的UI</strong></p><ul><li>使用Flutter内置美丽的Material Design和Cupertino（iOS风格）widget、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。</li></ul><p><img src="http://blog.idbeny.com/lnbno.png@normal" alt=""><br><img src="http://blog.idbeny.com/08ove.png@normal" alt=""><br><img src="http://blog.idbeny.com/rzptn.png@normal" alt=""><br><img src="http://blog.idbeny.com/5u88d.png@normal" alt=""></p><p><strong>原生性能</strong></p><ul><li>Flutter包含了许多核心的widget，如滚动、导航、图标和字体等，这些都可以在iOS和Android上达到原生应用一样的性能。</li><li>Hot Reload (热重载) ，在前端已经不是什么新鲜的东西，但在移动端之前一直是没有的</li><li>Flutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度；</li><li>Flutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库；</li></ul><p><strong>响应式框架</strong></p><ul><li>使用Flutter的现代、响应式框架，和一系列基础widget，轻松构建您的用户界面。使用功能强大且灵活的API（针对2D、动画、手势、效果等）解决艰难的UI挑战。<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterState</span> <span class="keyword">extends</span> <span class="title">State&lt;Counter&gt;</span> </span>&#123;</span><br><span class="line">  int counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  void increment() &#123;</span><br><span class="line">    <span class="comment">// 告诉Flutter state已经改变, Flutter会调用build()，更新显示</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="comment">// 当 setState 被调用时，这个方法都会重新执行.</span></span><br><span class="line">    <span class="comment">// Flutter 对此方法做了优化，使重新执行变的很快</span></span><br><span class="line">    <span class="comment">// 所以你可以重新构建任何需要更新的东西，而无需分别去修改各个widget</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Row</span>(</span><br><span class="line">      children: &lt;<span class="type">Widget</span>&gt;[</span><br><span class="line">        <span class="keyword">new</span> <span class="type">RaisedButton</span>(</span><br><span class="line">          onPressed: increment,</span><br><span class="line">          child: <span class="keyword">new</span> <span class="type">Text</span>(<span class="symbol">'Incremen</span>t'),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> <span class="type">Text</span>(<span class="symbol">'Count</span>: $counter'),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>开放</strong></p><ul><li>Flutter 是开放的，它是一个完全开源的项目。</li></ul><h3 id="三、跨平台解决方案"><a href="#三、跨平台解决方案" class="headerlink" title="三、跨平台解决方案"></a>三、跨平台解决方案</h3><p><strong>WebView</strong></p><ul><li>基于 JavaScript 和 WebView的跨平台</li><li>主要是通过HTML来构建自己的界面，再将其显示在各个<br>平台的WebView中。</li><li>但是它默认是不能调用本地的一些服务的（比如自定义相机、<br>蓝牙等），所以需要通过JavaScript进行桥接调用Native<br>的一些代码来完成某些功能。</li><li>但是，它本身的体验、性能都并不理想，而且开发过程<br>中的坑非常多。</li></ul><p><strong>ReactNative（简称：RN）</strong></p><ul><li>ReactNative在移动端一直备受欢迎，在Flutter出现之前，很多跨平台项目都在使用，最著名的Airbnb对RN的社区贡献特别大，但是在18年突然宣布停止使用RN，改用Native；</li><li>RN使用JavaScript语言，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。</li><li>并且在保留基本渲染能力的基础上，用原生自带的UI组件实现核<br>心的渲染引擎，从而保证了良好的渲染性能。</li><li>但是，由于RN的本质是通过JavaScript VM调用原生接口，通信<br>相对比较低效，而且框架本身不负责渲染，而是是间接通过原生<br>进行渲染的，所以很多项目开发也在寻找其他的跨平台解决方案。</li></ul><p><strong>Flutter</strong></p><ul><li>目前性能和体验最好的跨平台解决方案；</li><li>Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件</li><li>Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高 于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）</li><li>而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。</li></ul><h3 id="四、Flutter环境配置及安装"><a href="#四、Flutter环境配置及安装" class="headerlink" title="四、Flutter环境配置及安装"></a>四、Flutter环境配置及安装</h3><p><strong>Flutter SDK下载地址</strong></p><ul><li><a href="https://flutter.dev/docs/development/tools/sdk/releases" target="_blank" rel="noopener">https://flutter.dev/docs/development/tools/sdk/releases</a></li></ul><p><strong>环境变量配置（以Mac为例）</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">FLUTTER_HOME</span>=/Applications/flutter</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$FLUTTER_HOME/bin</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$FLUTTER_HOME/bin/cache/dart-sdk/bin</span><br></pre></td></tr></table></figure><p><strong>配置镜像</strong></p><ul><li>由于在国内访问Flutter有时可能会受到限制，Flutter官方为中国开发者搭建了临时镜像，大家可以将如下环境变量加入到用户环境变量中<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PUB_HOSTED_URL=https:<span class="comment">//pub.flutter-io.cn</span></span><br><span class="line"><span class="keyword">export</span> FLUTTER_STORAGE_BASE_URL= https:<span class="comment">//storage.flutter-io.cn</span></span><br></pre></td></tr></table></figure></li><li>参考：<a href="https://flutterchina.club/get-started/install/" target="_blank" rel="noopener">https://flutterchina.club/get-started/install/</a></li></ul><p>可参考本机环境变量配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=/Users/Developer/Applications/flutter/flutter/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#android sdk目录，替换为你自己的即可</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ANDROID_HOME</span>=<span class="string">"/Users/Developer/Applications/android_sdk"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$&#123;PATH&#125;</span>:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$&#123;PATH&#125;</span>:$&#123;ANDROID_HOME&#125;/platform-tools</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PUB_HOSTED_URL</span>=https://pub.flutter-io.cn</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">FLUTTER_STORAGE_BASE_URL</span>=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><h3 id="五、开发工具选择"><a href="#五、开发工具选择" class="headerlink" title="五、开发工具选择"></a>五、开发工具选择</h3><ul><li>官方推荐：Android Studio 和 VSCode</li><li>不管选择哪一个开发工具，把对应的插件安装即可–<strong>Flutter</strong>和<strong>Dart</strong></li></ul><h3 id="六、创建Flutter项目"><a href="#六、创建Flutter项目" class="headerlink" title="六、创建Flutter项目"></a>六、创建Flutter项目</h3><ul><li>有两种方式创建Flutter应用：终端或编辑器（我们以终端为例）</li></ul><p><strong>创建：</strong><br><code>flutter create helloflutter</code></p><ul><li>项目名称不支持驼峰</li><li>如果需要，名字之间可以使用下划线<code>_</code>分割（hello_flutter）</li></ul><p><strong>运行：</strong><br><code>flutter run –d 模拟器id</code></p><ul><li>如果有多个模拟器同时运行，需要指定模拟器的id，</li><li>如果只有一个模拟器在运行，则不需要指定id，直接运行<code>flutter run</code>即可</li></ul><p><strong>诊断：</strong><code>flutter doctor</code></p><ul><li>运行此命令查看是否需要安装其它依赖项来完成安装：</li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CocoaPods】CDN trunk URL couldn’t be downloaded:https://raw.githubusercontent.com/CocoaPods/</title>
      <link href="/2019/10/15/pod-download-issues/"/>
      <url>/2019/10/15/pod-download-issues/</url>
      
        <content type="html"><![CDATA[<p>首次遇到Pods的<code>CDN</code>问题，后来才知道是1.8版本后<code>CocoaPods</code>为了开发者更快速的体验，进行了<code>CDN</code>加速处理，同时也让<code>Podfile</code>更加规范了。</p><a id="more"></a><p>使用<code>pod install</code>后出现报错<br><img src="http://blog.idbeny.com/6trvm.png@normal" alt=""></p><p>怎么办呢？根据报错原因猜想是CDN没找到对应的仓库地址，然后将<code>Podfile</code>指定了源地址<code>source &#39;https://github.com/CocoaPods/Specs.git&#39;</code>，之后继续<code>install</code>，依然报错，无奈之下手动将<code>Specs</code>的仓库clone到本地Pods目录下<code>cd ~/.cocoapods/repos/</code><br><img src="http://blog.idbeny.com/p4vjm.png@normal" alt=""></p><p>完成上面操作后，继续<code>pod install</code>，出现了我们熟悉的颜色，等待安装就行了<br><img src="http://blog.idbeny.com/k9plq.png@normal" alt=""></p><p>如果搜索某一个库的时候，例 <code>pod search AFNetworking</code>，出现文章刚开始的错误，只需要<code>pod repo remove trunk</code>即可。</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CocoaPods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【汇编】汇编语言初识&amp;lldb常用指令</title>
      <link href="/2019/06/10/assembly-swift/"/>
      <url>/2019/06/10/assembly-swift/</url>
      
        <content type="html"><![CDATA[<p>要想掌握一门语言，就要探其本质，知晓其中的内存和指针变化，这时候汇编就显得格外重要。</p><a id="more"></a><h3 id="汇编语言的种类"><a href="#汇编语言的种类" class="headerlink" title="汇编语言的种类"></a>汇编语言的种类</h3><ul><li><p>汇编语言的种类</p><ul><li>8086汇编（16bit）</li><li>x86汇编（32bit）</li><li>x64汇编（64bit）</li><li>ARM汇编（嵌入式，移动设备）</li><li>……</li></ul></li><li><p>x86、x64汇编根据编译器的不同，有2种书写格式</p><ul><li>Intel：Windows派系</li><li>AT&amp;T：Unix派系（例，iOS模拟器）</li></ul></li></ul><h3 id="常见汇编指令"><a href="#常见汇编指令" class="headerlink" title="常见汇编指令"></a>常见汇编指令</h3><p><img src="swift_lldb_02.png" alt=""></p><h3 id="寄存器与内存"><a href="#寄存器与内存" class="headerlink" title="寄存器与内存"></a>寄存器与内存</h3><ul><li>CPU组成<ul><li>寄存器（信息存储）</li><li>运算器（信息处理）</li><li>控制器</li></ul></li></ul><p>通常，CPU会先将内存中的数据存储到寄存器中，然后再对寄存器中的数据进行运算</p><blockquote><p>假设内存中有块红色内存空间的值是3，现在先把它的值+1，并将结果存储到绿色内存空间</p></blockquote><p>图解：<br><img src="swift_lldb_01.png" alt=""></p><p>代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">num</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>64位AT&amp;T混编中常用的寄存器有16种</p><ul><li>%rax、%rbx、%rcx、%rdx、%rsi、%rdi、%rbp、%rsp</li><li>%r8、%r9、%r10、%r11、%r12、%r13、%r14、%r15</li></ul><p>寄存器的具体用途</p><ul><li>%rax常作为函数返回值使用</li><li>%rdi、%rsi、%rdx、%rcx、%r8、%r9等寄存器常用于存放函数参数</li><li>%rsp、%rbp用于栈操作</li></ul><p><code>movq -0x18(%rbp), %rax</code><br>意思：根据内存地址找到对应存储空间的数据取出来赋值给%rax</p><p><code>leaq -0x18(%rbp), %rax</code><br>意思：直接将%rbp-0x18地址值赋值给%rax</p><ul><li><p><code>call</code>和<code>jmp</code>区别</p><ul><li><code>jmp 0x000a1841</code>，跳转到函数内存地址<code>0x000a1841</code>执行相关指令，跳转后不返回</li><li><code>call 0x000a1841</code>，也是跳转，和<code>ret</code>配合使用，但跳转<code>0x000a1841</code>函数执行完成后会返回继续执行之前的代码</li></ul></li><li><p><code>call *%rdx</code>，意思是跳转到寄存器里面的地址</p></li><li><p>混编指令后面的字符是什么意思？（例：<code>movq</code>、<code>leaw</code>）</p><ul><li>代表操作数长度（具体参照上图）</li></ul></li></ul><blockquote><p><code>r</code> 开头的是64位（8字节）的寄存器（CPU是64位的）</p><p><code>e</code> 开头的是32位（4字节）的寄存器（CPU是32位的）</p><p><code>ax</code>、<code>bx</code>、<code>cx</code> 开头的是16位（2字节）的寄存器（CPU是16位的）</p><p><code>ah</code>、<code>al</code>、<code>bh</code>、<code>bl</code> 开头的是8位（1字节）的寄存器（CPU是8位的）<br><code>h</code> 意思是high，代表占用高位；<code>l</code> 意思是low，代表占用低位</p></blockquote><p><em>思考：高位寄存器怎么兼容低位寄存器？</em></p><ul><li>64位寄存器需要兼容32位，32位需要兼容16位</li><li>如果使用的是64位（63<del>0），把内存的低位给32位用（31</del>0），一直往后推理</li></ul><h3 id="lldb常用指令"><a href="#lldb常用指令" class="headerlink" title="lldb常用指令"></a>lldb常用指令</h3><ul><li><p>读取寄存器的值：</p><ul><li><code>register read/格式</code></li><li><code>register read/x</code></li><li>例：<code>register read rax</code></li><li>在lldb中不需要加<code>%</code>，在汇编语言中才需要加</li><li>如果只输入<code>register read</code>，就会把所有寄存器的值打印出来</li></ul></li><li><p>修改寄存器的值</p><ul><li><code>register write 寄存器名称 数值</code></li><li><code>register write $rax 0</code></li></ul></li><li><p>读取内存中的值</p><ul><li><code>x/数量-格式-字节大小 内存地址</code></li><li><code>x/3xw 0x0000000100008200</code> 意思：读取3组16进制形式展示的数据，每组4个字节</li></ul></li><li><p>修改内存中的值</p><ul><li><code>memory write 内存地址 数值</code></li><li><code>memory write 0x0000000100008200 10</code></li></ul></li><li><p>格式</p><ul><li>x是16进制</li><li>f是浮点</li><li>d是十进制</li></ul></li><li><p>字节大小</p><ul><li>b - byte        1字节</li><li>h - half word   2字节</li><li>w - word        4字节</li><li>g - giant word  8字节</li></ul></li><li><p>expression 表达式</p><ul><li>可以简写：<code>expr 表达式</code></li><li><code>expression $rax</code></li><li><code>expression $rax = 1</code></li><li><code>expression 高级语言代码</code></li></ul></li><li><p>po 表达式</p></li><li><p>print 表达式</p></li><li><p>po/x $rax</p></li></ul><blockquote><p>更多指令参考 <code>help expression</code></p></blockquote><p>示例代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func test() &#123;</span><br><span class="line">    let <span class="selector-tag">a</span> = <span class="number">3</span></span><br><span class="line">    let <span class="selector-tag">b</span> = <span class="selector-tag">a</span> + <span class="number">1</span></span><br><span class="line">    print(b) <span class="comment">// 此处打断点进入混编</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>指令展示<br><img src="swift_lldb_03.png" alt=""></p><p>代码调试运行指令</p><ul><li><p><code>thread step-over</code></p><ul><li>简写：<code>next</code> 和 <code>n</code></li><li>单步运行，把子函数当做整体一步执行（源码级别）</li></ul></li><li><p><code>thread step-in</code></p><ul><li>简写：<code>step</code> 和 <code>s</code></li><li>单步运行，遇到子函数会进入子函数（源码级别）</li></ul></li><li><p><code>thread step-inst-over</code></p><ul><li>简写：<code>nexti</code> 和 <code>ni</code></li><li>单步运行，把子函数当做整体一步执行（汇编级别）</li></ul></li><li><p><code>thread step-inst</code></p><ul><li>简写：<code>stepi</code> 和 <code>si</code></li><li>单步运行，遇到子函数会进入子函数（汇编级别）</li></ul></li><li><p><code>thread step-out</code></p><ul><li>简写：<code>finish</code></li><li>直接执行完当前函数的所有代码，返回到上一个函数（遇到断点会卡主）</li></ul></li></ul><p>看到上面的指令名称，应该常用Xcode开发的同学会很熟悉，没错，就是Xcode上面的断点调试功能<br><img src="swift_lldb_04.png" alt=""></p><p>补充：<br><code>xorl</code> - 按位异或</p><p><code>$</code> - 立即数</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Plugin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Assembly </tag>
            
            <tag> 汇编 </tag>
            
            <tag> lldb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VSCode】如何使用Vue的template模板</title>
      <link href="/2019/06/02/vscode-vuetemplate/"/>
      <url>/2019/06/02/vscode-vuetemplate/</url>
      
        <content type="html"><![CDATA[<p>使用Vue开发项目的时候经常会用到template模板，在webstorm中新建文件有VueComponent模板，那么VSCode是否也有这样的模板呢？有的，不过不像webstorm插件那样方便，在VSCode中需要自己配置，本质其实就是代码片段。</p><a id="more"></a><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p><img src="http://blog.idbeny.com/zdj9b.png@normal" alt="第一种"></p><p><img src="http://blog.idbeny.com/e7xtd.png@normal" alt="第二种"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>选择新建代码片段<br><img src="http://blog.idbeny.com/y48w2.png@normal" alt="创建代码片段"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>输入代码片段名称（例：VueTemplate）<br><img src="http://blog.idbeny.com/ul53p.png@normal" alt="创建代码片段"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>创建完成后看到一个空的模板文件<br><img src="http://blog.idbeny.com/z5ldf.png@normal" alt="创建代码片段"><br>把需要的模板代码写入到该文件即可</p><ul><li><code>/t</code>：一个<code>tab</code>缩进–具体看VSCode配置；</li><li><code>\n</code>：换行</li><li><code>prefix</code>：快捷键（创建代码的时候用到）<br><img src="http://blog.idbeny.com/ao82p.png@normal" alt="创建代码片段"></li></ul><p>具体代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Vue-Template"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"vuetem"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [</span><br><span class="line"><span class="string">"&lt;template&gt;\n"</span>,</span><br><span class="line"><span class="string">"&lt;/template&gt;\n"</span>,</span><br><span class="line"><span class="string">"&lt;script&gt;"</span>,</span><br><span class="line"><span class="string">"\texport default &#123;"</span>,</span><br><span class="line">  <span class="string">"\t\tname: 'App'"</span>,</span><br><span class="line"><span class="string">"\t&#125;"</span>,</span><br><span class="line"><span class="string">"&lt;/script&gt;\n"</span>,</span><br><span class="line"><span class="string">"&lt;style scoped&gt;\n"</span>,</span><br><span class="line"><span class="string">"&lt;/style&gt;"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"快速创建vue组件模板"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后，新建Vue文件后，在代码区输入之前定义的<code>prefix</code>快捷键然后按下<code>tab</code>即可（本例快捷键：<code>vuetem</code>）。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift基本语法之枚举</title>
      <link href="/2019/05/11/swift-syntax-enum/"/>
      <url>/2019/05/11/swift-syntax-enum/</url>
      
        <content type="html"><![CDATA[<h3 id="typealias-别名"><a href="#typealias-别名" class="headerlink" title="typealias(别名)"></a>typealias(别名)</h3><p><code>typealias</code>用来给类型起别名</p><a id="more"></a><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> Byte = <span class="built_in">Int8</span></span><br><span class="line"><span class="keyword">typealias</span> Short = <span class="built_in">Int16</span></span><br><span class="line"><span class="keyword">typealias</span> Long = <span class="built_in">Int64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="built_in">Date</span> = (year: <span class="built_in">Int</span>, month: <span class="built_in">Int</span>, day: <span class="built_in">Int</span>)</span><br><span class="line">func test(_ date: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    print(date.year)</span><br><span class="line">&#125;</span><br><span class="line">test((<span class="number">2019</span>, <span class="number">6</span>, <span class="number">25</span>))</span><br><span class="line">// 输出：<span class="number">2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> IntFn = (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span></span><br><span class="line">func diff(v1: <span class="built_in">Int</span>, v2: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">    v1 - v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn: IntFn = diff</span><br><span class="line">fn(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">// 输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Void</code>的本质就是空元祖的别名：<code>public typealias Void = ()</code></p></blockquote><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>Swift枚举和C/OC语言不一样，以前写OC的时候枚举本质是<code>int</code>类型，但Swift中枚举可以是多类型的</p><ul><li>官方建议：枚举名称使用大写，成员使用小写</li></ul><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义枚举</span></span><br><span class="line"><span class="keyword">enum</span> YBColor &#123;</span><br><span class="line">    <span class="keyword">case</span> white</span><br><span class="line">    <span class="keyword">case</span> black</span><br><span class="line">    <span class="keyword">case</span> gray</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于上面的代码</span></span><br><span class="line"><span class="comment">//enum YBColor &#123;</span></span><br><span class="line"><span class="comment">//    case white, black, gray</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">var <span class="built_in">color</span> = YBColor.white</span><br><span class="line"><span class="built_in">color</span> = YBColor.black</span><br><span class="line"><span class="built_in">color</span> = .gray <span class="comment">// 简写（因为此时已经确定变量color是YBColor类型）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">color</span>) <span class="comment">// 输出：gray</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环控制</span></span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">color</span> &#123;</span><br><span class="line"><span class="keyword">case</span> .white:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"white"</span>)</span><br><span class="line"><span class="keyword">case</span> .black:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"black"</span>)</span><br><span class="line"><span class="keyword">case</span> .gray:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"gray"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关联值"><a href="#关联值" class="headerlink" title="关联值"></a>关联值</h4><p>有时将<strong>枚举的成员值</strong>跟<strong>其他类型的值</strong>关联存储在一起，会非常有用</p><p>案例：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Score &#123;</span><br><span class="line">    <span class="keyword">case</span> points(Int)</span><br><span class="line">    <span class="keyword">case</span> grade(Character)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值表达</span></span><br><span class="line">var score = Score.points(<span class="number">96</span>)</span><br><span class="line"><span class="comment">// 等级/字符表达</span></span><br><span class="line">score = .grade(<span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Date &#123;</span><br><span class="line">    <span class="keyword">case</span> digit(<span class="built_in">year</span>: Int, <span class="built_in">month</span>: Int, <span class="built_in">day</span>: Int)</span><br><span class="line">    <span class="keyword">case</span> string(<span class="keyword">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var date = Date.digit(<span class="built_in">year</span>: <span class="number">2019</span>, <span class="built_in">month</span>: <span class="number">06</span>, <span class="built_in">day</span>: <span class="number">25</span>)</span><br><span class="line">date = .string(<span class="string">"2019-06-25"</span>)</span><br><span class="line"><span class="keyword">switch</span> date &#123;</span><br><span class="line"><span class="keyword">case</span> .digit(let <span class="built_in">year</span>, let <span class="built_in">month</span>, let <span class="built_in">day</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">year</span>, <span class="built_in">month</span>, <span class="built_in">day</span>, separator:<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">case</span> let .string(value):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 2019-06-25</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p><code>let</code>写在枚举成员前面意味着枚举成员形参只能是常量，放在形参里面可以自定义选择是<code>var</code>还是<code>let</code></p></blockquote><h4 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h4><p>枚举成员可以使用相同类型的默认值预先关联，这个默认值叫做：原始值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> : <span class="title">Character</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> up = <span class="string">"w"</span></span><br><span class="line">    <span class="keyword">case</span> down = <span class="string">"s"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">left</span> = <span class="string">"a"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span> = <span class="string">"d"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> direction = <span class="type">Direction</span>.up</span><br><span class="line"><span class="built_in">print</span>(direction) <span class="comment">// 输出：up</span></span><br><span class="line"><span class="built_in">print</span>(direction.rawValue) <span class="comment">// 输出：w</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Direction</span>.down.rawValue) <span class="comment">// 输出：s</span></span><br></pre></td></tr></table></figure><p>如果枚举的原始值类型是<code>Int</code>、<code>String</code>，Swift会自动分配原始值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> : <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> up = <span class="string">"up"</span></span><br><span class="line">    <span class="keyword">case</span> down = <span class="string">"down"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">left</span> = <span class="string">"left"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span> = <span class="string">"right"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> direction = <span class="type">Direction</span>.up</span><br><span class="line"><span class="built_in">print</span>(direction) <span class="comment">// 输出：up</span></span><br><span class="line"><span class="built_in">print</span>(direction.rawValue) <span class="comment">// 输出：up</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Direction</span>.down.rawValue) <span class="comment">// 输出：down</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> : <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> up, down, <span class="keyword">left</span>, <span class="keyword">right</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> direction = <span class="type">Direction</span>.up</span><br><span class="line"><span class="built_in">print</span>(direction) <span class="comment">// 输出：up</span></span><br><span class="line"><span class="built_in">print</span>(direction.rawValue) <span class="comment">// 输出：up</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Direction</span>.down.rawValue) <span class="comment">// 输出：down</span></span><br></pre></td></tr></table></figure><p>Int类型，成员值自增（类似C/OC枚举）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enum Season : Int &#123;</span><br><span class="line">    case spring, summer, autumn, winter</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.spring.rawValue)</span></span> <span class="comment">// 输出：0</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.summer.rawValue)</span></span> <span class="comment">// 输出：1</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.autumn.rawValue)</span></span> <span class="comment">// 输出：2</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.winter.rawValue)</span></span> <span class="comment">// 输出：3</span></span><br><span class="line"></span><br><span class="line">enum Season : Int &#123;</span><br><span class="line">    case spring = <span class="number">1</span>, summer, autumn = <span class="number">4</span>, winter</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.spring.rawValue)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.summer.rawValue)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.autumn.rawValue)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.winter.rawValue)</span></span></span><br></pre></td></tr></table></figure><h4 id="递归枚举"><a href="#递归枚举" class="headerlink" title="递归枚举"></a>递归枚举</h4><ul><li>关键字：<code>indirect</code></li><li>可以把需要递归枚举的成员前面加<code>indirect</code>，也可以为了方便直接加到枚举定义前面</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">indirect</span> <span class="class"><span class="keyword">enum</span> <span class="title">ArithExpr</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> sum(<span class="type">ArithExpr</span>, <span class="type">ArithExpr</span>)</span><br><span class="line">    <span class="keyword">case</span> diff(<span class="type">ArithExpr</span>, <span class="type">ArithExpr</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//enum ArithExpr &#123;</span></span><br><span class="line"><span class="comment">//    case number(Int)</span></span><br><span class="line"><span class="comment">//    indirect case sum(ArithExpr, ArithExpr)</span></span><br><span class="line"><span class="comment">//    indirect case diff(ArithExpr, ArithExpr)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> five = <span class="type">ArithExpr</span>.number(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> four = <span class="type">ArithExpr</span>.number(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> two = <span class="type">ArithExpr</span>.number(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> sum = <span class="type">ArithExpr</span>.sum(five, four)</span><br><span class="line"><span class="keyword">let</span> diff = <span class="type">ArithExpr</span>.diff(sum, two)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(<span class="number">_</span> expr: ArithExpr)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> expr &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .number(value):</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .sum(<span class="keyword">left</span>, <span class="keyword">right</span>):</span><br><span class="line">        <span class="keyword">return</span> cal(<span class="keyword">left</span>) + cal(<span class="keyword">right</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .diff(<span class="keyword">left</span>, <span class="keyword">right</span>):</span><br><span class="line">        <span class="keyword">return</span> cal(<span class="keyword">left</span>) - cal(<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cal(diff) <span class="comment">// 输出：7</span></span><br></pre></td></tr></table></figure><h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><p>在Swift中查看内存占用大小及对齐方式使用枚举：<code>MemoryLayout</code></p><ul><li>size 实际用到的空间大小</li><li>stride 分配占用的空间大小</li><li>alignment 内存对齐方式</li></ul><p>下面的意思是，<code>Int</code>在内存中占用8个字节，内存对齐数是8</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MemoryLayout&lt;<span class="keyword">Int</span>&gt;.<span class="keyword">size</span> <span class="comment">// 输出：8</span></span><br><span class="line">MemoryLayout&lt;<span class="keyword">Int</span>&gt;.stride <span class="comment">// 输出：8</span></span><br><span class="line">MemoryLayout&lt;<span class="keyword">Int</span>&gt;.alignment <span class="comment">// 输出：8</span></span><br></pre></td></tr></table></figure><p>查看枚举占用内存：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Password</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> number(Int, Int, Int, Int)</span><br><span class="line">    <span class="keyword">case</span> other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var pwd = Password.number(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">MemoryLayout.size(<span class="symbol">ofValue:</span> pwd) /<span class="regexp">/ 输出：33</span></span><br><span class="line"><span class="regexp">MemoryLayout.stride(ofValue: pwd) /</span><span class="regexp">/ 输出：40</span></span><br><span class="line"><span class="regexp">MemoryLayout.alignment(ofValue: pwd) /</span><span class="regexp">/ 输出：8</span></span><br></pre></td></tr></table></figure><p><em>为什么是占用内存大小是33，而分配了40？</em></p><ul><li><code>number(Int, Int, Int, Int)</code>占用32个字节，<code>other</code>占用1个字节，所以一共只需要占用33个字节就够用了</li><li>因为内存对齐数是8，所以分配内存的时候只能是8的倍数，而33个字节不够8的倍数，所以往高位补齐后就是40了</li></ul><p><em>为什么<code>other</code>占用1个字节呢？</em></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> spring, summer, autumn, winter</span><br><span class="line">&#125;</span><br><span class="line">MemoryLayout&lt;Season&gt;.size /<span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.stride /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.alignment /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 限定类型</span></span><br><span class="line"><span class="regexp">enum Season: String &#123;</span></span><br><span class="line"><span class="regexp">    case spring, summer, autumn, winter</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.size /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.stride /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.alignment /</span><span class="regexp">/ 输出：1</span></span><br></pre></td></tr></table></figure><ul><li>上面代码可以看出不管类型是什么占用的内存大小都是1个字节</li><li>其实本质上是关联值和原始值的区别</li></ul><p>结论一：把传进去的关联值直接存储到枚举变量内存里面的，所以枚举变量是关联值的话，内存是一定和将要存储的关联值大小有关</p><p>为了证实结论一，比较下面的两个不同类型的关联值</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Password</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> number(<span class="keyword">Int</span>, <span class="keyword">Int</span>, <span class="keyword">Int</span>, <span class="keyword">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MemoryLayout&lt;Password&gt;.size <span class="comment">// 输出：33</span></span><br><span class="line">MemoryLayout&lt;Password&gt;.stride <span class="comment">// 输出：40</span></span><br><span class="line">MemoryLayout&lt;Password&gt;.alignment <span class="comment">// 输出：8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Password</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> number(<span class="keyword">String</span>, <span class="keyword">String</span>, <span class="keyword">String</span>, <span class="keyword">String</span>)</span><br><span class="line">    <span class="keyword">case</span> other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MemoryLayout&lt;Password&gt;.size <span class="comment">// 输出：65</span></span><br><span class="line">MemoryLayout&lt;Password&gt;.stride <span class="comment">// 输出：72</span></span><br><span class="line">MemoryLayout&lt;Password&gt;.alignment <span class="comment">// 输出：8</span></span><br></pre></td></tr></table></figure><p>结论二：原始值固定后是不能修改的，内存中只会把对应的成员值（序号）存下来，这时候1个字节足够用了，和枚举类型无关（不管是Int还是String枚举都是占用一个字节）</p><p>分析下面代码</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span>: <span class="title">Int</span> &#123;</span></span><br><span class="line">    /<span class="regexp">/ 序号0            序号1       序号2        序号3</span></span><br><span class="line"><span class="regexp">    case spring = 1, summer = 2, autumn = 3, winter = 4</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var season1 = Season.spring</span></span><br><span class="line"><span class="regexp">var season2 = Season.spring</span></span><br><span class="line"><span class="regexp">var season3 = Season.spring</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.size /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.stride /</span><span class="regexp">/ 输出：1</span></span><br><span class="line"><span class="regexp">MemoryLayout&lt;Season&gt;.alignment /</span><span class="regexp">/ 输出：1</span></span><br></pre></td></tr></table></figure><blockquote><p>疑问：成员值在内存中只占用1个字节，Int或String的原始值是怎么存下的？rawValue其实是另外一块地址  </p></blockquote><ul><li>关联值才会存储到枚举变量中，原始值不会占用枚举变量内存</li><li>我们可以通过内存地址看到前面的字节被关联值占用，关联值后面有一个字节是保存成员值<ul><li>1个字节存储成员值（如果只有一个枚举成员则不占用内存）</li><li>N个字节存储关联值（N取占用内存最大的关联值），任何一个case的关联值都共用这N个字节（共用体）</li><li>剩余字节按照对齐数补齐</li></ul></li></ul><blockquote><p><code>Switch</code>的<code>case</code>其实是比较枚举的成员值的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift基本语法之函数</title>
      <link href="/2019/05/10/swift-syntax-function/"/>
      <url>/2019/05/10/swift-syntax-function/</url>
      
        <content type="html"><![CDATA[<h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><ul><li><p>有返回值（形参默认是let，也只能是let）</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pi</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(pi()) <span class="comment">// 输出：3.14</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1: Int, v2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(sum(v1: <span class="number">10</span>, v2: <span class="number">20</span>)) <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure></li><li><p>无返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span> -&gt; <span class="title">Void</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span> -&gt; <span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line">hello() <span class="comment">// 输出：hello</span></span><br></pre></td></tr></table></figure></li><li><p>隐式返回<br>如果整个函数体是一个单一表达式，那么函数会隐式返回这个表达式</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">sum</span>(<span class="attribute">v1</span>: Int, <span class="attribute">v2</span>: Int) <span class="selector-tag">-</span>&gt; <span class="selector-tag">Int</span> &#123;</span><br><span class="line">    <span class="selector-tag">v1</span> + <span class="selector-tag">v2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">print</span>(sum(<span class="attribute">v1</span>: <span class="number">10</span>, <span class="attribute">v2</span>: <span class="number">10</span>)) <span class="comment">// 输出：20</span></span><br></pre></td></tr></table></figure></li><li><p>返回元组：实现多返回值</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func calculate(v1: <span class="built_in">Int</span>, v2: <span class="built_in">Int</span>) -&gt; (<span class="built_in">sum</span>: <span class="built_in">Int</span>, difference: <span class="built_in">Int</span>, average: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    let <span class="built_in">sum</span> = v1 + v2</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">sum</span>, v1 - v2, <span class="built_in">sum</span> &gt;&gt; <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">let result = calculate(v1: <span class="number">10</span>, v2: <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(result.<span class="built_in">sum</span>, result.difference, result.average) // 输出：<span class="number">30</span> -<span class="number">10</span> <span class="number">15</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="函数的文档注释"><a href="#函数的文档注释" class="headerlink" title="函数的文档注释"></a>函数的文档注释</h4><p>官网介绍：<a href="https://swift.org/documentatior/api-design-guidelines" target="_blank" rel="noopener">https://swift.org/documentatior/api-design-guidelines</a></p><p>光标放到对应函数名称上，按下<code>Option</code>即可查看函数相关描述文档<br><img src="http://blog.idbeny.com/3tg7i.png@normal" alt=""></p><ul><li>上图看到sum的函数描述都是空的，如何填写描述信息呢？</li><li>添加文档快捷键(光标一定要在函数上或函数上方)：<code>Command + Option + /</code></li></ul><p>默认的文档注释</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;#Description#&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> - Parameters:</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   - v1: <span class="doctag">&lt;#v1 description#&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   - v2: <span class="doctag">&lt;#v2 description#&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> - Returns: <span class="doctag">&lt;#description#&gt;</span></span></span><br><span class="line"><span class="function">func <span class="title">sum</span>(<span class="params">v1: Int, v2: Int</span>) -&gt; Int</span> &#123; v1 + v2&#125;</span><br></pre></td></tr></table></figure><p>更详细的文档注释（概述和详述一定要隔开，否则会默认为详述）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 将2个整数相加【概述】</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 将2个整数相加【详细的描述】</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - v1: 第一个参数</span></span><br><span class="line"><span class="comment">///   - v2: 第二个参数</span></span><br><span class="line"><span class="comment">/// - Returns: 2个参数的和</span></span><br><span class="line"><span class="comment">/// - Note:传入2个整数【批注】</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1: Int, v2: Int)</span></span> -&gt; <span class="type">Int</span> &#123; v1 + v2&#125;</span><br></pre></td></tr></table></figure><p>效果<br><img src="http://blog.idbeny.com/5odsn.png@normal" alt=""></p><h4 id="参数标签"><a href="#参数标签" class="headerlink" title="参数标签"></a>参数标签</h4><ul><li>可以修改参数标签<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// <span class="built_in">at</span>是外面调用的，<span class="built_in">time</span>是函数内部使用的</span><br><span class="line">func goToWord(<span class="built_in">at</span> <span class="built_in">time</span>: String) &#123;</span><br><span class="line">    <span class="built_in">print</span>("<span class="built_in">time</span> is \(<span class="built_in">time</span>)")</span><br><span class="line">&#125;</span><br><span class="line">goToWord(<span class="built_in">at</span>: "<span class="number">8</span>:<span class="number">00</span>")</span><br></pre></td></tr></table></figure></li></ul><p>可以使用下划线<code>_</code>省略参数标签</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func <span class="built_in">sum</span>(_ <span class="symbol">v1</span>: <span class="built_in">Int</span>, _ <span class="symbol">v2</span>: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123; <span class="symbol">v1</span> + <span class="symbol">v2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h4 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h4><ul><li>参数可以有默认值<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">check</span>(<span class="attribute">name</span>: String = <span class="string">"nobody"</span>, <span class="attribute">age</span>: Int, <span class="attribute">job</span>: String = <span class="string">"none"</span>) &#123;</span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">"name=\(name), age=\(age), job=\(job)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">age</span>: <span class="number">10</span>)</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">name</span>: <span class="string">"Jack"</span>, <span class="attribute">age</span>: <span class="number">20</span>, <span class="attribute">job</span>: <span class="string">"Programmer"</span>)</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">name</span>: <span class="string">"Eve"</span>, <span class="attribute">age</span>: <span class="number">18</span>)</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">age</span>: <span class="number">10</span>, <span class="attribute">job</span>: <span class="string">"Superman"</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> name=nobody, age=10, job=none</span></span><br><span class="line"><span class="comment"> name=Jack, age=20, job=Programmer</span></span><br><span class="line"><span class="comment"> name=Eve, age=18, job=none</span></span><br><span class="line"><span class="comment"> name=nobody, age=10, job=Superman</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li>C++的默认参数有个限制：必须从右往左设置，而且不能跨标签；Swift拥有参数标签，因此没有此类限制</li><li>省略参数标签时，需要特别注意，避免出错</li><li>没有默认值的参数标签不能省略（如上面代码age就不能省略）</li></ul><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><ul><li><p>一个函数最多只能有1个可变参数</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func <span class="built_in">sum</span>(_ numbers: Int...) -&gt; Int &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">total</span> = 0</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        <span class="keyword">total</span> += number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">total</span></span><br><span class="line">&#125;</span><br><span class="line">let result = <span class="built_in">sum</span>(10, 20, 30, 40)</span><br><span class="line"><span class="keyword">print</span>(result) <span class="comment">// 输出：100</span></span><br></pre></td></tr></table></figure></li><li><p>紧跟在可变参数后面的参数不能省略参数标签（思考：如果省略了会怎么样？）</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func <span class="keyword">test</span>(_ numbers: Int..., <span class="keyword">string</span>: <span class="keyword">String</span>, _ other: <span class="keyword">String</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">test</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="keyword">string</span>: <span class="string">"idbeny"</span>, <span class="string">"1024星球"</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="输入输出参数"><a href="#输入输出参数" class="headerlink" title="输入输出参数"></a>输入输出参数</h4><ul><li>可以用inout定义一个输入输出参数：可以在函数内部修改外部实参的值</li><li><code>inout</code>必须和<code>&amp;</code>配合使用</li><li>本质上是地址传递</li><li>可变参数不能标记为<code>inout</code></li><li><code>inout</code>参数不能有默认值</li><li><code>inout</code>参数只能传入可以被多次赋值的</li></ul><p>如下修改会报错（因为形参是用let修饰的）<br><img src="http://blog.idbeny.com/zj3ze.png@normal" alt=""></p><p>使用<code>inout</code>和<code>&amp;</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var number = <span class="number">10</span></span><br><span class="line">func add(_ num: <span class="keyword">inout</span> Int) &#123;</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">add(&amp;number)</span><br><span class="line">print(number) <span class="comment">// 输出：20</span></span><br></pre></td></tr></table></figure><p>通过这种方式也可以交换两个变量的值（其实官方有提供交换函数<code>swap</code>）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一（使用临时变量）</span></span><br><span class="line">func swapValues(_ v1: <span class="keyword">inout</span> Int, _ v2: <span class="keyword">inout</span> Int) &#123;</span><br><span class="line">    let temp = v1</span><br><span class="line">    v1 = v2</span><br><span class="line">    v2 = temp</span><br><span class="line">&#125;</span><br><span class="line">var num1 = <span class="number">10</span></span><br><span class="line">var num2 = <span class="number">20</span></span><br><span class="line">swapValues(&amp;num1, &amp;num2)</span><br><span class="line">print(<span class="string">"num1=\(num1), num2=\(num2)"</span>) <span class="comment">// 输出：num1=20, num2=10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二（使用元组）</span></span><br><span class="line">var num3 = <span class="number">30</span></span><br><span class="line">var num4 = <span class="number">40</span></span><br><span class="line">func swapValues1(_ v1: <span class="keyword">inout</span> Int, _ v2: <span class="keyword">inout</span> Int) &#123;</span><br><span class="line">    (v1, v2) = (v2, v1)</span><br><span class="line">&#125;</span><br><span class="line">swap(&amp;num3, &amp;num4)</span><br><span class="line">print(<span class="string">"num3=\(num3), num4=\(num4)"</span>) <span class="comment">// 输出：num3=40, num4=30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三（系统提供的swap函数）</span></span><br><span class="line">var num5 = <span class="number">50</span></span><br><span class="line">var num6 = <span class="number">60</span></span><br><span class="line">swap(&amp;num5, &amp;num6)</span><br><span class="line">print(<span class="string">"num5=\(num5), num6=\(num6)"</span>) <span class="comment">// 输出：num5=60, num6=50</span></span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ul><li>OC是不支持函数重载的，但Swift支持函数重载</li><li>规则<ul><li>函数名相同</li><li>参数个数不同 || 参数类型不同 || 参数标签不同</li></ul></li></ul><p>以下函数都构成了函数重载，都是可以正常调用的，且函数没有冲突</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参照</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1: Int, v2: Int)</span></span> &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数个数不同</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1: Int, v2: Int, v3: Int)</span></span> &#123;</span><br><span class="line">    v1 + v2 + v3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数类型不同</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1: Int, v2: Double)</span></span> &#123;</span><br><span class="line">    <span class="type">Double</span>(v1) + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数标签不同（忽略标签）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(<span class="number">_</span> v1: Int, <span class="number">_</span> v2: Int)</span></span> &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数标签不同（标签名不同）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a: Int, b: Int)</span></span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>返回值类型与函数重载无关<br><img src="http://blog.idbeny.com/x7h3k.png@normal" alt=""></p></li><li><p>默认参数值和函数重载一起使用产生二义性时，编译器不会报错（在C++中会报错）</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">func</span> sum(<span class="built_in">v1</span>: Int, <span class="built_in">v2</span>: Int) -&gt; Int &#123;</span><br><span class="line">    <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">func</span> sum(<span class="built_in">v1</span>: Int, <span class="built_in">v2</span>: Int, <span class="built_in">v3</span>: Int = <span class="number">30</span>) -&gt; Int &#123;</span><br><span class="line">    <span class="built_in">v1</span> + <span class="built_in">v2</span> + <span class="built_in">v3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">sum</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>) // 输出：<span class="number">30</span></span><br></pre></td></tr></table></figure></li><li><p>可变参数、省略参数标签，函数重载一起使用产生二义性时，编译器有<strong>可能会</strong>报错<br><img src="http://blog.idbeny.com/69q6s.png@normal" alt=""></p></li></ul><p>为什么是可能会报错？（下面代码可以正常执行，所以平时开发中也不建议这样写）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(<span class="number">_</span> v1: Int, <span class="number">_</span> v2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(<span class="number">_</span> numbers: Int...)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        total += num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>每一个函数都是有类型的，函数类型由形式参数类型，返回值类型组成</p><ul><li>函数类型可以作为函数参数传递</li><li>函数类型可以作为函数返回值</li><li>返回值是函数类型的函数，叫做<strong>高阶函数</strong></li></ul><h3 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h3><ul><li>将函数定义在函数内部<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foward</span><span class="params">(<span class="number">_</span> forward: Bool)</span></span> -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">(<span class="number">_</span> input: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        input + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previous</span><span class="params">(<span class="number">_</span> input: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        input - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> forward ? next : previous</span><br><span class="line">&#125;</span><br><span class="line">foward(<span class="literal">true</span>)(<span class="number">1</span>) <span class="comment">// 输出：2</span></span><br><span class="line">foward(<span class="literal">false</span>)(<span class="number">2</span>) <span class="comment">// 输出：1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>如果开启了编译器优化（Release模式默认开启），编译器会自动将某些函数变成内联函数</p><ul><li>Release默认按照快速运行方式优化</li><li>Debug也可以手动开启，但是为了开发中方便调试，一般都会关闭</li></ul><p><img src="http://blog.idbeny.com/ibl4w.png@normal" alt=""></p><p>内联函数的作用？</p><ul><li>内联函数在C++中的经常出现，如果某一个函数是内联函数，编译器在编译的时候会把适当的代码块中的代码放到对应位置，提高代码执行的效率</li><li>将函数调用展开成函数体<figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">func</span> <span class="function"><span class="title">test</span>() &#123;</span></span><br><span class="line"><span class="function">    <span class="title">print</span>(<span class="string">"test"</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">test</span>()</span></span><br></pre></td></tr></table></figure></li><li>以上代码如果开启编译器优化，<code>test()</code>会替换为<code>print(&quot;test&quot;)</code></li></ul><p>不是所有的内联函数都会被编译器展开函数体，那些函数不会被内联？</p><ul><li>函数体比较长</li><li>包含递归调用</li><li>包含动态派发</li></ul><p><strong>@inline</strong><br>永远不会被内联（即使开启了编译器优化）</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">@inline</span>(never) <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> &#123;</span></span><br><span class="line">    print(<span class="string">"test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启编译器优化后，及时代码很长，也会被内联（递归调用、动态派发的函数除外）</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">@inline</span>(__always) <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span> &#123;</span></span><br><span class="line">    print(<span class="string">"test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在Release模式下，编译器已经开启优化，会自动决定哪些函数需要内联，因此没必要使用<code>@inline</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift基本语法之循环控制</title>
      <link href="/2019/05/08/swift-syntax-loop/"/>
      <url>/2019/05/08/swift-syntax-loop/</url>
      
        <content type="html"><![CDATA[<h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><ul><li><p>if后面的条件可以省略小括号</p></li><li><p>条件后面的大括号不可以省略</p><a id="more"></a><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">let</span> <span class="variable">age</span> = <span class="number">10</span></span><br><span class="line"><span class="variable"><span class="keyword">if</span></span> <span class="variable">age</span> &gt;= <span class="number">18</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="string">"大学"</span>)</span></span><br><span class="line">&#125; <span class="variable"><span class="keyword">else</span></span> <span class="variable"><span class="keyword">if</span></span> <span class="variable">age</span> &gt;= <span class="number">16</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="string">"高中"</span>)</span></span><br><span class="line">&#125; <span class="variable"><span class="keyword">else</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="string">"义务"</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if后面的条件只能是Bool类型<br><img src="http://blog.idbeny.com/mxekd.png@normal" alt=""></p></li></ul><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">num</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"num is \(num)"</span>)</span><br><span class="line">    <span class="built_in">num</span> -= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> num is 3</span></span><br><span class="line"><span class="comment"> num is 2</span></span><br><span class="line"><span class="comment"> num is 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>swift中没有<code>do-while</code>，相同逻辑的是<code>repeat-while</code></li><li>swift3开始，去除了自增（++），自减（–）运算符<ul><li>不要再使用<code>num++</code>，<code>num--</code>，<code>++num</code>，<code>--num</code>等运算符了</li><li>自增自减运算符在不同平台有不一样的效果，所以swift放弃了使用</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">-1</span></span><br><span class="line">repeat &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"num is \(num)"</span>)</span><br><span class="line">&#125; <span class="keyword">while</span> <span class="built_in">num</span> &gt; <span class="number">0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：num is -1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><ul><li>区间运算符：<code>a...b</code>（a &lt;= 取值 &lt;= b）</li><li>变量默认是let修饰，可以自己根据情况修改为var</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规用法</span></span><br><span class="line"><span class="keyword">let</span> words = [<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"ddd"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> words &#123;</span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> aaa</span></span><br><span class="line"><span class="comment"> bbb</span></span><br><span class="line"><span class="comment"> ccc</span></span><br><span class="line"><span class="comment"> ddd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间用法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">3</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i, words[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1 bbb</span></span><br><span class="line"><span class="comment"> 2 ccc</span></span><br><span class="line"><span class="comment"> 3 ddd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var修饰</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">3</span> &#123;</span><br><span class="line">    i += <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 6</span></span><br><span class="line"><span class="comment"> 7</span></span><br><span class="line"><span class="comment"> 8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间定义常量</span></span><br><span class="line"><span class="keyword">let</span> range = <span class="number">1</span>...<span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间值自定义</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a...b &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li><p>半开区间运算符：<code>a..&lt;b</code>（a &lt;= 取值 &lt; b）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span>.&lt;<span class="number">3</span> &#123;</span><br><span class="line">    print(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>区间运算符用在数组上</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处只是示例用法，实际应用时应注意数组越界</span></span><br><span class="line"><span class="keyword">let</span> words = [<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"ddd"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> words[<span class="number">0</span>...<span class="number">3</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单侧区间：让区间朝一个方向尽可能的远</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规闭区间</span></span><br><span class="line">let words = [<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"ddd"</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">word</span> in words[<span class="number">0.</span>.<span class="number">.3</span>] &#123;</span><br><span class="line"><span class="comment">//    print(word);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> aaa</span></span><br><span class="line"><span class="comment"> bbb</span></span><br><span class="line"><span class="comment"> ccc</span></span><br><span class="line"><span class="comment"> ddd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左边代表开始，右边代表数组最大长度</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">word</span> in words[<span class="number">2.</span>..] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">word</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> ccc</span></span><br><span class="line"><span class="comment"> ddd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左边代表0，右边闭区间值</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">word</span> in words[..<span class="number">.2</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">word</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> aaa</span></span><br><span class="line"><span class="comment"> bbb</span></span><br><span class="line"><span class="comment"> ccc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左边代表0，右边&lt;2</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">word</span> in words[..&lt;<span class="number">2</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">word</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> aaa</span></span><br><span class="line"><span class="comment"> bbb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无限制，range左边是无穷小的整数</span></span><br><span class="line">let range = ..<span class="number">.5</span></span><br><span class="line"><span class="built_in">print</span>(range.contains(<span class="number">7</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">print</span>(range.contains(<span class="number">1</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(range.contains(<span class="number">-2</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="区间类型（Range）"><a href="#区间类型（Range）" class="headerlink" title="区间类型（Range）"></a>区间类型（Range）</h3><ul><li>范围代表的是两个值的区间，它由上下边界进行定义</li><li>不能对 Range 或者 ClosedRange 进行迭代，但是我们可以检查某个元素是否存在于范围中</li><li>Range 和 ClosedRange 既非序列，也不是集合类型。有一部分范围确实是序列是因为 0..&lt;10 的类型其实是一个 CountableRang。CountableRange 和 Range 很相似，只不过它还需要一个附加约束:它的元素类型需要遵守 Strideable 协议 (以整数为步⻓)。Swift 将这类功能更强的范围叫做可数范围，这是因为只有这 类范围可以被迭代。可数范围的边界可以是整数或者指针类型，但不能是浮点数类型，这是由 于 Stride 类型中有一个整数的约束。如果你想要对连续的浮点数值进行迭代的话，你可以通过 使用 stride(from:to:by) 和 stride(from:through:by) 方法来创建序列用以迭代。</li></ul><table><thead><tr><th align="center">–</th><th align="center">半开</th><th align="center">闭合</th></tr></thead><tbody><tr><td align="center">Comparable</td><td align="center">Range</td><td align="center">ClosedRange</td></tr><tr><td align="center">Strideable(以整数为步长)</td><td align="center">CountableRange</td><td align="center">CountableClosedRange</td></tr></tbody></table><ul><li>同时省略掉上、下两个边界，这样你将会得到整个集合类型的切片<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr[...] <span class="comment">// [1, 2, 3, 4] </span></span><br><span class="line">type(of: arr) <span class="comment">// Array&lt;Int&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 半开区间</span></span><br><span class="line">let rang: Range = <span class="number">0.0</span>..&lt;<span class="number">1.0</span></span><br><span class="line">let countableRange: CountableRange = <span class="number">0.</span>.&lt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭区间</span></span><br><span class="line">let closedRange: ClosedRange = <span class="number">0.0</span>..<span class="number">.1</span><span class="number">.0</span> </span><br><span class="line">let countableClosedRange: CountableClosedRange = <span class="number">0.</span>.<span class="number">.1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 右侧闭区间</span></span><br><span class="line">let partialRangeThrough: PartialRangeThrough = ..<span class="number">.1</span><span class="number">.0</span></span><br><span class="line"><span class="comment">// 左侧闭区间</span></span><br><span class="line">let partialRangeFrom: PartialRangeFrom = <span class="number">0.0</span>...</span><br><span class="line"><span class="comment">// 右侧开区间</span></span><br><span class="line">let partialRangeUpTo: PartialRangeUpTo = ..&lt;<span class="number">1.0</span></span><br><span class="line"><span class="comment">// 左侧闭区间</span></span><br><span class="line">let countablePartialRangeFrom: CountablePartialRangeFrom  = <span class="number">1.</span>..</span><br></pre></td></tr></table></figure><ul><li><p>字符、字符串也能使用区间运算符，但默认不能用在for-in中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringRange1 = <span class="string">"cc"</span>...<span class="string">"ff"</span></span><br><span class="line">stringRange1.<span class="built_in">contains</span>(<span class="string">"cb"</span>) <span class="comment">// false</span></span><br><span class="line">stringRange1.<span class="built_in">contains</span>(<span class="string">"dz"</span>) <span class="comment">// true</span></span><br><span class="line">stringRange1.<span class="built_in">contains</span>(<span class="string">"e"</span>) <span class="comment">// true</span></span><br><span class="line">stringRange1.<span class="built_in">contains</span>(<span class="string">"fg"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stringRange2 = <span class="string">"a"</span>...<span class="string">"f"</span></span><br><span class="line">stringRange2.<span class="built_in">contains</span>(<span class="string">"a"</span>) <span class="comment">// true</span></span><br><span class="line">stringRange2.<span class="built_in">contains</span>(<span class="string">"e"</span>) <span class="comment">// true</span></span><br><span class="line">stringRange2.<span class="built_in">contains</span>(<span class="string">"g"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// \0到~囊括了所有可能要用到的ASCII字符</span></span><br><span class="line"><span class="keyword">let</span> characterRange: <span class="type">ClosedRange</span>&lt;<span class="type">Character</span>&gt; = <span class="string">"\0"</span>...<span class="string">"~"</span></span><br><span class="line">characterRange.<span class="built_in">contains</span>(<span class="string">"G"</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>带间隔的区间值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> startValue = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> endValue = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> interval = <span class="number">2</span></span><br><span class="line"><span class="comment">// value取值从startValue开始，每次间隔interval，不超过endValue</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">stride</span>(from: startValue, through: endValue, by: interval) &#123;</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 0</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> 4</span></span><br><span class="line"><span class="comment"> 6</span></span><br><span class="line"><span class="comment"> 8</span></span><br><span class="line"><span class="comment"> 10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 另外一个方法 to是开区间</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">stride</span>&lt;T&gt;<span class="params">(from start: T, to end: T, by <span class="built_in">stride</span>: T.Stride)</span></span> -&gt; <span class="type">StrideTo</span>&lt;<span class="type">T</span>&gt; <span class="keyword">where</span> <span class="type">T</span> : <span class="type">Strideable</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ul><li><p>case、default后面不能写大括号（编译器会报错）</p></li><li><p>默认情况下可以不写break，并不会贯穿到后面的条件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> HeaderCode &#123;<span class="keyword">case</span> success, failure, redirect, <span class="built_in">connect</span>&#125;</span><br><span class="line">let code = HeaderCode.success</span><br><span class="line"><span class="keyword">switch</span> code &#123;</span><br><span class="line"><span class="keyword">case</span> .success:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"success"</span>)</span><br><span class="line"><span class="keyword">case</span> .redirect:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"redirect"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="built_in">connect</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"connect"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"failure"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：success</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>如果需要贯穿，怎么办？fallthrough</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">HeaderCode</span> </span>&#123;<span class="keyword">case</span> success, failure, redirect, connect&#125;</span><br><span class="line"><span class="keyword">let</span> code = <span class="type">HeaderCode</span>.success</span><br><span class="line"><span class="keyword">switch</span> code &#123;</span><br><span class="line"><span class="keyword">case</span> .success:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"success"</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> .redirect:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"redirect"</span>)</span><br><span class="line"><span class="keyword">case</span> .connect:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"connect"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"failure"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> success</span></span><br><span class="line"><span class="comment"> redirect</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>case、default后面至少要有一条语句<br><img src="http://blog.idbeny.com/r9rgd.png@normal" alt=""></p></li><li><p>switch必须要保证能处理所有情况</p><ul><li>如果不想做任何事，加个break即可</li><li>如果能保证已处理所有情况，也可以不使用default<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> HeaderCode &#123;<span class="keyword">case</span> success, failure, redirect, <span class="built_in">connect</span>&#125;</span><br><span class="line">let code = HeaderCode.success</span><br><span class="line"><span class="keyword">switch</span> code &#123;</span><br><span class="line"><span class="keyword">case</span> .success:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> .redirect:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"redirect"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="built_in">connect</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"connect"</span>)</span><br><span class="line"><span class="keyword">case</span> .failure:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"failure"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>复合条件（switch支持Character、String类型）</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String</span></span><br><span class="line">let <span class="keyword">string</span> = <span class="string">"idbeny"</span></span><br><span class="line"><span class="keyword">switch</span> <span class="keyword">string</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"idbeny"</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"idbeny"</span>)</span><br><span class="line">    fallthrough</span><br><span class="line"><span class="keyword">case</span> <span class="string">"developer"</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"developer"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"man"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> idbeny</span></span><br><span class="line"><span class="comment"> developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Character</span></span><br><span class="line">let <span class="keyword">character</span>: Character = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">switch</span> <span class="keyword">character</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"a"</span>, <span class="string">"A"</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"aaa"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：aaa</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>区间匹配、元组匹配</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区间匹配</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">count</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">count</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"zero"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>...<span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"few"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>...<span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"large"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：large</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组匹配</span></span><br><span class="line"><span class="keyword">let</span> point = (<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"origin"</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">_</span>, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x-axis"</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">_</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"y-axis"</span>)</span><br><span class="line"><span class="keyword">case</span> (-<span class="number">2</span>...<span class="number">2</span>, -<span class="number">2</span>...<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"in the box"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：in the box</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>可以用下划线(<code>_</code>)忽略某个值</p></li><li><p>值绑定（必要时let可以改为var）</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point1 = (<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">switch</span> point1 &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"on the x-axis and x value of \(x)"</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">let</span> y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"on the y-axis and y value of \(y)"</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="keyword">let</span> y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"at (\(x), \(y))"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：on the x-axis and x value of 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="where（过滤）"><a href="#where（过滤）" class="headerlink" title="where（过滤）"></a>where（过滤）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point = (<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span>(x, y) <span class="keyword">where</span> x == y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x == y"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span>(x, y) <span class="keyword">where</span> x == -y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x == -y"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span>(x, y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"at (\(x), \(y))"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：x == -y</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把所有数加起来</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, -<span class="number">30</span>, -<span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers <span class="keyword">where</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">    sum += num</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(sum)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：80</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="标签语句"><a href="#标签语句" class="headerlink" title="标签语句"></a>标签语句</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">side:</span> <span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="number">1</span><span class="string">...4</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">for</span> <span class="string">k</span> <span class="string">in</span> <span class="number">1</span><span class="string">...4</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">if</span> <span class="string">k</span> <span class="string">==</span> <span class="number">3</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">continue</span> <span class="string">side</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">if</span> <span class="string">i</span> <span class="string">==</span> <span class="number">3</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">break</span> <span class="string">side</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">print("i</span> <span class="string">==</span> <span class="string">\(i),</span> <span class="string">k</span> <span class="string">==</span> <span class="string">\(k)")</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"> <span class="string">输出：</span></span><br><span class="line"> <span class="string">i</span> <span class="string">==</span> <span class="number">1</span><span class="string">,</span> <span class="string">k</span> <span class="string">==</span> <span class="number">1</span></span><br><span class="line"> <span class="string">i</span> <span class="string">==</span> <span class="number">1</span><span class="string">,</span> <span class="string">k</span> <span class="string">==</span> <span class="number">2</span></span><br><span class="line"> <span class="string">i</span> <span class="string">==</span> <span class="number">2</span><span class="string">,</span> <span class="string">k</span> <span class="string">==</span> <span class="number">1</span></span><br><span class="line"> <span class="string">i</span> <span class="string">==</span> <span class="number">2</span><span class="string">,</span> <span class="string">k</span> <span class="string">==</span> <span class="number">2</span></span><br><span class="line"> <span class="string">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift循环控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift基本语法之数据类型</title>
      <link href="/2019/05/07/swift-syntax-data-types/"/>
      <url>/2019/05/07/swift-syntax-data-types/</url>
      
        <content type="html"><![CDATA[<p>如果你习惯了OC的语法，第一次接触Swift的语法可能会有点抗拒，因为Swift的语法有点怪。但如果你有前端的基础，学Swift可能会有点吃力，如果你有C++的基础可能会学得比较快点。不管你有什么样的语法基础，学会Swift后你都会觉得这是门优秀的语言，总之相比哥哥OC更简洁，更高效。现在Swift的ABI版本已经到5.2了，总体趋于稳定，社区也很活跃，是系统学习的好时机。</p><a id="more"></a><h3 id="打印（print）"><a href="#打印（print）" class="headerlink" title="打印（print）"></a>打印（print）</h3><p>可以认为是C的扩展写法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let word = <span class="string">"world"</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"print output"</span>)</span></span> <span class="comment">// 输出：print output</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"hello \(word)"</span>)</span></span> <span class="comment">// 输出：hello world</span></span><br></pre></td></tr></table></figure><ul><li>以往OC中打印变量使用<code>NSLog(&quot;hello_%@&quot;,var)</code>,Swift使用<code>\(变量)</code></li></ul><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><ul><li>一句代码尾部可以省略分号（;）</li><li>多句代码写到同一行时必须用分号（;）</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释（//）</li><li>多行注释–支持多行嵌套，但必须是双标签（/**/）<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1.多行注释</span></span><br><span class="line"><span class="comment"> /* 多行注释的嵌套 */</span></span><br><span class="line"> <span class="number">2.</span>多行注释</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Playground的注释支持markup语法（和markdown相似）<br>如何开启markup语法预览？</p></blockquote><ul><li>选中当前行 -&gt; 菜单栏 -&gt; Editor -&gt; Show Rendered Markup</li><li>开启渲染：Show Rendered Markup</li><li>关闭渲染：Show Raw Markup</li><li><font style="color:red">注意</font>：markup语法只在Playground中有效<br><img src="http://blog.idbeny.com/vyrvz.png@normal" alt=""></li></ul><h3 id="Markup语法"><a href="#Markup语法" class="headerlink" title="Markup语法"></a>Markup语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//: # 一级标题</span><br><span class="line">//: ## 二级标题</span><br><span class="line"></span><br><span class="line">/*:</span><br><span class="line"> # 一级标题</span><br><span class="line"> </span><br><span class="line"> ## 无序列表</span><br><span class="line"><span class="bullet"> - </span>第一个元素</span><br><span class="line"><span class="bullet"> - </span>第二个元素</span><br><span class="line"> </span><br><span class="line"> ## 有序列表</span><br><span class="line"><span class="bullet"> 1. </span>第一个元素</span><br><span class="line"><span class="bullet"> 2. </span>第二个元素</span><br><span class="line"> </span><br><span class="line"> ## 笔记</span><br><span class="line"> &gt; 这是一个笔记</span><br><span class="line"></span><br><span class="line"> ## 分割线</span><br><span class="line"> ---</span><br><span class="line"> </span><br><span class="line"> ## 图片</span><br><span class="line"> ![<span class="string">图片描述</span>](<span class="link">图片链接</span>)</span><br><span class="line"> </span><br><span class="line"> ## 链接</span><br><span class="line"> [<span class="string">链接标题</span>](<span class="link">链接地址</span>)</span><br><span class="line"> </span><br><span class="line"> ## 粗体/斜体</span><br><span class="line"> 这是<span class="strong">**粗体**</span>，这是<span class="emphasis">*斜体*</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/vygjz.png@normal" alt=""></p><ul><li>单行注释时，冒号前面不能有空格，后面必须有空格</li><li>多行注释时，冒号前面不能有空格，后面不能有内容，必须另起一行</li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>标识符（比如常量名、变量名、函数名）几乎可以使用任何字符</li><li>标识符不能以数字开头，不能包含空白字符、制表符（Tab）、箭头（-&gt;）等特殊字符</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Swift没有基本数据类型的概念，数据类型分为两大类<br><strong>值类型（value-type）</strong></p><ul><li>枚举（enum）<ul><li>Optional</li></ul></li><li>结构体（struct）<ul><li>Bool、Int、Float、Double、Character</li><li>String、Array、Dictionary、Set</li></ul></li></ul><p><strong>引用类型（reference type）</strong></p><ul><li>类（class）<br><img src="http://blog.idbeny.com/oh0dx.png@normal" alt=""></li></ul><p><em>通过官方简介即可看出，Int是用struct描述的</em></p><p><strong>整数类型</strong></p><ul><li>Int8、Int16、Int32、Int64、UInt8、UInt16、UInt32、UInt64</li><li>在32bit平台，Int等价于Int32、Int等价于Int64，所以一般情况下都是直接使用Int即可</li><li>整数的最值：UInt8.max、Int16.min</li></ul><p><strong>浮点类型：</strong></p><ul><li>Float，32位，精度只有6位</li><li>Double，64位，精度至少15位</li></ul><p><strong>字面量：</strong></p><ul><li>布尔类型值在OC中是0和1，但Swift中是true和false（和大部分语言一样）</li><li>字符串类型值用双引号</li><li>字符类型值和字符串一样都是用双引号括起来，但是字符变量必须用Character修饰，否则会默认是字符串</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 布尔</span></span><br><span class="line">let <span class="built_in">bool</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">let <span class="built_in">string</span> = <span class="string">"1024星球"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符</span></span><br><span class="line">let character: Character = <span class="string">"🌎"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整数</span></span><br><span class="line">let <span class="built_in">int</span>Decimal = <span class="number">20</span></span><br><span class="line">let <span class="built_in">int</span>Binary = <span class="number">0</span>b10001</span><br><span class="line">let <span class="built_in">int</span>Octal = <span class="number">0</span>o21</span><br><span class="line">let <span class="built_in">int</span>HexDecimal = <span class="number">0x11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数</span></span><br><span class="line">let <span class="built_in">double</span>Decimal = <span class="number">125.0</span> <span class="comment">// 十进制，等价于1.25e2，例：0.0125 &lt;=&gt; 1.25e-2</span></span><br><span class="line"></span><br><span class="line">let <span class="built_in">double</span>HexDecimal1 = <span class="number">0xF</span>p2 <span class="comment">// 十六进制，意味着15x2^2，相当于十进制的60.0</span></span><br><span class="line"></span><br><span class="line">let <span class="built_in">double</span>HexDecimal2 = <span class="number">0xF</span>p<span class="number">-2</span> <span class="comment">// 十六进制，意味着15x2^-2，相当于十进制的3.75</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下都是表示12.1875</span></span><br><span class="line"><span class="comment"> 十进制：12.1875、1.21875e1</span></span><br><span class="line"><span class="comment"> 十六进制：0xC.3p0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 数组</span></span><br><span class="line">let <span class="built_in">array</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字典</span></span><br><span class="line">let <span class="built_in">dictionary</span> = [<span class="string">"age"</span> : <span class="number">20</span>, <span class="string">"height"</span> : <span class="number">1.88</span>]</span><br></pre></td></tr></table></figure><ul><li>整数和浮点数可以添加额外的零或者添加下划线来增强可读性<ul><li>100_0000、1_000_000.000_000_1、000123.456</li></ul></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><strong>整数转换</strong></p><p>在Swift中不同类型之间是不能运算的，否则编译器会报错<br><img src="http://blog.idbeny.com/zhf7n.png@normal" alt=""></p><p>正确做法：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let i<span class="symbol">nt1</span>: UI<span class="symbol">nt16</span> = <span class="number">2</span>_<span class="number">000</span></span><br><span class="line">let i<span class="symbol">nt2</span>: UI<span class="symbol">nt8</span> = <span class="number">1</span></span><br><span class="line">let i<span class="symbol">nt3</span> = i<span class="symbol">nt1</span> + UI<span class="symbol">nt16</span><span class="comment">(int2)</span></span><br></pre></td></tr></table></figure><ul><li>把低类型转为高类型（为什么？字节占用）</li></ul><p><strong>整数、浮点数转换</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">int</span>1: UInt16 = <span class="number">2</span>_000</span><br><span class="line">let <span class="built_in">int</span>2: UInt8 = <span class="number">1</span></span><br><span class="line">let <span class="built_in">int</span>3 = <span class="built_in">int</span>1 + UInt16(<span class="built_in">int</span>2)</span><br><span class="line"></span><br><span class="line">let <span class="built_in">int</span> = <span class="number">3</span></span><br><span class="line">let <span class="built_in">double</span> = <span class="number">0.1415926</span></span><br><span class="line">let pi = Double(<span class="built_in">int</span>) + <span class="built_in">double</span></span><br><span class="line">print(pi) <span class="comment">// 输出：3.1415926</span></span><br><span class="line">let <span class="built_in">int</span>Pi = <span class="built_in">int</span> + Int(<span class="built_in">double</span>)</span><br><span class="line">print(<span class="built_in">int</span>Pi) <span class="comment">// 输出：3</span></span><br></pre></td></tr></table></figure><ul><li>浮点转为整形是会把小数点后放弃，只取浮点整数部分</li></ul><p><em>思考：每次都需要转换，对于未知类型的数据（服务器返回的数据）怎么办？</em></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量可以直接相加，因为数字字面量本身没有明确类型</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">3</span> + <span class="number">0.1415926</span></span><br><span class="line"><span class="keyword">print</span>(result) <span class="comment">// 输出：3.1415926</span></span><br></pre></td></tr></table></figure><h3 id="var和let"><a href="#var和let" class="headerlink" title="var和let"></a>var和let</h3><ul><li>let代表常量，var代表变量（variable缩写）</li><li>编译器能自动推断出变量/常量的类型</li><li>两个使用前必须初始化（和其他语言不一样，编译时可以不用初始化），否则编译报错<br><img src="http://blog.idbeny.com/33lcc.png@normal" alt=""><br><img src="http://blog.idbeny.com/n6rd9.png@normal" alt=""><br><img src="http://blog.idbeny.com/ygvsq.png@normal" alt=""></li></ul><p>格式：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名: 变量类型 = 变量值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 变量名: 变量类型 = 变量值;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age: <span class="keyword">Int</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">print</span>(age) <span class="comment">// 输出：10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name: String = <span class="string">"idbeny"</span>;</span><br><span class="line"><span class="keyword">print</span>(name) <span class="comment">// 输出：idbeny</span></span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组是借鉴C++中的概念（Python中也有此类型）</p><ul><li>元组与列表类似，不同之处在于元组的元素不能修改。</li><li>元组使用小括号，列表使用方括号。</li><li>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可（无限的）。</li><li>元组解构用法时，变量名不能和其他同作用域的常规定义变量冲突</li></ul><p>格式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 格式一：常规</span></span><br><span class="line"><span class="comment"> 读取格式：变量名.索引</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">变量修饰符 变量名 = <span class="comment">(元素值，多个逗号分隔)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 格式二：解构</span></span><br><span class="line"><span class="comment"> 变量修饰符 (元组值对应的变量名称，位置要一一对应) = 已定义元组变量</span></span><br><span class="line"><span class="comment"> 读取格式：变量名称</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">变量修饰符 <span class="comment">(元组值对应的变量名称，位置要一一对应)</span> = 已定义元组变量</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构扩展：对应位置不需要的时候可用下划线代替</span></span><br><span class="line">变量修饰符 <span class="comment">(元组值对应的变量名称，_)</span> = 已定义元组变量</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 格式三：key-value</span></span><br><span class="line"><span class="comment"> 读取格式：1. 变量名.索引 2. 变量名.元素变量名 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">变量修饰符 变量名 = <span class="comment">(元素变量名：元素值，……)</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let tup1 = (<span class="number">404</span>, <span class="string">"Not Found"</span>, <span class="string">"moreParas"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(tup1.<span class="number">0</span>,tup1.<span class="number">1</span>,tup1.<span class="number">2</span>)</span></span> <span class="comment">// 输出：404 Not Found moreParas</span></span><br><span class="line"></span><br><span class="line">let (statusCode, statusDesc, paras) = tup1</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(statusCode, statusDesc, paras)</span></span> <span class="comment">// 输出：404 Not Found moreParas</span></span><br><span class="line"></span><br><span class="line">let (tempStatusCode, _, _) = tup1</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(tempStatusCode)</span></span> <span class="comment">// 输出：404</span></span><br><span class="line"></span><br><span class="line">let httpStatus = (statusCode: <span class="number">404</span>, statusDesc: <span class="string">"Not Found"</span>, paras: <span class="string">"moreParas"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(httpStatus.statusCode, httpStatus.statusDesc, httpStatus.paras)</span></span> <span class="comment">// 输出：404 Not Found moreParas</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LLVM】clang插件开发</title>
      <link href="/2019/04/16/compiler-llvm-clang/"/>
      <url>/2019/04/16/compiler-llvm-clang/</url>
      
        <content type="html"><![CDATA[<p>接上一篇LLVM的介绍，我们认识了LLVM，现在可以尝试用前端-<code>clang</code>自定义我们需要的东西了。</p><a id="more"></a><h3 id="插件目录"><a href="#插件目录" class="headerlink" title="插件目录"></a>插件目录</h3><ol><li><p>新建插件文件夹（例：<code>yb-plugin</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> llvm/tools/clang/tools/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir yb-plugin</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/usz7q.png@normal" alt=""></p></li><li><p>打开<code>CMakeLists.txt</code>（路径：<code>llvm/tools/clang/tools/CMakeLists.txt</code>），把要加载的插件加入到里面<br><img src="http://blog.idbeny.com/lb3rn.png@normal" alt=""></p></li></ol><h3 id="插件必要文件"><a href="#插件必要文件" class="headerlink" title="插件必要文件"></a>插件必要文件</h3><p>在<code>yb-plugin</code>目录下编写插件（插件是用C++编写的，有基础的同学会比较好理解）</p><ul><li>新建<code>CMakeLists.txt</code>，文件内容是：<code>add_llvm_library(YBPlugin MODULE BUILDTREE_ONLY YBPlugin.cpp)</code>，</li><li>YBPlugin是插件名，YBPlugin.cpp是源代码文件<br><img src="http://blog.idbeny.com/ckd0u.png@normal" alt=""></li></ul><h3 id="编译插件"><a href="#编译插件" class="headerlink" title="编译插件"></a>编译插件</h3><ul><li><p>利用cmake生成的Xcode项目来编译插件(第一次编写完插件，需要利用cmake重新生成一下Xcode项目: <code>$ cmake -G Xcode ../llvm</code>)<br><img src="http://blog.idbeny.com/vmedy.png@normal" alt=""><br>打开工程，选择<code>Automatically Create Schemes</code><br><img src="http://blog.idbeny.com/009dl.png@normal" alt=""></p></li><li><p>插件源代码在<code>Sources/Loadable modules</code>目录下可以找到，这样就可以直接在Xcode里编写插件代码<br><img src="http://blog.idbeny.com/yhmrk.png@normal" alt=""></p></li><li><p>编写插件<code>YBPlugin.cpp</code><br><img src="http://blog.idbeny.com/pnemt.png@normal" alt=""></p></li><li><p>选择YBPlugin这个target进行编译，编译完会生成一个动态库文件（路径：<code>llvm_xcode/Debug/lib/YBPlugin.dylib</code>）<br><img src="http://blog.idbeny.com/la3hp.png@normal" alt=""></p></li></ul><h3 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h3><ul><li>在Xcode项目中指定加载插件动态库:<code>BuildSettings &gt; Other C Flags</code></li><li><code>-Xclang -load -Xclang 动态库路径 -Xclang -add-plugin -Xclang 插件名称</code><br><img src="http://blog.idbeny.com/lqzre.png@normal" alt=""></li><li>编译（报错是因为Xcode默认的编译器不允许使用插件，做法请看下面）<br><img src="http://blog.idbeny.com/0kciy.png@normal" alt=""></li></ul><h3 id="修改自定义编译器（Hack-Xcode）"><a href="#修改自定义编译器（Hack-Xcode）" class="headerlink" title="修改自定义编译器（Hack Xcode）"></a>修改自定义编译器（Hack Xcode）</h3><ol><li><p>首先要对Xcode进行Hack，才能修改默认的编译器</p></li><li><p>下载<code>XcodeHacking.zip</code>，解压，修改<code>HackedClang.xcplugin/Contents/Resources/HackedClang.xcspec</code>的内容，设<br>置一下自己编译好的clang的路径（之前安装好的<code>llvm_release/bin/clang</code>）<br><img src="http://blog.idbeny.com/6m218.png@normal" alt=""></p></li><li><p>然后在XcodeHacking目录下进行命令行，将XcodeHacking的内容剪切到Xcode内部</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv HackedClang.xcplugin `xcode-select -print-path`<span class="regexp">/../</span>PlugIns<span class="regexp">/Xcode3Core.ideplugin/</span>Contents<span class="regexp">/SharedSupport/</span>Developer<span class="regexp">/Library/</span>Xcode/Plug-ins</span><br><span class="line"></span><br><span class="line">$ sudo mv HackedBuildSystem.xcspec `xcode-select -print-path`<span class="regexp">/Platforms/</span>iPhoneSimulator.platform<span class="regexp">/Developer/</span>Library<span class="regexp">/Xcode/</span>Specifications</span><br></pre></td></tr></table></figure></li><li><p>重启Xcode，选择编译器<br><img src="http://blog.idbeny.com/r4nc7.png@normal" alt=""></p></li><li><p>开始编译（编译项目后，会在编译日志看到YBPlugin插件的打印信息(如果插件更新了，最好先Clean一下项目)）<br><img src="./compiler-start.png" alt="compiler-start"></p></li></ol><h3 id="提示警告、错误信息"><a href="#提示警告、错误信息" class="headerlink" title="提示警告、错误信息"></a>提示警告、错误信息</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">YBASTConsumer(CompilerInstance &amp;<span class="params">ci</span>)</span> &#123;</span><br><span class="line">  DiagnosticsEngine &amp;D = ci.get<span class="constructor">Diagnostics()</span>; </span><br><span class="line">  D.<span class="constructor">Report(D.<span class="params">getCustomDiagID</span>(DiagnosticsEngine::Warning, <span class="string">"1024星球警告信息"</span>)</span>); </span><br><span class="line">  D.<span class="constructor">Report(D.<span class="params">getCustomDiagID</span>(DiagnosticsEngine::Error, <span class="string">"1024星球错误信息"</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><ul><li>想要实现更复杂的插件功能，就需要利用clang的API针对语法树(AST)进行相应的分析和处理</li><li>关于AST的资料<ul><li><a href="https://clang.llvm.org/doxygen/namespaceclang.html" target="_blank" rel="noopener">https://clang.llvm.org/doxygen/namespaceclang.html</a></li><li><a href="https://clang.llvm.org/doxygen/classclang_1_1Decl.html" target="_blank" rel="noopener">https://clang.llvm.org/doxygen/classclang_1_1Decl.html</a></li><li><a href="https://clang.llvm.org/doxygen/classclang_1_1Stmt.html" target="_blank" rel="noopener">https://clang.llvm.org/doxygen/classclang_1_1Stmt.html</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM </tag>
            
            <tag> clang </tag>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LLVM】认识LLVM</title>
      <link href="/2019/04/15/compiler-llvm/"/>
      <url>/2019/04/15/compiler-llvm/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是LLVM？"><a href="#什么是LLVM？" class="headerlink" title="什么是LLVM？"></a>什么是<a href="https://llvm.org" target="_blank" rel="noopener">LLVM</a>？</h2><h3 id="官网：https-llvm-org"><a href="#官网：https-llvm-org" class="headerlink" title="官网：https://llvm.org"></a>官网：<a href="https://llvm.org" target="_blank" rel="noopener">https://llvm.org</a></h3><p>原文：<br><img src="http://blog.idbeny.com/194sg.png@normal" alt=""><br>The LLVM Project is a collection of modular and reusable <font style="color:red">compiler</font> and <font style="color:red">toolchain</font> technologies. Despite its name, LLVM has little to do with traditional virtual machines. The name “LLVM” itself is not an acronym; it is the full name of the project.</p><a id="more"></a><p>翻译：LLVM项目是模块化和可重用的编译器和工具链技术的集合。尽管名为LLVM，但它与传统虚拟机几乎没有什么关系。“LLVM”这个名字本身不是一个缩写词；它是<font style="color:red">项目的全称</font>。</p><p>创始人：<a href="https://baike.baidu.com/item/%E5%85%8B%E9%87%8C%E6%96%AF%C2%B7%E6%8B%89%E7%89%B9%E7%BA%B3/14187836?fr=aladdin" target="_blank" rel="noopener">Chris Lattner</a>，也是<a href="https://developer.apple.com/cn/swift/" target="_blank" rel="noopener">Swift</a>之父</p><h3 id="一、传统的编译器架构："><a href="#一、传统的编译器架构：" class="headerlink" title="一、传统的编译器架构："></a>一、传统的编译器架构：</h3><p><img src="http://blog.idbeny.com/6epr5.png@normal" alt=""></p><ul><li><p>Frontend： 前端</p><ul><li>词法分析、语法分析、语义分析、生成中间代码</li></ul></li><li><p>Optimizer：优化器</p><ul><li>中间代码优化</li></ul></li><li><p>Backend：后端</p><ul><li>生成机器码</li></ul></li></ul><h3 id="二、LLVM架构"><a href="#二、LLVM架构" class="headerlink" title="二、LLVM架构"></a>二、LLVM架构</h3><p><img src="http://blog.idbeny.com/zdzwv.png@normal" alt=""></p><ul><li>不同的前端后端使用同一的中间代码LLVM Intermedicate Representation（LLVM IR）</li><li>如果需要支持一种新的编程语言，那么只需要实现一个新的前端</li><li>如果需要支持一种新的硬件设备，那么只需要实现一个新的后端</li><li>优化阶段是一个通用的阶段，它针对的是统一的LLVM IR，不论是支持新的编程语言，还是支持新的硬件设备，都不需要对优化阶段做修改</li><li>相比之下，GCC的前端和后端没分的太开，前端后端耦合在了一起，所以GCC为了支持一门新的语言，或者为了支持一个新的目标平台，就变得特别困难（排列组合形式）</li><li>LLVM现在被作为实现各种静态和运行时编译语言的通用基础结构（GCC家族、Java、.NET、Python、Ruby、Scheme、Haskell、D等）</li></ul><h3 id="三、什么是Clang？"><a href="#三、什么是Clang？" class="headerlink" title="三、什么是Clang？"></a>三、什么是Clang？</h3><ul><li><p>Clang是LLVM项目的一个子项目</p><ul><li>给予LLVM架构的C/C++/Objective-C编译器<font style="color:blue">前端</font></li><li>官网：<a href="http://clang.llvm.org/" target="_blank" rel="noopener">http://clang.llvm.org/</a></li></ul></li><li><p>相比于GCC、Clang具有如下优点：</p><ul><li><strong>编译速度快：</strong> 在某些平台上，Clang的编译速度显著的快过GCC（Debug模式下编译OC速度比GCC快3倍）</li><li><strong>占用内存小：</strong> Clang生成的AST所占用的内存是GCC的五分之一左右</li><li><strong>模块化设计：</strong> Clang采用基于库的模块化设计，易于IDE集成及其他用途的重用</li><li><strong>诊断信息可读性强：</strong> 在编译过程中，Clang创建并保留了大量详细的元数据（metadata），有利于调试和错误定位</li><li><strong>设计清晰简单，容易理解，易于扩展增强</strong></li></ul></li></ul><h3 id="四、Clang与LLVM"><a href="#四、Clang与LLVM" class="headerlink" title="四、Clang与LLVM"></a>四、Clang与LLVM</h3><p><img src="http://blog.idbeny.com/tl8fw.png@normal" alt=""><br><img src="http://blog.idbeny.com/nnzy7.png@normal" alt=""></p><ul><li><p><strong>广义的LLVM：</strong> 整个LLVM架构</p></li><li><p><strong>狭义的LLVM：</strong> LLVM后端（代码优化、目标代码生成等）</p></li></ul><h3 id="五、OC源文件的编译过程"><a href="#五、OC源文件的编译过程" class="headerlink" title="五、OC源文件的编译过程"></a>五、OC源文件的编译过程</h3><ol><li><p>尝试编译main.m<br><img src="http://blog.idbeny.com/agwoh.png@normal" alt=""></p></li><li><p>命令行查看编译的过程：<code>$ clang -ccc-pring-phases main.m</code><br><img src="http://blog.idbeny.com/j7ugl.png@normal" alt=""></p></li></ol><ul><li><strong>input：</strong> 输入源文件</li><li><strong>preprocessor：</strong> 预处理器（把import、include、define等替换掉）</li><li><strong>compiler：</strong> 编译成中间代码（IR）</li><li><strong>backend：</strong> 汇编生成目标代码</li><li><strong>assembler：</strong> 目标代码</li><li><strong>linker：</strong> 链接动态库和静态库</li><li><strong>bind-arch：</strong> 生成适合对应架构的机器码</li></ul><ol start="3"><li><p>查看preprocessor（预处理）的结果，为了方边查看，我们把main文件改造下<br><img src="http://blog.idbeny.com/ftzhn.png@normal" alt=""></p></li><li><p>控制台输入命令：<code>$ clang -E main.m</code><br><img src="http://blog.idbeny.com/5o9it.png@normal" alt=""><br>可以看到，已经把宏定义的AGE自动替换了</p></li></ol><h3 id="六、词法分析"><a href="#六、词法分析" class="headerlink" title="六、词法分析"></a>六、词法分析</h3><p>词法分析，其实就是把代码生成一个个token：<code>$ clang -fmodules -E -Xclang -dump-tokens main.m</code><br><img src="http://blog.idbeny.com/foxuz.png@normal" alt=""></p><h3 id="七、语法树-AST"><a href="#七、语法树-AST" class="headerlink" title="七、语法树-AST"></a>七、语法树-AST</h3><p>语法分析，生成语法树（AST，Abstract Syntax Tree）：<code>$ clang -fmodules -fsyntax-only -Xclang -ast-dump main.m</code><br><img src="http://blog.idbeny.com/r9z3z.png@normal" alt=""></p><ul><li><strong>FunctionDecl：</strong> 函数声明</li><li><strong>ParmVarDecl：</strong> 参数声明</li><li><strong>CompoundStmt/DeclStmt：：</strong> 具体语句</li><li><strong>VarDecl：</strong> 变量声明</li><li><strong>BinaryOperator：</strong> 操作符</li></ul><h3 id="八、LLVM-IR"><a href="#八、LLVM-IR" class="headerlink" title="八、LLVM IR"></a>八、LLVM IR</h3><p>LLVM IR有3中表示形式（但本质是等价的，就好比水可以有气体、液体、固体3种形态）</p><ul><li>text：便于阅读的文本格式，类似于汇编语言，扩展名<code>.ll</code>（<code>$ clang -S -emit-llvm main.m</code>）</li><li>memory：内存格式</li><li>bitcode：二进制格式，扩展名<code>.bc</code>（<code>$clang -c -emit-llvm main.m</code>）</li></ul><p>源代码<br><img src="http://blog.idbeny.com/bakiw.png@normal" alt=""><br>命令：<code>$ clang -S -emit-llvm main.m</code><br>生成main.ll文件<br><img src="http://blog.idbeny.com/ylxbq.png@normal" alt=""></p><p><strong>IR基本语法</strong></p><ul><li>注释以分号;开头</li><li>全局标识符以@开头，局部标识符以%开头</li><li>alloca，在当前函数栈帧中分配内存</li><li>i32，32bit，4个字节的意思</li><li>align，内存对齐</li><li>store，写入数据</li><li>load，读取数据</li></ul><p><strong>官方语法参考</strong><br><a href="https://llvm.org/docs/LangRef.html" target="_blank" rel="noopener">https://llvm.org/docs/LangRef.html</a></p><h3 id="九、源码下载"><a href="#九、源码下载" class="headerlink" title="九、源码下载"></a>九、源码下载</h3><ol><li><p>下载LLVM（大小795MB，仅供参考）：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://git.llvm.org/git/llvm.git/</span><br></pre></td></tr></table></figure></li><li><p>下载Clang（一定要等到LLVM下载完成后再操作，大小272.4MB，仅供参考）：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd llvm/tools</span><br><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/git.llvm.org/git</span><span class="regexp">/clang.git/</span></span><br></pre></td></tr></table></figure></li><li><p>Clang没有下载的时候，为什么也能使用？是因为Xcode内置了该工具<br><img src="http://blog.idbeny.com/ke2kw.png@normal" alt=""><br>之所以再次下载，是为了我们能够编译成自己需要的Clang（定制化）</p></li></ol><h3 id="十、源码编译"><a href="#十、源码编译" class="headerlink" title="十、源码编译"></a>十、源码编译</h3><ol><li>安装cmake和ninja（先安装brew，<a href="https://brew.sh/）" target="_blank" rel="noopener">https://brew.sh/）</a><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>cmake</span><br><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>ninja</span><br></pre></td></tr></table></figure><ul><li>ninja如果安装失败，可以直接从<a href="https://github.com/ninja-build/ninja/release" target="_blank" rel="noopener">Github</a>获取release版本放入<code>/usr/local/bin</code></li></ul></li></ol><ol start="2"><li>生成模板：在LLVM源码同级目录下新建一个<code>llvm_build</code>目录（最终会在<code>llvm_build</code>目录下生成<code>build.ninja</code>）<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm_build</span><br><span class="line">$ cmake -G Ninja <span class="built_in">..</span>/llvm <span class="attribute">-DCMAKE_INSTALL_PREFIX</span>=LLVM的安装路径</span><br></pre></td></tr></table></figure></li></ol><ul><li>更多cmake相关选项，可以参考：<a href="https://llvm.org/docs/CMake.html" target="_blank" rel="noopener">https://llvm.org/docs/CMake.html</a></li></ul><ol start="3"><li><p>执行编译指令（编译完毕后，<code>llvm_build</code>目录大概21.05GB（仅供参考））</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ninja</span><br></pre></td></tr></table></figure></li><li><p>执行安装指令（在<code>llvm_build</code>同级目录创建一个<code>llvm_release</code>目录，安装完毕后，安装目录大概11.92GB（仅供参考））</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ninja <span class="keyword">install</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>完成之后在可以看到clang执行文件（<code>llvm_release/bin/clang</code>）</li></ul><hr><ol start="5"><li>另外一种编译方式：生成Xcode项目，然后用Xcode编译（速度很慢很慢很慢~）<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm_build</span><br><span class="line">$ cmake -G Ninja <span class="built_in">..</span>/llvm <span class="attribute">-DCMAKE_INSTALL_PREFIX</span>=LLVM的安装路径</span><br></pre></td></tr></table></figure></li></ol><ul><li>新建<code>llvm_xcode</code>目录<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm_xcode</span><br><span class="line">$ cmake -G XCODE <span class="built_in">..</span>/llvm <span class="attribute">-DCMAKE_INSTALL_PREFIX</span>=LLVM的安装路径</span><br></pre></td></tr></table></figure></li><li>生成之后，可以看到执行文件，用Xcode打开之后选择Scheme<code>ALL_BUILD</code>，开始编译，之后在<code>llvm_xcode/Debug/bin</code>可以看到编译后的文件。</li></ul><h3 id="十一、应用与实践"><a href="#十一、应用与实践" class="headerlink" title="十一、应用与实践"></a>十一、应用与实践</h3><h4 id="LLVM相关工具：libclang、libTooling"><a href="#LLVM相关工具：libclang、libTooling" class="headerlink" title="LLVM相关工具：libclang、libTooling"></a>LLVM相关工具：libclang、libTooling</h4><ul><li>官方参考：<a href="https://clang.llvm.org/docs/Tooling.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/Tooling.html</a></li><li>应用场景：语法树分析、语言转换等</li></ul><h4 id="Clang插件开发"><a href="#Clang插件开发" class="headerlink" title="Clang插件开发"></a>Clang插件开发</h4><ul><li>官方参考【如何开发一个Clang插件】：<ul><li><a href="https://clang.llvm.org/docs/ClangPlugins.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/ClangPlugins.html</a></li><li><a href="https://clang.llvm.org/docs/ExternalClangExamples.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/ExternalClangExamples.html</a></li><li><a href="https://clang.llvm.org/docs/RAVFrontendAction.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/RAVFrontendAction.html</a></li></ul></li><li>应用场景：代码检查（命名规范，代码规范）等</li></ul><h4 id="Pass开发"><a href="#Pass开发" class="headerlink" title="Pass开发"></a>Pass开发</h4><ul><li>官方参考【如何进行代码优化】：<a href="https://llvm.org/docs/WritingAnLLVMPass.html" target="_blank" rel="noopener">https://llvm.org/docs/WritingAnLLVMPass.html</a></li><li>应用场景：代码优化，代码混淆等</li><li>开发新的编程语言<ul><li><a href="https://llvm-tutorial-cn.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://llvm-tutorial-cn.readthedocs.io/en/latest/index.html</a></li><li><a href="https://kaleidoscope-llvm-tutorial-zh-cn.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">https://kaleidoscope-llvm-tutorial-zh-cn.readthedocs.io/zh_CN/latest/index.html</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Xcode】配置包iOS13.* 、iOS12.* 、iOS11.* 、iOS10.* 、iOS9.* 等 could not find developer disk image</title>
      <link href="/2018/04/02/xcode-devicesupport-config/"/>
      <url>/2018/04/02/xcode-devicesupport-config/</url>
      
        <content type="html"><![CDATA[<p><strong>最新版本13.0</strong></p><a id="more"></a><ol><li><p>在<code>Finder</code>状态下前往文件夹，快捷键：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shift</span>+<span class="built_in">command</span>+G</span><br></pre></td></tr></table></figure></li><li><p>填写路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Platforms/i</span>PhoneOS.platform<span class="regexp">/DeviceSupport</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/sfyfg.png@normal" alt=""></p></li><li><p>点击前往<br><img src="http://blog.idbeny.com/klj59.png@normal" alt=""></p></li></ol><p>这时候我们把资源包放在<code>DeviceSupport</code>文件夹下面，<strong>重启Xcode</strong>即可</p><blockquote><p>GitHub地址： <a href="https://github.com/idbeny/DeviceSupport" target="_blank" rel="noopener">https://github.com/idbeny/DeviceSupport</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Xcode】build版本号自动跟随时间变化脚本</title>
      <link href="/2018/01/04/xcode-version-script/"/>
      <url>/2018/01/04/xcode-version-script/</url>
      
        <content type="html"><![CDATA[<p>利用脚本让构建版本号自动化，再也不需要手动更改，开发效率杠杠滴~</p><a id="more"></a><h3 id="新增脚本"><a href="#新增脚本" class="headerlink" title="新增脚本"></a>新增脚本</h3><p><img src="http://blog.idbeny.com/q0z2w.png@normal" alt=""></p><h3 id="修改脚本位置和名称"><a href="#修改脚本位置和名称" class="headerlink" title="修改脚本位置和名称"></a>修改脚本位置和名称</h3><p><img src="http://blog.idbeny.com/bx07t.png@normal" alt=""></p><ul><li>如果有多个脚本执行，尽量把修改build版本号的脚本放在所有脚本的首位（优先执行，防止其他脚本或代码用到build版本号）</li><li>为了和其他脚本区分，可以双击修改脚本名称（例：<code>Run Script BuildVersion</code>）</li></ul><h3 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h3><blockquote><p>跟随时间变化（release和Debug不同情况）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">// 判断是哪个configuration</span><br><span class="line">// Release Debug 或者只自定义的配置</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"Release"</span> != <span class="string">"<span class="variable">$&#123;CONFIGURATION&#125;</span>"</span> ]</span><br><span class="line">// 如果是Release做哪些事情</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">// 如果不是Release做哪些事情</span><br><span class="line">    // <span class="built_in">exit</span> 0 退出 不执行下面的代码</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">// 获取info.plist信息 CFBundleVersion 可以更改为想获取的信息的名字</span><br><span class="line">buildNumber=$(/usr/libexec/PlistBuddy -c <span class="string">"Print :CFBundleVersion"</span> <span class="string">"<span class="variable">$&#123;PROJECT_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_FILE&#125;</span>"</span>)  </span><br><span class="line">shortVersion=$(/usr/libexec/PlistBuddy -c <span class="string">"Print :CFBundleShortVersionString"</span> <span class="string">"<span class="variable">$&#123;PROJECT_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_FILE&#125;</span>"</span>)  </span><br><span class="line">buildNumber=`date +<span class="string">"%Y%m%d%H%M%S"</span>`  </span><br><span class="line">buildNumber=<span class="string">"<span class="variable">$shortVersion</span>.<span class="variable">$buildNumber</span>"</span>  </span><br><span class="line"></span><br><span class="line">// 设置info.plist</span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleVersion <span class="variable">$buildNumber</span>"</span> <span class="string">"<span class="variable">$&#123;PROJECT_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_FILE&#125;</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>自动+1</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">buildNumber=$(/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleVersion"</span> <span class="string">"<span class="variable">$INFOPLIST_FILE</span>"</span>)</span><br><span class="line">buildNumber=$((<span class="variable">$buildNumber</span> + 1))</span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleVersion <span class="variable">$buildNumber</span>"</span> <span class="string">"<span class="variable">$INFOPLIST_FILE</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>修改项目显示名称为版本号（适用于不同版本号装到一个机器里面，便于区分是哪个版本）</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"Release"</span> != <span class="string">"<span class="variable">$&#123;CONFIGURATION&#125;</span>"</span> ]; then</span><br><span class="line"></span><br><span class="line"><span class="attribute">DisplayName</span>=$(/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleShortVersionString"</span> <span class="string">"<span class="variable">$INFOPLIST_FILE</span>"</span>)</span><br><span class="line"><span class="attribute">DisplayName</span>=<span class="string">"ep<span class="variable">$&#123;DisplayName&#125;</span>-I"</span></span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleDisplayName <span class="variable">$DisplayName</span>"</span> <span class="string">"<span class="variable">$INFOPLIST_FILE</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">DisplayName</span>=<span class="string">"真正的项目名称"</span></span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleDisplayName <span class="variable">$DisplayName</span>"</span> <span class="string">"<span class="variable">$INFOPLIST_FILE</span>"</span></span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>贴上我用的脚本（版本号+日期）</p></blockquote><p><img src="http://blog.idbeny.com/5h8h8.png@normal" alt=""></p><p>以上完成后编译/运行即可看到效果<br><img src="http://blog.idbeny.com/evoa9.png@normal" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
            <tag> build版本号 </tag>
            
            <tag> ShellScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaScript】常用正则表达式</title>
      <link href="/2017/08/21/js-regix/"/>
      <url>/2017/08/21/js-regix/</url>
      
        <content type="html"><![CDATA[<p>验证数字：<code>^[0-9]*$</code><br>验证n位的数字：<code>^\d{n}$</code><br>验证至少n位数字：<code>^\d{n,}$</code></p><a id="more"></a><p>验证m-n位的数字：<code>^\d{m,n}$</code><br>验证零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p><p>验证有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code><br>验证有1-3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p><p>验证非零的正整数：<code>^\+?[1-9][0-9]*$</code><br>验证非零的负整数：<code>^\-[1-9][0-9]*$</code><br>验证非负整数（正整数 + 0） <code>^\d+$</code><br>验证非正整数（负整数 + 0）  <code>^((-\d+)|(0+))$</code></p><p>验证整数：<code>^-?\d+$</code><br>验证非负浮点数（正浮点数 + 0）：<code>^\d+(\.\d+)?$</code><br>验证正浮点数：  <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code><br>验证非正浮点数（负浮点数 + 0）：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code><br>验证负浮点数 ： <code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code><br>验证浮点数 ：<code>^(-?\d+)(\.\d+)?</code></p><p>验证长度为3的字符：<code>^.{3}$</code><br>验证由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code><br>验证由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code><br>验证由26个小写英文字母组成的字符串：<code>^[a-z]+$</code><br>验证由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code><br>验证由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$</code></p><p>验证用户密码(以字母开头，长度在6-18之间，只能包含字符、数字和下划线):<code>^[a-zA-Z]\w{5,17}$</code><br>验证是否含有 <code>^%&amp;’,;=?$”</code> 等字符：<code>[^%&amp;&#39;,;=?$\x22]+</code><br>验证汉字：<code>^[\u4e00-\u9fa5],{0,}$</code><br>验证Email地址：<code>^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code><br>验证InternetURL：<code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code>或<code>^[a-zA-z]+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$</code><br>验证电话号码(格式XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX)：<code>^(\(\d{3,4}\)|\d{3,4}-)?\d{7,8}$</code><br>验证身份证号（15位或18位数字）：<code>^\d{15}|\d{}18$</code></p><p>验证一年的12个月(“01”-“09”和“1”“12”)：<code>^(0?[1-9]|1[0-2])$</code><br>验证一个月的31天(01、09和1、31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p>]]></content>
      
      
      <categories>
          
          <category> H5 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】UICollectionView区头停留</title>
      <link href="/2017/07/19/ios-collection-plain/"/>
      <url>/2017/07/19/ios-collection-plain/</url>
      
        <content type="html"><![CDATA[<p><code>UITableView</code>系统提供了两种常用样式(<code>UITableViewStylePlain</code>和<code>UITableViewStyleGrouped</code>)，<code>UITableViewStylePlain</code>可以让区头停留在顶部，但是<code>UICollectionView</code>没有直接提供这样的样式，如果需要我们只能重写<code>UICollectionViewFlowLayout</code>，直接上代码：</p><a id="more"></a><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  UICollectionPlainFlowLayout.h</span></span><br><span class="line"><span class="comment">//  FlowLayoutDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by IDBENY on 2017/7/19.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017年 www.idbeny.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ShoppingCollectionPlainFlowLayout</span> : <span class="title">UICollectionViewFlowLayout</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> navHeight;<span class="comment">//默认为64.0, default is 64.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  UICollectionPlainFlowLayout.m</span></span><br><span class="line"><span class="comment">//  FlowLayoutDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by IDBENY on 2017/7/19.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017年 www.idbeny.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ShoppingCollectionPlainFlowLayout.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ShoppingCollectionPlainFlowLayout</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _navHeight = <span class="number">64.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)layoutAttributesForElementsInRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    <span class="comment">//UICollectionViewLayoutAttributes：我称它为collectionView中的item（包括cell和header、footer这些）的《结构信息》</span></span><br><span class="line">    <span class="comment">//截取到父类所返回的数组（里面放的是当前屏幕所能展示的item的结构信息），并转化成不可变数组</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *superArray = [[<span class="keyword">super</span> layoutAttributesForElementsInRect:rect] mutableCopy];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建存索引的数组，无符号（正整数），无序（不能通过下标取值），不可重复（重复的话会自动过滤）</span></span><br><span class="line">    <span class="built_in">NSMutableIndexSet</span> *noneHeaderSections = [<span class="built_in">NSMutableIndexSet</span> indexSet];</span><br><span class="line">    <span class="comment">//遍历superArray，得到一个当前屏幕中所有的section数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UICollectionViewLayoutAttributes</span> *attributes <span class="keyword">in</span> superArray) &#123;</span><br><span class="line">        <span class="comment">//如果当前的元素分类是一个cell，将cell所在的分区section加入数组，重复的话会自动过滤</span></span><br><span class="line">        <span class="keyword">if</span> (attributes.representedElementCategory == <span class="built_in">UICollectionElementCategoryCell</span>) &#123;</span><br><span class="line">            [noneHeaderSections addIndex:attributes.indexPath.section];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历superArray，将当前屏幕中拥有的header的section从数组中移除，得到一个当前屏幕中没有header的section数组</span></span><br><span class="line">    <span class="comment">//正常情况下，随着手指往上移，header脱离屏幕会被系统回收而cell尚在，也会触发该方法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UICollectionViewLayoutAttributes</span> *attributes <span class="keyword">in</span> superArray) &#123;</span><br><span class="line">        <span class="comment">//如果当前的元素是一个header，将header所在的section从数组中移除</span></span><br><span class="line">        <span class="keyword">if</span> ([attributes.representedElementKind isEqualToString:<span class="built_in">UICollectionElementKindSectionHeader</span>]) &#123;</span><br><span class="line">            [noneHeaderSections removeIndex:attributes.indexPath.section];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历当前屏幕中没有header的section数组</span></span><br><span class="line">    [noneHeaderSections enumerateIndexesUsingBlock:^(<span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//取到当前section中第一个item的indexPath</span></span><br><span class="line">        <span class="built_in">NSIndexPath</span> *indexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:<span class="number">0</span> inSection:idx];</span><br><span class="line">        <span class="comment">//获取当前section在正常情况下已经离开屏幕的header结构信息</span></span><br><span class="line">        <span class="built_in">UICollectionViewLayoutAttributes</span> *attributes = [<span class="keyword">self</span> layoutAttributesForSupplementaryViewOfKind:<span class="built_in">UICollectionElementKindSectionHeader</span> atIndexPath:indexPath];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果当前分区确实有因为离开屏幕而被系统回收的header</span></span><br><span class="line">        <span class="keyword">if</span> (attributes) &#123;</span><br><span class="line">            <span class="comment">//将该header结构信息重新加入到superArray中去</span></span><br><span class="line">            [superArray addObject:attributes];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历superArray，改变header结构信息中的参数，使它可以在当前section还没完全离开屏幕的时候一直显示</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UICollectionViewLayoutAttributes</span> *attributes <span class="keyword">in</span> superArray) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果当前item是header</span></span><br><span class="line">        <span class="keyword">if</span> ([attributes.representedElementKind isEqualToString:<span class="built_in">UICollectionElementKindSectionHeader</span>]) &#123;</span><br><span class="line">            <span class="comment">//得到当前header所在分区的cell的数量</span></span><br><span class="line">            <span class="built_in">NSInteger</span> numberOfItemsInSection = [<span class="keyword">self</span>.collectionView numberOfItemsInSection:attributes.indexPath.section];</span><br><span class="line">            <span class="comment">//得到第一个item的indexPath</span></span><br><span class="line">            <span class="built_in">NSIndexPath</span> *firstItemIndexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:<span class="number">0</span> inSection:attributes.indexPath.section];</span><br><span class="line">            <span class="comment">//得到最后一个item的indexPath</span></span><br><span class="line">            <span class="built_in">NSIndexPath</span> *lastItemIndexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:MAX(<span class="number">0</span>, numberOfItemsInSection<span class="number">-1</span>) inSection:attributes.indexPath.section];</span><br><span class="line">            <span class="comment">//得到第一个item和最后一个item的结构信息</span></span><br><span class="line">            <span class="built_in">UICollectionViewLayoutAttributes</span> *firstItemAttributes, *lastItemAttributes;</span><br><span class="line">            <span class="keyword">if</span> (numberOfItemsInSection&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//cell有值，则获取第一个cell和最后一个cell的结构信息</span></span><br><span class="line">                firstItemAttributes = [<span class="keyword">self</span> layoutAttributesForItemAtIndexPath:firstItemIndexPath];</span><br><span class="line">                lastItemAttributes = [<span class="keyword">self</span> layoutAttributesForItemAtIndexPath:lastItemIndexPath];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//cell没值,就新建一个UICollectionViewLayoutAttributes</span></span><br><span class="line">                firstItemAttributes = [<span class="built_in">UICollectionViewLayoutAttributes</span> new];</span><br><span class="line">                <span class="comment">//然后模拟出在当前分区中的唯一一个cell，cell在header的下面，高度为0，还与header隔着可能存在的sectionInset的top</span></span><br><span class="line">                <span class="built_in">CGFloat</span> y = <span class="built_in">CGRectGetMaxY</span>(attributes.frame)+<span class="keyword">self</span>.sectionInset.top;</span><br><span class="line">                firstItemAttributes.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, y, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">//因为只有一个cell，所以最后一个cell等于第一个cell</span></span><br><span class="line">                lastItemAttributes = firstItemAttributes;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//获取当前header的frame</span></span><br><span class="line">            <span class="built_in">CGRect</span> rect = attributes.frame;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//当前的滑动距离 + 因为导航栏产生的偏移量，默认为64（如果app需求不同，需自己设置）</span></span><br><span class="line">            <span class="built_in">CGFloat</span> offset = <span class="keyword">self</span>.collectionView.contentOffset.y + _navHeight;</span><br><span class="line">            <span class="comment">//第一个cell的y值 - 当前header的高度 - 可能存在的sectionInset的top</span></span><br><span class="line">            <span class="built_in">CGFloat</span> headerY = firstItemAttributes.frame.origin.y - rect.size.height - <span class="keyword">self</span>.sectionInset.top;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//哪个大取哪个，保证header悬停</span></span><br><span class="line">            <span class="comment">//针对当前header基本上都是offset更加大，针对下一个header则会是headerY大，各自处理</span></span><br><span class="line">            <span class="built_in">CGFloat</span> maxY = MAX(offset,headerY);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//最后一个cell的y值 + 最后一个cell的高度 + 可能存在的sectionInset的bottom - 当前header的高度</span></span><br><span class="line">            <span class="comment">//当当前section的footer或者下一个section的header接触到当前header的底部，计算出的headerMissingY即为有效值</span></span><br><span class="line">            <span class="built_in">CGFloat</span> headerMissingY = <span class="built_in">CGRectGetMaxY</span>(lastItemAttributes.frame) + <span class="keyword">self</span>.sectionInset.bottom - rect.size.height;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//给rect的y赋新值，因为在最后消失的临界点要跟谁消失，所以取小</span></span><br><span class="line">            rect.origin.y = MIN(maxY,headerMissingY);</span><br><span class="line">            <span class="comment">//给header的结构信息的frame重新赋值</span></span><br><span class="line">            attributes.frame = rect;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果按照正常情况下,header离开屏幕被系统回收，而header的层次关系又与cell相等，如果不去理会，会出现cell在header上面的情况</span></span><br><span class="line">            <span class="comment">//通过打印可以知道cell的层次关系zIndex数值为0，我们可以将header的zIndex设置成1，如果不放心，也可以将它设置成非常大，这里随便填了个7</span></span><br><span class="line">            attributes.zIndex = <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//转换回不可变数组，并返回</span></span><br><span class="line">    <span class="keyword">return</span> [superArray <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return YES;表示一旦滑动就实时调用上面这个layoutAttributesForElementsInRect:方法</span></span><br><span class="line">- (<span class="built_in">BOOL</span>) shouldInvalidateLayoutForBoundsChange:(<span class="built_in">CGRect</span>)newBound &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UICollectionView区头停留 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】获取设备信息</title>
      <link href="/2017/07/07/ios-device-info/"/>
      <url>/2017/07/07/ios-device-info/</url>
      
        <content type="html"><![CDATA[<p>在项目中经常会遇到要向服务端提交设备相关信息的需求(设备型号、版本号、DeviceToken等等)，于是把当前用到的相关函数整理成一个工具类和大家分享</p><a id="more"></a><p>欢迎补充~~<br><a href="https://github.com/idbeny/YBDeviceManager.git" target="_blank" rel="noopener">https://github.com/idbeny/YBDeviceManager.git</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  YBDeviceManager.h</span></span><br><span class="line"><span class="comment">//  SHARE</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by IDBENY on 2017/6/6.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017年 Personal:idbeny.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mac</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sysctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if_dl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;sys/sockio.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ifaddrs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mount.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Security/Security.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/mach.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//广告</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;AdSupport/AdSupport.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> : <span class="built_in">NSUInteger</span> &#123;</span><br><span class="line">    MemoryTypeTotal = <span class="number">0</span>,<span class="comment">//总的</span></span><br><span class="line">    MemoryTypeFree,     <span class="comment">//剩余</span></span><br><span class="line">    MemoryTypeUsed,     <span class="comment">//已用</span></span><br><span class="line">    MemoryTypeActive,   <span class="comment">//活跃</span></span><br><span class="line">    MemoryTypeInactive, <span class="comment">//不活跃</span></span><br><span class="line">    MemoryTypeWired,    <span class="comment">//存放内核和数据结构</span></span><br><span class="line">    MemoryTypePurgeable  <span class="comment">//可释放的</span></span><br><span class="line">&#125; MemoryType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> iOS7AndLater()&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">7.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> iOS8AndLater()&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">8.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> iOS9AndLater()&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">9.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> iOS10AndLater()&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">10.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> iOS11AndLater()&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">11.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YBDeviceManager</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)defaultManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取UUID</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return UUID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceUUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 创建UUID</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return UUID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)createNewUUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取DeviceToken</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return DeviceToken</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceToken;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取当前设备Model</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return iPhone/iPad/iPod touch/...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)deviceModel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取当前设备名称</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return iPhone 6 Plus/iPhone SE/iPad Mini/...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取广告标识符</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return IDFA</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIDFA;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取设备IP地址</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return deviceIP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceIPAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取WiFi地址</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return WiFiIP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIPAddressForWiFi;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取移动网络IP</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return mobileNetworkIP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIPAddressForMobileNetwork;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取MAC地址</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return MAC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getMACAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 系统版本</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return e.g 7.0/8.3/..</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)systemVersion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 当前APP版本</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return e.g 3.0.0/3.0.1/...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)appVersion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取区域标志符（非语言标志）</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return e.g en_GB...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)localeIdentifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 判断设备是否为iPad</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return NO:iPhone/TV/CarPlay YES:iPad</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isiPad;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 是否为视网膜屏幕</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return YES/NO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isRetina;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 判断系统版本</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return YES/NO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS7AndLater;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS8AndLater;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS9AndLater;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS10AndLater;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS11AndLater;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 判断相机是否可用(前置)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return YES/NO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isFrontCameraAvailable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 判断相机是否可用(后置)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return YES/NO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isRearCameraAvailable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 电量</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return battery</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)batteryLevel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 系统上次启动时间</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return NSDate*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSDate</span> *)getSystemUptime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取CPU总数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return CPU数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)getCPUCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> CPU使用总比例</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return CPU usage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)getCPUUsage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 每个CPU使用比例</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return CPU usage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)getPerCPUUsage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取总磁盘空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return total disk space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getTotalDiskSpace;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_totalDiskSpace;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取剩余磁盘空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return free disk space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getFreeDiskSpace;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_freeDiskSpace;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取已使用磁盘空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return used disk space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getUsedDiskSpace;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取磁盘设备号</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return NSNumber*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)diskNumber;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取指定目录大小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param dir 文件地址</span></span><br><span class="line"><span class="comment"> @return 文件夹大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)sizeOfDirectory:(<span class="built_in">NSString</span> *)dir;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 大小转换</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param size bit</span></span><br><span class="line"><span class="comment"> @return 转换结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)convertFloatSizeToString:(<span class="keyword">float</span>)size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取系统总内存空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return total memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getTotalMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_totalMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取系统活跃内存空间</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return active memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getActiveMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_activeMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取系统不活跃内存空间</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return inactive memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getInactiveMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_inactiveMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取系统空闲的内存空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return free memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getFreeMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_freeMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 用户可使用内存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return free memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)c_userMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取系统已使用的内存空间</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return used memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getUsedMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_usedMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取用来存放内核和数据结构的内存</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return wired memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getWiredMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_wireMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 可释放的内存空间：内存吃紧自动释放</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return purgeable memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (int64_t)getPurgeableMemory;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_purgeableMemory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> CPU使用频率</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return frequency</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)cpuFrequency;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> CPU总线频率</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return frequency</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)busFrequency;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 最大Socket缓存区大小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return size</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">float</span>)maxSocketBufferSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  YBDeviceManager.m</span></span><br><span class="line"><span class="comment">//  SHARE</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by IDBENY on 2017/6/6.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017年 Personal:idbeny.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"YBDeviceManager.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YBDeviceManager</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)defaultManager &#123;</span><br><span class="line">    <span class="keyword">static</span> YBDeviceManager *defaultManager = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        defaultManager = [[YBDeviceManager alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> defaultManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取设备UUID ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceUUID &#123;</span><br><span class="line">    <span class="built_in">CFUUIDRef</span> new_uuid = <span class="built_in">CFUUIDCreate</span>(<span class="literal">nil</span>);</span><br><span class="line">    <span class="built_in">CFStringRef</span> uuidString = <span class="built_in">CFUUIDCreateString</span>(<span class="literal">nil</span>, new_uuid);</span><br><span class="line">    <span class="built_in">NSString</span> * result = (<span class="built_in">NSString</span> *)<span class="built_in">CFBridgingRelease</span>(<span class="built_in">CFStringCreateCopy</span>( <span class="literal">NULL</span>, uuidString));</span><br><span class="line">    <span class="built_in">CFRelease</span>(new_uuid);</span><br><span class="line">    <span class="built_in">CFRelease</span>(uuidString);</span><br><span class="line">    <span class="built_in">NSString</span> *UUID  = [[result description] stringByReplacingOccurrencesOfString:<span class="string">@"-"</span> withString:<span class="string">@""</span>];</span><br><span class="line">    <span class="keyword">return</span> UUID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 创建新的UUID ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)createNewUUID &#123;</span><br><span class="line">    <span class="built_in">CFUUIDRef</span> theUUID = <span class="built_in">CFUUIDCreate</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">CFStringRef</span> string = <span class="built_in">CFUUIDCreateString</span>(<span class="literal">NULL</span>, theUUID);</span><br><span class="line">    <span class="built_in">CFRelease</span>(theUUID);</span><br><span class="line">    <span class="keyword">return</span> (__bridge <span class="built_in">NSString</span> *)string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取DeviceToken ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceToken &#123;</span><br><span class="line">    <span class="built_in">NSString</span>  *token = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] objectForKey:<span class="string">@"deviceToken"</span>];</span><br><span class="line">    <span class="keyword">return</span> token.length &gt; <span class="number">0</span> ? token : <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前设备的model</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)deviceModel &#123;</span><br><span class="line">    <span class="keyword">struct</span> utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    <span class="built_in">NSString</span> *deviceModel = [<span class="built_in">NSString</span> stringWithCString:systemInfo.machine encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">return</span> deviceModel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取当前设备的名称 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceName &#123;</span><br><span class="line">    <span class="keyword">struct</span> utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    <span class="built_in">NSString</span> *deviceString = [<span class="built_in">NSString</span> stringWithCString:systemInfo.machine encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone3,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 4"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone3,2"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 4"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone3,3"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 4"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone4,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 4S"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone5,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone5,2"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5 (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone5,3"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5c (GSM)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone5,4"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5c (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone6,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5s (GSM)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone6,2"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 5s (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone7,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 6 Plus"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone7,2"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 6"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone8,1"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 6s"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone8,2"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone 6s Plus"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone8,4"</span>])    <span class="keyword">return</span> <span class="string">@"iPhone SE"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone9,1"</span>])    <span class="keyword">return</span> <span class="string">@"国行、日版、港行iPhone 7"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone9,2"</span>])    <span class="keyword">return</span> <span class="string">@"港行、国行iPhone 7 Plus"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone9,3"</span>])    <span class="keyword">return</span> <span class="string">@"美版、台版iPhone 7"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPhone9,4"</span>])    <span class="keyword">return</span> <span class="string">@"美版、台版iPhone 7 Plus"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPod1,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPod Touch 1G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPod2,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPod Touch 2G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPod3,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPod Touch 3G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPod4,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPod Touch 4G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPod5,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPod Touch (5 Gen)"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad1,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPad"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad1,2"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 3G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 2 (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,2"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,3"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 2 (CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,4"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,5"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,6"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad2,7"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 3 (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,2"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 3 (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,3"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,4"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 4 (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,5"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 4"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad3,6"</span>])      <span class="keyword">return</span> <span class="string">@"iPad 4 (GSM+CDMA)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Air (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,2"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Air (Cellular)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,4"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 2 (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,5"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 2 (Cellular)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,6"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,7"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,8"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad4,9"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad5,1"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 4 (WiFi)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad5,2"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Mini 4 (LTE)"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad5,3"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Air 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad5,4"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Air 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad6,3"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Pro 9.7"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad6,4"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Pro 9.7"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad6,7"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Pro 12.9"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"iPad6,8"</span>])      <span class="keyword">return</span> <span class="string">@"iPad Pro 12.9"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"AppleTV2,1"</span>])      <span class="keyword">return</span> <span class="string">@"Apple TV 2"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"AppleTV3,1"</span>])      <span class="keyword">return</span> <span class="string">@"Apple TV 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"AppleTV3,2"</span>])      <span class="keyword">return</span> <span class="string">@"Apple TV 3"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"AppleTV5,3"</span>])      <span class="keyword">return</span> <span class="string">@"Apple TV 4"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"i386"</span>])         <span class="keyword">return</span> <span class="string">@"i386Simulator"</span>;</span><br><span class="line">    <span class="keyword">if</span> ([deviceString isEqualToString:<span class="string">@"x86_64"</span>])       <span class="keyword">return</span> <span class="string">@"x86_64Simulator"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> deviceString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取广告标识符 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIDFA &#123;</span><br><span class="line">    <span class="keyword">return</span> [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取设备IP地址 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getDeviceIPAddress &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sockfd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *ips = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> BUFFERSIZE = <span class="number">4096</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> ifconf ifc;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> buffer[BUFFERSIZE], *ptr, lastname[IFNAMSIZ], *cptr;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> ifreq *ifr, ifrcopy;</span><br><span class="line">    </span><br><span class="line">    ifc.ifc_len = BUFFERSIZE;</span><br><span class="line">    ifc.ifc_buf = buffer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ioctl(sockfd, SIOCGIFCONF, &amp;ifc) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (ptr = buffer; ptr &lt; buffer + ifc.ifc_len; )&#123;</span><br><span class="line">            </span><br><span class="line">            ifr = (<span class="keyword">struct</span> ifreq *)ptr;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (ifr-&gt;ifr_addr.sa_len &gt; len) &#123;</span><br><span class="line">                len = ifr-&gt;ifr_addr.sa_len;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ptr += <span class="keyword">sizeof</span>(ifr-&gt;ifr_name) + len;</span><br><span class="line">            <span class="keyword">if</span> (ifr-&gt;ifr_addr.sa_family != AF_INET) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((cptr = (<span class="keyword">char</span> *)strchr(ifr-&gt;ifr_name, <span class="string">':'</span>)) != <span class="literal">NULL</span>) *cptr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (strncmp(lastname, ifr-&gt;ifr_name, IFNAMSIZ) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            memcpy(lastname, ifr-&gt;ifr_name, IFNAMSIZ);</span><br><span class="line">            ifrcopy = *ifr;</span><br><span class="line">            ioctl(sockfd, SIOCGIFFLAGS, &amp;ifrcopy);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> ((ifrcopy.ifr_flags &amp; IFF_UP) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSString</span> *ip = [<span class="built_in">NSString</span>  stringWithFormat:<span class="string">@"%s"</span>, inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)&amp;ifr-&gt;ifr_addr)-&gt;sin_addr)];</span><br><span class="line">            [ips addObject:ip];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="built_in">NSString</span> *deviceIP = <span class="string">@""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; ips.count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ips.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            deviceIP = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,ips.lastObject];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deviceIP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取wifi地址 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIPAddressForWiFi &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ipAddressWithIfaName:<span class="string">@"en0"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取移动网络地址 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getIPAddressForMobileNetwork&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ipAddressWithIfaName:<span class="string">@"pdp_ip0"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)ipAddressWithIfaName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *address = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">struct</span> ifaddrs *addrs = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (getifaddrs(&amp;addrs) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">struct</span> ifaddrs *addr = addrs;</span><br><span class="line">        <span class="keyword">while</span> (addr) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([[<span class="built_in">NSString</span> stringWithUTF8String:addr-&gt;ifa_name] isEqualToString:name]) &#123;</span><br><span class="line">                sa_family_t family = addr-&gt;ifa_addr-&gt;sa_family;</span><br><span class="line">                <span class="keyword">switch</span> (family) &#123;</span><br><span class="line">                    <span class="keyword">case</span> AF_INET: &#123; <span class="comment">// IPv4</span></span><br><span class="line">                        <span class="keyword">char</span> str[INET_ADDRSTRLEN] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                        inet_ntop(family, &amp;(((<span class="keyword">struct</span> sockaddr_in *)addr-&gt;ifa_addr)-&gt;sin_addr), str, <span class="keyword">sizeof</span>(str));</span><br><span class="line">                        <span class="keyword">if</span> (strlen(str) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            address = [<span class="built_in">NSString</span> stringWithUTF8String:str];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">break</span>;</span><br><span class="line">                        </span><br><span class="line">                    <span class="keyword">case</span> AF_INET6: &#123; <span class="comment">// IPv6</span></span><br><span class="line">                        <span class="keyword">char</span> str[INET6_ADDRSTRLEN] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                        inet_ntop(family, &amp;(((<span class="keyword">struct</span> sockaddr_in6 *)addr-&gt;ifa_addr)-&gt;sin6_addr), str, <span class="keyword">sizeof</span>(str));</span><br><span class="line">                        <span class="keyword">if</span> (strlen(str) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            address = [<span class="built_in">NSString</span> stringWithUTF8String:str];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                        </span><br><span class="line">                    <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (address) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            addr = addr-&gt;ifa_next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    freeifaddrs(addrs);</span><br><span class="line">    <span class="keyword">return</span> address ? address : <span class="string">@"该设备不存在该ip地址"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 获取MAC地址(为了保护用户隐私，每次都不一样) ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getMACAddress &#123;</span><br><span class="line">    <span class="keyword">int</span>                    mib[<span class="number">6</span>];</span><br><span class="line">    size_t                len;</span><br><span class="line">    <span class="keyword">char</span>                *buf;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>        *ptr;</span><br><span class="line">    <span class="keyword">struct</span> if_msghdr    *ifm;</span><br><span class="line">    <span class="keyword">struct</span> sockaddr_dl    *sdl;</span><br><span class="line">    </span><br><span class="line">    mib[<span class="number">0</span>] = <span class="built_in">CTL_NET</span>;</span><br><span class="line">    mib[<span class="number">1</span>] = AF_ROUTE;</span><br><span class="line">    mib[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    mib[<span class="number">3</span>] = AF_LINK;</span><br><span class="line">    mib[<span class="number">4</span>] = NET_RT_IFLIST;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((mib[<span class="number">5</span>] = if_nametoindex(<span class="string">"en0"</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        printf(<span class="string">"Error: if_nametoindex error/n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (sysctl(mib, <span class="number">6</span>, <span class="literal">NULL</span>, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printf(<span class="string">"Error: sysctl, take 1/n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((buf = malloc(len)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        printf(<span class="string">"Could not allocate memory. error!/n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (sysctl(mib, <span class="number">6</span>, buf, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printf(<span class="string">"Error: sysctl, take 2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ifm = (<span class="keyword">struct</span> if_msghdr *)buf;</span><br><span class="line">    sdl = (<span class="keyword">struct</span> sockaddr_dl *)(ifm + <span class="number">1</span>);</span><br><span class="line">    ptr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)LLADDR(sdl);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *outstring = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%02x%02x%02x%02x%02x%02x"</span>, *ptr, *(ptr+<span class="number">1</span>), *(ptr+<span class="number">2</span>), *(ptr+<span class="number">3</span>), *(ptr+<span class="number">4</span>), *(ptr+<span class="number">5</span>)];</span><br><span class="line">    free(buf);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [outstring uppercaseString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 系统版本 ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)systemVersion &#123;</span><br><span class="line">    <span class="built_in">UIDevice</span> *device=[<span class="built_in">UIDevice</span> currentDevice];</span><br><span class="line">    <span class="keyword">return</span> device.systemVersion;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== APP version ==============</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)appVersion &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *majorVersion = [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:<span class="string">@"CFBundleShortVersionString"</span>];</span><br><span class="line">    <span class="keyword">return</span> majorVersion;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电池量</span></span><br><span class="line">- (<span class="keyword">float</span>)batteryLevel&#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">UIDevice</span> currentDevice] batteryLevel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取区域标志符（非语言标志）</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)localeIdentifier &#123;</span><br><span class="line">    <span class="built_in">NSLocale</span> *frLocale = [<span class="built_in">NSLocale</span> autoupdatingCurrentLocale];</span><br><span class="line">    <span class="keyword">return</span> frLocale.localeIdentifier;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 系统上次启动时间 ==============</span></span><br><span class="line">- (<span class="built_in">NSDate</span> *)getSystemUptime &#123;</span><br><span class="line">    <span class="built_in">NSTimeInterval</span> time = [[<span class="built_in">NSProcessInfo</span> processInfo] systemUptime];</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSDate</span> alloc] initWithTimeIntervalSinceNow:(<span class="number">0</span> - time)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 判断设备是否为iPad ==============</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isiPad&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">UI_USER_INTERFACE_IDIOM</span>() == <span class="built_in">UIUserInterfaceIdiomPad</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 判断是否为视网膜屏幕 ==============</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isRetina&#123;</span><br><span class="line">    <span class="keyword">return</span> ([<span class="built_in">UIScreen</span> mainScreen].scale &gt; <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 判断系统版本 ==============</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS7AndLater&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">7.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS8AndLater&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">8.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS9AndLater&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">9.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS10AndLater&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">10.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)iOS11AndLater&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">11.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== 判断相机是否可用 ==============</span></span><br><span class="line"><span class="comment">//判断相机是否可用(前置)</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isFrontCameraAvailable&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIImagePickerController</span> isCameraDeviceAvailable: <span class="built_in">UIImagePickerControllerCameraDeviceFront</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断相机是否可用(后置)</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isRearCameraAvailable&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIImagePickerController</span> isCameraDeviceAvailable: <span class="built_in">UIImagePickerControllerCameraDeviceRear</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== CPU ==============</span></span><br><span class="line"><span class="comment">//CPU总数</span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)getCPUCount &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSProcessInfo</span> processInfo].activeProcessorCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU使用的总比例</span></span><br><span class="line">- (<span class="keyword">float</span>)getCPUUsage &#123;</span><br><span class="line">    <span class="keyword">float</span> cpu = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSArray</span> *cpus = [<span class="keyword">self</span> getPerCPUUsage];</span><br><span class="line">    <span class="keyword">if</span> (cpus.count == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSNumber</span> *n <span class="keyword">in</span> cpus) &#123;</span><br><span class="line">        cpu += n.floatValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cpu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每个CPU使用比例</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)getPerCPUUsage &#123;</span><br><span class="line">    processor_info_array_t _cpuInfo, _prevCPUInfo = <span class="literal">nil</span>;</span><br><span class="line">    mach_msg_type_number_t _numCPUInfo, _numPrevCPUInfo = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> _numCPUs;</span><br><span class="line">    <span class="built_in">NSLock</span> *_cpuUsageLock;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> _mib[<span class="number">2</span>U] = &#123; <span class="built_in">CTL_HW</span>, HW_NCPU &#125;;</span><br><span class="line">    size_t _sizeOfNumCPUs = <span class="keyword">sizeof</span>(_numCPUs);</span><br><span class="line">    <span class="keyword">int</span> _status = sysctl(_mib, <span class="number">2</span>U, &amp;_numCPUs, &amp;_sizeOfNumCPUs, <span class="literal">NULL</span>, <span class="number">0</span>U);</span><br><span class="line">    <span class="keyword">if</span> (_status)</span><br><span class="line">        _numCPUs = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    _cpuUsageLock = [[<span class="built_in">NSLock</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    natural_t _numCPUsU = <span class="number">0</span>U;</span><br><span class="line">    kern_return_t err = host_processor_info(mach_host_self(), PROCESSOR_CPU_LOAD_INFO, &amp;_numCPUsU, &amp;_cpuInfo, &amp;_numCPUInfo);</span><br><span class="line">    <span class="keyword">if</span> (err == KERN_SUCCESS) &#123;</span><br><span class="line">        [_cpuUsageLock lock];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSMutableArray</span> *cpus = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>U; i &lt; _numCPUs; ++i) &#123;</span><br><span class="line">            Float32 _inUse, _total;</span><br><span class="line">            <span class="keyword">if</span> (_prevCPUInfo) &#123;</span><br><span class="line">                _inUse = (</span><br><span class="line">                          (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_USER]   - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_USER])</span><br><span class="line">                          + (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_SYSTEM] - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_SYSTEM])</span><br><span class="line">                          + (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_NICE]   - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_NICE])</span><br><span class="line">                          );</span><br><span class="line">                _total = _inUse + (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_IDLE] - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_IDLE]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _inUse = _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_USER] + _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_SYSTEM] + _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_NICE];</span><br><span class="line">                _total = _inUse + _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_IDLE];</span><br><span class="line">            &#125;</span><br><span class="line">            [cpus addObject:@(_inUse / _total)];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [_cpuUsageLock unlock];</span><br><span class="line">        <span class="keyword">if</span> (_prevCPUInfo) &#123;</span><br><span class="line">            size_t prevCpuInfoSize = <span class="keyword">sizeof</span>(integer_t) * _numPrevCPUInfo;</span><br><span class="line">            vm_deallocate(mach_task_self(), (vm_address_t)_prevCPUInfo, prevCpuInfoSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cpus;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== Disk ==============</span></span><br><span class="line"><span class="comment">//总磁盘空间</span></span><br><span class="line">- (int64_t)getTotalDiskSpace &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getSpaceForKey:<span class="built_in">NSFileSystemSize</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_totalDiskSpace &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"~/Documents"</span>;</span><br><span class="line">    </span><br><span class="line">    uint64_t size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">struct</span> statfs diskInfo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(statfs([[str stringByExpandingTildeInPath] fileSystemRepresentation], &amp;diskInfo) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//每个block里包含的字节数</span></span><br><span class="line">        uint64_t blocksize = diskInfo.f_bsize;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//总的字节数，f_blocks为block的数目</span></span><br><span class="line">        uint64_t totalsize = blocksize * diskInfo.f_blocks;</span><br><span class="line">        size = totalsize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剩余磁盘空间</span></span><br><span class="line">- (int64_t)getFreeDiskSpace &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getSpaceForKey:<span class="built_in">NSFileSystemFreeSize</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_freeDiskSpace &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"~/Documents"</span>;</span><br><span class="line">    </span><br><span class="line">    uint64_t size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">struct</span> statfs diskInfo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(statfs([[str stringByExpandingTildeInPath] fileSystemRepresentation], &amp;diskInfo) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//每个block里包含的字节数</span></span><br><span class="line">        uint64_t blocksize = diskInfo.f_bsize;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//可用空间大小</span></span><br><span class="line">        uint64_t availableDisk = diskInfo.f_bavail * blocksize;</span><br><span class="line">        </span><br><span class="line">        size = availableDisk;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//已用磁盘空间</span></span><br><span class="line">- (int64_t)getUsedDiskSpace &#123;</span><br><span class="line">    int64_t totalDisk = [<span class="keyword">self</span> getTotalDiskSpace];</span><br><span class="line">    int64_t freeDisk = [<span class="keyword">self</span> getFreeDiskSpace];</span><br><span class="line">    <span class="keyword">if</span> (totalDisk &lt; <span class="number">0</span> || freeDisk &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    int64_t usedDisk = totalDisk - freeDisk;</span><br><span class="line">    <span class="keyword">if</span> (usedDisk &lt; <span class="number">0</span>) usedDisk = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> usedDisk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (int64_t)ios_getSpaceForKey:(<span class="keyword">id</span>)key &#123;</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *attrs = [[<span class="built_in">NSFileManager</span> defaultManager] attributesOfFileSystemForPath:<span class="built_in">NSHomeDirectory</span>() error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    int64_t space =  [[attrs objectForKey:key] longLongValue];</span><br><span class="line">    <span class="keyword">if</span> (space &lt; <span class="number">0</span>) space = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> space;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//磁盘号</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)diskNumber &#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *fattributes = [[<span class="built_in">NSFileManager</span> defaultManager] attributesOfFileSystemForPath:<span class="built_in">NSHomeDirectory</span>() error:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [fattributes objectForKey:<span class="built_in">NSFileSystemNumber</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目录下所有文件大小</span></span><br><span class="line">- (int64_t)sizeOfDirectory:(<span class="built_in">NSString</span> *)dir &#123;</span><br><span class="line">    <span class="built_in">NSDirectoryEnumerator</span> *direnum = [[<span class="built_in">NSFileManager</span> defaultManager] enumeratorAtPath:dir];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *pname;</span><br><span class="line">    int64_t s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pname = [direnum nextObject])&#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *currentdict=[direnum fileAttributes];</span><br><span class="line">        <span class="built_in">NSString</span> *filesize=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,[currentdict objectForKey:<span class="built_in">NSFileSize</span>]];</span><br><span class="line">        <span class="built_in">NSString</span> *filetype=[currentdict objectForKey:<span class="built_in">NSFileType</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([filetype isEqualToString:<span class="built_in">NSFileTypeDirectory</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        s += [filesize longLongValue];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将大小转化为格式,B,L,M,G之间的转换</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)convertFloatSizeToString:(<span class="keyword">float</span>)size &#123;</span><br><span class="line">    <span class="keyword">if</span>(size &lt; <span class="number">1024</span>L) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%fB"</span>, size];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(size &lt; <span class="number">1024</span>L * <span class="number">1024</span>L) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%1.2fK"</span>, (<span class="keyword">float</span>)size / <span class="number">1024.0</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(size &lt; <span class="number">1024</span>L * <span class="number">1024</span>L * <span class="number">1024</span>L) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%1.2fM"</span>, (<span class="keyword">float</span>)size / <span class="number">1024.0</span> / <span class="number">1024.0</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%1.2fG"</span>, (<span class="keyword">float</span>)size / <span class="number">1024.0</span> / <span class="number">1024.0</span> / <span class="number">1024.0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ============== Memory ==============</span></span><br><span class="line"><span class="comment">//总内存</span></span><br><span class="line">- (int64_t)getTotalMemory &#123;</span><br><span class="line">    int64_t totalMemory = [[<span class="built_in">NSProcessInfo</span> processInfo] physicalMemory];</span><br><span class="line">    <span class="keyword">if</span> (totalMemory &lt; <span class="number">-1</span>) totalMemory = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> totalMemory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_totalMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sysInfo:HW_PHYSMEM];</span><br><span class="line">    <span class="comment">//or</span></span><br><span class="line">    <span class="comment">//return NSRealMemoryAvailable();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//活跃内存</span></span><br><span class="line">- (int64_t)getActiveMemory &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypeActive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_activeMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypeActive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不活跃内存</span></span><br><span class="line">- (int64_t)getInactiveMemory &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypeInactive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_inactiveMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypeInactive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剩余内存</span></span><br><span class="line">- (int64_t)getFreeMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypeFree];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_freeMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypeFree];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户可使用内存</span></span><br><span class="line">- (<span class="keyword">float</span>)c_userMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sysInfo:HW_USERMEM];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//已用内存</span></span><br><span class="line">- (int64_t)getUsedMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypeUsed];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_usedMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypeUsed];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放内核和数据结构的内存</span></span><br><span class="line">- (int64_t)getWiredMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypeWired];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_wireMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypeWired];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可释放的内存</span></span><br><span class="line">- (int64_t)getPurgeableMemory &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> ios_getMemoryWithType:MemoryTypePurgeable];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_purgeableMemory &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> c_memoryWithType:MemoryTypePurgeable];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (int64_t)ios_getMemoryWithType:(MemoryType)type&#123;</span><br><span class="line">    mach_port_t host_port = mach_host_self();</span><br><span class="line">    mach_msg_type_number_t host_size = <span class="keyword">sizeof</span>(vm_statistics_data_t) / <span class="keyword">sizeof</span>(integer_t);</span><br><span class="line">    vm_size_t page_size;</span><br><span class="line">    vm_statistics_data_t vm_stat;</span><br><span class="line">    kern_return_t kern;</span><br><span class="line">    </span><br><span class="line">    kern = host_page_size(host_port, &amp;page_size);</span><br><span class="line">    <span class="keyword">if</span> (kern != KERN_SUCCESS) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    kern = host_statistics(host_port, HOST_VM_INFO, (host_info_t)&amp;vm_stat, &amp;host_size);</span><br><span class="line">    <span class="keyword">if</span> (kern != KERN_SUCCESS) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    int64_t count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> MemoryTypeFree:</span><br><span class="line">            count = vm_stat.free_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> MemoryTypePurgeable:</span><br><span class="line">            count = vm_stat.purgeable_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> MemoryTypeActive:</span><br><span class="line">            count = vm_stat.active_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> MemoryTypeInactive:</span><br><span class="line">            count = vm_stat.inactive_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> MemoryTypeWired:</span><br><span class="line">            count = vm_stat.wire_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> MemoryTypeUsed:</span><br><span class="line">            count = vm_stat.active_count + vm_stat.inactive_count + vm_stat.wire_count;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count * page_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)c_memoryWithType:(MemoryType)type&#123;</span><br><span class="line">    vm_statistics_data_t vm_stat;</span><br><span class="line">    </span><br><span class="line">    mach_msg_type_number_t infoCount = HOST_VM_INFO_COUNT;</span><br><span class="line">    kern_return_t kernReturn = host_statistics(mach_host_self(), HOST_VM_INFO, (host_info_t)&amp;vm_stat, &amp;infoCount);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(kernReturn == KERN_SUCCESS)&#123;</span><br><span class="line">        int64_t count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> MemoryTypeFree:</span><br><span class="line">                count = vm_stat.free_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> MemoryTypePurgeable:</span><br><span class="line">                count = vm_stat.purgeable_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> MemoryTypeActive:</span><br><span class="line">                count = vm_stat.active_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> MemoryTypeInactive:</span><br><span class="line">                count = vm_stat.inactive_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> MemoryTypeWired:</span><br><span class="line">                count = vm_stat.wire_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> MemoryTypeUsed:</span><br><span class="line">                count = vm_stat.active_count + vm_stat.inactive_count + vm_stat.wire_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count * vm_page_size * <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU使用频率</span></span><br><span class="line">- (<span class="keyword">float</span>)cpuFrequency&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sysInfo:HW_CPU_FREQ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU总线频率</span></span><br><span class="line">- (<span class="keyword">float</span>)busFrequency&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sysInfo:HW_BUS_FREQ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最大Socket缓存区大小</span></span><br><span class="line">- (<span class="keyword">float</span>)maxSocketBufferSize&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sysInfo:KIPC_MAXSOCKBUF];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)sysInfo:(uint)typeSpecifier&#123;</span><br><span class="line">    size_t size = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> results;</span><br><span class="line">    <span class="keyword">int</span> mib[<span class="number">2</span>] = &#123;<span class="built_in">CTL_HW</span>, typeSpecifier&#125;;</span><br><span class="line">    sysctl(mib, <span class="number">2</span>, &amp;results, &amp;size, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">NSUInteger</span>) results * <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 设备信息获取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】 Build Active Architecture Only</title>
      <link href="/2017/06/23/ios-armv-config/"/>
      <url>/2017/06/23/ios-armv-config/</url>
      
        <content type="html"><![CDATA[<p>前两天运营部门提出一个问题：为什么我们的APP不支持iPhone5s以下机型(我们APP最低支持系统版本8.0)？我也是一脸懵，平时都是不支持哪个系统版本的，我还是头一次听说不支持机型的呢！直觉告诉我问题出在<code>armv64</code>、<code>armv7</code>等系统架构上面……</p><a id="more"></a><p>我在AppStore上搜索我们的APP发现兼容性描述限制了机型！！！<br><img src="http://blog.idbeny.com/eehiu.png@normal" alt=""></p><p>为什么会出现这样的问题呢？查看配置<br><img src="http://blog.idbeny.com/jfge1.png@normal" alt=""></p><ul><li>当<code>Debug</code>和<code>Release</code>属性设置为<code>YES</code>时，是为了debug的时候编译速度更快，它只编译当前连接手机的<code>architecture</code>版本;</li><li>当而设置为<code>NO</code>时，会编译所有的版本;</li><li>编译出的版本是向下兼容的，比如你设置值为<code>YES</code>，用iPhone4编译出来的是armv7版本的，iphone5也可以运行，但是armv6的设备就不能运行;</li><li>所以，一般<code>Debug</code>模式可以选择设置为<code>YES</code>，<code>Release</code>的时候要改为<code>NO</code>，以适应不同设备。</li></ul><p>目前为止Apple移动设备默认指令集：</p><ul><li>armv6：iPhone2G/3G、iPod 1G/2G</li><li>armv7：iPhone 3GS/4/4s、iPod 3G/4G、iPad 1G/2G/3G、iPad mini</li><li>armv7s：iPhone5、iPhone5c、iPad4</li><li>arm64：iPhone5s及以后、iPad Air、iPad mini2</li></ul><p><em>(Armv6、armv7、armv7s、arm64都是arm处理器的指令集，所有指令集原则上都是向下兼容的。需要注意的是iOS模拟器没有运行arm指令集，编译运行的是x86指令集，所以，只有在iOS设备上，才会执行设备对应的arm指令集。)</em></p><p>更改设置并发布版本后发现AppStore兼容性描述正常，iPhone5也可以正常下载<br><img src="http://blog.idbeny.com/4blki.png@normal" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> armv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Alcatraz】如何安装和使用Alcatraz</title>
      <link href="/2017/05/29/alcatraz-install-used/"/>
      <url>/2017/05/29/alcatraz-install-used/</url>
      
        <content type="html"><![CDATA[<p>开发过程中为了提高开发效率我们经常会使用到很多Xcode插件，有时候为了方便能不能出个像<code>cocoapods</code>那样的插件管理工具呢？</p><a id="more"></a><p>接下来就为大家介绍一下灰常牛逼的一款插件管理工具：<a href="https://link.jianshu.com/?t=https://github.com/alcatraz/Alcatraz" target="_blank" rel="noopener">Alcatraz</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>在终端输入：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/alcatraz/Alcatraz/master/Scripts/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/kwtpk.png@normal" alt=""></p></li><li><p>安装成功后重启Xcode</p></li><li><p>重新打开Xcode后提示如下：选择<code>Load Bundle</code><br><img src="http://blog.idbeny.com/586k1.png@normal" alt=""></p></li><li><p>查看是否安装成功<br>进入<code>Xcode</code>菜单导航界面选择<code>Window</code>，出现<code>Package Manager</code>即安装成功<br><img src="http://blog.idbeny.com/oytsb.png@normal" alt=""></p></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>我们可以接上一步骤直接鼠标点击打开，或快捷键：<code>command+shift+9</code></p></li><li><p>点击<code>Installed</code>以及<code>Plugins</code>可以看到之前已经安装好的插件<br><img src="http://blog.idbeny.com/fvzno.png@normal" alt=""></p></li><li><p>安装插件只需搜索相关插件即可，以<a href="https://link.jianshu.com/?t=https://github.com/ksuther/KSImageNamed-Xcode" target="_blank" rel="noopener">KSImageNamed</a>为例</p></li><li><p>点击<code>INSTALL</code>，等待安装，安装过程中<code>INSTALL</code>会变成<code>INSTALLING</code>，安装成功后显示<code>REMOVE **</code><br><img src="http://blog.idbeny.com/el25l.png@normal" alt=""></p></li><li><p>安装成功后，若想立即使用刚才下载的插件需要<strong>重启Xcode</strong>，再次打开后勾选<code>Load Bundle</code><br><img src="http://blog.idbeny.com/g6dka.png@normal" alt=""></p></li><li><p>若想移除相关插件点击<code>REMOVE</code>即可<br><img src="http://blog.idbeny.com/yl81i.png@normal" alt=""></p></li><li><p>移除所有插件，在终端输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Alcatraz/</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="移除工具"><a href="#移除工具" class="headerlink" title="移除工具"></a>移除工具</h3><p>删除Alcatraz 只需在终端输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins<span class="regexp">/Alcatraz.xcplugin</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：目前Alcatraz仅支持Xcode7.0+</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alcatraz </tag>
            
            <tag> Xcode </tag>
            
            <tag> Plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】AVQueuePlayer讲解</title>
      <link href="/2017/05/25/ios-avplayer/"/>
      <url>/2017/05/25/ios-avplayer/</url>
      
        <content type="html"><![CDATA[<p>最近在做的项目中使用<code>AVPlayer</code>进行视频播放，因为第一次做功能点这样庞大的视频播放项目，所以在带着团队<code>review</code>代码的时候发现有些地方还是值得优化的，很经典的一块就是按照集数顺序播放，当时做的是思路如下：</p><a id="more"></a><h3 id="AVPlayer"><a href="#AVPlayer" class="headerlink" title="AVPlayer"></a>AVPlayer</h3><ol><li><p>为当前<code>AVPlayerItem</code>添加播放结束的通知<code>AVPlayerItemDidPlayToEndTimeNotification</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听视频是否已经播放完毕，然后实现KVO的方法：</span></span><br><span class="line">[[NSNotificationCenter defaultCenter] <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">mediaPlayDidEnd:</span>) <span class="string">name:</span>AVPlayerItemDidPlayToEndTimeNotification <span class="string">object:</span>self.playerItem];</span><br></pre></td></tr></table></figure></li><li><p>实现监听方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//视频播放结束通知</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">mediaPlayDidEnd:</span>(NSNotification *)notification&#123;</span><br><span class="line">  <span class="comment">//在此实现切换相应集数的逻辑，例如：刷新UI、切换播放地址等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>review</code>代码的时候一不小心点到官方API里面，发现一个神奇的字眼<code>queue</code>，给我的直觉就是队列播放，仔细阅读官方文档后内心感觉这玩意简直就是为自己量身打造的，无比激动 ——<code>AVQueuePlayer</code></p><h3 id="AVQueuePlayer"><a href="#AVQueuePlayer" class="headerlink" title="AVQueuePlayer"></a>AVQueuePlayer</h3><p>下面我根据<a href="https://link.jianshu.com/?t=https%3A%2F%2Fdeveloper.apple.com%2Freference%2Favfoundation%2Favqueueplayer%3Flanguage%3Dobjc" target="_blank" rel="noopener">官方文档</a>简单进行翻译下，就不上代码了，因为文档很简单，功能很直白</p><blockquote><p>AVQueuePlayer is a subclass of <a href="https://developer.apple.com/reference/avfoundation/avplayer?language=objc" target="_blank" rel="noopener">AVPlayer</a> used to play a number of items in sequence. Using this class you can create and manage a queue of player items comprised of local or progressively downloaded file-based media, such as QuickTime movies or MP3 audio files, as well as media served using HTTP Live Streaming.</p></blockquote><p>翻译：<code>AVQueuePlayer</code>是<code>AVPlayer</code>被用来依次播放的子类。用这个类你能够创建和管理一个播放或文件下载的队列，例如<code>QuickTime</code>格式的视频或MP3音频文件，同样还支持流媒体的使用。</p><ul><li><p>创建队列对象的方法有两种，都是根据数组创建的，数组元素类型是<code>AVPlayerItem</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)queuePlayerWithItems:(<span class="built_in">NSArray</span>&lt;<span class="built_in">AVPlayerItem</span> *&gt; *)items;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">AVQueuePlayer</span> *)initWithItems:(<span class="built_in">NSArray</span>&lt;<span class="built_in">AVPlayerItem</span> *&gt; *)items;</span><br></pre></td></tr></table></figure></li><li><p>获取当前存在于队列里元素的方法</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="name">NSArray&lt;AVPlayerItem</span> *&gt; *)items<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>结束当前播放并播放下一集(将当前item从队列中移除)</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="name">void</span>)advanceToNextItem<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>判断是否能够在队列中追加播放资源（需要注意的是，不支持队列中存在多个相同的播放资源，即<code>AVPlayerItem</code>）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)canInsertItem:(<span class="built_in">AVPlayerItem</span> *)item afterItem:(<span class="keyword">nullable</span> <span class="built_in">AVPlayerItem</span> *)afterItem;</span><br></pre></td></tr></table></figure></li><li><p>在指定位置插入一条播放资源（如果元素是空的则自动会过滤掉）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)insertItem:(<span class="built_in">AVPlayerItem</span> *)item afterItem:(<span class="keyword">nullable</span> <span class="built_in">AVPlayerItem</span> *)afterItem;</span><br></pre></td></tr></table></figure></li><li><p>从队列中移除播放资源（如果移除的是当前正在播放的元素，则会自动执行advanceToNextItem播放下一集）</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(void)</span>removeItem:<span class="params">(AVPlayerItem *)</span>item;</span><br></pre></td></tr></table></figure></li><li><p>清除所有播放资源（当执行这一操作后，将会暂停播放）</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="name">void</span>)removeAllItems<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><p>以上就是<code>AVQueuePlayer</code>相关的介绍，使用它可以平滑的进行连续播放。</p><p>等以后有时间了，将会把播放器这块代码（含<code>FFmpeg</code>）整理下和大家共享(需要和公司申请)~~</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> AVPlayer </tag>
            
            <tag> 播放器 </tag>
            
            <tag> 自定义播放器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】UIImageView支持GIF动画</title>
      <link href="/2017/05/16/ios-image-gif/"/>
      <url>/2017/05/16/ios-image-gif/</url>
      
        <content type="html"><![CDATA[<p>项目中经常会用到<code>SDWebImage</code>来缓存图片，但是最新版本的<code>SDWebImage</code>似乎对<code>GIF</code>分类做出了改变，仅支持<code>NSData</code>，但把图片文件转换为<code>NSData</code>后再用<code>SDWebImage</code>提供的<code>GIF</code>方法，貌似并不管用(没有动画效果)，现在把之前的<code>GIF</code>分类贴上来，供大家参考使用：</p><a id="more"></a><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImage</span> (<span class="title">YBGIF</span>)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据图片名字创建gif图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param name 图片名字</span></span><br><span class="line"><span class="comment"> @return UIImage*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)animatedGIFNamed:(<span class="built_in">NSString</span> *)name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据NSData* 创建gif图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param data NSData *</span></span><br><span class="line"><span class="comment"> @return UIImage *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)animatedGIFWithData:(<span class="built_in">NSData</span> *)data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据大小裁剪图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param size 裁剪大小</span></span><br><span class="line"><span class="comment"> @return UIImage*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)animatedImageByScalingAndCroppingToSize:(<span class="built_in">CGSize</span>)size;</span><br><span class="line"><span class="meta">#import <span class="meta-string">"UIImage+YBGIF.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;ImageIO/ImageIO.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">YBGIF</span>)</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)animatedGIFWithData:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">   <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">CGImageSourceRef</span> source = <span class="built_in">CGImageSourceCreateWithData</span>((__bridge <span class="built_in">CFDataRef</span>)data, <span class="literal">NULL</span>);</span><br><span class="line">   </span><br><span class="line">   size_t count = <span class="built_in">CGImageSourceGetCount</span>(source);</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">UIImage</span> *animatedImage;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">       animatedImage = [[<span class="built_in">UIImage</span> alloc] initWithData:data];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">NSMutableArray</span> *images = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">NSTimeInterval</span> duration = <span class="number">0.0</span>f;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">           <span class="built_in">CGImageRef</span> image = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(source, i, <span class="literal">NULL</span>);</span><br><span class="line">           <span class="keyword">if</span> (!image) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           duration += [<span class="keyword">self</span> frameDurationAtIndex:i source:source];</span><br><span class="line">           </span><br><span class="line">           [images addObject:[<span class="built_in">UIImage</span> imageWithCGImage:image scale:[<span class="built_in">UIScreen</span> mainScreen].scale orientation:<span class="built_in">UIImageOrientationUp</span>]];</span><br><span class="line">           </span><br><span class="line">           <span class="built_in">CGImageRelease</span>(image);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (!duration) &#123;</span><br><span class="line">           duration = (<span class="number">1.0</span>f / <span class="number">10.0</span>f) * count;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       animatedImage = [<span class="built_in">UIImage</span> animatedImageWithImages:images duration:duration];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">CFRelease</span>(source);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> animatedImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">float</span>)frameDurationAtIndex:(<span class="built_in">NSUInteger</span>)index source:(<span class="built_in">CGImageSourceRef</span>)source &#123;</span><br><span class="line">   <span class="keyword">float</span> frameDuration = <span class="number">0.1</span>f;</span><br><span class="line">   <span class="built_in">CFDictionaryRef</span> cfFrameProperties = <span class="built_in">CGImageSourceCopyPropertiesAtIndex</span>(source, index, <span class="literal">nil</span>);</span><br><span class="line">   <span class="built_in">NSDictionary</span> *frameProperties = (__bridge <span class="built_in">NSDictionary</span> *)cfFrameProperties;</span><br><span class="line">   <span class="built_in">NSDictionary</span> *gifProperties = frameProperties[(<span class="built_in">NSString</span> *)kCGImagePropertyGIFDictionary];</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">NSNumber</span> *delayTimeUnclampedProp = gifProperties[(<span class="built_in">NSString</span> *)kCGImagePropertyGIFUnclampedDelayTime];</span><br><span class="line">   <span class="keyword">if</span> (delayTimeUnclampedProp) &#123;</span><br><span class="line">       frameDuration = [delayTimeUnclampedProp floatValue];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">NSNumber</span> *delayTimeProp = gifProperties[(<span class="built_in">NSString</span> *)kCGImagePropertyGIFDelayTime];</span><br><span class="line">       <span class="keyword">if</span> (delayTimeProp) &#123;</span><br><span class="line">           frameDuration = [delayTimeProp floatValue];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Many annoying ads specify a 0 duration to make an image flash as quickly as possible.</span></span><br><span class="line">   <span class="comment">// We follow Firefox's behavior and use a duration of 100 ms for any frames that specify</span></span><br><span class="line">   <span class="comment">// a duration of &lt;= 10 ms. See &lt;rdar://problem/7689300&gt; and &lt;http://webkit.org/b/36082&gt;</span></span><br><span class="line">   <span class="comment">// for more information.</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (frameDuration &lt; <span class="number">0.011</span>f) &#123;</span><br><span class="line">       frameDuration = <span class="number">0.100</span>f;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">CFRelease</span>(cfFrameProperties);</span><br><span class="line">   <span class="keyword">return</span> frameDuration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)animatedGIFNamed:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">   <span class="built_in">CGFloat</span> scale = [<span class="built_in">UIScreen</span> mainScreen].scale;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (scale &gt; <span class="number">1.0</span>f) &#123;</span><br><span class="line">       <span class="built_in">NSString</span> *retinaPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:[name stringByAppendingString:<span class="string">@"@2x"</span>] ofType:<span class="string">@"gif"</span>];</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:retinaPath];</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (data) &#123;</span><br><span class="line">           <span class="keyword">return</span> [<span class="built_in">UIImage</span> animatedGIFWithData:data];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:name ofType:<span class="string">@"gif"</span>];</span><br><span class="line">       </span><br><span class="line">       data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (data) &#123;</span><br><span class="line">           <span class="keyword">return</span> [<span class="built_in">UIImage</span> animatedGIFWithData:data];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageNamed:name];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:name ofType:<span class="string">@"gif"</span>];</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (data) &#123;</span><br><span class="line">           <span class="keyword">return</span> [<span class="built_in">UIImage</span> animatedGIFWithData:data];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageNamed:name];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIImage</span> *)animatedImageByScalingAndCroppingToSize:(<span class="built_in">CGSize</span>)size &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">CGSizeEqualToSize</span>(<span class="keyword">self</span>.size, size) || <span class="built_in">CGSizeEqualToSize</span>(size, <span class="built_in">CGSizeZero</span>)) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">CGSize</span> scaledSize = size;</span><br><span class="line">   <span class="built_in">CGPoint</span> thumbnailPoint = <span class="built_in">CGPointZero</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">CGFloat</span> widthFactor = size.width / <span class="keyword">self</span>.size.width;</span><br><span class="line">   <span class="built_in">CGFloat</span> heightFactor = size.height / <span class="keyword">self</span>.size.height;</span><br><span class="line">   <span class="built_in">CGFloat</span> scaleFactor = (widthFactor &gt; heightFactor) ? widthFactor : heightFactor;</span><br><span class="line">   scaledSize.width = <span class="keyword">self</span>.size.width * scaleFactor;</span><br><span class="line">   scaledSize.height = <span class="keyword">self</span>.size.height * scaleFactor;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (widthFactor &gt; heightFactor) &#123;</span><br><span class="line">       thumbnailPoint.y = (size.height - scaledSize.height) * <span class="number">0.5</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (widthFactor &lt; heightFactor) &#123;</span><br><span class="line">       thumbnailPoint.x = (size.width - scaledSize.width) * <span class="number">0.5</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">NSMutableArray</span> *scaledImages = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> (<span class="built_in">UIImage</span> *image <span class="keyword">in</span> <span class="keyword">self</span>.images) &#123;</span><br><span class="line">       <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(size, <span class="literal">NO</span>, <span class="number">0.0</span>);</span><br><span class="line">       </span><br><span class="line">       [image drawInRect:<span class="built_in">CGRectMake</span>(thumbnailPoint.x, thumbnailPoint.y, scaledSize.width, scaledSize.height)];</span><br><span class="line">       <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">       </span><br><span class="line">       [scaledImages addObject:newImage];</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> [<span class="built_in">UIImage</span> animatedImageWithImages:scaledImages duration:<span class="keyword">self</span>.duration];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Gif动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】微信分享描述变链接</title>
      <link href="/2017/05/15/ios-wechat-share-issues/"/>
      <url>/2017/05/15/ios-wechat-share-issues/</url>
      
        <content type="html"><![CDATA[<p>从去年开始，微信分享功能改版升级(跟随微信版本升级)，APP分享到微信的描述如果是空的，则显示的是对应的网址链接(部分微信未升级的用户不受此影响)。怎么办呢？当时我也查找了N多资料，但都未能有效的解决这个问题，最后发现用<code>Unicode</code>全角字符写一个空格就行了(普通空格都行不通)。</p><a id="more"></a><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span>判段描述是否有效，如果无效则用空格代替 *\u3000表示unicode空格编码*</span><br><span class="line"><span class="keyword">if</span> <span class="params">(<span class="attr">shareDes</span> == nil || shareDes.<span class="attr">length</span> == 0)</span> &#123;</span><br><span class="line">    shareDes = @<span class="string">"\u3000"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候分享出去的描述就不是一个链接地址了，赶快去试试看看效果~</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 微信分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】过滤html标签</title>
      <link href="/2017/05/15/ios-filter-html/"/>
      <url>/2017/05/15/ios-filter-html/</url>
      
        <content type="html"><![CDATA[<p>文字(UI或分享时的标题(描述))展示给用户的时候，可能需要过滤掉html标签，有的开发团队可能把过滤操作放在后端处理，其实放在前端做相对来说比较合理(灵活性)。</p><a id="more"></a><p>那么怎样才能高效有效的过滤这些标签呢？首先想到的就是使用<strong>正则</strong>……我们我可以写一个<code>NSString</code>的分类</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+ (NSString *)<span class="string">getNormalStringFilterHTMLString:</span>(NSString *)htmlStr&#123;</span><br><span class="line">    NSString *normalStr = htmlStr.copy;</span><br><span class="line">    <span class="comment">//判断字符串是否有效</span></span><br><span class="line">    <span class="keyword">if</span> (!normalStr || normalStr.length == <span class="number">0</span> || [normalStr <span class="string">isEqual:</span>[NSNull <span class="literal">null</span>]]) <span class="keyword">return</span> nil;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//过滤正常标签</span></span><br><span class="line">    NSRegularExpression *regularExpression=[NSRegularExpression <span class="string">regularExpressionWithPattern:</span>@<span class="string">"&lt;[^&gt;]*&gt;"</span> <span class="string">options:</span>NSRegularExpressionCaseInsensitive <span class="string">error:</span>nil];</span><br><span class="line">    normalStr = [regularExpression <span class="string">stringByReplacingMatchesInString:</span>normalStr <span class="string">options:</span>NSMatchingReportProgress <span class="string">range:</span>NSMakeRange(<span class="number">0</span>, normalStr.length) <span class="string">withTemplate:</span>@<span class="string">""</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//过滤占位符</span></span><br><span class="line">    NSRegularExpression *plExpression=[NSRegularExpression <span class="string">regularExpressionWithPattern:</span>@<span class="string">"&amp;[^;]+;"</span> <span class="string">options:</span>NSRegularExpressionCaseInsensitive <span class="string">error:</span>nil];</span><br><span class="line">    normalStr = [plExpression <span class="string">stringByReplacingMatchesInString:</span>normalStr <span class="string">options:</span>NSMatchingReportProgress <span class="string">range:</span>NSMakeRange(<span class="number">0</span>, normalStr.length) <span class="string">withTemplate:</span>@<span class="string">""</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//过滤空格</span></span><br><span class="line">    NSRegularExpression *spaceExpression=[NSRegularExpression <span class="string">regularExpressionWithPattern:</span>@<span class="string">"^\\s*|\\s*$"</span> <span class="string">options:</span>NSRegularExpressionCaseInsensitive <span class="string">error:</span>nil];</span><br><span class="line">    normalStr = [spaceExpression <span class="string">stringByReplacingMatchesInString:</span>normalStr <span class="string">options:</span>NSMatchingReportProgress <span class="string">range:</span>NSMakeRange(<span class="number">0</span>, normalStr.length) <span class="string">withTemplate:</span>@<span class="string">""</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> normalStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 过滤Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】UIWebView播放器退出继续播放</title>
      <link href="/2017/04/19/ios-webview-player-issues/"/>
      <url>/2017/04/19/ios-webview-player-issues/</url>
      
        <content type="html"><![CDATA[<p><code>UIWebView</code>加载一个带播放器的html页面的时候，当视频在播放中我们退出当前页面的时候发现还在继续播放。</p><a id="more"></a><p>解决思路网上很多说法，说的最多的一种就是退出页面的时候加载一个空页面。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">self.webView</span> loadRequest:[<span class="name">NSURLRequest</span> requestWithURL:[<span class="name">NSURL</span> URLWithString:@<span class="string">"about:blank"</span>]]]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>很多人在退出页面的时候加上这样一句代码就会发现播放器确实暂停播放了，但是如果继续回到这个页面(pop形式)发现是个空白页面。即使再次加载对应的URL能够解决当前问题，但对用户来说体验很不友好，怎么办呢？</p><p>用OC调用JS方法使播放器停止播放</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">viewWillDisappear:</span>(BOOL)animated&#123;</span><br><span class="line">    [<span class="keyword">super</span> <span class="string">viewWillDisappear:</span>animated];</span><br><span class="line"></span><br><span class="line">    NSString *videoPauseJSStr = @<span class="string">"document.documentElement.getElementsByTagName(\"video\")[0].pause()"</span>;</span><br><span class="line">    [self.mWebView <span class="string">stringByEvaluatingJavaScriptFromString:</span>videoPauseJSStr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候发现退出当前页面就暂停播放了<del>~</del></p><blockquote><p>以上方案仅适用于前端播放器使用<code>video</code>标签</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 播放器 </tag>
            
            <tag> UIWebView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】使用UISlider实现播放器断点播放</title>
      <link href="/2017/04/14/ios-slider-play/"/>
      <url>/2017/04/14/ios-slider-play/</url>
      
        <content type="html"><![CDATA[<p>实现播放器的<strong>断点播放</strong>有两个思路：</p><ul><li>自定义进度条(使用<code>UIView</code>绘制)</li><li>在<code>UISlider</code>基础上实现断点播放</li></ul><p>在这里简单介绍下用第2中思路是怎么实现的</p><a id="more"></a><h4 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h4><p>扩展一个<code>UISlider</code>子类，在子类方法中重写开始触摸代理方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> &lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br></pre></td></tr></table></figure><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event&#123;</span><br><span class="line">    <span class="built_in">CGRect</span> trackRect = [<span class="keyword">self</span> trackRectForBounds: [<span class="keyword">self</span> bounds]];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> value = [<span class="keyword">self</span> minimumValue] + ([[touches anyObject] locationInView: <span class="keyword">self</span>].x - t.origin.x - <span class="number">4.0</span>) * (([<span class="keyword">self</span> maximumValue]-[<span class="keyword">self</span> minimumValue]) / (trackRect.size.width - <span class="number">8.0</span>));</span><br><span class="line">    [<span class="keyword">self</span> setValue:value];</span><br><span class="line">    [<span class="keyword">super</span> touchesBegan:touches withEvent:event];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> current = value * [AudioPlayer shareInstance].player.duration;</span><br><span class="line">    [[AudioPlayer shareInstance].player setCurrentTime:current];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UISlider </tag>
            
            <tag> 自定义Slider </tag>
            
            <tag> 播放器Slider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】3D Touch</title>
      <link href="/2017/04/01/ios-3dtouch/"/>
      <url>/2017/04/01/ios-3dtouch/</url>
      
        <content type="html"><![CDATA[<p><code>3D Touch</code>是苹果<code>iOS9</code>推出的新特性，同样是iPhone6s和6sPlus的一个新功能。之前的苹果设备则不能实现这样的功能。它的出现使app更加便捷化，能够让用户快速的定位到目的页面。</p><a id="more"></a><p>实现<code>3D Touc</code>h功能有<strong>静态</strong>和<strong>动态</strong>两种：</p><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>只需要在<code>info.plist</code>文件进行简单的键值配置就行（我还是比较习惯使用代码，这样比较灵活且不易出错）<br><img src="http://blog.idbeny.com/myy8e.png@normal" alt=""></p><ul><li><code>UIApplicationShortcutItemType</code> 点击事件唯一标识符，用来判断点击的是哪个元素</li><li><code>UIApplicationShortcutItemTitle</code> 标题</li><li><code>UIApplicationShortcutItemSubtitle</code> 副标题，在标题的下方</li><li><code>UIApplicationShortcutItemIconType</code> 选取系统的图标类型（枚举）</li><li><code>UIApplicationShortcutItemIconFile</code> 自定义图标（35*35，单色图片），如果设置这个属性，那么<code>UIApplicationShortcutItemIconType</code>将失效</li></ul><p><em>注意：<code>UIApplicationShortcutItemType</code>和<code>UIApplicationShortcutItemTitle</code>为必填，其它为选填</em></p><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>在需要的时候进行创建，不需要的时候取消已经存在的。（微信的“收付款”功能就是动态的）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日历</span></span><br><span class="line"><span class="built_in">UIApplicationShortcutIcon</span> *dateIcon = [<span class="built_in">UIApplicationShortcutIcon</span> iconWithType:<span class="built_in">UIApplicationShortcutIconTypeDate</span>];</span><br><span class="line">    <span class="built_in">UIApplicationShortcutItem</span> *dateItem = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:<span class="string">@"date"</span> localizedTitle:<span class="string">@"日历"</span> localizedSubtitle:<span class="string">@"选个日期"</span> icon:dateIcon userInfo:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//收藏</span></span><br><span class="line"><span class="built_in">UIApplicationShortcutIcon</span> *favoriteIcon = [<span class="built_in">UIApplicationShortcutIcon</span> iconWithType:<span class="built_in">UIApplicationShortcutIconTypeFavorite</span>];</span><br><span class="line">    <span class="built_in">UIApplicationShortcutItem</span> *favoriteItem = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:<span class="string">@"favorite"</span> localizedTitle:<span class="string">@"收藏"</span> localizedSubtitle:<span class="string">@"收藏喜欢的东西"</span> icon:favoriteIcon userInfo:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//首页</span></span><br><span class="line"><span class="built_in">UIApplicationShortcutIcon</span> *homeIcon = [<span class="built_in">UIApplicationShortcutIcon</span> iconWithType:<span class="built_in">UIApplicationShortcutIconTypeHome</span>];</span><br><span class="line">    <span class="built_in">UIApplicationShortcutItem</span> *homeItem = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:<span class="string">@"home"</span> localizedTitle:<span class="string">@"首页"</span> localizedSubtitle:<span class="string">@"首页图标"</span> icon:homeIcon userInfo:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示Item</span></span><br><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].shortcutItems = @[homeItem,dateItem,favoriteItem,videoItem];</span><br></pre></td></tr></table></figure><p>用力按压app图标时，上面的元素就已经能够显示出来了。</p><h3 id="Item事件"><a href="#Item事件" class="headerlink" title="Item事件"></a>Item事件</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application performActionForShortcutItem:(<span class="built_in">UIApplicationShortcutItem</span> *)shortcutItem completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span>))completionHandler&#123;</span><br><span class="line">    <span class="comment">//判断每个元素设置的唯一标识</span></span><br><span class="line">    <span class="keyword">if</span>([shortcutItem.type isEqualToString:<span class="string">@"home"</span>]) &#123;<span class="comment">//首页</span></span><br><span class="line">        <span class="built_in">UIViewController</span> *homeVC = [<span class="built_in">UIViewController</span> new];</span><br><span class="line">        homeVC.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        [<span class="keyword">self</span> addWindowRootViewController:homeVC LabelTitle:<span class="string">@"首页"</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>([shortcutItem.type isEqualToString:<span class="string">@"favorite"</span>])&#123;<span class="comment">//收藏</span></span><br><span class="line">        <span class="built_in">UIViewController</span> *favoriteVC = [<span class="built_in">UIViewController</span> new];</span><br><span class="line">        favoriteVC.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        [<span class="keyword">self</span> addWindowRootViewController:favoriteVC LabelTitle:<span class="string">@"收藏"</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([shortcutItem.type isEqualToString:<span class="string">@"date"</span>])&#123;<span class="comment">//日历</span></span><br><span class="line">        <span class="built_in">UIViewController</span> *dateVC = [<span class="built_in">UIViewController</span> new];</span><br><span class="line">        dateVC.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        [<span class="keyword">self</span> addWindowRootViewController:dateVC LabelTitle:<span class="string">@"日期"</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//视频</span></span><br><span class="line">        <span class="built_in">UIViewController</span> *videoVC = [<span class="built_in">UIViewController</span> new];</span><br><span class="line">        videoVC.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        [<span class="keyword">self</span> addWindowRootViewController:videoVC LabelTitle:<span class="string">@"视频"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//作为window的根视图显示（实际应用的跳转可根据runtime机制进行操作，此处只作为模拟使用）</span></span><br><span class="line">- (<span class="keyword">void</span>)addWindowRootViewController:(<span class="built_in">UIViewController</span> *)rootViewController LabelTitle:(<span class="built_in">NSString</span> *)title&#123;</span><br><span class="line">    <span class="built_in">UILabel</span> *titleLabel = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">250</span>, kScreen_width, <span class="number">100</span>)];</span><br><span class="line">    titleLabel.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</span><br><span class="line">    titleLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,title];</span><br><span class="line">    titleLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">50</span>];</span><br><span class="line">    titleLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</span><br><span class="line">    [rootViewController.view addSubview:titleLabel];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = rootViewController;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>以上代码我都写在AppDelegate.m文件中，仅供参考和理解。</em></p><blockquote><p>注意：<code>kScreen_width</code>是宏定义<code>#define kScreen_width ([UIScreen mainScreen].bounds.size.width)</code></p></blockquote><p>实际效果：<br><img src="http://blog.idbeny.com/yco31.png@normal" alt=""></p><ul><li>系统限制每个App最多显示4个Item，其它无效。</li><li>静态创建和动态创建同时存在的情况下，优先显示静态创建。</li><li><code>UIApplicationShortcutIconType</code>是系统给的一个枚举类型，里面有多种图标样式供我们选择。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 3D-Touch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】截屏、保存图片到相册</title>
      <link href="/2017/03/31/ios-image-snip/"/>
      <url>/2017/03/31/ios-image-snip/</url>
      
        <content type="html"><![CDATA[<p>为了简便我们的开发，通常会建立一个分类来处理，废话不多说，直接上代码：</p><a id="more"></a><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> : <span class="built_in">NSUInteger</span> &#123;</span><br><span class="line">    ImageRotationAngleZero = <span class="number">0</span>,<span class="comment">//逆时针旋转0°</span></span><br><span class="line">    ImageRotationAngleM_PI_2 = <span class="number">90</span>,<span class="comment">//逆时针旋转90°</span></span><br><span class="line">    ImageRotationAngleM_PI = <span class="number">180</span>,<span class="comment">//逆时针旋转180°</span></span><br><span class="line">    ImageRotationAngle3M_PI_2 = <span class="number">270</span><span class="comment">//逆时针旋转270°</span></span><br><span class="line">&#125; ImageRotationAngle;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImage</span> (<span class="title">SnipImage</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 缩放并保存图片到相册</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param imagePath 图片地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)scaleAndSaveImage:(<span class="built_in">NSString</span> *)imagePath;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 截屏并保存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)snipAndSaveImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> <span class="string">"UIImage+SnipImage.h"</span></span><br><span class="line"></span><br><span class="line">@implementation UIImage (SnipImage)</span><br><span class="line"></span><br><span class="line"><span class="comment">//截屏并裁剪保存图片</span></span><br><span class="line">+ (<span class="keyword">void</span>)snipAndSaveImage&#123;</span><br><span class="line">    CGSize imageSize = [[UIScreen mainScreen] bounds].<span class="built_in">size</span>;</span><br><span class="line">    </span><br><span class="line">    UIGraphicsBeginImageContextWithOptions(imageSize, NO, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (UIWindow *window in [[UIApplication sharedApplication] windows]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (![window respondsToSelector:@selector(screen)] || [window screen] == [UIScreen mainScreen]) &#123;</span><br><span class="line">            CGContextSaveGState(context);</span><br><span class="line">            </span><br><span class="line">            CGContextTranslateCTM(context, [window center].x, [window center].y);</span><br><span class="line">            </span><br><span class="line">            CGContextConcatCTM(context, [window transform]);</span><br><span class="line">            </span><br><span class="line">            CGContextTranslateCTM(context,</span><br><span class="line">                                  -[window bounds].<span class="built_in">size</span>.<span class="built_in">width</span> * [[window layer] anchorPoint].x,</span><br><span class="line">                                  -[window bounds].<span class="built_in">size</span>.<span class="built_in">height</span> * [[window layer] anchorPoint].y);</span><br><span class="line">            </span><br><span class="line">            [[window layer] renderInContext:context];</span><br><span class="line">            </span><br><span class="line">            CGContextRestoreGState(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIImage *snipImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    </span><br><span class="line">    UIGraphicsEndImageContext();</span><br><span class="line">    </span><br><span class="line">    UIImage *saveImage = [self scaleImage:snipImage];</span><br><span class="line">    UIImageWriteToSavedPhotosAlbum(saveImage,self, nil, nil);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据图片地址裁剪并保存图片</span></span><br><span class="line">+ (<span class="keyword">void</span>)scaleAndSaveImage:(NSString *)imagePath&#123;</span><br><span class="line">    UIImage *<span class="built_in">image</span> = [UIImage imageWithContentsOfFile:imagePath];</span><br><span class="line">    </span><br><span class="line">    UIImage *saveImage = [self scaleImage:<span class="built_in">image</span>];</span><br><span class="line">    </span><br><span class="line">    UIImageWriteToSavedPhotosAlbum(saveImage,self, nil, nil);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//裁剪图片(此处容易有坑 *所有的尺寸应该是分辨率)</span></span><br><span class="line">+ (UIImage *)scaleImage:(UIImage *)<span class="built_in">image</span>&#123;</span><br><span class="line">    CGFloat screenPX_width = [UIScreen mainScreen].bounds.<span class="built_in">size</span>.<span class="built_in">width</span>*<span class="number">2</span>;</span><br><span class="line">    CGFloat screenPX_height = [UIScreen mainScreen].bounds.<span class="built_in">size</span>.<span class="built_in">height</span>*<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//裁剪区域根据需求自己处理</span></span><br><span class="line">    CGFloat scaleImage_offset = <span class="number">10</span>;</span><br><span class="line">    CGFloat scaleImage_height = screenPX_height<span class="number">-30</span>*<span class="number">2</span>;</span><br><span class="line">    CGFloat scaleImage_width = screenPX_width * <span class="number">0.635</span>;</span><br><span class="line">    CGFloat scaleImage_x = (screenPX_width - scaleImage_width)/<span class="number">2</span>+scaleImage_offset;</span><br><span class="line">    CGFloat scaleImage_y = <span class="number">30</span>;</span><br><span class="line">    </span><br><span class="line">    UIImage *scaleImage = [UIImage imageWithCGImage:CGImageCreateWithImageInRect(<span class="built_in">image</span>.CGImage, CGRectMake(scaleImage_x, scaleImage_y, scaleImage_width, scaleImage_height))];</span><br><span class="line">    UIImage *saveImage = [self rotationImage:scaleImage angle:<span class="number">270</span>];</span><br><span class="line">    <span class="keyword">return</span> saveImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//旋转图片到指定角度</span></span><br><span class="line">+ (UIImage *)rotationImage:(UIImage *)<span class="built_in">image</span> angle:(ImageRotationAngle)angle&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> <span class="built_in">rotate</span> = <span class="number">0.0</span>;</span><br><span class="line">    CGRect <span class="built_in">rect</span>;</span><br><span class="line">    <span class="built_in">float</span> translateX = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">float</span> translateY = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">float</span> scaleX = <span class="number">1.0</span>;</span><br><span class="line">    <span class="built_in">float</span> scaleY = <span class="number">1.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (angle) &#123;</span><br><span class="line">        <span class="keyword">case</span> ImageRotationAngleZero:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">image</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> ImageRotationAngleM_PI_2:</span><br><span class="line">            <span class="built_in">rotate</span> = M_PI_2;</span><br><span class="line">            <span class="built_in">rect</span> = CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">height</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">width</span>);</span><br><span class="line">            translateX = <span class="number">0</span>;</span><br><span class="line">            translateY = -<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>;</span><br><span class="line">            scaleY = <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>/<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>;</span><br><span class="line">            scaleX = <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>/<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> ImageRotationAngleM_PI:</span><br><span class="line">            <span class="built_in">rotate</span> = M_PI;</span><br><span class="line">            <span class="built_in">rect</span> = CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">width</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">height</span>);</span><br><span class="line">            translateX = -<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>;</span><br><span class="line">            translateY = -<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> ImageRotationAngle3M_PI_2:</span><br><span class="line">            <span class="built_in">rotate</span> = <span class="number">3</span> * M_PI_2;</span><br><span class="line">            <span class="built_in">rect</span> = CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">height</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">width</span>);</span><br><span class="line">            translateX = -<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>;</span><br><span class="line">            translateY = <span class="number">0</span>;</span><br><span class="line">            scaleY = <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>/<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>;</span><br><span class="line">            scaleX = <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>/<span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIGraphicsBeginImageContext(<span class="built_in">rect</span>.<span class="built_in">size</span>);</span><br><span class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</span><br><span class="line">    CGContextTranslateCTM(context, <span class="number">0.0</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>);</span><br><span class="line">    CGContextScaleCTM(context, <span class="number">1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line">    CGContextRotateCTM(context, <span class="built_in">rotate</span>);</span><br><span class="line">    CGContextTranslateCTM(context, translateX, translateY);</span><br><span class="line">    </span><br><span class="line">    CGContextScaleCTM(context, scaleX, scaleY);</span><br><span class="line">    CGContextDrawImage(context, CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">width</span>, <span class="built_in">rect</span>.<span class="built_in">size</span>.<span class="built_in">height</span>), <span class="built_in">image</span>.CGImage);</span><br><span class="line">    </span><br><span class="line">    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 截图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Mac】Terminal(终端)命令不能用</title>
      <link href="/2017/03/11/mac-terminal-not-work/"/>
      <url>/2017/03/11/mac-terminal-not-work/</url>
      
        <content type="html"><![CDATA[<p>最近一次在用终端敲命令的时候发现命令总是不执行(只有cd命令可以正常执行)，返回命令未识别的错误<code>-bash: source: command not found</code>，相信很多朋友也会遇到类似的问题。</p><a id="more"></a><p>解决步骤：</p><ol><li><p>命令行输入下面命令（这样可以保证命令行命令暂时能够使用。这行命令执行完后不要关闭终端）</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="regexp">/usr/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/usr/X11R6/bin</span></span><br></pre></td></tr></table></figure></li><li><p>进入当前Home目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/</span><br></pre></td></tr></table></figure></li><li><p>创建<code>bash_profile</code>执行命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-class">.bash_profile</span></span><br></pre></td></tr></table></figure></li><li><p>文件内容是你之前配置过的path，把全部内容删除(将自己有用的部分备份，Terminal修复后再加到里面)，加入PATH：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="regexp">/usr/bin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/sbin</span><span class="symbol">:/usr/local/bin</span></span><br></pre></td></tr></table></figure></li></ol><p><em>保存文件并退出(不要退出Terminal)</em></p><ol start="5"><li>继续执行命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure></li></ol><p>重启Terminal即可，完毕！</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】C语言基本语法（一）</title>
      <link href="/2016/03/07/c-syntax-basic-01/"/>
      <url>/2016/03/07/c-syntax-basic-01/</url>
      
        <content type="html"><![CDATA[<p>C语言是全世界最流行的编程语言之一，再过去是几年中长期霸占语言热度排行榜前3名（TIOBE）</p><a id="more"></a><h3 id="C语言的标准"><a href="#C语言的标准" class="headerlink" title="C语言的标准"></a>C语言的标准</h3><ul><li>目前最新的标准是：<code>ISO/IEC 9899:2011</code>，简称为<code>C11</code>标准</li><li>还有部分开发人员在使用<code>ISO/IEC 9899:1999</code>，简称为<code>C99</code>标准</li></ul><h3 id="C语言的用途"><a href="#C语言的用途" class="headerlink" title="C语言的用途"></a>C语言的用途</h3><p>基本上大部分的计算机语言都是基于C语言进行扩展的，它的性能极其优越，其他编程语言无法取代</p><ul><li>操作系统（Linux、Unix等操作系统就是利用C语言编写的）</li><li>数据库开发</li><li>高性能服务器开发</li><li>嵌入式开发</li><li>游戏开发</li><li>……</li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li>记事本（txt）<ul><li>功能单一、体验差、易出错、开发效率低</li></ul></li><li>IDE（Integrated Development Environment）：集成开发环境<ul><li>智能提示、高亮识别、语法检测、开发效率高等强大功能</li><li>常见的C语言IDE：Visual Studio、Qt Creator、CLion、Dev-C++、Xcode（Mac操作系统）</li></ul></li></ul><h3 id="程序的结构"><a href="#程序的结构" class="headerlink" title="程序的结构"></a>程序的结构</h3><p>任何一个C语言程序都由一个或多个函数构成，每个函数都由自己的功能，所以以后编写的C语言代码，基本上都是写在函数中</p><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4><p>每一个函数都有自己的名称（标识符），并且每一个函数的名称都是唯一的。</p><p>大部分程序运行时都有一个入口，而这个入口就是<code>main</code>函数，C语言就是这样，如果没有main函数，程序就无法运行。</p><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>printf</code> ：将双引号中的文字显示到屏幕上</li></ul><h3 id="语法须知"><a href="#语法须知" class="headerlink" title="语法须知"></a>语法须知</h3><ul><li>C语言源代码文件的扩展名是<code>.c</code></li><li>每一条语句后面都要以分号<code>;</code>结尾</li><li>括号都是成对出现的，小括号<code>()</code>，中括号<code>[]</code>，大/花括号<code>{}</code></li><li>区分大小写</li><li>代码中的符号必须是英文符号（注释、字符、字符串等内容除外，其实所有编程语言代码中的符号都是只支持英文符号的，除了易语言）</li></ul><h3 id="计算机0和1由来"><a href="#计算机0和1由来" class="headerlink" title="计算机0和1由来"></a>计算机0和1由来</h3><p>计算机是由电路机演变而来的，电路的逻辑只有0和1两种状态，0表示低电平，1表示高电平，因此现在的电子计算机只能识别0和1。</p><ul><li>除了电子计算机、还有光子计算机、量子计算机、生物计算机、纳米计算机等高精端计算机（这些高端计算机不是只能识别0和1的）</li><li>我们平时说的计算机，就是指的电子计算机</li></ul><h3 id="计算机如何识别C语言代码"><a href="#计算机如何识别C语言代码" class="headerlink" title="计算机如何识别C语言代码"></a>计算机如何识别C语言代码</h3><p>我们编写好的代码交给计算机后，计算机是怎么识别出的？</p><p>上面提到计算机只能识别0和1，要想计算机能够正常识别代码，就需要经过以下流程</p><blockquote><p>源代码(<em>.c) -&gt; 编译(compile) -&gt; 编译文件(</em>.o) -&gt; 链接(link) -&gt; 可执行文件(*.exe)</p></blockquote><ul><li>编译：将C语言源代码文件编译成目标文件（二进制文件），由编译器完成</li><li>链接：将所有的目标文件以及所需要的库文件合并成一个可执行文件，由链接器完成</li></ul><h4 id="常见的C语言编译器（已内置链接器）"><a href="#常见的C语言编译器（已内置链接器）" class="headerlink" title="常见的C语言编译器（已内置链接器）"></a>常见的C语言编译器（已内置链接器）</h4><ul><li>MSVC：微软出品（用在Windows中）</li><li>GCC：GNU Compiler Collection缩写，GNU出品</li><li>MinGW：Minimalist GNU for windows的缩写，GNU出品</li><li>LLVM：常用在苹果开发工具中</li><li>……</li></ul><p>同一分源代码，用不同的编译器编译出来的目标文件是不一样的，主要体现在体积、格式、运行效率等</p><p>不同操作系统最后链接产生的可执行文件（应用程序）格式也是不同的</p><ul><li>Windows：PE格式（常以<code>.exe</code>作为文件扩展名）</li><li>Linux：ELF格式</li><li>Mac：Mach-O格式</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>什么是注释？</p><ul><li>注释常用来解释某段代码的具体含义、作用</li><li>注释并不会被当做正常代码进行编译</li></ul><p>注释有2中书写格式</p><ul><li>单行注释</li><li>多行注释</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入C语言基础库（这是一段单行注释）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 这是程序入口函数</span></span><br><span class="line"><span class="comment"> 函数运行后会打印一段文字</span></span><br><span class="line"><span class="comment"> （这就是多行注释）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写注释的好处：</p><ul><li>方便回忆，检查旧代码</li><li>方便程序员之间团队协作，提高开发效率</li><li>方便旧项目的交接</li></ul><h3 id="什么是BUG？"><a href="#什么是BUG？" class="headerlink" title="什么是BUG？"></a>什么是BUG？</h3><ul><li>BUG一般指的是程序漏洞、缺陷、错误，程序出现Bug后可能会导致程序无法正常运行</li><li>来源：很早之前一位计算机科学家在调试设备时出现了故障，后来发现是有只飞蛾跑进了设备内部，卡住了机器的电路，导致机器无法运行，于是后来就把程序故障成为Bug（臭虫），排除程序故障排叫做DeBug</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量的作用，可以存储程序运行过程中会变化的数据</p><h4 id="如何声明一个变量？"><a href="#如何声明一个变量？" class="headerlink" title="如何声明一个变量？"></a>如何声明一个变量？</h4><p>格式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量类型 变量名<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">year</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">month</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">day</span></span><br></pre></td></tr></table></figure><ul><li>变量类型决定了变量能够存储什么类型的数据（上面的示例：int类型决定了变量能够存储整数）</li></ul><h4 id="如何给变量赋值？"><a href="#如何给变量赋值？" class="headerlink" title="如何给变量赋值？"></a>如何给变量赋值？</h4><ul><li><p>赋值：将数据交给变量去存储</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 = 数据<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>这个等号表示赋值，会把右边的数据赋值给左边的变量</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> month = <span class="number">12</span></span><br><span class="line"><span class="built_in">int</span> day = <span class="number">30</span></span><br></pre></td></tr></table></figure></li><li><p>在变量声明完成后，直接通过变量名访问变量（不需要再带上变量类型（也不能带上变量类型））</p></li><li><p>变量可以被多次赋值，新值会覆盖旧值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">num</span> = <span class="number">20</span>;</span><br><span class="line">printf(<span class="string">"%d"</span>, <span class="built_in">num</span>); <span class="comment">// 输出：20</span></span><br></pre></td></tr></table></figure></li><li><p>变量的第一次赋值，一般叫做初始化（init）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个变量，未初始化</span></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">num</span>;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="built_in">num</span> = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 不是初始化，是赋值</span></span><br><span class="line"><span class="built_in">num</span> = <span class="number">30</span>;</span><br><span class="line">printf(<span class="string">"%d"</span>, <span class="built_in">num</span>); <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure></li><li><p>变量声明的同时也可以进行初始化（开发中大部分操作）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量num，并对变量进行初始化，变量初始值为10</span></span><br><span class="line"><span class="built_in">int</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>变量在未初始化之前，他的值是不确定的</p></li><li><p>变量在使用之前必须先进行初始化</p></li><li><p>可以同时声明多个同类型的变量</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">year</span>, <span class="built_in">month</span>, <span class="built_in">day</span> = <span class="number">30</span>;</span><br></pre></td></tr></table></figure></li><li><p>可以将一个变量的值赋给另一个变量</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">num1 = num2;</span><br><span class="line"><span class="keyword">printf</span>(<span class="string">"%d--%d"</span>, num1, num2); <span class="regexp">//</span> 输出：<span class="number">20</span>--<span class="number">20</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>变量的作用域，就是指变量的作用范围，有效使用范围</p><ul><li>从声明变量的那条语句开始，直到变量所在的大括号结束</li><li>在同一个作用域内，不允许有同名的变量</li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串由若干个字符组成的一串数据</p><ul><li><p>字符串用双引号包裹</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"Hello World"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>如果字符串中出现了变量名，是不会去访问变量的，使用字符串时，会保留原来的字符内容</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">day</span> = <span class="number">30</span>;</span><br><span class="line">printf(<span class="string">"day = %d"</span>, <span class="built_in">day</span>); // 输出：<span class="built_in">day</span> = <span class="number">30</span></span><br></pre></td></tr></table></figure></li><li><p>字符串中的<code>%d</code>，是整数的占位符，到时会用对应的整数取代占位符，生成一个新的字符串</p></li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符，由开发者自定义的一些名称（比如变量名、函数名等）</p><p>标识符的命名规则如下：</p><ul><li>不限长度</li><li>可以使用数字、下划线、英文字符</li><li>可以使用\u及\U转义记号指定的Unicode字符（C99开始）</li><li>不能以数字开头</li><li>不能使用关键字（关键字，也叫做保留字，是编程语言内部已经定义好的一些有特殊含义的符号）</li></ul><p>命名规范：</p><ul><li>小驼峰（第一个单词的首字母小写，其他单词的首字母大写），<code>myNameAndAge</code></li><li>大驼峰（所有单词的首字母大写），<code>MyNameAndAge</code></li><li>下划线连接，<code>my_name_and_age</code>，也有大写<code>MY_NAME_AND_AGE</code></li></ul><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>顾名思义，就是一个固定值。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">height</span> = <span class="number">1.88</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="keyword">word</span> = <span class="string">"a"</span>;</span><br></pre></td></tr></table></figure><p>上面的代码中，等号右边的固定值都叫做字面量。</p><h3 id="硬盘和内存"><a href="#硬盘和内存" class="headerlink" title="硬盘和内存"></a>硬盘和内存</h3><p><img src="http://blog.idbeny.com/z8l07.png@normal" alt=""></p><p><em>在CPU、硬盘、内存3者之中，对我们开发者来说，最需要关注的内存，因为内存在程序运行过程中才执行的，而程序是运行在内存中的</em></p><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><p>什么是进制？进制是一种数字的表示形式；是一种带进位的计数方法</p><p>计算机领域常见的进制有：十进制、二进制、八进制、十六进制</p><h4 id="十进制（逢十进一）"><a href="#十进制（逢十进一）" class="headerlink" title="十进制（逢十进一）"></a>十进制（逢十进一）</h4><p>由十个数字符号构成所有的数值：0、1、2、3、4、5、6、7、8、9</p><h4 id="八进制（逢八进一）"><a href="#八进制（逢八进一）" class="headerlink" title="八进制（逢八进一）"></a>八进制（逢八进一）</h4><p>由八个数字符号构成所有的数值：0、1、2、3、4、5、6、7</p><h4 id="二进制（逢二进一）"><a href="#二进制（逢二进一）" class="headerlink" title="二进制（逢二进一）"></a>二进制（逢二进一）</h4><p>由两个数字符号构成所有的数值：0、1</p><h4 id="十六进制（逢十六进一）"><a href="#十六进制（逢十六进一）" class="headerlink" title="十六进制（逢十六进一）"></a>十六进制（逢十六进一）</h4><p>由十六个数字及字母符号构成所有的数值：0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F</p><ul><li>A、B、C、D、E、F分别表示十、十一、十二、十三、十四、十五</li><li>也可以用小写字母表示：a、b、c、c、e、f</li></ul><p>同一个数可以用不同的进制来表示：比如三十三</p><ul><li>十进制：33</li><li>二进制：100001</li><li>八进制：41</li><li>十六进制：21</li></ul><h4 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h4><p>进制中有个叫“基数”（或者底数）的概念</p><ul><li>基数是指可以使用的数字符号的数目</li><li>十进制的基数是十、二进制的基数是二、八进制的基数是八、十六进制的基数是十六</li></ul><h4 id="进制转换（任意R进制-gt-十进制）"><a href="#进制转换（任意R进制-gt-十进制）" class="headerlink" title="进制转换（任意R进制 -&gt; 十进制）"></a>进制转换（任意R进制 -&gt; 十进制）</h4><p>一个R进制表示的数转为十进制：$$ k_3 k_2 k_1 k_0.s_1 s_2 s_3 $$</p><ul><li><p>公式：$$ (k_3 * R^3) + (k_2 * R^2) + (k_1 * R^1) + (k_0 * R^0) + (s_1 * R^{-1}) + (s_2 * R^{-2}) + (s_3 * R^{-3})$$</p></li><li><p>二进制 -&gt; 十进制</p><ul><li>$$(1101.011)_2 = (1 * 2^3) + (1 * 2^2) + (0 * 2^1) + (1 * 2^0) + (0 * 2^{-1}) + (1 * 2^{-2}) + (1 * 2^{-3}) = 13.375$$</li></ul></li><li><p>八进制 -&gt; 十进制</p><ul><li>$$(537.34)_8 = (5 * 8^2) + (3 * 8^1) + (7 * 8^0) + (3 * 8^{-1}) + (4 * 8^{-2}) = 351.4375$$</li></ul></li><li><p>十六进制 -&gt; 十进制</p><ul><li>$$(4DA.CB)_16 = (4 * 16^2) + (13 * 16^1) + (10 * 16^0) + (12 * 16^{-1}) + (11 * 16^{-2}) \approx 1242.79$$</li></ul></li></ul><h4 id="十进制-gt-任意R进制"><a href="#十进制-gt-任意R进制" class="headerlink" title="十进制 -&gt; 任意R进制"></a>十进制 -&gt; 任意R进制</h4><p>十进制数转换成R进制数，须将整数部分和小数部分分别转换</p><ul><li>整数转换（除R取余法）<ul><li>用十进制数的整数部分除以R、取余数作为转换后的R进制数据的整数部分最低位数字</li><li>再用所得的商除以R、取余数作为转换后的R进制数据的高一位数字</li><li>重复上面第二次的操作，一直到商为0结束</li></ul></li></ul><p>求115的二进制：$$115 = (1110011)_2$$<br><img src="http://blog.idbeny.com/jzmkq.png@normal" alt=""></p><ul><li>小数转换（乘R取整法）<ul><li>十进制数的小数部分乘以R、取乘积的整数部分作为转换后R进制数据的小数点后第一位数字</li><li>再用所得的乘积的小数部分乘以R、然后取新乘积的整数部分作为转换后的R进制小数的低一位数字</li><li>重复上面第二次的操作，一直到乘积的小数部分为0为止，或者一直到已得到要求的精度数位为止</li></ul></li></ul><p>求0.625的二进制：$$0.625 \approx (0.101)_2$$<br><img src="http://blog.idbeny.com/j6khg.png@normal" alt=""></p><ul><li>小数转换（整数退位法）<ul><li>0.321换成二进制数，保留7位<br>$$0.321 * 2^7 = 41.088$$</li><li>取整数41 $$41 = (101001)_2$$</li><li>只有6位但要求保留7位，退位，在前面补0，所以是0.0101001</li></ul></li></ul><h4 id="二进制与十六进制之间的转换"><a href="#二进制与十六进制之间的转换" class="headerlink" title="二进制与十六进制之间的转换"></a>二进制与十六进制之间的转换</h4><p>4位二进制数恰好有16种组合状态，也就是说，1位十六进制数与4位二进制数是一一对应的<br><img src="http://blog.idbeny.com/abm5i.png@normal" alt=""></p><p>计算：</p><ul><li>$$(111010110.11)<em>2 = (0001 1101 0110.1100)_2 = (1D6.C)</em>{16}$$</li><li>$$(4AF8B.E)_{16} = (0100 1010 1111 1000 1011.1110)_2 = (1001010111110001011.111)_2$$</li></ul><h4 id="二进制与八进制之间的转换"><a href="#二进制与八进制之间的转换" class="headerlink" title="二进制与八进制之间的转换"></a>二进制与八进制之间的转换</h4><p>3位二进制数恰好有8种组合状态，也就是说，1位八进制数与3位二进制数是一一对应的<br><img src="http://blog.idbeny.com/sp86v.png@normal" alt=""></p><p>计算：</p><ul><li>$$(111010110.11)_2 = (011 010 110.110)_2 = (326.6)_8$$</li><li>$$(2476.4)_8 = (010 100 111 110.100)_2 = (10100111110.1)_2$$</li></ul><h4 id="代码中的进制书写形式"><a href="#代码中的进制书写形式" class="headerlink" title="代码中的进制书写形式"></a>代码中的进制书写形式</h4><p>C语言标准规定</p><ul><li>默认是十进制，比如89，表示【八十九】</li><li>以0开头的是八进制，比如024，表示【二十】</li><li>以0x或0X开头的是十六进制，比如0x2B，表示【四十三】</li></ul><p>C语言标准并不支持二进制的书写形式</p><ul><li>但是部分编译器支持，比如GCC规定以0b或0B开头的是二进制</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">i1</span> = <span class="number">20</span>; // 十进制</span><br><span class="line">int i2 = <span class="number">024</span>; // 八进制</span><br><span class="line">int i3 = <span class="number">0x14</span>; // 十六进制</span><br><span class="line">int i4 = <span class="number">0b10100</span>; // 二进制</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d %d"</span>, <span class="built_in">i1</span>, i2, i3, i4) // 输出：<span class="number">20</span> <span class="number">20</span> <span class="number">20</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="存储单位"><a href="#存储单位" class="headerlink" title="存储单位"></a>存储单位</h3><p>字节（Byte，B）是一种基本存储单位（在计算机领域用来计量存储容量）</p><p>单位换算：<br>1字 = 2B（字的英文是word，1字等于2字节）</p><ul><li>1KB = 1024B（千字节）</li><li>1MB = 1024KB（兆字节）</li><li>1GB = 1024MB（千兆字节）</li><li>1TB = 1024GB（太字节）</li><li>1PB = 1024TB（拍字节）</li><li>1EB = 1024PB， 1ZB = 1024EB， 1YB = 1024ZB，</li><li>1BB = 1024YB， 1NB = 1024BB， 1DB = 1024NB，</li></ul><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>4GB的内存一共有多少字节？<br>4GB = 4<em>1024MB = 4</em>1024<em>1024KB = 4</em>1024<em>1024</em>1024B = 4294967296B = 2^32B</p><p>内存中的每一个字节都有自己的编号<br><img src="http://blog.idbeny.com/mdyns.png@normal" alt=""></p><ul><li>上面图示是4GB内存空间</li><li>如果把内存比作是酒店，<ul><li>那么字节就是酒店的房间，字节的编号就是房间号</li><li>相邻的2个房间，房号是连续的，那么相邻的2个字节，编号是连续的</li><li>房间是拿来住人的，存放物品的，那么字节是拿来存储数据的</li></ul></li><li>每一个字节的编号，也叫做字节的内存地址</li></ul><h4 id="变量的存储空间"><a href="#变量的存储空间" class="headerlink" title="变量的存储空间"></a>变量的存储空间</h4><p>变量是用来存储数据的，凡是数据，或多或少会占用一定的存储空间。</p><p>变量的数据是存储在硬盘还是内存中呢？</p><ul><li>内存。因为变量是用来存储程序运行过程中会变化的数据</li></ul><p>一个变量会占用多大的存储空间呢？（占用多少字节）</p><ul><li>取决于变量所存储数据的类型（也就是变量类型）</li><li>比如C语言标准规定，一个int类型的变量至少占用2个字节的内存空间</li><li>在Win64 API中，一个int类型的变量占用4个字节的内存空间</li></ul><p>在C语言中，怎么查看变量占用了多少内存空间呢？</p><h4 id="sizeof运算符"><a href="#sizeof运算符" class="headerlink" title="sizeof运算符"></a>sizeof运算符</h4><p>使用<code>sizeof</code>可以获得某一数据类型的大小（所占多少字节的内存空间）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="keyword">sizeof</span>(age)); <span class="comment">// 输出：4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="keyword">sizeof</span> age); <span class="comment">// 输出：4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 输出：4</span></span><br></pre></td></tr></table></figure><h4 id="变量的内存地址"><a href="#变量的内存地址" class="headerlink" title="变量的内存地址"></a>变量的内存地址</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;a); <span class="comment">// 输出：0x00bff578</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;b); <span class="comment">// 输出：0x00bff574</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/ksahr.png@normal" alt=""></p><ul><li>变量的内存地址：变量首字节（地址值最小的那个字节）的内存地址</li><li>越晚定义的变量，内存地址越小</li></ul><h3 id="位（Bit）"><a href="#位（Bit）" class="headerlink" title="位（Bit）"></a>位（Bit）</h3><ul><li>由于计算机只能识别0和1，所以每一个字节中的数据都是以二进制形式存储的</li><li>一个字节包含8个二进制位，位是计算机领域最小存储单位，每一个二进制存储一个0或1</li><li>1Byte = 8bit， 简写： 1B = 8b<br><img src="http://blog.idbeny.com/mp3rx.png@normal" alt=""></li></ul><h4 id="有符号数的二进制表示方法"><a href="#有符号数的二进制表示方法" class="headerlink" title="有符号数的二进制表示方法"></a>有符号数的二进制表示方法</h4><p><code>int</code>类型属于有符号整数类型</p><ul><li>可以表示正数、负数<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">-20</span>;</span><br></pre></td></tr></table></figure></li><li>有符号数的二进制有3种表示方法：源码、反码、补码</li><li>三种表示方法均有<strong>符号位</strong>和<strong>数值位</strong>两部分<ul><li>符号位：最高位作为符号位，用0表示“正”，用1表示“负”</li><li>数值位：三种表示方法各不相同</li></ul></li></ul><h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><ul><li>最高位：作为符号位，用0表示“正”，用1表示“负”</li><li>其余位：作为数值位，表示绝对值的大小（所以原码又称为带符号的绝对值）</li></ul><p><img src="http://blog.idbeny.com/zul45.png@normal" alt=""></p><p><img src="http://blog.idbeny.com/48jne.png@normal" alt=""></p><h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><ul><li>正数的反码：和原码一样</li><li>负数的反码：原码保持符号位不变，数值位按位取反（0变1，1变0），得到反码</li></ul><p><img src="http://blog.idbeny.com/bxpok.png@normal" alt=""></p><h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><ul><li>正数的补码：和原码一样</li><li>负数的补码：反码的末位加1，得到补码</li></ul><p><img src="http://blog.idbeny.com/4rvt6.png@normal" alt=""></p><p>在计算机中，数值一律用补码来表示和存储。<br>比如，下面2个变量在内存中存储的二进制数值是（假设<code>int</code>类型的变量占用4字节）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">20</span>; </span><br><span class="line"><span class="built_in">int</span> b = <span class="number">-20</span>;</span><br></pre></td></tr></table></figure><ul><li>a: 0000 0000 0000 0000 0000 0000 0001 0100</li><li>b: 1111 1111 1111 1111 1111 1111 1110 1100</li></ul><h3 id="大小端模式"><a href="#大小端模式" class="headerlink" title="大小端模式"></a>大小端模式</h3><p>大小端模式：决定了多字节数据的字节存储顺序</p><ul><li><p>大端模式：高低低高</p><ul><li>高字节放在低地址，低字节放在高地址</li></ul></li><li><p>小端模式：高高低低</p><ul><li>高字节放在高地址，低字节放在低地址</li></ul></li></ul><p><img src="http://blog.idbeny.com/wr3jx.png@normal" alt=""></p><blockquote><p>不同CPU架构的模式不一样，比如x86架构师小端模式，有些CPU架构师大端模式，目前比较常见的是小端模式。</p></blockquote><h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><p><code>char</code>类型属于字符类型</p><ul><li><p>字符用单引号</p></li><li><p>打印的占位符：<code>%c</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'k'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'9'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c"</span>, c1, c2); <span class="comment">// 输出：k 9</span></span><br></pre></td></tr></table></figure></li><li><p>一个<code>char</code>类型的变量占用1个字节的内存，所以它只能存储1个单字节字符</p></li><li><p>26个英文字母（a ~ z，A ~ Z），10个阿拉伯数字（0~9）都是单字节字符</p></li></ul><p>下面的代码有问题：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不能存储超过1个单字节字符</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'idbeny'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个中文字符至少占用2个字节</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'你'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串是双引号，字符是用单引号</span></span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">"i"</span>;</span><br></pre></td></tr></table></figure><h4 id="字符的存储细节"><a href="#字符的存储细节" class="headerlink" title="字符的存储细节"></a>字符的存储细节</h4><p>计算机中的数据都是以二进制形式存储的，字符数据也不例外。每一个字符都会被转化成对应的整数值进行存储。</p><p>在1967年，美国发布了ASCII码表，里面规定了128个单字节字符对应的整数值（ASCII码值）。</p><ul><li>数字0对应的码值是48</li><li>大写字母A对应的码值是65</li><li>小写字母a对应的码值是97</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">97</span>;</span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %p\n %p\n %p\n %p\n"</span>, &amp;i, &amp;c1, &amp;c2, &amp;c3); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出：</span></span><br><span class="line"><span class="comment"> 0x00b7EC19</span></span><br><span class="line"><span class="comment"> 0x00b7EC1A</span></span><br><span class="line"><span class="comment"> 0x00b7EC1B</span></span><br><span class="line"><span class="comment"> 0x00b7EC2C</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/27jp7.png@normal" alt=""></p><h4 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h4><p>ASCII被译为“美国信息交换标准码”，是一种标准的单字节字符编码方案。</p><p>共128个字符，码值范围：0~127（也就是0x00 ~ 0x7F）</p><ul><li><p>33个是控制字符或通信专用字符，码值范围：0~31，127</p><ul><li>控制字符：LF（换行）、DEL（删除）、BS（退格）等</li><li>通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等</li></ul></li><li><p>95个可显示字符，码值范围：32~126</p><ul><li>48 ~ 57：十个阿拉伯数字（0~9）</li><li>65 ~ 90：26个大写英文字母（A~Z）</li><li>97 ~ 122：26个小写英文字母（a~z）</li><li>其余为标点符号、运算字符等</li></ul></li></ul><p>没有必要记住所有字符码值，只需要记住常用的两个就行了：</p><ul><li>小写字母a的ASCII码值：97</li><li>小写字母的ASCII码值 = 大写字母ASCII码值 + 32</li><li>大写字母的ASCII码值 = 小写字母ASCII码值 - 32</li><li>阿拉伯数字0的ASCII码值：48</li></ul><p><strong>注意使用细节：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, c1, c2); <span class="comment">// 输出：97 65</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">97</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">65</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c\n"</span>, i1, i2); <span class="comment">// 输出：a A</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c3 + <span class="number">10</span>); <span class="comment">// 输出：75</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i3 = <span class="number">67</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, i3 + <span class="number">10</span>); <span class="comment">// 输出：M</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i4 = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> c4 = <span class="number">97</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i4, c4); <span class="comment">// 输出：97 97</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c\n"</span>, i4, c4); <span class="comment">// 输出：a a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完全可以将char类型当做整数类型来使用</span></span><br><span class="line"><span class="keyword">char</span> c5 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> c6 = c5 + <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> c7 = c5 + c6 + <span class="number">30</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, c7); <span class="comment">// 输出：70</span></span><br></pre></td></tr></table></figure><p><strong>大小写字母之间的转换</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'n'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = c1 - <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">'Q'</span>;</span><br><span class="line"><span class="keyword">char</span> c4 = c3 + <span class="number">32</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c"</span>, c2, c4); <span class="comment">// 输出：N q</span></span><br></pre></td></tr></table></figure><h4 id="数字整数、数字字符在内存中的区别"><a href="#数字整数、数字字符在内存中的区别" class="headerlink" title="数字整数、数字字符在内存中的区别"></a>数字整数、数字字符在内存中的区别</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'9'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, i, c); <span class="comment">// 输出：9 57</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/et3bn.png@normal" alt=""></p><ul><li>变量i在内存中利用4个字节存储数值9</li><li>变量c在内存中利用1个字节存储数值57</li></ul><blockquote><p>疑问：中文、日文、韩文等非英文字符是如何存储在计算机中的？<br>可以肯定的是，必然是以二进制的形式存储在计算机中的，只是每个字符对应的二进制数值取决于具体的编码方案（GBK、UTF-8、Unicode等），<br>GBK主要支持的是CJK汉字字符（C-中国、J-日本、K-朝鲜），而UTF-8支持几乎世界上所有的字符。</p></blockquote><h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3><p>转义序列，一般也叫作转义字符，是一些有特殊含义的字符<br><img src="http://blog.idbeny.com/3hvo3.png@normal" alt=""></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"我叫'idbeny'，在\"1024星球\"等你"</span>); <span class="comment">// 输出：我叫'idbeny'，在"1024星球"等你</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'\''</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'"'</span>;</span><br><span class="line">printf(<span class="string">"\n%c\t%c\\"</span>, c1, c2); <span class="comment">// 输出：'    "\</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">'\063'</span>;</span><br><span class="line">printf(<span class="string">"%d %c"</span>, c3, c3); <span class="comment">// 输出：51 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "\0115"是"\011"和"5"的组合</span></span><br><span class="line"><span class="comment">// "\011"就是水平制表符"\t"</span></span><br><span class="line">printf(<span class="string">"\0115"</span>); <span class="comment">// 输出：5</span></span><br><span class="line"></span><br><span class="line">错误写法：</span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'\X4A'</span>; <span class="comment">// 不能是大写X</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'\0x4A'</span>; <span class="comment">// 不能是0x</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'\0X4A'</span>; <span class="comment">// 不能是0X</span></span><br></pre></td></tr></table></figure><h3 id="scanf函数"><a href="#scanf函数" class="headerlink" title="scanf函数"></a>scanf函数</h3><ul><li><p><code>printf</code>函数的功能是：输出（output），将数据显示在屏幕上</p></li><li><p><code>scanf</code>函数的功能是：输入（input），读取数据（比如读取通过键盘输入的数据）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;age); <span class="comment">// 终端输入：20</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"age: %d"</span>, age); <span class="comment">// 输出：age: 20</span></span><br></pre></td></tr></table></figure></li><li><p>scanf函数开始执行后，会等待用户输入</p><ul><li>程序会卡在scanf函数，不会执行scanf函数后面的代码</li><li>当用户敲Enter键（回车键）时，表示输入完毕</li><li>程序才会开始执行scanf函数后面的代码</li></ul></li></ul><h4 id="匹配的细节"><a href="#匹配的细节" class="headerlink" title="匹配的细节"></a>匹配的细节</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"你输入的整数是: %d"</span>, i);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：30idbeny</span></span><br><span class="line"><span class="comment">  输出：你输入的整数是: 30</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：22.88</span></span><br><span class="line"><span class="comment">  输出：你输入的整数是: 22</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：a</span></span><br><span class="line"><span class="comment">  输出：你输入的整数是: 10 // 原因：变量i默认值是10</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  输入：你好1024</span></span><br><span class="line"><span class="comment">  输出：你输入的整数是: 10</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"你输入的字母是：%c\n"</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"对应ASCII码值是：%d"</span>, c);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：i</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">      你输入的字母是：i</span></span><br><span class="line"><span class="comment">      对应ASCII码值是：105</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  输入：hello</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">      你输入的字母是：h</span></span><br><span class="line"><span class="comment">      对应ASCII码值是：104</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  输入：97</span></span><br><span class="line"><span class="comment">  输出：</span></span><br><span class="line"><span class="comment">      你输入的字母是：9</span></span><br><span class="line"><span class="comment">      对应ASCII码值是：57</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>从左到右开始字符匹配，当中途匹配失败时，将结束匹配</li><li>当尝试把输入的数字赋值给字符变量时，scanf把输入的数字当成是数字字符来处理，而不是把输入的数字当成字符的ASCII码值来处理</li></ul><h4 id="scanf函数的空白字符"><a href="#scanf函数的空白字符" class="headerlink" title="scanf函数的空白字符"></a>scanf函数的空白字符</h4><p>空白字符包括：空格（’ ‘）、Tab（’\t’）、Enter（’\n’）</p><ul><li><p>如果在输入整数的开头，有一段任意长（长度≥0）连续空白字符，是不需要与格式化字符串中的字符进行匹配的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"age is %d"</span>, age);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：        30</span></span><br><span class="line"><span class="comment">  输出：age is 30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>在格式化字符串中，任意长（长度≥0）连续空白字符，能匹配输入的任意长（长度≥0）连续空白字符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"  %d"</span>, &amp;age); <span class="comment">// %d左边有空格</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"age is %d"</span>, age);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：        30</span></span><br><span class="line"><span class="comment">  输出：age is 30</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d   "</span>, &amp;age); <span class="comment">// %d右边有空格</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"age is %d"</span>, age);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入：        30</span></span><br><span class="line"><span class="comment">  输出：age is 30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】Git的基本使用</title>
      <link href="/2016/01/19/git-basic/"/>
      <url>/2016/01/19/git-basic/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Git？"><a href="#什么是Git？" class="headerlink" title="什么是Git？"></a>什么是Git？</h3><p>版本控制系统（VCS：Version Control System）</p><a id="more"></a><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul><li>分布式版本控制</li><li>多个开发人员协调工作</li><li>有效监听谁做的修改</li><li>本地及远程操作</li></ul><h3 id="下载Git："><a href="#下载Git：" class="headerlink" title="下载Git："></a>下载Git：</h3><ul><li>Mac：<a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">https://git-scm.com/download/mac</a></li><li>Windows：<a href="https://git-scm.com/downloadwin" target="_blank" rel="noopener">https://git-scm.com/downloadwin</a></li></ul><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><ul><li><code>git init</code> 初始化本地git仓库</li><li><code>git add &lt;file&gt;</code> 添加文件</li><li><code>git status</code> 查看状态</li><li><code>git commit</code> 提交</li><li><code>git push</code> 推送到仓库</li><li><code>git pull</code> 从远程仓库拉取数据</li><li><code>git clone</code> 从远程仓库拷贝数据</li></ul><h3 id="初始化-amp-提交代码"><a href="#初始化-amp-提交代码" class="headerlink" title="初始化&amp;提交代码"></a>初始化&amp;提交代码</h3><ol><li><p>创建好项目后，初始化仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure></li><li><p>全局配置用户名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">'用户名'</span></span><br></pre></td></tr></table></figure></li><li><p>全局配置邮箱</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">'邮箱地址'</span></span><br></pre></td></tr></table></figure></li><li><p>添加代码到缓存区</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> 文件名</span></span><br></pre></td></tr></table></figure><p>例：git add index.html</p></li></ol><ul><li>添加某一类文件： git add *.html</li><li>添加所有文件： git add .</li><li>如果文件添加缓存区后又修改了内容，再次git add 文件名即可</li></ul><ol start="5"><li>移除已缓存文件<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">rm</span> --cached &lt;<span class="keyword">file</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git rm –cached index.html</li></ul><ol start="6"><li>查看工作区和缓冲区文件状态<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git status</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>添加/修改/移除等内容后，一般要配合git status使用，以便及时看到每个文件的状态</li></ul><ol start="7"><li>放弃工作区文件修改（工作区和缓存区有同一个文件时）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">restore</span> &lt;<span class="keyword">file</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git restore index.html</li></ul><ol start="8"><li>提交代码到本地仓库<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git commit</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>命令输完后，在新的界面填写本次提交描述，然后保存退出即可</li><li>完整命令： git commit -m ‘提交描述’</li></ul><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><ol><li><p>创建忽略文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-class">.gitignore</span></span><br></pre></td></tr></table></figure></li><li><p>编辑.gitignore</p></li></ol><ul><li>忽略具体文件：直接把文件全名写上即可（注意路径和扩展名），例：log.txt</li><li>忽略具体文件夹：填写文件夹路径，例：/dir</li></ul><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ol><li>新建分支<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>分支名</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git branch login</li></ul><ol start="2"><li>切换分支<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout 分支名</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git checkout login</li></ul><ol start="3"><li>合并分支<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">merge</span> 待合并的分支名</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：把login分支合并到master上，先把分支切换到master上，然后开始合并git merge login</li></ul><h3 id="推送远端仓库"><a href="#推送远端仓库" class="headerlink" title="推送远端仓库"></a>推送远端仓库</h3><ol><li>添加远程仓库<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin 远端仓库地址</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>例：<a href="mailto:git@github.com">git@github.com</a>:idbeny/homework.git</li></ul><ol start="2"><li><p>连接远程仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git remote</span></span><br></pre></td></tr></table></figure></li><li><p>推送到远程仓库</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure></li></ol><ul><li>连上远程仓库后，推送只需要git push</li></ul><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">仓库地址</span></span><br></pre></td></tr></table></figure><ul><li>例：git clone <a href="mailto:git@github.com">git@github.com</a>:idbeny/homework.git</li></ul><h3 id="Git和Github区别"><a href="#Git和Github区别" class="headerlink" title="Git和Github区别"></a>Git和Github区别</h3><ul><li>Git是代码管理工具</li><li>Github是基于Git实现的代码托管平台</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
