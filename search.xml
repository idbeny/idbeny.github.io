<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Blog】Mac上搭建基于GitHub的Hexo博客</title>
      <link href="/2020/06/01/hexo-blog/"/>
      <url>/2020/06/01/hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>先前书写CSDN、简书等平台，到后来购买云虚拟主机、ECS、也都尝试搭建自己的一套Blog系统，Wordpress、自己打包上传build包等形式都已尝试过。越往后越觉得累，也觉得没有这个必要了。主要原因还是自己的服务器需要各种安全防御，否则各种病毒和蛀虫就开始肆虐了，有段时间因为工作忙，等准备写文章的时候发现，服务器已经宕机了。更有意思的是，有一次因为自己忘记续费，也没有快照，然后……你懂得……，所以后来就想着用Github托管可能会好一点。</p><a id="more"></a><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网</a>对环境配置已经描述的很清楚了，我就不搬砖了</p><h3 id="初见Hexo"><a href="#初见Hexo" class="headerlink" title="初见Hexo"></a>初见Hexo</h3><h4 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>有的文章命令是<code>$ sudo npm install -g hexo</code>，都可以安装，没有影响。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>终端cd到一个你选定的目录，执行初始化命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p><code>blog</code>是最终建立的文件夹名称。<code>cd</code>到<code>blog</code>文件夹下，安装对应的<code>node</code>包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>开启hexo服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/assets/ifmjk.png@normal" alt=""><br><em>补充：<code>hexo s</code>是<code>hexo server</code>的一种简写</em></p><p>打开<code>http://localhost:4000</code>在本地预览界面<br><img src="http://blog.idbeny.com/assets/57fka.png@normal" alt=""></p><h3 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h3><ol><li>使用<code>vim</code>或者直接用编辑器打开blog根目录下的<code>_config.yml</code>文件，修改如下配置（在文件最下方）<br><img src="http://blog.idbeny.com/assets/qg97x.png@normal" alt=""></li></ol><p><em>注意：repository是在github上已经初始化的项目地址</em></p><ol start="2"><li>在blog文件夹下生成静态页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate或者：hexo g</span><br></pre></td></tr></table></figure></li></ol><p><em>补充：<code>hexo g</code>是<code>hexo generate</code>的一种简写</em></p><ol start="3"><li>配置/部署<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li></ol><p><em>补充：<code>hexo d</code>是<code>hexo deploy</code>的一种简写</em></p><blockquote><p>注意：若执行命令报错：无法连接git或找不到git，则执行如下命令来安装<code>hexo-deployer-git</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save        </span><br></pre></td></tr></table></figure><p>再次执行<code>hexo d</code>即可</p></blockquote><ol start="4"><li>鉴权github<br><img src="http://blog.idbeny.com/assets/f0m3c.png@normal" alt=""></li></ol><h3 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h3><ol><li>在blog文件夹下，执行新建文章命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;helloworld&quot;</span><br></pre></td></tr></table></figure></li></ol><p><em>文件类型是<code>markdown</code>，文件地址在<code>/blog/source/_posts</code>目录下</em></p><ol start="2"><li><p>发布文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>以上基本上就完成了博客的搭建和生产内容的基本设施。</p></li></ol><p>补充：新建-部署文章三步走</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean&#x2F;&#x2F;清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">$ hexo g&#x2F;&#x2F;生成缓存和静态文件</span><br><span class="line">$ hexo d&#x2F;&#x2F;重新部署到服务器</span><br></pre></td></tr></table></figure><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>要想页面漂亮并规范一点，可以配置个主题。我们一般在Hexo官网中搜索喜欢的主题，我们以<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT主题</a>为例。<br><img src="http://blog.idbeny.com/assets/mxyfe.png@normal" alt=""></p><p>把主题下载到<code>blog/themes/next</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next</span><br></pre></td></tr></table></figure><p>修改<code>_config.yml</code>里的<code>theme</code>为<code>next</code><br><img src="http://blog.idbeny.com/assets/si4gm.png@normal" alt=""></p><p>主题的名称、描述等属性修改在<code>blog/themes/next/_config.yml</code>文件中，具体可参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">文档</a>。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>如果觉得github的二级域名使用不方便，我们可以通过绑定自己的一级域名来直接访问（实际上就是做了一次CDN跳转）</p><ul><li><p>在<code>/blog/themes/next/source</code>目录下新建文件名为<code>CNAME</code>的文件（注意没有后缀名），直接将自己的域名如：idbeny.com写入。</p></li><li><p>和发布文章一样，三步走即可（clean - g - d）</p></li><li><p>添加解析</p></li></ul><table><thead><tr><th align="center">记录类型</th><th align="center">主机记录</th><th align="center">解析线路</th><th align="center">记录值</th><th align="center">TTL</th></tr></thead><tbody><tr><td align="center">CNAME</td><td align="center">@</td><td align="center">默认</td><td align="center">idbeny.github.io.</td><td align="center">10分钟</td></tr></tbody></table><p><em>注意：记录值<code>idbeny.github.io.</code>结尾有一个点<code>.</code></em></p><h3 id="快速访问"><a href="#快速访问" class="headerlink" title="快速访问"></a>快速访问</h3><p>Github是国外网站，所以我们在天朝访问的时候总是有点慢，甚至有时候打不开，这时候我们就可以把文章同时部署到国内的托管平台（<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a> | <a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>等）。同时也能够保证突然某一天其中一个平台的大变动（当然，不管是哪一种，一定要在本地备份，一定要在本地备份，血的教训……）。</p><ol><li><p>首先到码云上注册并新建一个项目（步骤同<code>Github</code>），项目名称和用户个性后缀相同（方便二级域名访问博客），然后配置<code>Gitee Pages</code>服务；<br><img src="http://blog.idbeny.com/assets/jf23y.png@normal" alt=""></p></li><li><p>直接点击启动即可（需要绑定手机号，如果没有绑定，不能启动）<br><img src="http://blog.idbeny.com/assets/b0yeu.png@normal" alt=""></p></li><li><p>启动完成后，会提示已开启服务<br><img src="http://blog.idbeny.com/assets/fij4q.png@normal" alt=""></p></li></ol><ol start="4"><li><p>打开本地<code>blog</code>目录下的<code>_config.yml</code>文件，修改如下（之后的步骤和Github一致）：<br><img src="http://blog.idbeny.com/assets/nydar.png@normal" alt=""></p></li><li><p>部署三步走（<code>clean - d - g</code>）</p></li><li><p>域名解析</p></li></ol><table><thead><tr><th align="center">记录类型</th><th align="center">主机记录</th><th align="center">解析线路</th><th align="center">记录值</th><th align="center">TTL</th></tr></thead><tbody><tr><td align="center">CNAME</td><td align="center">@</td><td align="center">海外</td><td align="center">idbeny.github.io.</td><td align="center">10分钟</td></tr><tr><td align="center">CNAME</td><td align="center">@</td><td align="center">默认</td><td align="center">idbeny.gitee.io.</td><td align="center">10分钟</td></tr></tbody></table><p>如果是<code>Coding</code>平台，还需要到<code>blog/source</code>目录下新建<code>Staticfile</code>文件（名字必须是<code>Staticfile</code>），其他步骤都基本一致。</p><p>至此，<code>Blog</code>系统搭建完毕。</p><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官网</a> | <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网</a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Flutter】图片组件注意事项</title>
      <link href="/2020/03/23/flutter-widget-image-note/"/>
      <url>/2020/03/23/flutter-widget-image-note/</url>
      
        <content type="html"><![CDATA[<h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><ul><li>在<code>lib</code>同级文件夹新建<code>assets</code>资源文件夹</li><li><code>assets</code>文件夹通常包含<code>fonts</code>和<code>images</code>两个文件夹</li><li>如果有@2x或@3x图片怎么办？<ul><li>新建两个文件夹，文件名称分别为2.0x和3.0x，把对应尺寸的图片放到文件夹中，flutter会自动识别并找到对应图片的</li></ul></li><li>必须在<code>pubspec.yaml</code>配置文件中配置<code>assets</code>，如下：<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assets:</span><br><span class="line">    - assets&#x2F;images&#x2F;</span><br></pre></td></tr></table></figure></li><li>新建工程时，系统默认把assets相关配置注释掉，我们只需要把注释打开然后修改为我们需要的路径即可；</li><li>注意点：assets前面一定不要有空格，否则打包会报错；</li><li>最后点击<code>Android Studio</code>上面的<code>Packages get</code><br><img src="http://blog.idbeny.com/7gk7s.png@normal" alt=""></li></ul><p>使用图片Widget有时候让传ImageProvider类型，有时候让传一个Widget，怎么区分呢？</p><h4 id="ImageProvider"><a href="#ImageProvider" class="headerlink" title="ImageProvider"></a>ImageProvider</h4><p>NetworkImage<br>AssetImage<br>FileImage<br>…</p><h4 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h4><p>Image.network<br>Image.asset<br>…</p><ul><li>可以看出Image.*基本上都是继承自Widge</li><li>*Image基本上是ImageProvider类型</li></ul><p><strong>图片占位图（FadeInImage）</strong><br><img src="http://blog.idbeny.com/v4w8s.gif@normal" alt=""></p><ul><li>当网络图片加载完成前优先显示一张默认图片；</li><li>使用<code>FadeInImage</code>进行图片显示的时候会有一个动画过程，可以通过属性设置动画时间；</li><li><code>fadeOutDuration</code>动画时间默认300毫秒，<code>fadeInDuration</code>动画时间默认700毫秒；<br><img src="http://blog.idbeny.com/hlaf0.png@normal" alt=""></li></ul><h4 id="图片缓存"><a href="#图片缓存" class="headerlink" title="图片缓存"></a>图片缓存</h4><ul><li>参考：<a href="https://api.flutter.dev/flutter/widgets/image-class.html" target="_blank" rel="noopener">https://api.flutter.dev/flutter/widgets/image-class.html</a></li><li>flutter默认会对图片进行缓存的；</li><li>注意：图片默认最多缓存1000张，总大小100MB（可以调整）</li></ul><h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><ul><li>Icon继承自<code>StatelessWidget</code>，所以Icon是一个Widget；</li><li>Icon是字体图标（是一个矢量图，前端开发经常会用到），可以设置颜色和大小，用法和字体几乎无差别；</li><li>在创建的时候，开发工具可以帮助我们显示对应的图标样式；<br><img src="http://blog.idbeny.com/g76ew.png@normal" alt=""></li></ul><p>既然Icon是一个字体图标，那么可以用<code>Text组件</code>显示么？当然可以。</p><ul><li><p>Icons.people是一个16进制的IconData<br><img src="http://blog.idbeny.com/xynvl.png@normal" alt=""></p></li><li><p>Text组件本质也是让传入一个data，我们把<code>Icons.people</code>的十六进制转换成Unicode编码试下（0xe7fb =&gt; \ue7fb）<br><img src="http://blog.idbeny.com/kci5l.png@normal" alt=""></p></li><li><p>表明：在一个字体库、同一个编码下IconData就能使用Text显示</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Dart】Dart基本语法（二）</title>
      <link href="/2020/03/06/dart-syntax-02/"/>
      <url>/2020/03/06/dart-syntax-02/</url>
      
        <content type="html"><![CDATA[<h3 id="一、运算符"><a href="#一、运算符" class="headerlink" title="一、运算符"></a>一、运算符</h3><p>Dart中的基本运算符和其他语言无差异，但有几个运算符是其他平台没有的</p><a id="more"></a><h4 id="1-1-除法、整除、取模运算"><a href="#1-1-除法、整除、取模运算" class="headerlink" title="1.1. 除法、整除、取模运算"></a>1.1. 除法、整除、取模运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var num &#x3D; 7;</span><br><span class="line">print(num &#x2F; 3); &#x2F;&#x2F; 除法操作, 结果2.3333..</span><br><span class="line">print(num ~&#x2F; 3); &#x2F;&#x2F; 整除操作, 结果2;</span><br><span class="line">print(num % 3); &#x2F;&#x2F; 取模操作, 结果1;</span><br></pre></td></tr></table></figure><h4 id="1-2-赋值运算"><a href="#1-2-赋值运算" class="headerlink" title="1.2. ??=赋值运算"></a>1.2. ??=赋值运算</h4><ul><li>当变量有值时，使用自己原来的值。</li><li>当变量为null时，使用后面的内容进行赋值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  var name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">  name ??&#x3D; &#39;1024星球&#39;; </span><br><span class="line">  print(name); &#x2F;&#x2F; 当name初始化有值时（idbeny），结果为初始化值，当初始化为null时，取后面的值（1024星球）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-3-条件运算符"><a href="#1-3-条件运算符" class="headerlink" title="1.3. 条件运算符"></a>1.3. 条件运算符</h4><ul><li>如果expr1非null，直接使用expr1的结果。</li><li>如果expr1是null，则返回expr2的结果;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">var name &#x3D; null;</span><br><span class="line">var result &#x3D; name ?? &#39;1024星球&#39;;</span><br><span class="line">print(name);</span><br></pre></td></tr></table></figure></li></ul><p>赋值运算符和条件运算符很容易混淆；</p><ul><li><code>??=</code>类似于三目运算符；</li><li><code>??</code>就是一个条件判断</li></ul><h4 id="1-4-级联语法（-）"><a href="#1-4-级联语法（-）" class="headerlink" title="1.4. 级联语法（..）"></a>1.4. 级联语法（..）</h4><p>场景：不需要新创建对象，直接连续操作对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  void run() &#123;</span><br><span class="line">    print(&quot;$name is running&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  &#x2F;&#x2F; 常规操作</span><br><span class="line">  final p1 &#x3D; Person();</span><br><span class="line">  p1.name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">  p1.run();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 级联语法</span><br><span class="line">  final p2 &#x3D; Person()</span><br><span class="line">              ..name &#x3D; &quot;idbeny&quot;</span><br><span class="line">              ..run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、逻辑判断"><a href="#二、逻辑判断" class="headerlink" title="二、逻辑判断"></a>二、逻辑判断</h3><p>和其他语言用法一样，但是<code>if else</code>语句和其他平台不一样：<strong>不存在非空即真或者非0即真，必须有明确的bool类型</strong></p><h3 id="三、类和对象"><a href="#三、类和对象" class="headerlink" title="三、类和对象"></a>三、类和对象</h3><h4 id="3-1-定义类和对象"><a href="#3-1-定义类和对象" class="headerlink" title="3.1. 定义类和对象"></a>3.1. 定义类和对象</h4><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class 类名 &#123;</span><br><span class="line">  类型 成员名;</span><br><span class="line">  返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    方法体</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.创建对象</span><br><span class="line">&#x2F;&#x2F; var p &#x3D; new Person();</span><br><span class="line">var p &#x3D; Person();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.属性赋值</span><br><span class="line">p.name &#x3D; &#39;idbeny&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.调用方法</span><br><span class="line">p.run();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义类</span><br><span class="line">class Person &#123;</span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    print(&#39;$name在奔跑&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>在方法中使用成员变量并没有加this；</li><li>在方法中通常使用成员变量时，会省略this，但是有命名冲突时，this不能省略；</li><li>从Dart2开始，new关键字可以省略。</li></ul><h4 id="3-2-构造方法"><a href="#3-2-构造方法" class="headerlink" title="3.2. 构造方法"></a>3.2. 构造方法</h4><p>普通构造方法</p><ul><li>当通过类创建一个对象时，会调用这个类的构造方法。没有明确指定构造方法时，将默认拥有一个无参的构造方法。</li><li>当自定义构造方法时，默认的构造方法将会失效；</li><li>Dart不支持函数的重载。</li><li>参数赋值的语法糖：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person(String name, int age) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">  &#125;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">Person(this.name, this.age);</span><br></pre></td></tr></table></figure></li></ul><p>命名构造方法（解决函数重载问题）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  final String name;</span><br><span class="line">  final int age;</span><br><span class="line"></span><br><span class="line">  Person.withParams(this.name, this.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化列表</p><p>官方很多示例程序及源码大量使用了初始化列表，在创建一个构造方法时经常用到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const defaultAge &#x3D; 28;</span><br><span class="line">class Person &#123;</span><br><span class="line">  final String name;</span><br><span class="line">  final int age;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 错误写法</span><br><span class="line">  &#x2F;&#x2F; Point(this.name) &#123;</span><br><span class="line">  &#x2F;&#x2F;   age &#x3D; 28;</span><br><span class="line">  &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 正确的写法</span><br><span class="line">  Point(this.name) : age &#x3D; defaultAge;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重定向构造方法</p><p>在一个构造方法中去调用另外一个构造方法, 这个时候可以使用重定向构造方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  String name;</span><br><span class="line">  int age;</span><br><span class="line"></span><br><span class="line">  Person(this.name, this.age);</span><br><span class="line">  Person.fromName(String name) : this(name, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：冒号后面使用this调用</strong></p><p>常量构造方法</p><p>场景：相同的参数创建相同的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  var p1 &#x3D; const Person(&#39;idbeny&#39;);</span><br><span class="line">  var p2 &#x3D; const Person(&#39;idbeny&#39;);</span><br><span class="line">  print(identical(p1, p2)); &#x2F;&#x2F; true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">  final String name;</span><br><span class="line"></span><br><span class="line">  const Person(this.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法用const修饰，那么可以保证同一个参数，创建出来的对象是相同的</li><li>常量构造方法的类中，所有的成员变量必须是final修饰的.</li><li>变量用const修饰时，对象const可以省略.</li></ul><p>工厂构造方法（常量构造方法升级版）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  var p1 &#x3D; Person(&#39;idbeny&#39;);</span><br><span class="line">  var p2 &#x3D; Person(&#39;idbeny&#39;);</span><br><span class="line">  print(identical(p1, p2)); &#x2F;&#x2F; true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  static final Map&lt;String, Person&gt; _cache &#x3D; &lt;String, Person&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  factory Person(String name) &#123;</span><br><span class="line">    if (_cache.containsKey(name)) &#123;</span><br><span class="line">      return _cache[name];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      final p &#x3D; Person._internal(name);</span><br><span class="line">      _cache[name] &#x3D; p;</span><br><span class="line">      return p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person._internal(this.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-setter和getter"><a href="#3-3-setter和getter" class="headerlink" title="3.3. setter和getter"></a>3.3. setter和getter</h4><ul><li>默认情况下，Dart中类定义的属性是可以直接被外界访问的。</li><li>如果要监听类的属性变化，使用set和get</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  final p &#x3D; Person(&quot;idbeny&quot;);</span><br><span class="line">  p.setName &#x3D; &quot;1024星球&quot;;</span><br><span class="line">  print(p.getName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  String get getName &#123;</span><br><span class="line">    return name;</span><br><span class="line">  &#125;</span><br><span class="line">  set setName(String name) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person(this.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-类的继承"><a href="#3-4-类的继承" class="headerlink" title="3.4. 类的继承"></a>3.4. 类的继承</h4><ul><li>使用extends关键字，子类中使用super访问父类。</li><li>父类中的所有成员变量和方法都会被继承（构造方法除外）。</li><li>子类可以拥有自己的成员变量, 并且可以对父类的方法进行重写：</li><li>子类的构造方法在执行前，将隐含调用父类的默认构造方法（无参）</li><li>如果父类没有默认构造方法，则子类的构造方法必须在初始化列表中通过super显式调用父类的某个构造方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  var p &#x3D; new Person();</span><br><span class="line">  p.age &#x3D; 28;</span><br><span class="line">  p.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Animal &#123;</span><br><span class="line">  int age;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    print(&#39;继承在奔跑&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person extends Animal &#123;</span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  Person(String name, int age) : name&#x3D;name, super(age);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  run() &#123;</span><br><span class="line">    print(&#39;$name在奔跑&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5-抽象类"><a href="#3-5-抽象类" class="headerlink" title="3.5. 抽象类"></a>3.5. 抽象类</h4><p>父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法，我们可以定义为抽象方法。</p><ul><li>抽象方法定义：没有具体实现的方法。</li><li>抽象方法必须存在于抽象类中。</li><li>抽象类是使用abstract声明的类。</li></ul><p>下面的代码中, Shape类就是一个抽象类, 其中包含一个抽象方法.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">abstract class Shape &#123;</span><br><span class="line">  getArea();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Circle extends Shape &#123;</span><br><span class="line">  double r;</span><br><span class="line"></span><br><span class="line">  Circle(this.r);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  getArea() &#123;</span><br><span class="line">    return r * r * 3.14;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Reactangle extends Shape &#123;</span><br><span class="line">  double w;</span><br><span class="line">  double h;</span><br><span class="line"></span><br><span class="line">  Reactangle(this.w, this.h);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  getArea() &#123;</span><br><span class="line">    return w * h;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项:</p><ul><li>抽象类不能实例化；</li><li>抽象类中的抽象方法必须被子类实现，抽象类中的已经被实现方法，可以不被子类重写。</li></ul><h4 id="3-6-隐式接口"><a href="#3-6-隐式接口" class="headerlink" title="3.6. 隐式接口"></a>3.6. 隐式接口</h4><p>Dart中没有关键字来声明接口，在默认情况下，定义的每个类都相当于默认也声明了一个接口，可以由其他的类来实现(因为Dart不支持多继承)</p><ul><li>在开发中，我们通常将用于给别人实现的类声明为抽象类:</li><li>用implements实现某个类时，类中所有的方法都必须被重新实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">abstract class Runner &#123;</span><br><span class="line">  run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Flyer &#123;</span><br><span class="line">  fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SuperMan implements Runner, Flyer &#123;</span><br><span class="line">  @override</span><br><span class="line">  run() &#123;</span><br><span class="line">    print(&#39;超人在奔跑&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  fly() &#123;</span><br><span class="line">    print(&#39;超人在飞&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-Mixin混入"><a href="#3-7-Mixin混入" class="headerlink" title="3.7. Mixin混入"></a>3.7. Mixin混入</h4><p>但是某些情况下，一个类可能希望直接复用之前类的原有实现方案，怎么做呢?</p><ul><li>Dart只支持单继承，那么意味着你只能复用一个类的实现。</li><li>Dart提供了另外一种方案: Mixin混入的方式<ul><li>除了可以通过class定义类之外，也可以通过mixin关键字来定义一个类。</li><li>只是通过mixin定义的类用于被其他类混入使用，通过with关键字来进行混入。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  var superMan &#x3D; SuperMain();</span><br><span class="line">  superMan.run();</span><br><span class="line">  superMan.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mixin Runner &#123;</span><br><span class="line">  run() &#123;</span><br><span class="line">    print(&#39;在奔跑&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mixin Flyer &#123;</span><br><span class="line">  fly() &#123;</span><br><span class="line">    print(&#39;在飞翔&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; implements的方式要求必须对其中的方法进行重新实现</span><br><span class="line">&#x2F;&#x2F; class SuperMan implements Runner, Flyer &#123;&#125;</span><br><span class="line"></span><br><span class="line">class SuperMain with Runner, Flyer &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-8-类的成员和方法"><a href="#3-8-类的成员和方法" class="headerlink" title="3.8. 类的成员和方法"></a>3.8. 类的成员和方法</h4><p>用static关键字来定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  var p &#x3D; Person();</span><br><span class="line">  p.name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">  p.age &#x3D; 28;</span><br><span class="line">  p.eat();</span><br><span class="line"></span><br><span class="line">  Person.food &#x3D; &#39;米饭&#39;;</span><br><span class="line">  Person.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">  String name;</span><br><span class="line">  int age;</span><br><span class="line"></span><br><span class="line">  static String food;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    print(&#39;$name在吃饭&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static run() &#123;</span><br><span class="line">    print(&#39;奔跑&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-9-枚举类型"><a href="#3-9-枚举类型" class="headerlink" title="3.9. 枚举类型"></a>3.9. 枚举类型</h4><p>枚举在开发中也非常常见, 枚举也是一种特殊的类, 通常用于表示固定数量的常量值。</p><h5 id="3-9-1-枚举"><a href="#3-9-1-枚举" class="headerlink" title="3.9.1. 枚举"></a>3.9.1. 枚举</h5><ul><li>用enum关键字</li><li>仅支持字符串类型</li><li>枚举类型中有两个比较常见的属性:<ul><li>index: 用于表示每个枚举常量的索引, 从0开始.</li><li>values: 包含每个枚举值的List.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  print(NetworkCode.success);</span><br><span class="line">  print(NetworkCode.success.index);</span><br><span class="line">  print(NetworkCode.values);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum NetworkCode &#123;</span><br><span class="line">  success,</span><br><span class="line">  failure,</span><br><span class="line">  redirect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>注意事项：枚举不能子类化、混合或实现枚举。</p><h3 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h3><p>如果类型只能是字符串类型可以使用继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  &#x2F;&#x2F; 不成立</span><br><span class="line">  Person p1 &#x3D; Person&lt;int&gt;(1, 2);</span><br><span class="line">  print(p1.x.runtimeType);</span><br><span class="line"></span><br><span class="line">  Person p2 &#x3D; Person&lt;String&gt;(&#39;idbeny&#39;, &#39;1024星球&#39;);</span><br><span class="line">  print(p2.x.runtimeType); &#x2F;&#x2F; String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person&lt;T extends String&gt; &#123;</span><br><span class="line">  T name;</span><br><span class="line">  T age;</span><br><span class="line"></span><br><span class="line">  Person(this.name, this.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、库的使用"><a href="#五、库的使用" class="headerlink" title="五、库的使用"></a>五、库的使用</h3><p>Dart中任何一个dart文件都是一个库</p><h4 id="5-1-库的导入"><a href="#5-1-库的导入" class="headerlink" title="5.1. 库的导入"></a>5.1. 库的导入</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#39;库所在的uri&#39;;</span><br></pre></td></tr></table></figure><p>URI有三种不同的形式</p><ul><li><p>前缀表示Dart的标准库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#39;dart:io&#39;;</span><br></pre></td></tr></table></figure></li><li><p>相对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#39;..&#x2F;test&#x2F;test.dart&#39;;</span><br></pre></td></tr></table></figure></li><li><p>Pub包管理第三方的库用前缀package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br></pre></td></tr></table></figure></li></ul><p>库文件中内容的显示和隐藏<br>如果希望只导入库中某些内容，或者刻意隐藏库里面某些内容，可以使用show和hide关键字</p><ul><li>show：导入需要的函数</li><li>hide：隐藏相关函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#39;lib&#x2F;test&#x2F;test.dart&#39; show Sum, Mul;</span><br><span class="line"></span><br><span class="line">import &#39;lib&#x2F;test&#x2F;test.dart&#39; hide Sum;</span><br></pre></td></tr></table></figure></li></ul><p>当各个库有命名冲突的时候，使用as关键字来使用命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#39;lib&#x2F;test&#x2F;test.dart&#39; as Test;</span><br><span class="line"></span><br><span class="line">final sum &#x3D; new Test.Sum();</span><br></pre></td></tr></table></figure><h4 id="5-2-库的定义"><a href="#5-2-库的定义" class="headerlink" title="5.2. 库的定义"></a>5.2. 库的定义</h4><h5 id="library"><a href="#library" class="headerlink" title="library"></a>library</h5><p>使用library关键字给库起一个名字。</p><p>但目前我发现，库的名字并不影响导入，因为import语句用的是字符串URI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">library math;</span><br></pre></td></tr></table></figure><h5 id="part"><a href="#part" class="headerlink" title="part"></a>part</h5><p>在之前我们使用student.dart作为演练的时候，只是将该文件作为一个库。</p><p>在开发中，如果一个库文件太大，将所有内容保存到一个文件夹是不太合理的，我们有可能希望将这个库进行拆分，这个时候就可以使用part关键字了</p><p>不过官方已经不建议使用这种方式了：</p><ul><li><a href="https://dart.dev/guides/libraries/create-library-packages" target="_blank" rel="noopener">https://dart.dev/guides/libraries/create-library-packages</a></li></ul><p>mathUtils.dart文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">part of &quot;utils.dart&quot;;</span><br><span class="line"></span><br><span class="line">int sum(int num1, int num2) &#123;</span><br><span class="line">  return num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dateUtils.dart文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">part of &quot;utils.dart&quot;;</span><br><span class="line"></span><br><span class="line">String dateFormat(DateTime date) &#123;</span><br><span class="line">  return &quot;2020-12-12&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>utils.dart文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">part &quot;mathUtils.dart&quot;;</span><br><span class="line">part &quot;dateUtils.dart&quot;;</span><br></pre></td></tr></table></figure><p>test_libary.dart文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &quot;lib&#x2F;utils.dart&quot;;</span><br><span class="line"></span><br><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  print(sum(10, 20));</span><br><span class="line">  print(dateFormat(DateTime.now()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="export关键字"><a href="#export关键字" class="headerlink" title="export关键字"></a>export关键字</h5><p>官方不推荐使用part关键字，那如果库非常大，如何进行管理呢？</p><ul><li>将每一个dart文件作为库文件，使用export关键字在某个库文件中单独导入</li></ul><p>mathUtils.dart文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int sum(int num1, int num2) &#123;</span><br><span class="line">  return num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dateUtils.dart文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String dateFormat(DateTime date) &#123;</span><br><span class="line">  return &quot;2020-12-12&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>utils.dart文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">library utils;</span><br><span class="line"></span><br><span class="line">export &quot;mathUtils.dart&quot;;</span><br><span class="line">export &quot;dateUtils.dart&quot;;</span><br></pre></td></tr></table></figure><p>test_libary.dart文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &quot;lib&#x2F;utils.dart&quot;;</span><br><span class="line"></span><br><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  print(sum(10, 20));</span><br><span class="line">  print(dateFormat(DateTime.now()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Dart】Dart基本语法（一）</title>
      <link href="/2020/03/05/dart-syntax-01/"/>
      <url>/2020/03/05/dart-syntax-01/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Dart介绍和安装"><a href="#一、Dart介绍和安装" class="headerlink" title="一、Dart介绍和安装"></a>一、Dart介绍和安装</h3><h4 id="1-1-认识Dart"><a href="#1-1-认识Dart" class="headerlink" title="1.1. 认识Dart"></a>1.1. 认识Dart</h4><p>Flutter的实现是基于Dart语言的，学习一门新的语言，主要是学习他的语法。Dart的语法对前端开发更友好一些，但如果仅有iOS或Android开发经验，学习Dart的时候其实也能够很快上手。之前有Java、Swift、Objective-C、C++、React、Vue等开发经验的同学，会在Dart中看到很多你熟悉的影子，因为Dart借鉴了各种语言的特性，甚至有点像大杂烩。</p><a id="more"></a><h4 id="1-2-安装Dart"><a href="#1-2-安装Dart" class="headerlink" title="1.2. 安装Dart"></a>1.2. 安装Dart</h4><blockquote><p>如果仅仅是单独学习和运行Dart，我们需要安装Dart SDK。但在正常开发Flutter项目时是不需要安装的，因为在安装Flutter SDK的时候，已经内置了Dart SDK</p></blockquote><p>下载Dart SDK（安装方式参照官网即可）：<a href="https://dart.dev/get-dart" target="_blank" rel="noopener">https://dart.dev/get-dart</a></p><h4 id="1-3-开发工具配置"><a href="#1-3-开发工具配置" class="headerlink" title="1.3. 开发工具配置"></a>1.3. 开发工具配置</h4><p><strong>VSCode</strong>建议安装的三个插件：Dart、Flutter、Code Runner</p><ul><li>Dart：为编写Dart代码提供支持；</li><li>Flutter：编写Flutter的环境支持；</li><li>Code Runner：运行和调试Flutter代码使用</li></ul><p><strong>Android Studio</strong>建议安装两个插件：Dart、Flutter</p><h3 id="二、体验Dart"><a href="#二、体验Dart" class="headerlink" title="二、体验Dart"></a>二、体验Dart</h3><p>新建一个helloworld.dart文件，添加下面的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  print(&#39;Hello World&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端：<code>dart helloworld.dart</code>，就能看到执行结果了。</p><p><em>从上面一个简单的main函数即可看出Dart和大部分语言一样都需要一个入口main函数，在函数体内即可执行相关代码；同时每个语句结束也是以分号结尾。</em></p><h3 id="三-定义变量"><a href="#三-定义变量" class="headerlink" title="三. 定义变量"></a>三. 定义变量</h3><h4 id="3-1-明确声明"><a href="#3-1-明确声明" class="headerlink" title="3.1. 明确声明"></a>3.1. 明确声明</h4><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量类型 变量名称 &#x3D; 赋值;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">int age &#x3D; 28;</span><br><span class="line">double height &#x3D; 1.80;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项: 已经定义的变量可以修改值, 但是不能赋值其他类型</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">content &#x3D; &#39;1024星球&#39;; &#x2F;&#x2F; 正确的</span><br><span class="line">content &#x3D; 1234; &#x2F;&#x2F; 错误的, 将一个int值赋值给一个String变量</span><br></pre></td></tr></table></figure><p>以上代码中，变量name已经指定为字符串类型了，这时候如果修改name为其他字符串类型是可以的，如果赋值其他类型（如浮点型、整形）就会报错。</p><h4 id="3-2-类型推导"><a href="#3-2-类型推导" class="headerlink" title="3.2. 类型推导"></a>3.2. 类型推导</h4><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var 变量名称 &#x3D; 赋值;</span><br><span class="line">dynamic 变量名称 &#x3D; 赋值;</span><br><span class="line">const 变量名称 &#x3D; 赋值;</span><br><span class="line">final 变量名称 &#x3D; 赋值;</span><br></pre></td></tr></table></figure><h5 id="3-2-1-var的使用"><a href="#3-2-1-var的使用" class="headerlink" title="3.2.1. var的使用"></a>3.2.1. var的使用</h5><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">name &#x3D; &#39;1024星球&#39;;</span><br><span class="line">print(name.runtimeType); &#x2F;&#x2F; String</span><br></pre></td></tr></table></figure><p>错误用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var age &#x3D; 28;</span><br><span class="line">age &#x3D; &#39;idbeny&#39;; &#x2F;&#x2F; 不能把String赋值给一个int类型</span><br></pre></td></tr></table></figure><ul><li>因为变量在初始化的时候已经确定了该变量的类型，所以在后续使用的时候是不能再赋值其他类型的。</li><li>用var修饰的变量不能赋值不同类型的值,但是可以使用dynamic来修饰。</li></ul><h5 id="3-2-2-dynamic的使用"><a href="#3-2-2-dynamic的使用" class="headerlink" title="3.2.2. dynamic的使用"></a>3.2.2. dynamic的使用</h5><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dynamic name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">print(name.runtimeType); &#x2F;&#x2F; String</span><br><span class="line">name &#x3D; 28;</span><br><span class="line">print(name.runtimeType); &#x2F;&#x2F; int</span><br></pre></td></tr></table></figure><p><em>dynamic在开发中也会经常遇到，但建议谨慎使用，因为是运行时判断，所以会引发一些未知的错误</em></p><h5 id="3-2-3-final和const的使用"><a href="#3-2-3-final和const的使用" class="headerlink" title="3.2.3. final和const的使用"></a>3.2.3. final和const的使用</h5><p>final和const都是用于定义常量的（定义之后值都不可以修改）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">final name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">name &#x3D; &#39;1024星球&#39;; &#x2F;&#x2F; 错误做法</span><br><span class="line"></span><br><span class="line">const age &#x3D; 28;</span><br><span class="line">age &#x3D; 18; &#x2F;&#x2F; 错误做法</span><br></pre></td></tr></table></figure><p>final和const的区别?</p><ul><li><p>const在赋值时, 赋值的内容必须是在编译期间就确定下来的；</p></li><li><p>final在赋值时, 可以动态获取， 但是final一旦被赋值后就有确定的结果, 不会再次赋值；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  &#x2F;&#x2F; const time &#x3D; DateTime.now(); &#x2F;&#x2F; 错误的赋值方式</span><br><span class="line">  final time &#x3D; DateTime.now();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>const可以修饰创建的对象。</p></li></ul><h3 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h3><h4 id="4-1-数字类型（int-double）"><a href="#4-1-数字类型（int-double）" class="headerlink" title="4.1. 数字类型（int/double）"></a>4.1. 数字类型（int/double）</h4><p>整形和浮点型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int age &#x3D; 28; &#x2F;&#x2F; 整形</span><br><span class="line">print(age);</span><br><span class="line"></span><br><span class="line">double height &#x3D; 1.80; &#x2F;&#x2F; 浮点型</span><br><span class="line">print(height);</span><br></pre></td></tr></table></figure><p>字符串和数字之间的转化:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.字符串转数字</span><br><span class="line">var num1 &#x3D; int.parse(&#39;1234&#39;);</span><br><span class="line">var num2 &#x3D; double.parse(&#39;12.34&#39;);</span><br><span class="line">print(&#39;$&#123;num1&#125; $&#123;num1.runtimeType&#125;&#39;); &#x2F;&#x2F; 1234 int</span><br><span class="line">print(&#39;$&#123;num2&#125; $&#123;num2.runtimeType&#125;&#39;); &#x2F;&#x2F; 12.34 double</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.数字转字符串</span><br><span class="line">var num1 &#x3D; 1234;</span><br><span class="line">var num2 &#x3D; 12.345;</span><br><span class="line">var num1Str &#x3D; num1.toString();</span><br><span class="line">var num2Str &#x3D; num2.toString();</span><br><span class="line">var num2PointStr &#x3D; num2.toStringAsFixed(2); &#x2F;&#x2F; 保留两位小数</span><br><span class="line">print(&#39;$num1Str $&#123;num1Str.runtimeType&#125;&#39;); &#x2F;&#x2F; 1234 String</span><br><span class="line">print(&#39;$num2Str $&#123;num2Str.runtimeType&#125;&#39;); &#x2F;&#x2F; 12.345 String</span><br><span class="line">print(&#39;$num2PointStr $&#123;num2PointStr.runtimeType&#125;&#39;); &#x2F;&#x2F; 12.35 String</span><br></pre></td></tr></table></figure><h4 id="4-2-布尔类型（Bool）"><a href="#4-2-布尔类型（Bool）" class="headerlink" title="4.2. 布尔类型（Bool）"></a>4.2. 布尔类型（Bool）</h4><p>布尔类型中,Dart提供了一个bool的类型, 取值为true和false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var isFlag &#x3D; true;</span><br><span class="line">print(&#39;$isFlag $&#123;isFlag.runtimeType&#125;&#39;); &#x2F;&#x2F; true bool</span><br></pre></td></tr></table></figure><p>注意: Dart中不能判断非0即真, 或者非空即真</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">if (name) &#123; &#x2F;&#x2F; name不会打印</span><br><span class="line">  print(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-字符串类型（String）"><a href="#4-3-字符串类型（String）" class="headerlink" title="4.3. 字符串类型（String）"></a>4.3. 字符串类型（String）</h4><p>创建一个字符串：单引号或双引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s1 &#x3D; &#39;Hello World&#39;;</span><br><span class="line">var s4 &#x3D; &quot;Hello&#39;World&quot;;</span><br><span class="line">var s2 &#x3D; &quot;idbeny&quot;;</span><br></pre></td></tr></table></figure><p>多行字符串：三个单引号或者双引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var message1 &#x3D; &#39;&#39;&#39;</span><br><span class="line">  你好啊</span><br><span class="line">  很高兴</span><br><span class="line">  认识你&#39;&#39;&#39;;</span><br></pre></td></tr></table></figure><h4 id="4-4-集合类型（List-Set-Map）"><a href="#4-4-集合类型（List-Set-Map）" class="headerlink" title="4.4. 集合类型（List/Set/Map）"></a>4.4. 集合类型（List/Set/Map）</h4><p>List</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.类型推导</span><br><span class="line">var words &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.明确类型</span><br><span class="line">List&lt;int&gt; numbers &#x3D; [1, 2, 3, 4];</span><br></pre></td></tr></table></figure><p>Set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.类型推导</span><br><span class="line">var words &#x3D; &#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.明确类型</span><br><span class="line">Set&lt;int&gt; numbers &#x3D; &#123;1, 2, 3, 4&#125;;</span><br></pre></td></tr></table></figure><ul><li>Set和List最大的区别：Set是无序的，并且元素是不重复的。</li><li>常见操作<ul><li>length（获取集合的长度）</li><li>add（添加元素）</li><li>remove（移除元素）</li><li>contains（包含元素）</li><li>removeAt（根据索引未知删除元素–List持有，Set没有）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers.length;</span><br><span class="line">numbers.add(1);</span><br><span class="line">numbers.remove(1);</span><br><span class="line">numbers.contains(1);</span><br><span class="line">numbers.removeAt(1);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>Map（字典）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.类型推导</span><br><span class="line">var person &#x3D; &#123;&#39;name&#39;: &#39;idbeny&#39;, &#39;age&#39;: 28&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.明确类型</span><br><span class="line">Map&lt;String, Object&gt; map &#x3D; &#123;&#39;name&#39;: &#39;idbeny&#39;, &#39;address&#39;: &#39;www.idbeny.com&#39;, &#39;age&#39;: 28&#125;;</span><br></pre></td></tr></table></figure><ul><li>常见操作<ul><li>根据key获取value <code>map[&#39;name&#39;]</code></li><li>获取所有的entries <code>map.entries</code></li><li>获取所有的keys <code>map.keys</code></li><li>获取所有的values <code>map.values</code></li><li>判断是否包含某个key或者value <code>map.containsKey(&#39;name&#39;); map.containsValue(28)</code></li><li>根据key删除元素 <code>map.remove(&#39;name&#39;)</code></li></ul></li></ul><h3 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h3><h4 id="5-1-函数的定义"><a href="#5-1-函数的定义" class="headerlink" title="5.1. 函数的定义"></a>5.1. 函数的定义</h4><p>Dart是面向对象语言，函数也是对象，所有也有类型, 类型就是Function，并且函数可以作为变量定义或者作为其他函数的参数或者返回值使用。</p><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回值 函数的名称(参数列表) &#123;</span><br><span class="line">  函数体</span><br><span class="line">  return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int sum(num num1, num num2) &#123;</span><br><span class="line">  return num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果我们省略函数返回类型，函数依然是可以运行的，但是如果是公共函数，建议把类型加上</li><li>如果函数中只有一个表达式, 那么可以使用箭头函数</li><li>注意, 这里面只能是一个表达式, 不能是一个语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(num1, num2) &#x3D;&gt; num1 + num2;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-2-函数的参数"><a href="#5-2-函数的参数" class="headerlink" title="5.2. 函数的参数"></a>5.2. 函数的参数</h4><h5 id="参数（必传和可选）"><a href="#参数（必传和可选）" class="headerlink" title="参数（必传和可选）"></a>参数（必传和可选）</h5><ul><li>位置可选参数：使用中括号包裹<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 格式：位置可选参数: [param1, param2, ...]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 示例：</span><br><span class="line">Person(String name, [int age, double height]) &#123;</span><br><span class="line">  print(&#39;name&#x3D;$name age&#x3D;$age height&#x3D;$height&#39;);</span><br><span class="line">&#125;</span><br><span class="line">Person(&#39;idbeny&#39;, 28);</span><br><span class="line">Person(&#39;idbeny&#39;, 28, 1.80);</span><br></pre></td></tr></table></figure></li><li>命名可选参数：使用大括号包裹。可以指定某个参数是必传的（使用@required）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 格式：&#123;param1, param2, ...&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 示例：</span><br><span class="line">Person(String name, &#123;int age, double height, @required String address&#125;) &#123;</span><br><span class="line">  print(&#39;name&#x3D;$name age&#x3D;$age height&#x3D;$height address&#x3D;$address&#39;);</span><br><span class="line">&#125;</span><br><span class="line">Person(&#39;idbeny&#39;, age: 28, address: &#39;www.idbeny.com&#39;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h5><p>只有可选参数才可以有默认值, 必传参数不能有默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 参数的默认值</span><br><span class="line">Person(String name, &#123;int age &#x3D; 28, String address&#x3D;&quot;www.idbeny.com&quot;&#125;) &#123;</span><br><span class="line">  print(&#39;name&#x3D;$name age&#x3D;$age address&#x3D;$address&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-匿名函数"><a href="#5-3-匿名函数" class="headerlink" title="5.3. 匿名函数"></a>5.3. 匿名函数</h4><p>JS中有匿名函数，Dart其实也是支持匿名函数的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  var words &#x3D; [&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;, &#39;ddd&#39;];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 有名字的函数</span><br><span class="line">  readWords(item) &#123;</span><br><span class="line">    print(item);</span><br><span class="line">  &#125;</span><br><span class="line">  words.forEach(readWords);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 匿名函数</span><br><span class="line">  words.forEach((item) &#123;</span><br><span class="line">    print(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  words.forEach((item) &#x3D;&gt; print(item));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-作用域"><a href="#5-4-作用域" class="headerlink" title="5.4. 作用域"></a>5.4. 作用域</h3><ul><li>Dart是根据代码的结构<code>({})</code>来决定作用域范围的</li><li>和大部分语言类似，优先使用自己作用域中的变量，如果没有找到，则一级级向外查找。</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li><p><code>runtimeType</code>：获取变量当前的类型；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">final name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">print(name.runtimeType); &#x2F;&#x2F; String</span><br></pre></td></tr></table></figure></li><li><p><code>identical</code>：比较两个对象是否相同；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">final p1 &#x3D; Person();</span><br><span class="line">final p2 &#x3D; Person();</span><br><span class="line">print(identical(p1, p2)); &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure></li><li><p><code>${expression}</code>：字符串拼接，如果只是一个标识符，不需要加{}，如果是表达式，则必须加{}；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final name &#x3D; &#39;idbeny&#39;;</span><br><span class="line">final age &#x3D; 28;</span><br><span class="line">print(&#39;$&#123;name&#125; $&#123;name.runtimeType&#125;&#39;); &#x2F;&#x2F; idbeny String</span><br><span class="line">print(&#39;$age $&#123;age.runtimeType&#125;&#39;); &#x2F;&#x2F; 28 int</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Flutter】初识Flutter</title>
      <link href="/2020/03/03/flutter-first/"/>
      <url>/2020/03/03/flutter-first/</url>
      
        <content type="html"><![CDATA[<p><img src="http://blog.idbeny.com/7ybl8.png" alt=""></p><h3 id="一、Flutter是什么？"><a href="#一、Flutter是什么？" class="headerlink" title="一、Flutter是什么？"></a>一、Flutter是什么？</h3><p><strong>官网介绍：</strong><br>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。</p><a id="more"></a><ul><li>官网：<a href="https://flutter.dev/" target="_blank" rel="noopener">https://flutter.dev/</a></li><li>中文网站：<a href="https://flutterchina.club/" target="_blank" rel="noopener">https://flutterchina.club/</a></li></ul><p><strong>总结：</strong></p><ul><li>Flutter是一个UI SDK（Software Development Kit）</li><li>可以进行移动端（iOS、Android），Web端（Beta），桌面（technical preview），跨平台解决方案；</li><li>到Flutter的几个特点：美观、快速、高效、开放。</li></ul><h3 id="二、Flutter的特点"><a href="#二、Flutter的特点" class="headerlink" title="二、Flutter的特点"></a>二、Flutter的特点</h3><p><strong>快速开发</strong></p><ul><li>毫秒级的热重载，修改后，您的应用界面会立即更新。使用丰富的、完全可定制的widget在几分钟内构建原生界面。</li><li>Flutter的热重载可帮助您快速地进行测试、构建UI、添加功能并更快地修复错误。在iOS和Android模拟器或真机上可以在亚秒内重载，并且不会丢失状态。</li></ul><p><img src="http://blog.idbeny.com/kp9xi.gif@normal" alt=""></p><p><strong>美观：富有表现力和灵活的UI</strong></p><ul><li>使用Flutter内置美丽的Material Design和Cupertino（iOS风格）widget、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。</li></ul><p><img src="http://blog.idbeny.com/lnbno.png@normal" alt=""><br><img src="http://blog.idbeny.com/08ove.png@normal" alt=""><br><img src="http://blog.idbeny.com/rzptn.png@normal" alt=""><br><img src="http://blog.idbeny.com/5u88d.png@normal" alt=""></p><p><strong>原生性能</strong></p><ul><li>Flutter包含了许多核心的widget，如滚动、导航、图标和字体等，这些都可以在iOS和Android上达到原生应用一样的性能。</li><li>Hot Reload (热重载) ，在前端已经不是什么新鲜的东西，但在移动端之前一直是没有的</li><li>Flutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度；</li><li>Flutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库；</li></ul><p><strong>响应式框架</strong></p><ul><li>使用Flutter的现代、响应式框架，和一系列基础widget，轻松构建您的用户界面。使用功能强大且灵活的API（针对2D、动画、手势、效果等）解决艰难的UI挑战。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class CounterState extends State&lt;Counter&gt; &#123;</span><br><span class="line">  int counter &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  void increment() &#123;</span><br><span class="line">    &#x2F;&#x2F; 告诉Flutter state已经改变, Flutter会调用build()，更新显示</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    &#x2F;&#x2F; 当 setState 被调用时，这个方法都会重新执行.</span><br><span class="line">    &#x2F;&#x2F; Flutter 对此方法做了优化，使重新执行变的很快</span><br><span class="line">    &#x2F;&#x2F; 所以你可以重新构建任何需要更新的东西，而无需分别去修改各个widget</span><br><span class="line">    return new Row(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        new RaisedButton(</span><br><span class="line">          onPressed: increment,</span><br><span class="line">          child: new Text(&#39;Increment&#39;),</span><br><span class="line">        ),</span><br><span class="line">        new Text(&#39;Count: $counter&#39;),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>开放</strong></p><ul><li>Flutter 是开放的，它是一个完全开源的项目。</li></ul><h3 id="三、跨平台解决方案"><a href="#三、跨平台解决方案" class="headerlink" title="三、跨平台解决方案"></a>三、跨平台解决方案</h3><p><strong>WebView</strong></p><ul><li>基于 JavaScript 和 WebView的跨平台</li><li>主要是通过HTML来构建自己的界面，再将其显示在各个<br>平台的WebView中。</li><li>但是它默认是不能调用本地的一些服务的（比如自定义相机、<br>蓝牙等），所以需要通过JavaScript进行桥接调用Native<br>的一些代码来完成某些功能。</li><li>但是，它本身的体验、性能都并不理想，而且开发过程<br>中的坑非常多。</li></ul><p><strong>ReactNative（简称：RN）</strong></p><ul><li>ReactNative在移动端一直备受欢迎，在Flutter出现之前，很多跨平台项目都在使用，最著名的Airbnb对RN的社区贡献特别大，但是在18年突然宣布停止使用RN，改用Native；</li><li>RN使用JavaScript语言，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。</li><li>并且在保留基本渲染能力的基础上，用原生自带的UI组件实现核<br>心的渲染引擎，从而保证了良好的渲染性能。</li><li>但是，由于RN的本质是通过JavaScript VM调用原生接口，通信<br>相对比较低效，而且框架本身不负责渲染，而是是间接通过原生<br>进行渲染的，所以很多项目开发也在寻找其他的跨平台解决方案。</li></ul><p><strong>Flutter</strong></p><ul><li>目前性能和体验最好的跨平台解决方案；</li><li>Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件</li><li>Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高 于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）</li><li>而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。</li></ul><h3 id="四、Flutter环境配置及安装"><a href="#四、Flutter环境配置及安装" class="headerlink" title="四、Flutter环境配置及安装"></a>四、Flutter环境配置及安装</h3><p><strong>Flutter SDK下载地址</strong></p><ul><li><a href="https://flutter.dev/docs/development/tools/sdk/releases" target="_blank" rel="noopener">https://flutter.dev/docs/development/tools/sdk/releases</a></li></ul><p><strong>环境变量配置（以Mac为例）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export FLUTTER_HOME&#x3D;&#x2F;Applications&#x2F;flutter</span><br><span class="line">export PATH&#x3D;$PATH:$FLUTTER_HOME&#x2F;bin</span><br><span class="line">export PATH&#x3D;$PATH:$FLUTTER_HOME&#x2F;bin&#x2F;cache&#x2F;dart-sdk&#x2F;bin</span><br></pre></td></tr></table></figure><p><strong>配置镜像</strong></p><ul><li>由于在国内访问Flutter有时可能会受到限制，Flutter官方为中国开发者搭建了临时镜像，大家可以将如下环境变量加入到用户环境变量中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL&#x3D; https:&#x2F;&#x2F;storage.flutter-io.cn</span><br></pre></td></tr></table></figure></li><li>参考：<a href="https://flutterchina.club/get-started/install/" target="_blank" rel="noopener">https://flutterchina.club/get-started/install/</a></li></ul><p>可参考本机环境变量配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;Users&#x2F;Developer&#x2F;Applications&#x2F;flutter&#x2F;flutter&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">#android sdk目录，替换为你自己的即可</span><br><span class="line">export ANDROID_HOME&#x3D;&quot;&#x2F;Users&#x2F;Developer&#x2F;Applications&#x2F;android_sdk&quot;</span><br><span class="line">export PATH&#x3D;$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;&#x2F;tools</span><br><span class="line">export PATH&#x3D;$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;&#x2F;platform-tools</span><br><span class="line">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter-io.cn</span><br></pre></td></tr></table></figure><h3 id="五、开发工具选择"><a href="#五、开发工具选择" class="headerlink" title="五、开发工具选择"></a>五、开发工具选择</h3><ul><li>官方推荐：Android Studio 和 VSCode</li><li>不管选择哪一个开发工具，把对应的插件安装即可–<strong>Flutter</strong>和<strong>Dart</strong></li></ul><h3 id="六、创建Flutter项目"><a href="#六、创建Flutter项目" class="headerlink" title="六、创建Flutter项目"></a>六、创建Flutter项目</h3><ul><li>有两种方式创建Flutter应用：终端或编辑器（我们以终端为例）</li></ul><p><strong>创建：</strong><br><code>flutter create helloflutter</code></p><ul><li>项目名称不支持驼峰</li><li>如果需要，名字之间可以使用下划线<code>_</code>分割（hello_flutter）</li></ul><p><strong>运行：</strong><br><code>flutter run –d 模拟器id</code></p><ul><li>如果有多个模拟器同时运行，需要指定模拟器的id，</li><li>如果只有一个模拟器在运行，则不需要指定id，直接运行<code>flutter run</code>即可</li></ul><p><strong>诊断：</strong><code>flutter doctor</code></p><ul><li>运行此命令查看是否需要安装其它依赖项来完成安装：</li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CocoaPods】CDN trunk URL couldn’t be downloaded:https://raw.githubusercontent.com/CocoaPods/</title>
      <link href="/2019/10/15/pod-download-issues/"/>
      <url>/2019/10/15/pod-download-issues/</url>
      
        <content type="html"><![CDATA[<p>首次遇到Pods的<code>CDN</code>问题，后来才知道是1.8版本后<code>CocoaPods</code>为了开发者更快速的体验，进行了<code>CDN</code>加速处理，同时也让<code>Podfile</code>更加规范了。</p><a id="more"></a><p>使用<code>pod install</code>后出现报错<br><img src="http://blog.idbeny.com/6trvm.png@normal" alt=""></p><p>怎么办呢？根据报错原因猜想是CDN没找到对应的仓库地址，然后将<code>Podfile</code>指定了源地址<code>source &#39;https://github.com/CocoaPods/Specs.git&#39;</code>，之后继续<code>install</code>，依然报错，无奈之下手动将<code>Specs</code>的仓库clone到本地Pods目录下<code>cd ~/.cocoapods/repos/</code><br><img src="http://blog.idbeny.com/p4vjm.png@normal" alt=""></p><p>完成上面操作后，继续<code>pod install</code>，出现了我们熟悉的颜色，等待安装就行了<br><img src="http://blog.idbeny.com/k9plq.png@normal" alt=""></p><p>如果搜索某一个库的时候，例 <code>pod search AFNetworking</code>，出现文章刚开始的错误，只需要<code>pod repo remove trunk</code>即可。</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CocoaPods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【汇编】汇编语言初识&amp;lldb常用指令</title>
      <link href="/2019/06/10/assembly-swift/"/>
      <url>/2019/06/10/assembly-swift/</url>
      
        <content type="html"><![CDATA[<p>要想掌握一门语言，就要探其本质，知晓其中的内存和指针变化，这时候汇编就显得格外重要。</p><a id="more"></a><h3 id="汇编语言的种类"><a href="#汇编语言的种类" class="headerlink" title="汇编语言的种类"></a>汇编语言的种类</h3><ul><li><p>汇编语言的种类</p><ul><li>8086汇编（16bit）</li><li>x86汇编（32bit）</li><li>x64汇编（64bit）</li><li>ARM汇编（嵌入式，移动设备）</li><li>……</li></ul></li><li><p>x86、x64汇编根据编译器的不同，有2种书写格式</p><ul><li>Intel：Windows派系</li><li>AT&amp;T：Unix派系（例，iOS模拟器）</li></ul></li></ul><h3 id="常见汇编指令"><a href="#常见汇编指令" class="headerlink" title="常见汇编指令"></a>常见汇编指令</h3><p><img src="swift_lldb_02.png" alt=""></p><h3 id="寄存器与内存"><a href="#寄存器与内存" class="headerlink" title="寄存器与内存"></a>寄存器与内存</h3><ul><li>CPU组成<ul><li>寄存器（信息存储）</li><li>运算器（信息处理）</li><li>控制器</li></ul></li></ul><p>通常，CPU会先将内存中的数据存储到寄存器中，然后再对寄存器中的数据进行运算</p><blockquote><p>假设内存中有块红色内存空间的值是3，现在先把它的值+1，并将结果存储到绿色内存空间</p></blockquote><p>图解：<br><img src="swift_lldb_01.png" alt=""></p><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num &#x3D; 3</span><br><span class="line">var num1 &#x3D; num + 1</span><br></pre></td></tr></table></figure><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>64位AT&amp;T混编中常用的寄存器有16种</p><ul><li>%rax、%rbx、%rcx、%rdx、%rsi、%rdi、%rbp、%rsp</li><li>%r8、%r9、%r10、%r11、%r12、%r13、%r14、%r15</li></ul><p>寄存器的具体用途</p><ul><li>%rax常作为函数返回值使用</li><li>%rdi、%rsi、%rdx、%rcx、%r8、%r9等寄存器常用于存放函数参数</li><li>%rsp、%rbp用于栈操作</li></ul><p><code>movq -0x18(%rbp), %rax</code><br>意思：根据内存地址找到对应存储空间的数据取出来赋值给%rax</p><p><code>leaq -0x18(%rbp), %rax</code><br>意思：直接将%rbp-0x18地址值赋值给%rax</p><ul><li><p><code>call</code>和<code>jmp</code>区别</p><ul><li><code>jmp 0x000a1841</code>，跳转到函数内存地址<code>0x000a1841</code>执行相关指令，跳转后不返回</li><li><code>call 0x000a1841</code>，也是跳转，和<code>ret</code>配合使用，但跳转<code>0x000a1841</code>函数执行完成后会返回继续执行之前的代码</li></ul></li><li><p><code>call *%rdx</code>，意思是跳转到寄存器里面的地址</p></li><li><p>混编指令后面的字符是什么意思？（例：<code>movq</code>、<code>leaw</code>）</p><ul><li>代表操作数长度（具体参照上图）</li></ul></li></ul><blockquote><p><code>r</code> 开头的是64位（8字节）的寄存器（CPU是64位的）</p><p><code>e</code> 开头的是32位（4字节）的寄存器（CPU是32位的）</p><p><code>ax</code>、<code>bx</code>、<code>cx</code> 开头的是16位（2字节）的寄存器（CPU是16位的）</p><p><code>ah</code>、<code>al</code>、<code>bh</code>、<code>bl</code> 开头的是8位（1字节）的寄存器（CPU是8位的）<br><code>h</code> 意思是high，代表占用高位；<code>l</code> 意思是low，代表占用低位</p></blockquote><p><em>思考：高位寄存器怎么兼容低位寄存器？</em></p><ul><li>64位寄存器需要兼容32位，32位需要兼容16位</li><li>如果使用的是64位（63<del>0），把内存的低位给32位用（31</del>0），一直往后推理</li></ul><h3 id="lldb常用指令"><a href="#lldb常用指令" class="headerlink" title="lldb常用指令"></a>lldb常用指令</h3><ul><li><p>读取寄存器的值：</p><ul><li><code>register read/格式</code></li><li><code>register read/x</code></li><li>例：<code>register read rax</code></li><li>在lldb中不需要加<code>%</code>，在汇编语言中才需要加</li><li>如果只输入<code>register read</code>，就会把所有寄存器的值打印出来</li></ul></li><li><p>修改寄存器的值</p><ul><li><code>register write 寄存器名称 数值</code></li><li><code>register write $rax 0</code></li></ul></li><li><p>读取内存中的值</p><ul><li><code>x/数量-格式-字节大小 内存地址</code></li><li><code>x/3xw 0x0000000100008200</code> 意思：读取3组16进制形式展示的数据，每组4个字节</li></ul></li><li><p>修改内存中的值</p><ul><li><code>memory write 内存地址 数值</code></li><li><code>memory write 0x0000000100008200 10</code></li></ul></li><li><p>格式</p><ul><li>x是16进制</li><li>f是浮点</li><li>d是十进制</li></ul></li><li><p>字节大小</p><ul><li>b - byte        1字节</li><li>h - half word   2字节</li><li>w - word        4字节</li><li>g - giant word  8字节</li></ul></li><li><p>expression 表达式</p><ul><li>可以简写：<code>expr 表达式</code></li><li><code>expression $rax</code></li><li><code>expression $rax = 1</code></li><li><code>expression 高级语言代码</code></li></ul></li><li><p>po 表达式</p></li><li><p>print 表达式</p></li><li><p>po/x $rax</p></li></ul><blockquote><p>更多指令参考 <code>help expression</code></p></blockquote><p>示例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func test() &#123;</span><br><span class="line">    let a &#x3D; 3</span><br><span class="line">    let b &#x3D; a + 1</span><br><span class="line">    print(b) &#x2F;&#x2F; 此处打断点进入混编</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>指令展示<br><img src="swift_lldb_03.png" alt=""></p><p>代码调试运行指令</p><ul><li><p><code>thread step-over</code></p><ul><li>简写：<code>next</code> 和 <code>n</code></li><li>单步运行，把子函数当做整体一步执行（源码级别）</li></ul></li><li><p><code>thread step-in</code></p><ul><li>简写：<code>step</code> 和 <code>s</code></li><li>单步运行，遇到子函数会进入子函数（源码级别）</li></ul></li><li><p><code>thread step-inst-over</code></p><ul><li>简写：<code>nexti</code> 和 <code>ni</code></li><li>单步运行，把子函数当做整体一步执行（汇编级别）</li></ul></li><li><p><code>thread step-inst</code></p><ul><li>简写：<code>stepi</code> 和 <code>si</code></li><li>单步运行，遇到子函数会进入子函数（汇编级别）</li></ul></li><li><p><code>thread step-out</code></p><ul><li>简写：<code>finish</code></li><li>直接执行完当前函数的所有代码，返回到上一个函数（遇到断点会卡主）</li></ul></li></ul><p>看到上面的指令名称，应该常用Xcode开发的同学会很熟悉，没错，就是Xcode上面的断点调试功能<br><img src="swift_lldb_04.png" alt=""></p><p>补充：<br><code>xorl</code> - 按位异或</p><p><code>$</code> - 立即数</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Plugin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Assembly </tag>
            
            <tag> 汇编 </tag>
            
            <tag> lldb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VSCode】如何使用Vue的template模板</title>
      <link href="/2019/06/02/vscode-vuetemplate/"/>
      <url>/2019/06/02/vscode-vuetemplate/</url>
      
        <content type="html"><![CDATA[<p>使用Vue开发项目的时候经常会用到template模板，在webstorm中新建文件有VueComponent模板，那么VSCode是否也有这样的模板呢？有的，不过不像webstorm插件那样方便，在VSCode中需要自己配置，本质其实就是代码片段。</p><a id="more"></a><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p><img src="http://blog.idbeny.com/zdj9b.png@normal" alt="第一种"></p><p><img src="http://blog.idbeny.com/e7xtd.png@normal" alt="第二种"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>选择新建代码片段<br><img src="http://blog.idbeny.com/y48w2.png@normal" alt="创建代码片段"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>输入代码片段名称（例：VueTemplate）<br><img src="http://blog.idbeny.com/ul53p.png@normal" alt="创建代码片段"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>创建完成后看到一个空的模板文件<br><img src="http://blog.idbeny.com/z5ldf.png@normal" alt="创建代码片段"><br>把需要的模板代码写入到该文件即可</p><ul><li><code>/t</code>：一个<code>tab</code>缩进–具体看VSCode配置；</li><li><code>\n</code>：换行</li><li><code>prefix</code>：快捷键（创建代码的时候用到）<br><img src="http://blog.idbeny.com/ao82p.png@normal" alt="创建代码片段"></li></ul><p>具体代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;Vue-Template&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &quot;vuetem&quot;,</span><br><span class="line">    &quot;body&quot;: [</span><br><span class="line">&quot;&lt;template&gt;\n&quot;,</span><br><span class="line">&quot;&lt;&#x2F;template&gt;\n&quot;,</span><br><span class="line">&quot;&lt;script&gt;&quot;,</span><br><span class="line">&quot;\texport default &#123;&quot;,</span><br><span class="line">  &quot;\t\tname: &#39;App&#39;&quot;,</span><br><span class="line">&quot;\t&#125;&quot;,</span><br><span class="line">&quot;&lt;&#x2F;script&gt;\n&quot;,</span><br><span class="line">&quot;&lt;style scoped&gt;\n&quot;,</span><br><span class="line">&quot;&lt;&#x2F;style&gt;&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;description&quot;: &quot;快速创建vue组件模板&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后，新建Vue文件后，在代码区输入之前定义的<code>prefix</code>快捷键然后按下<code>tab</code>即可（本例快捷键：<code>vuetem</code>）。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift基本语法之枚举</title>
      <link href="/2019/05/11/swift-syntax-enum/"/>
      <url>/2019/05/11/swift-syntax-enum/</url>
      
        <content type="html"><![CDATA[<h3 id="typealias-别名"><a href="#typealias-别名" class="headerlink" title="typealias(别名)"></a>typealias(别名)</h3><p><code>typealias</code>用来给类型起别名</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">typealias Byte &#x3D; Int8</span><br><span class="line">typealias Short &#x3D; Int16</span><br><span class="line">typealias Long &#x3D; Int64</span><br><span class="line"></span><br><span class="line">typealias Date &#x3D; (year: Int, month: Int, day: Int)</span><br><span class="line">func test(_ date: Date) &#123;</span><br><span class="line">    print(date.year)</span><br><span class="line">&#125;</span><br><span class="line">test((2019, 6, 25))</span><br><span class="line">&#x2F;&#x2F; 输出：2019</span><br><span class="line"></span><br><span class="line">typealias IntFn &#x3D; (Int, Int) -&gt; Int</span><br><span class="line">func diff(v1: Int, v2: Int) -&gt; Int &#123;</span><br><span class="line">    v1 - v2</span><br><span class="line">&#125;</span><br><span class="line">let fn: IntFn &#x3D; diff</span><br><span class="line">fn(10, 5)</span><br><span class="line">&#x2F;&#x2F; 输出：5</span><br></pre></td></tr></table></figure><blockquote><p><code>Void</code>的本质就是空元祖的别名：<code>public typealias Void = ()</code></p></blockquote><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>Swift枚举和C/OC语言不一样，以前写OC的时候枚举本质是<code>int</code>类型，但Swift中枚举可以是多类型的</p><ul><li>官方建议：枚举名称使用大写，成员使用小写</li></ul><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义枚举</span><br><span class="line">enum YBColor &#123;</span><br><span class="line">    case white</span><br><span class="line">    case black</span><br><span class="line">    case gray</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等价于上面的代码</span><br><span class="line">&#x2F;&#x2F;enum YBColor &#123;</span><br><span class="line">&#x2F;&#x2F;    case white, black, gray</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">var color &#x3D; YBColor.white</span><br><span class="line">color &#x3D; YBColor.black</span><br><span class="line">color &#x3D; .gray &#x2F;&#x2F; 简写（因为此时已经确定变量color是YBColor类型）</span><br><span class="line">print(color) &#x2F;&#x2F; 输出：gray</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 循环控制</span><br><span class="line">switch color &#123;</span><br><span class="line">case .white:</span><br><span class="line">    print(&quot;white&quot;)</span><br><span class="line">case .black:</span><br><span class="line">    print(&quot;black&quot;)</span><br><span class="line">case .gray:</span><br><span class="line">    print(&quot;gray&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关联值"><a href="#关联值" class="headerlink" title="关联值"></a>关联值</h4><p>有时将<strong>枚举的成员值</strong>跟<strong>其他类型的值</strong>关联存储在一起，会非常有用</p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">enum Score &#123;</span><br><span class="line">    case points(Int)</span><br><span class="line">    case grade(Character)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 数值表达</span><br><span class="line">var score &#x3D; Score.points(96)</span><br><span class="line">&#x2F;&#x2F; 等级&#x2F;字符表达</span><br><span class="line">score &#x3D; .grade(&quot;A&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enum Date &#123;</span><br><span class="line">    case digit(year: Int, month: Int, day: Int)</span><br><span class="line">    case string(String)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var date &#x3D; Date.digit(year: 2019, month: 06, day: 25)</span><br><span class="line">date &#x3D; .string(&quot;2019-06-25&quot;)</span><br><span class="line">switch date &#123;</span><br><span class="line">case .digit(let year, let month, let day):</span><br><span class="line">    print(year, month, day, separator:&quot;&#x2F;&quot;)</span><br><span class="line">case let .string(value):</span><br><span class="line">    print(value)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> 2019-06-25</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p><code>let</code>写在枚举成员前面意味着枚举成员形参只能是常量，放在形参里面可以自定义选择是<code>var</code>还是<code>let</code></p></blockquote><h4 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h4><p>枚举成员可以使用相同类型的默认值预先关联，这个默认值叫做：原始值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">enum Direction : Character &#123;</span><br><span class="line">    case up &#x3D; &quot;w&quot;</span><br><span class="line">    case down &#x3D; &quot;s&quot;</span><br><span class="line">    case left &#x3D; &quot;a&quot;</span><br><span class="line">    case right &#x3D; &quot;d&quot;</span><br><span class="line">&#125;</span><br><span class="line">var direction &#x3D; Direction.up</span><br><span class="line">print(direction) &#x2F;&#x2F; 输出：up</span><br><span class="line">print(direction.rawValue) &#x2F;&#x2F; 输出：w</span><br><span class="line">print(Direction.down.rawValue) &#x2F;&#x2F; 输出：s</span><br></pre></td></tr></table></figure><p>如果枚举的原始值类型是<code>Int</code>、<code>String</code>，Swift会自动分配原始值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">enum Direction : String &#123;</span><br><span class="line">    case up &#x3D; &quot;up&quot;</span><br><span class="line">    case down &#x3D; &quot;down&quot;</span><br><span class="line">    case left &#x3D; &quot;left&quot;</span><br><span class="line">    case right &#x3D; &quot;right&quot;</span><br><span class="line">&#125;</span><br><span class="line">var direction &#x3D; Direction.up</span><br><span class="line">print(direction) &#x2F;&#x2F; 输出：up</span><br><span class="line">print(direction.rawValue) &#x2F;&#x2F; 输出：up</span><br><span class="line">print(Direction.down.rawValue) &#x2F;&#x2F; 输出：down</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等价</span><br><span class="line">enum Direction : String &#123;</span><br><span class="line">    case up, down, left, right</span><br><span class="line">&#125;</span><br><span class="line">var direction &#x3D; Direction.up</span><br><span class="line">print(direction) &#x2F;&#x2F; 输出：up</span><br><span class="line">print(direction.rawValue) &#x2F;&#x2F; 输出：up</span><br><span class="line">print(Direction.down.rawValue) &#x2F;&#x2F; 输出：down</span><br></pre></td></tr></table></figure><p>Int类型，成员值自增（类似C/OC枚举）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enum Season : Int &#123;</span><br><span class="line">    case spring, summer, autumn, winter</span><br><span class="line">&#125;</span><br><span class="line">print(Season.spring.rawValue) &#x2F;&#x2F; 输出：0</span><br><span class="line">print(Season.summer.rawValue) &#x2F;&#x2F; 输出：1</span><br><span class="line">print(Season.autumn.rawValue) &#x2F;&#x2F; 输出：2</span><br><span class="line">print(Season.winter.rawValue) &#x2F;&#x2F; 输出：3</span><br><span class="line"></span><br><span class="line">enum Season : Int &#123;</span><br><span class="line">    case spring &#x3D; 1, summer, autumn &#x3D; 4, winter</span><br><span class="line">&#125;</span><br><span class="line">print(Season.spring.rawValue)</span><br><span class="line">print(Season.summer.rawValue)</span><br><span class="line">print(Season.autumn.rawValue)</span><br><span class="line">print(Season.winter.rawValue)</span><br></pre></td></tr></table></figure><h4 id="递归枚举"><a href="#递归枚举" class="headerlink" title="递归枚举"></a>递归枚举</h4><ul><li>关键字：<code>indirect</code></li><li>可以把需要递归枚举的成员前面加<code>indirect</code>，也可以为了方便直接加到枚举定义前面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">indirect enum ArithExpr &#123;</span><br><span class="line">    case number(Int)</span><br><span class="line">    case sum(ArithExpr, ArithExpr)</span><br><span class="line">    case diff(ArithExpr, ArithExpr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;enum ArithExpr &#123;</span><br><span class="line">&#x2F;&#x2F;    case number(Int)</span><br><span class="line">&#x2F;&#x2F;    indirect case sum(ArithExpr, ArithExpr)</span><br><span class="line">&#x2F;&#x2F;    indirect case diff(ArithExpr, ArithExpr)</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">let five &#x3D; ArithExpr.number(5)</span><br><span class="line">let four &#x3D; ArithExpr.number(4)</span><br><span class="line">let two &#x3D; ArithExpr.number(2)</span><br><span class="line">let sum &#x3D; ArithExpr.sum(five, four)</span><br><span class="line">let diff &#x3D; ArithExpr.diff(sum, two)</span><br><span class="line"></span><br><span class="line">func cal(_ expr: ArithExpr) -&gt; Int &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">    case let .number(value):</span><br><span class="line">        return value</span><br><span class="line">    case let .sum(left, right):</span><br><span class="line">        return cal(left) + cal(right)</span><br><span class="line">    case let .diff(left, right):</span><br><span class="line">        return cal(left) - cal(right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cal(diff) &#x2F;&#x2F; 输出：7</span><br></pre></td></tr></table></figure><h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><p>在Swift中查看内存占用大小及对齐方式使用枚举：<code>MemoryLayout</code></p><ul><li>size 实际用到的空间大小</li><li>stride 分配占用的空间大小</li><li>alignment 内存对齐方式</li></ul><p>下面的意思是，<code>Int</code>在内存中占用8个字节，内存对齐数是8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MemoryLayout&lt;Int&gt;.size &#x2F;&#x2F; 输出：8</span><br><span class="line">MemoryLayout&lt;Int&gt;.stride &#x2F;&#x2F; 输出：8</span><br><span class="line">MemoryLayout&lt;Int&gt;.alignment &#x2F;&#x2F; 输出：8</span><br></pre></td></tr></table></figure><p>查看枚举占用内存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">enum Password &#123;</span><br><span class="line">    case number(Int, Int, Int, Int)</span><br><span class="line">    case other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var pwd &#x3D; Password.number(1, 2, 2, 3)</span><br><span class="line"></span><br><span class="line">MemoryLayout.size(ofValue: pwd) &#x2F;&#x2F; 输出：33</span><br><span class="line">MemoryLayout.stride(ofValue: pwd) &#x2F;&#x2F; 输出：40</span><br><span class="line">MemoryLayout.alignment(ofValue: pwd) &#x2F;&#x2F; 输出：8</span><br></pre></td></tr></table></figure><p><em>为什么是占用内存大小是33，而分配了40？</em></p><ul><li><code>number(Int, Int, Int, Int)</code>占用32个字节，<code>other</code>占用1个字节，所以一共只需要占用33个字节就够用了</li><li>因为内存对齐数是8，所以分配内存的时候只能是8的倍数，而33个字节不够8的倍数，所以往高位补齐后就是40了</li></ul><p><em>为什么<code>other</code>占用1个字节呢？</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">enum Season &#123;</span><br><span class="line">    case spring, summer, autumn, winter</span><br><span class="line">&#125;</span><br><span class="line">MemoryLayout&lt;Season&gt;.size &#x2F;&#x2F; 输出：1</span><br><span class="line">MemoryLayout&lt;Season&gt;.stride &#x2F;&#x2F; 输出：1</span><br><span class="line">MemoryLayout&lt;Season&gt;.alignment &#x2F;&#x2F; 输出：1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 限定类型</span><br><span class="line">enum Season: String &#123;</span><br><span class="line">    case spring, summer, autumn, winter</span><br><span class="line">&#125;</span><br><span class="line">MemoryLayout&lt;Season&gt;.size &#x2F;&#x2F; 输出：1</span><br><span class="line">MemoryLayout&lt;Season&gt;.stride &#x2F;&#x2F; 输出：1</span><br><span class="line">MemoryLayout&lt;Season&gt;.alignment &#x2F;&#x2F; 输出：1</span><br></pre></td></tr></table></figure><ul><li>上面代码可以看出不管类型是什么占用的内存大小都是1个字节</li><li>其实本质上是关联值和原始值的区别</li></ul><p>结论一：把传进去的关联值直接存储到枚举变量内存里面的，所以枚举变量是关联值的话，内存是一定和将要存储的关联值大小有关</p><p>为了证实结论一，比较下面的两个不同类型的关联值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">enum Password &#123;</span><br><span class="line">    case number(Int, Int, Int, Int)</span><br><span class="line">    case other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MemoryLayout&lt;Password&gt;.size &#x2F;&#x2F; 输出：33</span><br><span class="line">MemoryLayout&lt;Password&gt;.stride &#x2F;&#x2F; 输出：40</span><br><span class="line">MemoryLayout&lt;Password&gt;.alignment &#x2F;&#x2F; 输出：8</span><br><span class="line"></span><br><span class="line">enum Password &#123;</span><br><span class="line">    case number(String, String, String, String)</span><br><span class="line">    case other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MemoryLayout&lt;Password&gt;.size &#x2F;&#x2F; 输出：65</span><br><span class="line">MemoryLayout&lt;Password&gt;.stride &#x2F;&#x2F; 输出：72</span><br><span class="line">MemoryLayout&lt;Password&gt;.alignment &#x2F;&#x2F; 输出：8</span><br></pre></td></tr></table></figure><p>结论二：原始值固定后是不能修改的，内存中只会把对应的成员值（序号）存下来，这时候1个字节足够用了，和枚举类型无关（不管是Int还是String枚举都是占用一个字节）</p><p>分析下面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enum Season: Int &#123;</span><br><span class="line">    &#x2F;&#x2F; 序号0            序号1       序号2        序号3</span><br><span class="line">    case spring &#x3D; 1, summer &#x3D; 2, autumn &#x3D; 3, winter &#x3D; 4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var season1 &#x3D; Season.spring</span><br><span class="line">var season2 &#x3D; Season.spring</span><br><span class="line">var season3 &#x3D; Season.spring</span><br><span class="line">MemoryLayout&lt;Season&gt;.size &#x2F;&#x2F; 输出：1</span><br><span class="line">MemoryLayout&lt;Season&gt;.stride &#x2F;&#x2F; 输出：1</span><br><span class="line">MemoryLayout&lt;Season&gt;.alignment &#x2F;&#x2F; 输出：1</span><br></pre></td></tr></table></figure><blockquote><p>疑问：成员值在内存中只占用1个字节，Int或String的原始值是怎么存下的？rawValue其实是另外一块地址  </p></blockquote><ul><li>关联值才会存储到枚举变量中，原始值不会占用枚举变量内存</li><li>我们可以通过内存地址看到前面的字节被关联值占用，关联值后面有一个字节是保存成员值<ul><li>1个字节存储成员值（如果只有一个枚举成员则不占用内存）</li><li>N个字节存储关联值（N取占用内存最大的关联值），任何一个case的关联值都共用这N个字节（共用体）</li><li>剩余字节按照对齐数补齐</li></ul></li></ul><blockquote><p><code>Switch</code>的<code>case</code>其实是比较枚举的成员值的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift基本语法之函数</title>
      <link href="/2019/05/10/swift-syntax-function/"/>
      <url>/2019/05/10/swift-syntax-function/</url>
      
        <content type="html"><![CDATA[<h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><ul><li><p>有返回值（形参默认是let，也只能是let）</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func pi() -&gt; Double &#123;</span><br><span class="line">    return 3.14</span><br><span class="line">&#125;</span><br><span class="line">print(pi()) &#x2F;&#x2F; 输出：3.14</span><br><span class="line"></span><br><span class="line">func sum(v1: Int, v2: Int) -&gt; Int &#123;</span><br><span class="line">    return v1 + v2</span><br><span class="line">&#125;</span><br><span class="line">print(sum(v1: 10, v2: 20)) &#x2F;&#x2F; 输出：30</span><br></pre></td></tr></table></figure></li><li><p>无返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func hello() -&gt; Void &#123;</span><br><span class="line">    print(&quot;hello&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func hello() -&gt; () &#123;</span><br><span class="line">    print(&quot;hello&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func hello() &#123;</span><br><span class="line">    print(&quot;hello&quot;)</span><br><span class="line">&#125;</span><br><span class="line">hello() &#x2F;&#x2F; 输出：hello</span><br></pre></td></tr></table></figure></li><li><p>隐式返回<br>如果整个函数体是一个单一表达式，那么函数会隐式返回这个表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func sum(v1: Int, v2: Int) -&gt; Int &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(sum(v1: 10, v2: 10)) &#x2F;&#x2F; 输出：20</span><br></pre></td></tr></table></figure></li><li><p>返回元组：实现多返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func calculate(v1: Int, v2: Int) -&gt; (sum: Int, difference: Int, average: Int) &#123;</span><br><span class="line">    let sum &#x3D; v1 + v2</span><br><span class="line">    return (sum, v1 - v2, sum &gt;&gt; 1)</span><br><span class="line">&#125;</span><br><span class="line">let result &#x3D; calculate(v1: 10, v2: 20)</span><br><span class="line">print(result.sum, result.difference, result.average) &#x2F;&#x2F; 输出：30 -10 15</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数的文档注释"><a href="#函数的文档注释" class="headerlink" title="函数的文档注释"></a>函数的文档注释</h4><p>官网介绍：<a href="https://swift.org/documentatior/api-design-guidelines" target="_blank" rel="noopener">https://swift.org/documentatior/api-design-guidelines</a></p><p>光标放到对应函数名称上，按下<code>Option</code>即可查看函数相关描述文档<br><img src="http://blog.idbeny.com/3tg7i.png@normal" alt=""></p><ul><li>上图看到sum的函数描述都是空的，如何填写描述信息呢？</li><li>添加文档快捷键(光标一定要在函数上或函数上方)：<code>Command + Option + /</code></li></ul><p>默认的文档注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;#Description#&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; - Parameters:</span><br><span class="line">&#x2F;&#x2F;&#x2F;   - v1: &lt;#v1 description#&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F;   - v2: &lt;#v2 description#&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; - Returns: &lt;#description#&gt;</span><br><span class="line">func sum(v1: Int, v2: Int) -&gt; Int &#123; v1 + v2&#125;</span><br></pre></td></tr></table></figure><p>更详细的文档注释（概述和详述一定要隔开，否则会默认为详述）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; 将2个整数相加【概述】</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 将2个整数相加【详细的描述】</span><br><span class="line">&#x2F;&#x2F;&#x2F; - Parameters:</span><br><span class="line">&#x2F;&#x2F;&#x2F;   - v1: 第一个参数</span><br><span class="line">&#x2F;&#x2F;&#x2F;   - v2: 第二个参数</span><br><span class="line">&#x2F;&#x2F;&#x2F; - Returns: 2个参数的和</span><br><span class="line">&#x2F;&#x2F;&#x2F; - Note:传入2个整数【批注】</span><br><span class="line">func sum(v1: Int, v2: Int) -&gt; Int &#123; v1 + v2&#125;</span><br></pre></td></tr></table></figure><p>效果<br><img src="http://blog.idbeny.com/5odsn.png@normal" alt=""></p><h4 id="参数标签"><a href="#参数标签" class="headerlink" title="参数标签"></a>参数标签</h4><ul><li>可以修改参数标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; at是外面调用的，time是函数内部使用的</span><br><span class="line">func goToWord(at time: String) &#123;</span><br><span class="line">    print(&quot;time is \(time)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">goToWord(at: &quot;8:00&quot;)</span><br></pre></td></tr></table></figure></li></ul><p>可以使用下划线<code>_</code>省略参数标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func sum(_ v1: Int, _ v2: Int) -&gt; Int &#123; v1 + v2&#125;</span><br><span class="line"></span><br><span class="line">sum(10, 20)</span><br></pre></td></tr></table></figure><h4 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h4><ul><li>参数可以有默认值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func check(name: String &#x3D; &quot;nobody&quot;, age: Int, job: String &#x3D; &quot;none&quot;) &#123;</span><br><span class="line">    print(&quot;name&#x3D;\(name), age&#x3D;\(age), job&#x3D;\(job)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">check(age: 10)</span><br><span class="line">check(name: &quot;Jack&quot;, age: 20, job: &quot;Programmer&quot;)</span><br><span class="line">check(name: &quot;Eve&quot;, age: 18)</span><br><span class="line">check(age: 10, job: &quot;Superman&quot;)</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> name&#x3D;nobody, age&#x3D;10, job&#x3D;none</span><br><span class="line"> name&#x3D;Jack, age&#x3D;20, job&#x3D;Programmer</span><br><span class="line"> name&#x3D;Eve, age&#x3D;18, job&#x3D;none</span><br><span class="line"> name&#x3D;nobody, age&#x3D;10, job&#x3D;Superman</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></li><li>C++的默认参数有个限制：必须从右往左设置，而且不能跨标签；Swift拥有参数标签，因此没有此类限制</li><li>省略参数标签时，需要特别注意，避免出错</li><li>没有默认值的参数标签不能省略（如上面代码age就不能省略）</li></ul><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><ul><li><p>一个函数最多只能有1个可变参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func sum(_ numbers: Int...) -&gt; Int &#123;</span><br><span class="line">    var total &#x3D; 0</span><br><span class="line">    for number in numbers &#123;</span><br><span class="line">        total +&#x3D; number</span><br><span class="line">    &#125;</span><br><span class="line">    return total</span><br><span class="line">&#125;</span><br><span class="line">let result &#x3D; sum(10, 20, 30, 40)</span><br><span class="line">print(result) &#x2F;&#x2F; 输出：100</span><br></pre></td></tr></table></figure></li><li><p>紧跟在可变参数后面的参数不能省略参数标签（思考：如果省略了会怎么样？）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func test(_ numbers: Int..., string: String, _ other: String) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">test(10, 20, 30, string: &quot;idbeny&quot;, &quot;1024星球&quot;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="输入输出参数"><a href="#输入输出参数" class="headerlink" title="输入输出参数"></a>输入输出参数</h4><ul><li>可以用inout定义一个输入输出参数：可以在函数内部修改外部实参的值</li><li><code>inout</code>必须和<code>&amp;</code>配合使用</li><li>本质上是地址传递</li><li>可变参数不能标记为<code>inout</code></li><li><code>inout</code>参数不能有默认值</li><li><code>inout</code>参数只能传入可以被多次赋值的</li></ul><p>如下修改会报错（因为形参是用let修饰的）<br><img src="http://blog.idbeny.com/zj3ze.png@normal" alt=""></p><p>使用<code>inout</code>和<code>&amp;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var number &#x3D; 10</span><br><span class="line">func add(_ num: inout Int) &#123;</span><br><span class="line">    num &#x3D; 20</span><br><span class="line">&#125;</span><br><span class="line">add(&amp;number)</span><br><span class="line">print(number) &#x2F;&#x2F; 输出：20</span><br></pre></td></tr></table></figure><p>通过这种方式也可以交换两个变量的值（其实官方有提供交换函数<code>swap</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 方法一（使用临时变量）</span><br><span class="line">func swapValues(_ v1: inout Int, _ v2: inout Int) &#123;</span><br><span class="line">    let temp &#x3D; v1</span><br><span class="line">    v1 &#x3D; v2</span><br><span class="line">    v2 &#x3D; temp</span><br><span class="line">&#125;</span><br><span class="line">var num1 &#x3D; 10</span><br><span class="line">var num2 &#x3D; 20</span><br><span class="line">swapValues(&amp;num1, &amp;num2)</span><br><span class="line">print(&quot;num1&#x3D;\(num1), num2&#x3D;\(num2)&quot;) &#x2F;&#x2F; 输出：num1&#x3D;20, num2&#x3D;10</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法二（使用元组）</span><br><span class="line">var num3 &#x3D; 30</span><br><span class="line">var num4 &#x3D; 40</span><br><span class="line">func swapValues1(_ v1: inout Int, _ v2: inout Int) &#123;</span><br><span class="line">    (v1, v2) &#x3D; (v2, v1)</span><br><span class="line">&#125;</span><br><span class="line">swap(&amp;num3, &amp;num4)</span><br><span class="line">print(&quot;num3&#x3D;\(num3), num4&#x3D;\(num4)&quot;) &#x2F;&#x2F; 输出：num3&#x3D;40, num4&#x3D;30</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法三（系统提供的swap函数）</span><br><span class="line">var num5 &#x3D; 50</span><br><span class="line">var num6 &#x3D; 60</span><br><span class="line">swap(&amp;num5, &amp;num6)</span><br><span class="line">print(&quot;num5&#x3D;\(num5), num6&#x3D;\(num6)&quot;) &#x2F;&#x2F; 输出：num5&#x3D;60, num6&#x3D;50</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ul><li>OC是不支持函数重载的，但Swift支持函数重载</li><li>规则<ul><li>函数名相同</li><li>参数个数不同 || 参数类型不同 || 参数标签不同</li></ul></li></ul><p>以下函数都构成了函数重载，都是可以正常调用的，且函数没有冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 参照</span><br><span class="line">func sum(v1: Int, v2: Int) &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 参数个数不同</span><br><span class="line">func sum(v1: Int, v2: Int, v3: Int) &#123;</span><br><span class="line">    v1 + v2 + v3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 参数类型不同</span><br><span class="line">func sum(v1: Int, v2: Double) &#123;</span><br><span class="line">    Double(v1) + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 参数标签不同（忽略标签）</span><br><span class="line">func sum(_ v1: Int, _ v2: Int) &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 参数标签不同（标签名不同）</span><br><span class="line">func sum(a: Int, b: Int) &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>返回值类型与函数重载无关<br><img src="http://blog.idbeny.com/x7h3k.png@normal" alt=""></p></li><li><p>默认参数值和函数重载一起使用产生二义性时，编译器不会报错（在C++中会报错）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func sum(v1: Int, v2: Int) -&gt; Int &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func sum(v1: Int, v2: Int, v3: Int &#x3D; 30) -&gt; Int &#123;</span><br><span class="line">    v1 + v2 + v3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(v1: 10, v2: 20) &#x2F;&#x2F; 输出：30</span><br></pre></td></tr></table></figure></li><li><p>可变参数、省略参数标签，函数重载一起使用产生二义性时，编译器有<strong>可能会</strong>报错<br><img src="http://blog.idbeny.com/69q6s.png@normal" alt=""></p></li></ul><p>为什么是可能会报错？（下面代码可以正常执行，所以平时开发中也不建议这样写）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func sum(_ v1: Int, _ v2: Int) -&gt; Int &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func sum(_ numbers: Int...) -&gt; Int &#123;</span><br><span class="line">    var total &#x3D; 0</span><br><span class="line">    for num in numbers &#123;</span><br><span class="line">        total +&#x3D; num</span><br><span class="line">    &#125;</span><br><span class="line">    return total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(10, 20) &#x2F;&#x2F; 输出：30</span><br></pre></td></tr></table></figure><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>每一个函数都是有类型的，函数类型由形式参数类型，返回值类型组成</p><ul><li>函数类型可以作为函数参数传递</li><li>函数类型可以作为函数返回值</li><li>返回值是函数类型的函数，叫做<strong>高阶函数</strong></li></ul><h3 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h3><ul><li>将函数定义在函数内部<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func foward(_ forward: Bool) -&gt; (Int) -&gt; Int &#123;</span><br><span class="line">    func next(_ input: Int) -&gt; Int &#123;</span><br><span class="line">        input + 1</span><br><span class="line">    &#125;</span><br><span class="line">    func previous(_ input: Int) -&gt; Int &#123;</span><br><span class="line">        input - 1</span><br><span class="line">    &#125;</span><br><span class="line">    return forward ? next : previous</span><br><span class="line">&#125;</span><br><span class="line">foward(true)(1) &#x2F;&#x2F; 输出：2</span><br><span class="line">foward(false)(2) &#x2F;&#x2F; 输出：1</span><br></pre></td></tr></table></figure></li></ul><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>如果开启了编译器优化（Release模式默认开启），编译器会自动将某些函数变成内联函数</p><ul><li>Release默认按照快速运行方式优化</li><li>Debug也可以手动开启，但是为了开发中方便调试，一般都会关闭</li></ul><p><img src="http://blog.idbeny.com/ibl4w.png@normal" alt=""></p><p>内联函数的作用？</p><ul><li>内联函数在C++中的经常出现，如果某一个函数是内联函数，编译器在编译的时候会把适当的代码块中的代码放到对应位置，提高代码执行的效率</li><li>将函数调用展开成函数体<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func test() &#123;</span><br><span class="line">    print(&quot;test&quot;)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure></li><li>以上代码如果开启编译器优化，<code>test()</code>会替换为<code>print(&quot;test&quot;)</code></li></ul><p>不是所有的内联函数都会被编译器展开函数体，那些函数不会被内联？</p><ul><li>函数体比较长</li><li>包含递归调用</li><li>包含动态派发</li></ul><p><strong>@inline</strong><br>永远不会被内联（即使开启了编译器优化）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@inline(never) func test() &#123;</span><br><span class="line">    print(&quot;test&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启编译器优化后，及时代码很长，也会被内联（递归调用、动态派发的函数除外）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@inline(__always) func test1() &#123;</span><br><span class="line">    print(&quot;test&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在Release模式下，编译器已经开启优化，会自动决定哪些函数需要内联，因此没必要使用<code>@inline</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift基本语法之循环控制</title>
      <link href="/2019/05/08/swift-syntax-loop/"/>
      <url>/2019/05/08/swift-syntax-loop/</url>
      
        <content type="html"><![CDATA[<h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><ul><li><p>if后面的条件可以省略小括号</p></li><li><p>条件后面的大括号不可以省略</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let age &#x3D; 10</span><br><span class="line">if age &gt;&#x3D; 18 &#123;</span><br><span class="line">    print(&quot;大学&quot;)</span><br><span class="line">&#125; else if age &gt;&#x3D; 16 &#123;</span><br><span class="line">    print(&quot;高中&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    print(&quot;义务&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if后面的条件只能是Bool类型<br><img src="http://blog.idbeny.com/mxekd.png@normal" alt=""></p></li></ul><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var num &#x3D; 3</span><br><span class="line">while num &gt; 0 &#123;</span><br><span class="line">    print(&quot;num is \(num)&quot;)</span><br><span class="line">    num -&#x3D; 1</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> num is 3</span><br><span class="line"> num is 2</span><br><span class="line"> num is 1</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><ul><li>swift中没有<code>do-while</code>，相同逻辑的是<code>repeat-while</code></li><li>swift3开始，去除了自增（++），自减（–）运算符<ul><li>不要再使用<code>num++</code>，<code>num--</code>，<code>++num</code>，<code>--num</code>等运算符了</li><li>自增自减运算符在不同平台有不一样的效果，所以swift放弃了使用</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var num &#x3D; -1</span><br><span class="line">repeat &#123;</span><br><span class="line">    print(&quot;num is \(num)&quot;)</span><br><span class="line">&#125; while num &gt; 0</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：num is -1</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><ul><li>区间运算符：<code>a...b</code>（a &lt;= 取值 &lt;= b）</li><li>变量默认是let修饰，可以自己根据情况修改为var</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 常规用法</span><br><span class="line">let words &#x3D; [&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;, &quot;ddd&quot;]</span><br><span class="line">for i in words &#123;</span><br><span class="line">    print(i);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> aaa</span><br><span class="line"> bbb</span><br><span class="line"> ccc</span><br><span class="line"> ddd</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 区间用法</span><br><span class="line">for i in 1...3 &#123;</span><br><span class="line">    print(i, words[i])</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> 1 bbb</span><br><span class="line"> 2 ccc</span><br><span class="line"> 3 ddd</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; var修饰</span><br><span class="line">for var i in 1...3 &#123;</span><br><span class="line">    i +&#x3D; 5</span><br><span class="line">    print(i)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> 6</span><br><span class="line"> 7</span><br><span class="line"> 8</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 区间定义常量</span><br><span class="line">let range &#x3D; 1...3</span><br><span class="line">for i in range &#123;</span><br><span class="line">    print(i)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> 1</span><br><span class="line"> 2</span><br><span class="line"> 3</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 区间值自定义</span><br><span class="line">let a &#x3D; 1</span><br><span class="line">let b &#x3D; 3</span><br><span class="line">for i in a...b &#123;</span><br><span class="line">    print(i)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> 1</span><br><span class="line"> 2</span><br><span class="line"> 3</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><ul><li><p>半开区间运算符：<code>a..&lt;b</code>（a &lt;= 取值 &lt; b）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for i in 1..&lt;3 &#123;</span><br><span class="line">    print(i)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> 1</span><br><span class="line"> 2</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>区间运算符用在数组上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 此处只是示例用法，实际应用时应注意数组越界</span><br><span class="line">let words &#x3D; [&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;, &quot;ddd&quot;]</span><br><span class="line">for i in words[0...3] &#123;</span><br><span class="line">    print(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单侧区间：让区间朝一个方向尽可能的远</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 常规闭区间</span><br><span class="line">let words &#x3D; [&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;, &quot;ddd&quot;]</span><br><span class="line">for word in words[0...3] &#123;</span><br><span class="line">&#x2F;&#x2F;    print(word);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> aaa</span><br><span class="line"> bbb</span><br><span class="line"> ccc</span><br><span class="line"> ddd</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 左边代表开始，右边代表数组最大长度</span><br><span class="line">for word in words[2...] &#123;</span><br><span class="line">    print(word)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> ccc</span><br><span class="line"> ddd</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 左边代表0，右边闭区间值</span><br><span class="line">for word in words[...2] &#123;</span><br><span class="line">    print(word)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> aaa</span><br><span class="line"> bbb</span><br><span class="line"> ccc</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 左边代表0，右边&lt;2</span><br><span class="line">for word in words[..&lt;2] &#123;</span><br><span class="line">    print(word)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> aaa</span><br><span class="line"> bbb</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 无限制，range左边是无穷小的整数</span><br><span class="line">let range &#x3D; ...5</span><br><span class="line">print(range.contains(7)) &#x2F;&#x2F; false</span><br><span class="line">print(range.contains(1)) &#x2F;&#x2F; true</span><br><span class="line">print(range.contains(-2)) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure></li></ul><h3 id="区间类型（Range）"><a href="#区间类型（Range）" class="headerlink" title="区间类型（Range）"></a>区间类型（Range）</h3><ul><li>范围代表的是两个值的区间，它由上下边界进行定义</li><li>不能对 Range 或者 ClosedRange 进行迭代，但是我们可以检查某个元素是否存在于范围中</li><li>Range 和 ClosedRange 既非序列，也不是集合类型。有一部分范围确实是序列是因为 0..&lt;10 的类型其实是一个 CountableRang。CountableRange 和 Range 很相似，只不过它还需要一个附加约束:它的元素类型需要遵守 Strideable 协议 (以整数为步⻓)。Swift 将这类功能更强的范围叫做可数范围，这是因为只有这 类范围可以被迭代。可数范围的边界可以是整数或者指针类型，但不能是浮点数类型，这是由 于 Stride 类型中有一个整数的约束。如果你想要对连续的浮点数值进行迭代的话，你可以通过 使用 stride(from:to:by) 和 stride(from:through:by) 方法来创建序列用以迭代。</li></ul><table><thead><tr><th align="center">–</th><th align="center">半开</th><th align="center">闭合</th></tr></thead><tbody><tr><td align="center">Comparable</td><td align="center">Range</td><td align="center">ClosedRange</td></tr><tr><td align="center">Strideable(以整数为步长)</td><td align="center">CountableRange</td><td align="center">CountableClosedRange</td></tr></tbody></table><ul><li>同时省略掉上、下两个边界，这样你将会得到整个集合类型的切片<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2,3,4]</span><br><span class="line">arr[...] &#x2F;&#x2F; [1, 2, 3, 4] </span><br><span class="line">type(of: arr) &#x2F;&#x2F; Array&lt;Int&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 半开区间</span><br><span class="line">let rang: Range &#x3D; 0.0..&lt;1.0</span><br><span class="line">let countableRange: CountableRange &#x3D; 0..&lt;1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 闭区间</span><br><span class="line">let closedRange: ClosedRange &#x3D; 0.0...1.0 </span><br><span class="line">let countableClosedRange: CountableClosedRange &#x3D; 0...1 </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 右侧闭区间</span><br><span class="line">let partialRangeThrough: PartialRangeThrough &#x3D; ...1.0</span><br><span class="line">&#x2F;&#x2F; 左侧闭区间</span><br><span class="line">let partialRangeFrom: PartialRangeFrom &#x3D; 0.0...</span><br><span class="line">&#x2F;&#x2F; 右侧开区间</span><br><span class="line">let partialRangeUpTo: PartialRangeUpTo &#x3D; ..&lt;1.0</span><br><span class="line">&#x2F;&#x2F; 左侧闭区间</span><br><span class="line">let countablePartialRangeFrom: CountablePartialRangeFrom  &#x3D; 1...</span><br></pre></td></tr></table></figure><ul><li><p>字符、字符串也能使用区间运算符，但默认不能用在for-in中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let stringRange1 &#x3D; &quot;cc&quot;...&quot;ff&quot;</span><br><span class="line">stringRange1.contains(&quot;cb&quot;) &#x2F;&#x2F; false</span><br><span class="line">stringRange1.contains(&quot;dz&quot;) &#x2F;&#x2F; true</span><br><span class="line">stringRange1.contains(&quot;e&quot;) &#x2F;&#x2F; true</span><br><span class="line">stringRange1.contains(&quot;fg&quot;) &#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line">let stringRange2 &#x3D; &quot;a&quot;...&quot;f&quot;</span><br><span class="line">stringRange2.contains(&quot;a&quot;) &#x2F;&#x2F; true</span><br><span class="line">stringRange2.contains(&quot;e&quot;) &#x2F;&#x2F; true</span><br><span class="line">stringRange2.contains(&quot;g&quot;) &#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; \0到~囊括了所有可能要用到的ASCII字符</span><br><span class="line">let characterRange: ClosedRange&lt;Character&gt; &#x3D; &quot;\0&quot;...&quot;~&quot;</span><br><span class="line">characterRange.contains(&quot;G&quot;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure></li><li><p>带间隔的区间值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">let startValue &#x3D; 0</span><br><span class="line">let endValue &#x3D; 10</span><br><span class="line">let interval &#x3D; 2</span><br><span class="line">&#x2F;&#x2F; value取值从startValue开始，每次间隔interval，不超过endValue</span><br><span class="line">for value in stride(from: startValue, through: endValue, by: interval) &#123;</span><br><span class="line">    print(value)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> 0</span><br><span class="line"> 2</span><br><span class="line"> 4</span><br><span class="line"> 6</span><br><span class="line"> 8</span><br><span class="line"> 10</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 另外一个方法 to是开区间</span><br><span class="line"> public func stride&lt;T&gt;(from start: T, to end: T, by stride: T.Stride) -&gt; StrideTo&lt;T&gt; where T : Strideable</span><br></pre></td></tr></table></figure></li></ul><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ul><li><p>case、default后面不能写大括号（编译器会报错）</p></li><li><p>默认情况下可以不写break，并不会贯穿到后面的条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enum HeaderCode &#123;case success, failure, redirect, connect&#125;</span><br><span class="line">let code &#x3D; HeaderCode.success</span><br><span class="line">switch code &#123;</span><br><span class="line">case .success:</span><br><span class="line">    print(&quot;success&quot;)</span><br><span class="line">case .redirect:</span><br><span class="line">    print(&quot;redirect&quot;)</span><br><span class="line">case .connect:</span><br><span class="line">    print(&quot;connect&quot;)</span><br><span class="line">default:</span><br><span class="line">    print(&quot;failure&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：success</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>如果需要贯穿，怎么办？fallthrough</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">enum HeaderCode &#123;case success, failure, redirect, connect&#125;</span><br><span class="line">let code &#x3D; HeaderCode.success</span><br><span class="line">switch code &#123;</span><br><span class="line">case .success:</span><br><span class="line">    print(&quot;success&quot;)</span><br><span class="line">    fallthrough</span><br><span class="line">case .redirect:</span><br><span class="line">    print(&quot;redirect&quot;)</span><br><span class="line">case .connect:</span><br><span class="line">    print(&quot;connect&quot;)</span><br><span class="line">default:</span><br><span class="line">    print(&quot;failure&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> success</span><br><span class="line"> redirect</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>case、default后面至少要有一条语句<br><img src="http://blog.idbeny.com/r9rgd.png@normal" alt=""></p></li><li><p>switch必须要保证能处理所有情况</p><ul><li>如果不想做任何事，加个break即可</li><li>如果能保证已处理所有情况，也可以不使用default<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enum HeaderCode &#123;case success, failure, redirect, connect&#125;</span><br><span class="line">let code &#x3D; HeaderCode.success</span><br><span class="line">switch code &#123;</span><br><span class="line">case .success:</span><br><span class="line">    break</span><br><span class="line">case .redirect:</span><br><span class="line">    print(&quot;redirect&quot;)</span><br><span class="line">case .connect:</span><br><span class="line">    print(&quot;connect&quot;)</span><br><span class="line">case .failure:</span><br><span class="line">    print(&quot;failure&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>复合条件（switch支持Character、String类型）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; String</span><br><span class="line">let string &#x3D; &quot;idbeny&quot;</span><br><span class="line">switch string &#123;</span><br><span class="line">case &quot;idbeny&quot;:</span><br><span class="line">    print(&quot;idbeny&quot;)</span><br><span class="line">    fallthrough</span><br><span class="line">case &quot;developer&quot;:</span><br><span class="line">    print(&quot;developer&quot;)</span><br><span class="line">default:</span><br><span class="line">    print(&quot;man&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> idbeny</span><br><span class="line"> developer</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Character</span><br><span class="line">let character: Character &#x3D; &quot;a&quot;</span><br><span class="line">switch character &#123;</span><br><span class="line">case &quot;a&quot;, &quot;A&quot;:</span><br><span class="line">    print(&quot;aaa&quot;)</span><br><span class="line">default:</span><br><span class="line">    print(&quot;not found&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：aaa</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>区间匹配、元组匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 区间匹配</span><br><span class="line">let count &#x3D; 10</span><br><span class="line">switch count &#123;</span><br><span class="line">case 0:</span><br><span class="line">    print(&quot;zero&quot;)</span><br><span class="line">case 1...5:</span><br><span class="line">    print(&quot;few&quot;)</span><br><span class="line">case 10...100:</span><br><span class="line">    print(&quot;large&quot;)</span><br><span class="line">default:</span><br><span class="line">    print(&quot;not found&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：large</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 元组匹配</span><br><span class="line">let point &#x3D; (1, 1)</span><br><span class="line">switch point &#123;</span><br><span class="line">case (0, 0):</span><br><span class="line">    print(&quot;origin&quot;)</span><br><span class="line">case (_, 0):</span><br><span class="line">    print(&quot;x-axis&quot;)</span><br><span class="line">case (0, _):</span><br><span class="line">    print(&quot;y-axis&quot;)</span><br><span class="line">case (-2...2, -2...2):</span><br><span class="line">    print(&quot;in the box&quot;)</span><br><span class="line">default:</span><br><span class="line">    print(&quot;not found&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：in the box</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>可以用下划线(<code>_</code>)忽略某个值</p></li><li><p>值绑定（必要时let可以改为var）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let point1 &#x3D; (2, 0)</span><br><span class="line">switch point1 &#123;</span><br><span class="line">case (let x, 0):</span><br><span class="line">    print(&quot;on the x-axis and x value of \(x)&quot;)</span><br><span class="line">case (0, let y):</span><br><span class="line">    print(&quot;on the y-axis and y value of \(y)&quot;)</span><br><span class="line">case (let x, let y):</span><br><span class="line">    print(&quot;at (\(x), \(y))&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：on the x-axis and x value of 2</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></li></ul><h3 id="where（过滤）"><a href="#where（过滤）" class="headerlink" title="where（过滤）"></a>where（过滤）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">let point &#x3D; (1, -1)</span><br><span class="line">switch point &#123;</span><br><span class="line">case let(x, y) where x &#x3D;&#x3D; y:</span><br><span class="line">    print(&quot;x &#x3D;&#x3D; y&quot;)</span><br><span class="line">case let(x, y) where x &#x3D;&#x3D; -y:</span><br><span class="line">    print(&quot;x &#x3D;&#x3D; -y&quot;)</span><br><span class="line">case let(x, y):</span><br><span class="line">    print(&quot;at (\(x), \(y))&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：x &#x3D;&#x3D; -y</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 把所有数加起来</span><br><span class="line">var numbers &#x3D; [10, 20, -30, -40, 50]</span><br><span class="line">var sum &#x3D; 0</span><br><span class="line">for num in numbers where num &gt; 0 &#123;</span><br><span class="line">    sum +&#x3D; num</span><br><span class="line">&#125;</span><br><span class="line">print(sum)</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：80</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="标签语句"><a href="#标签语句" class="headerlink" title="标签语句"></a>标签语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">side: for i in 1...4 &#123;</span><br><span class="line">    for k in 1...4 &#123;</span><br><span class="line">        if k &#x3D;&#x3D; 3 &#123;</span><br><span class="line">            continue side</span><br><span class="line">        &#125;</span><br><span class="line">        if i &#x3D;&#x3D; 3 &#123;</span><br><span class="line">            break side</span><br><span class="line">        &#125;</span><br><span class="line">        print(&quot;i &#x3D;&#x3D; \(i), k &#x3D;&#x3D; \(k)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> 输出：</span><br><span class="line"> i &#x3D;&#x3D; 1, k &#x3D;&#x3D; 1</span><br><span class="line"> i &#x3D;&#x3D; 1, k &#x3D;&#x3D; 2</span><br><span class="line"> i &#x3D;&#x3D; 2, k &#x3D;&#x3D; 1</span><br><span class="line"> i &#x3D;&#x3D; 2, k &#x3D;&#x3D; 2</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift循环控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】Swift基本语法之数据类型</title>
      <link href="/2019/05/07/swift-syntax-data-types/"/>
      <url>/2019/05/07/swift-syntax-data-types/</url>
      
        <content type="html"><![CDATA[<p>如果你习惯了OC的语法，第一次接触Swift的语法可能会有点抗拒，因为Swift的语法有点怪。但如果你有前端的基础，学Swift可能会有点吃力，如果你有C++的基础可能会学得比较快点。不管你有什么样的语法基础，学会Swift后你都会觉得这是门优秀的语言，总之相比哥哥OC更简洁，更高效。现在Swift的ABI版本已经到5.2了，总体趋于稳定，社区也很活跃，是系统学习的好时机。</p><a id="more"></a><h3 id="打印（print）"><a href="#打印（print）" class="headerlink" title="打印（print）"></a>打印（print）</h3><p>可以认为是C的扩展写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let word &#x3D; &quot;world&quot;</span><br><span class="line">print(&quot;print output&quot;) &#x2F;&#x2F; 输出：print output</span><br><span class="line">print(&quot;hello \(word)&quot;) &#x2F;&#x2F; 输出：hello world</span><br></pre></td></tr></table></figure><ul><li>以往OC中打印变量使用<code>NSLog(&quot;hello_%@&quot;,var)</code>,Swift使用<code>\(变量)</code></li></ul><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><ul><li>一句代码尾部可以省略分号（;）</li><li>多句代码写到同一行时必须用分号（;）</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释（//）</li><li>多行注释–支持多行嵌套，但必须是双标签（/**/）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 单行注释</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> 多行注释</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> 1.多行注释</span><br><span class="line"> &#x2F;* 多行注释的嵌套 *&#x2F;</span><br><span class="line"> 2.多行注释</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Playground的注释支持markup语法（和markdown相似）<br>如何开启markup语法预览？</p></blockquote><ul><li>选中当前行 -&gt; 菜单栏 -&gt; Editor -&gt; Show Rendered Markup</li><li>开启渲染：Show Rendered Markup</li><li>关闭渲染：Show Raw Markup</li><li><font style="color:red">注意</font>：markup语法只在Playground中有效<br><img src="http://blog.idbeny.com/vyrvz.png@normal" alt=""></li></ul><h3 id="Markup语法"><a href="#Markup语法" class="headerlink" title="Markup语法"></a>Markup语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;: # 一级标题</span><br><span class="line">&#x2F;&#x2F;: ## 二级标题</span><br><span class="line"></span><br><span class="line">&#x2F;*:</span><br><span class="line"> # 一级标题</span><br><span class="line"> </span><br><span class="line"> ## 无序列表</span><br><span class="line"> - 第一个元素</span><br><span class="line"> - 第二个元素</span><br><span class="line"> </span><br><span class="line"> ## 有序列表</span><br><span class="line"> 1. 第一个元素</span><br><span class="line"> 2. 第二个元素</span><br><span class="line"> </span><br><span class="line"> ## 笔记</span><br><span class="line"> &gt; 这是一个笔记</span><br><span class="line"></span><br><span class="line"> ## 分割线</span><br><span class="line"> ---</span><br><span class="line"> </span><br><span class="line"> ## 图片</span><br><span class="line"> ![图片描述](图片链接)</span><br><span class="line"> </span><br><span class="line"> ## 链接</span><br><span class="line"> [链接标题](链接地址)</span><br><span class="line"> </span><br><span class="line"> ## 粗体&#x2F;斜体</span><br><span class="line"> 这是**粗体**，这是*斜体*</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/vygjz.png@normal" alt=""></p><ul><li>单行注释时，冒号前面不能有空格，后面必须有空格</li><li>多行注释时，冒号前面不能有空格，后面不能有内容，必须另起一行</li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>标识符（比如常量名、变量名、函数名）几乎可以使用任何字符</li><li>标识符不能以数字开头，不能包含空白字符、制表符（Tab）、箭头（-&gt;）等特殊字符</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Swift没有基本数据类型的概念，数据类型分为两大类<br><strong>值类型（value-type）</strong></p><ul><li>枚举（enum）<ul><li>Optional</li></ul></li><li>结构体（struct）<ul><li>Bool、Int、Float、Double、Character</li><li>String、Array、Dictionary、Set</li></ul></li></ul><p><strong>引用类型（reference type）</strong></p><ul><li>类（class）<br><img src="http://blog.idbeny.com/oh0dx.png@normal" alt=""></li></ul><p><em>通过官方简介即可看出，Int是用struct描述的</em></p><p><strong>整数类型</strong></p><ul><li>Int8、Int16、Int32、Int64、UInt8、UInt16、UInt32、UInt64</li><li>在32bit平台，Int等价于Int32、Int等价于Int64，所以一般情况下都是直接使用Int即可</li><li>整数的最值：UInt8.max、Int16.min</li></ul><p><strong>浮点类型：</strong></p><ul><li>Float，32位，精度只有6位</li><li>Double，64位，精度至少15位</li></ul><p><strong>字面量：</strong></p><ul><li>布尔类型值在OC中是0和1，但Swift中是true和false（和大部分语言一样）</li><li>字符串类型值用双引号</li><li>字符类型值和字符串一样都是用双引号括起来，但是字符变量必须用Character修饰，否则会默认是字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; 布尔</span><br><span class="line">let bool &#x3D; true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 字符串</span><br><span class="line">let string &#x3D; &quot;1024星球&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 字符</span><br><span class="line">let character: Character &#x3D; &quot;🌎&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 整数</span><br><span class="line">let intDecimal &#x3D; 20</span><br><span class="line">let intBinary &#x3D; 0b10001</span><br><span class="line">let intOctal &#x3D; 0o21</span><br><span class="line">let intHexDecimal &#x3D; 0x11</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 浮点数</span><br><span class="line">let doubleDecimal &#x3D; 125.0 &#x2F;&#x2F; 十进制，等价于1.25e2，例：0.0125 &lt;&#x3D;&gt; 1.25e-2</span><br><span class="line"></span><br><span class="line">let doubleHexDecimal1 &#x3D; 0xFp2 &#x2F;&#x2F; 十六进制，意味着15x2^2，相当于十进制的60.0</span><br><span class="line"></span><br><span class="line">let doubleHexDecimal2 &#x3D; 0xFp-2 &#x2F;&#x2F; 十六进制，意味着15x2^-2，相当于十进制的3.75</span><br><span class="line"></span><br><span class="line">&#x2F;* 以下都是表示12.1875</span><br><span class="line"> 十进制：12.1875、1.21875e1</span><br><span class="line"> 十六进制：0xC.3p0</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 数组</span><br><span class="line">let array &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 字典</span><br><span class="line">let dictionary &#x3D; [&quot;age&quot; : 20, &quot;height&quot; : 1.88]</span><br></pre></td></tr></table></figure><ul><li>整数和浮点数可以添加额外的零或者添加下划线来增强可读性<ul><li>100_0000、1_000_000.000_000_1、000123.456</li></ul></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><strong>整数转换</strong></p><p>在Swift中不同类型之间是不能运算的，否则编译器会报错<br><img src="http://blog.idbeny.com/zhf7n.png@normal" alt=""></p><p>正确做法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let int1: UInt16 &#x3D; 2_000</span><br><span class="line">let int2: UInt8 &#x3D; 1</span><br><span class="line">let int3 &#x3D; int1 + UInt16(int2)</span><br></pre></td></tr></table></figure><ul><li>把低类型转为高类型（为什么？字节占用）</li></ul><p><strong>整数、浮点数转换</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let int1: UInt16 &#x3D; 2_000</span><br><span class="line">let int2: UInt8 &#x3D; 1</span><br><span class="line">let int3 &#x3D; int1 + UInt16(int2)</span><br><span class="line"></span><br><span class="line">let int &#x3D; 3</span><br><span class="line">let double &#x3D; 0.1415926</span><br><span class="line">let pi &#x3D; Double(int) + double</span><br><span class="line">print(pi) &#x2F;&#x2F; 输出：3.1415926</span><br><span class="line">let intPi &#x3D; int + Int(double)</span><br><span class="line">print(intPi) &#x2F;&#x2F; 输出：3</span><br></pre></td></tr></table></figure><ul><li>浮点转为整形是会把小数点后放弃，只取浮点整数部分</li></ul><p><em>思考：每次都需要转换，对于未知类型的数据（服务器返回的数据）怎么办？</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 字面量可以直接相加，因为数字字面量本身没有明确类型</span><br><span class="line">let result &#x3D; 3 + 0.1415926</span><br><span class="line">print(result) &#x2F;&#x2F; 输出：3.1415926</span><br></pre></td></tr></table></figure><h3 id="var和let"><a href="#var和let" class="headerlink" title="var和let"></a>var和let</h3><ul><li>let代表常量，var代表变量（variable缩写）</li><li>编译器能自动推断出变量/常量的类型</li><li>两个使用前必须初始化（和其他语言不一样，编译时可以不用初始化），否则编译报错<br><img src="http://blog.idbeny.com/33lcc.png@normal" alt=""><br><img src="http://blog.idbeny.com/n6rd9.png@normal" alt=""><br><img src="http://blog.idbeny.com/ygvsq.png@normal" alt=""></li></ul><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let 变量名: 变量类型 &#x3D; 变量值;</span><br><span class="line"></span><br><span class="line">var 变量名: 变量类型 &#x3D; 变量值;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let age: Int &#x3D; 10;</span><br><span class="line">print(age) &#x2F;&#x2F; 输出：10</span><br><span class="line"></span><br><span class="line">var name: String &#x3D; &quot;idbeny&quot;;</span><br><span class="line">print(name) &#x2F;&#x2F; 输出：idbeny</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组是借鉴C++中的概念（Python中也有此类型）</p><ul><li>元组与列表类似，不同之处在于元组的元素不能修改。</li><li>元组使用小括号，列表使用方括号。</li><li>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可（无限的）。</li><li>元组解构用法时，变量名不能和其他同作用域的常规定义变量冲突</li></ul><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> 格式一：常规</span><br><span class="line"> 读取格式：变量名.索引</span><br><span class="line"> *&#x2F; </span><br><span class="line">变量修饰符 变量名 &#x3D; (元素值，多个逗号分隔)</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> 格式二：解构</span><br><span class="line"> 变量修饰符 (元组值对应的变量名称，位置要一一对应) &#x3D; 已定义元组变量</span><br><span class="line"> 读取格式：变量名称</span><br><span class="line"> *&#x2F; </span><br><span class="line">变量修饰符 (元组值对应的变量名称，位置要一一对应) &#x3D; 已定义元组变量</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 解构扩展：对应位置不需要的时候可用下划线代替</span><br><span class="line">变量修饰符 (元组值对应的变量名称，_) &#x3D; 已定义元组变量</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> 格式三：key-value</span><br><span class="line"> 读取格式：1. 变量名.索引 2. 变量名.元素变量名 </span><br><span class="line"> *&#x2F; </span><br><span class="line">变量修饰符 变量名 &#x3D; (元素变量名：元素值，……)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let tup1 &#x3D; (404, &quot;Not Found&quot;, &quot;moreParas&quot;)</span><br><span class="line">print(tup1.0,tup1.1,tup1.2) &#x2F;&#x2F; 输出：404 Not Found moreParas</span><br><span class="line"></span><br><span class="line">let (statusCode, statusDesc, paras) &#x3D; tup1</span><br><span class="line">print(statusCode, statusDesc, paras) &#x2F;&#x2F; 输出：404 Not Found moreParas</span><br><span class="line"></span><br><span class="line">let (tempStatusCode, _, _) &#x3D; tup1</span><br><span class="line">print(tempStatusCode) &#x2F;&#x2F; 输出：404</span><br><span class="line"></span><br><span class="line">let httpStatus &#x3D; (statusCode: 404, statusDesc: &quot;Not Found&quot;, paras: &quot;moreParas&quot;)</span><br><span class="line">print(httpStatus.statusCode, httpStatus.statusDesc, httpStatus.paras) &#x2F;&#x2F; 输出：404 Not Found moreParas</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Swift数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LLVM】clang插件开发</title>
      <link href="/2019/04/16/compiler-llvm-clang/"/>
      <url>/2019/04/16/compiler-llvm-clang/</url>
      
        <content type="html"><![CDATA[<p>接上一篇LLVM的介绍，我们认识了LLVM，现在可以尝试用前端-<code>clang</code>自定义我们需要的东西了。</p><a id="more"></a><h3 id="插件目录"><a href="#插件目录" class="headerlink" title="插件目录"></a>插件目录</h3><ol><li><p>新建插件文件夹（例：<code>yb-plugin</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm&#x2F;tools&#x2F;clang&#x2F;tools&#x2F;</span><br><span class="line">$ mkdir yb-plugin</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/usz7q.png@normal" alt=""></p></li><li><p>打开<code>CMakeLists.txt</code>（路径：<code>llvm/tools/clang/tools/CMakeLists.txt</code>），把要加载的插件加入到里面<br><img src="http://blog.idbeny.com/lb3rn.png@normal" alt=""></p></li></ol><h3 id="插件必要文件"><a href="#插件必要文件" class="headerlink" title="插件必要文件"></a>插件必要文件</h3><p>在<code>yb-plugin</code>目录下编写插件（插件是用C++编写的，有基础的同学会比较好理解）</p><ul><li>新建<code>CMakeLists.txt</code>，文件内容是：<code>add_llvm_library(YBPlugin MODULE BUILDTREE_ONLY YBPlugin.cpp)</code>，</li><li>YBPlugin是插件名，YBPlugin.cpp是源代码文件<br><img src="http://blog.idbeny.com/ckd0u.png@normal" alt=""></li></ul><h3 id="编译插件"><a href="#编译插件" class="headerlink" title="编译插件"></a>编译插件</h3><ul><li><p>利用cmake生成的Xcode项目来编译插件(第一次编写完插件，需要利用cmake重新生成一下Xcode项目: <code>$ cmake -G Xcode ../llvm</code>)<br><img src="http://blog.idbeny.com/vmedy.png@normal" alt=""><br>打开工程，选择<code>Automatically Create Schemes</code><br><img src="http://blog.idbeny.com/009dl.png@normal" alt=""></p></li><li><p>插件源代码在<code>Sources/Loadable modules</code>目录下可以找到，这样就可以直接在Xcode里编写插件代码<br><img src="http://blog.idbeny.com/yhmrk.png@normal" alt=""></p></li><li><p>编写插件<code>YBPlugin.cpp</code><br><img src="http://blog.idbeny.com/pnemt.png@normal" alt=""></p></li><li><p>选择YBPlugin这个target进行编译，编译完会生成一个动态库文件（路径：<code>llvm_xcode/Debug/lib/YBPlugin.dylib</code>）<br><img src="http://blog.idbeny.com/la3hp.png@normal" alt=""></p></li></ul><h3 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h3><ul><li>在Xcode项目中指定加载插件动态库:<code>BuildSettings &gt; Other C Flags</code></li><li><code>-Xclang -load -Xclang 动态库路径 -Xclang -add-plugin -Xclang 插件名称</code><br><img src="http://blog.idbeny.com/lqzre.png@normal" alt=""></li><li>编译（报错是因为Xcode默认的编译器不允许使用插件，做法请看下面）<br><img src="http://blog.idbeny.com/0kciy.png@normal" alt=""></li></ul><h3 id="修改自定义编译器（Hack-Xcode）"><a href="#修改自定义编译器（Hack-Xcode）" class="headerlink" title="修改自定义编译器（Hack Xcode）"></a>修改自定义编译器（Hack Xcode）</h3><ol><li><p>首先要对Xcode进行Hack，才能修改默认的编译器</p></li><li><p>下载<code>XcodeHacking.zip</code>，解压，修改<code>HackedClang.xcplugin/Contents/Resources/HackedClang.xcspec</code>的内容，设<br>置一下自己编译好的clang的路径（之前安装好的<code>llvm_release/bin/clang</code>）<br><img src="http://blog.idbeny.com/6m218.png@normal" alt=""></p></li><li><p>然后在XcodeHacking目录下进行命令行，将XcodeHacking的内容剪切到Xcode内部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv HackedClang.xcplugin &#96;xcode-select -print-path&#96;&#x2F;..&#x2F;PlugIns&#x2F;Xcode3Core.ideplugin&#x2F;Contents&#x2F;SharedSupport&#x2F;Developer&#x2F;Library&#x2F;Xcode&#x2F;Plug-ins</span><br><span class="line"></span><br><span class="line">$ sudo mv HackedBuildSystem.xcspec &#96;xcode-select -print-path&#96;&#x2F;Platforms&#x2F;iPhoneSimulator.platform&#x2F;Developer&#x2F;Library&#x2F;Xcode&#x2F;Specifications</span><br></pre></td></tr></table></figure></li><li><p>重启Xcode，选择编译器<br><img src="http://blog.idbeny.com/r4nc7.png@normal" alt=""></p></li><li><p>开始编译（编译项目后，会在编译日志看到YBPlugin插件的打印信息(如果插件更新了，最好先Clean一下项目)）<br><img src="./compiler-start.png" alt="compiler-start"></p></li></ol><h3 id="提示警告、错误信息"><a href="#提示警告、错误信息" class="headerlink" title="提示警告、错误信息"></a>提示警告、错误信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YBASTConsumer(CompilerInstance &amp;ci) &#123;</span><br><span class="line">  DiagnosticsEngine &amp;D &#x3D; ci.getDiagnostics(); </span><br><span class="line">  D.Report(D.getCustomDiagID(DiagnosticsEngine::Warning, &quot;1024星球警告信息&quot;)); </span><br><span class="line">  D.Report(D.getCustomDiagID(DiagnosticsEngine::Error, &quot;1024星球错误信息&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><ul><li>想要实现更复杂的插件功能，就需要利用clang的API针对语法树(AST)进行相应的分析和处理</li><li>关于AST的资料<ul><li><a href="https://clang.llvm.org/doxygen/namespaceclang.html" target="_blank" rel="noopener">https://clang.llvm.org/doxygen/namespaceclang.html</a></li><li><a href="https://clang.llvm.org/doxygen/classclang_1_1Decl.html" target="_blank" rel="noopener">https://clang.llvm.org/doxygen/classclang_1_1Decl.html</a></li><li><a href="https://clang.llvm.org/doxygen/classclang_1_1Stmt.html" target="_blank" rel="noopener">https://clang.llvm.org/doxygen/classclang_1_1Stmt.html</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM </tag>
            
            <tag> clang </tag>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LLVM】认识LLVM</title>
      <link href="/2019/04/15/compiler-llvm/"/>
      <url>/2019/04/15/compiler-llvm/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是LLVM？"><a href="#什么是LLVM？" class="headerlink" title="什么是LLVM？"></a>什么是<a href="https://llvm.org" target="_blank" rel="noopener">LLVM</a>？</h2><h3 id="官网：https-llvm-org"><a href="#官网：https-llvm-org" class="headerlink" title="官网：https://llvm.org"></a>官网：<a href="https://llvm.org" target="_blank" rel="noopener">https://llvm.org</a></h3><p>原文：<br><img src="http://blog.idbeny.com/194sg.png@normal" alt=""><br>The LLVM Project is a collection of modular and reusable <font style="color:red">compiler</font> and <font style="color:red">toolchain</font> technologies. Despite its name, LLVM has little to do with traditional virtual machines. The name “LLVM” itself is not an acronym; it is the full name of the project.</p><a id="more"></a><p>翻译：LLVM项目是模块化和可重用的编译器和工具链技术的集合。尽管名为LLVM，但它与传统虚拟机几乎没有什么关系。“LLVM”这个名字本身不是一个缩写词；它是<font style="color:red">项目的全称</font>。</p><p>创始人：<a href="https://baike.baidu.com/item/%E5%85%8B%E9%87%8C%E6%96%AF%C2%B7%E6%8B%89%E7%89%B9%E7%BA%B3/14187836?fr=aladdin" target="_blank" rel="noopener">Chris Lattner</a>，也是<a href="https://developer.apple.com/cn/swift/" target="_blank" rel="noopener">Swift</a>之父</p><h3 id="一、传统的编译器架构："><a href="#一、传统的编译器架构：" class="headerlink" title="一、传统的编译器架构："></a>一、传统的编译器架构：</h3><p><img src="http://blog.idbeny.com/6epr5.png@normal" alt=""></p><ul><li><p>Frontend： 前端</p><ul><li>词法分析、语法分析、语义分析、生成中间代码</li></ul></li><li><p>Optimizer：优化器</p><ul><li>中间代码优化</li></ul></li><li><p>Backend：后端</p><ul><li>生成机器码</li></ul></li></ul><h3 id="二、LLVM架构"><a href="#二、LLVM架构" class="headerlink" title="二、LLVM架构"></a>二、LLVM架构</h3><p><img src="http://blog.idbeny.com/zdzwv.png@normal" alt=""></p><ul><li>不同的前端后端使用同一的中间代码LLVM Intermedicate Representation（LLVM IR）</li><li>如果需要支持一种新的编程语言，那么只需要实现一个新的前端</li><li>如果需要支持一种新的硬件设备，那么只需要实现一个新的后端</li><li>优化阶段是一个通用的阶段，它针对的是统一的LLVM IR，不论是支持新的编程语言，还是支持新的硬件设备，都不需要对优化阶段做修改</li><li>相比之下，GCC的前端和后端没分的太开，前端后端耦合在了一起，所以GCC为了支持一门新的语言，或者为了支持一个新的目标平台，就变得特别困难（排列组合形式）</li><li>LLVM现在被作为实现各种静态和运行时编译语言的通用基础结构（GCC家族、Java、.NET、Python、Ruby、Scheme、Haskell、D等）</li></ul><h3 id="三、什么是Clang？"><a href="#三、什么是Clang？" class="headerlink" title="三、什么是Clang？"></a>三、什么是Clang？</h3><ul><li><p>Clang是LLVM项目的一个子项目</p><ul><li>给予LLVM架构的C/C++/Objective-C编译器<font style="color:blue">前端</font></li><li>官网：<a href="http://clang.llvm.org/" target="_blank" rel="noopener">http://clang.llvm.org/</a></li></ul></li><li><p>相比于GCC、Clang具有如下优点：</p><ul><li><strong>编译速度快：</strong> 在某些平台上，Clang的编译速度显著的快过GCC（Debug模式下编译OC速度比GCC快3倍）</li><li><strong>占用内存小：</strong> Clang生成的AST所占用的内存是GCC的五分之一左右</li><li><strong>模块化设计：</strong> Clang采用基于库的模块化设计，易于IDE集成及其他用途的重用</li><li><strong>诊断信息可读性强：</strong> 在编译过程中，Clang创建并保留了大量详细的元数据（metadata），有利于调试和错误定位</li><li><strong>设计清晰简单，容易理解，易于扩展增强</strong></li></ul></li></ul><h3 id="四、Clang与LLVM"><a href="#四、Clang与LLVM" class="headerlink" title="四、Clang与LLVM"></a>四、Clang与LLVM</h3><p><img src="http://blog.idbeny.com/tl8fw.png@normal" alt=""><br><img src="http://blog.idbeny.com/nnzy7.png@normal" alt=""></p><ul><li><p><strong>广义的LLVM：</strong> 整个LLVM架构</p></li><li><p><strong>狭义的LLVM：</strong> LLVM后端（代码优化、目标代码生成等）</p></li></ul><h3 id="五、OC源文件的编译过程"><a href="#五、OC源文件的编译过程" class="headerlink" title="五、OC源文件的编译过程"></a>五、OC源文件的编译过程</h3><ol><li><p>尝试编译main.m<br><img src="http://blog.idbeny.com/agwoh.png@normal" alt=""></p></li><li><p>命令行查看编译的过程：<code>$ clang -ccc-pring-phases main.m</code><br><img src="http://blog.idbeny.com/j7ugl.png@normal" alt=""></p></li></ol><ul><li><strong>input：</strong> 输入源文件</li><li><strong>preprocessor：</strong> 预处理器（把import、include、define等替换掉）</li><li><strong>compiler：</strong> 编译成中间代码（IR）</li><li><strong>backend：</strong> 汇编生成目标代码</li><li><strong>assembler：</strong> 目标代码</li><li><strong>linker：</strong> 链接动态库和静态库</li><li><strong>bind-arch：</strong> 生成适合对应架构的机器码</li></ul><ol start="3"><li><p>查看preprocessor（预处理）的结果，为了方边查看，我们把main文件改造下<br><img src="http://blog.idbeny.com/ftzhn.png@normal" alt=""></p></li><li><p>控制台输入命令：<code>$ clang -E main.m</code><br><img src="http://blog.idbeny.com/5o9it.png@normal" alt=""><br>可以看到，已经把宏定义的AGE自动替换了</p></li></ol><h3 id="六、词法分析"><a href="#六、词法分析" class="headerlink" title="六、词法分析"></a>六、词法分析</h3><p>词法分析，其实就是把代码生成一个个token：<code>$ clang -fmodules -E -Xclang -dump-tokens main.m</code><br><img src="http://blog.idbeny.com/foxuz.png@normal" alt=""></p><h3 id="七、语法树-AST"><a href="#七、语法树-AST" class="headerlink" title="七、语法树-AST"></a>七、语法树-AST</h3><p>语法分析，生成语法树（AST，Abstract Syntax Tree）：<code>$ clang -fmodules -fsyntax-only -Xclang -ast-dump main.m</code><br><img src="http://blog.idbeny.com/r9z3z.png@normal" alt=""></p><ul><li><strong>FunctionDecl：</strong> 函数声明</li><li><strong>ParmVarDecl：</strong> 参数声明</li><li><strong>CompoundStmt/DeclStmt：：</strong> 具体语句</li><li><strong>VarDecl：</strong> 变量声明</li><li><strong>BinaryOperator：</strong> 操作符</li></ul><h3 id="八、LLVM-IR"><a href="#八、LLVM-IR" class="headerlink" title="八、LLVM IR"></a>八、LLVM IR</h3><p>LLVM IR有3中表示形式（但本质是等价的，就好比水可以有气体、液体、固体3种形态）</p><ul><li>text：便于阅读的文本格式，类似于汇编语言，扩展名<code>.ll</code>（<code>$ clang -S -emit-llvm main.m</code>）</li><li>memory：内存格式</li><li>bitcode：二进制格式，扩展名<code>.bc</code>（<code>$clang -c -emit-llvm main.m</code>）</li></ul><p>源代码<br><img src="http://blog.idbeny.com/bakiw.png@normal" alt=""><br>命令：<code>$ clang -S -emit-llvm main.m</code><br>生成main.ll文件<br><img src="http://blog.idbeny.com/ylxbq.png@normal" alt=""></p><p><strong>IR基本语法</strong></p><ul><li>注释以分号;开头</li><li>全局标识符以@开头，局部标识符以%开头</li><li>alloca，在当前函数栈帧中分配内存</li><li>i32，32bit，4个字节的意思</li><li>align，内存对齐</li><li>store，写入数据</li><li>load，读取数据</li></ul><p><strong>官方语法参考</strong><br><a href="https://llvm.org/docs/LangRef.html" target="_blank" rel="noopener">https://llvm.org/docs/LangRef.html</a></p><h3 id="九、源码下载"><a href="#九、源码下载" class="headerlink" title="九、源码下载"></a>九、源码下载</h3><ol><li><p>下载LLVM（大小795MB，仅供参考）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;git.llvm.org&#x2F;git&#x2F;llvm.git&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>下载Clang（一定要等到LLVM下载完成后再操作，大小272.4MB，仅供参考）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm&#x2F;tools</span><br><span class="line">$ git clone https:&#x2F;&#x2F;git.llvm.org&#x2F;git&#x2F;clang.git&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>Clang没有下载的时候，为什么也能使用？是因为Xcode内置了该工具<br><img src="http://blog.idbeny.com/ke2kw.png@normal" alt=""><br>之所以再次下载，是为了我们能够编译成自己需要的Clang（定制化）</p></li></ol><h3 id="十、源码编译"><a href="#十、源码编译" class="headerlink" title="十、源码编译"></a>十、源码编译</h3><ol><li>安装cmake和ninja（先安装brew，<a href="https://brew.sh/）" target="_blank" rel="noopener">https://brew.sh/）</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install cmake</span><br><span class="line">$ brew install ninja</span><br></pre></td></tr></table></figure><ul><li>ninja如果安装失败，可以直接从<a href="https://github.com/ninja-build/ninja/release" target="_blank" rel="noopener">Github</a>获取release版本放入<code>/usr/local/bin</code></li></ul></li></ol><ol start="2"><li>生成模板：在LLVM源码同级目录下新建一个<code>llvm_build</code>目录（最终会在<code>llvm_build</code>目录下生成<code>build.ninja</code>）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm_build</span><br><span class="line">$ cmake -G Ninja ..&#x2F;llvm -DCMAKE_INSTALL_PREFIX&#x3D;LLVM的安装路径</span><br></pre></td></tr></table></figure></li></ol><ul><li>更多cmake相关选项，可以参考：<a href="https://llvm.org/docs/CMake.html" target="_blank" rel="noopener">https://llvm.org/docs/CMake.html</a></li></ul><ol start="3"><li><p>执行编译指令（编译完毕后，<code>llvm_build</code>目录大概21.05GB（仅供参考））</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ninja</span><br></pre></td></tr></table></figure></li><li><p>执行安装指令（在<code>llvm_build</code>同级目录创建一个<code>llvm_release</code>目录，安装完毕后，安装目录大概11.92GB（仅供参考））</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ninja install</span><br></pre></td></tr></table></figure></li></ol><ul><li>完成之后在可以看到clang执行文件（<code>llvm_release/bin/clang</code>）</li></ul><hr><ol start="5"><li>另外一种编译方式：生成Xcode项目，然后用Xcode编译（速度很慢很慢很慢~）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm_build</span><br><span class="line">$ cmake -G Ninja ..&#x2F;llvm -DCMAKE_INSTALL_PREFIX&#x3D;LLVM的安装路径</span><br></pre></td></tr></table></figure></li></ol><ul><li>新建<code>llvm_xcode</code>目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd llvm_xcode</span><br><span class="line">$ cmake -G XCODE ..&#x2F;llvm -DCMAKE_INSTALL_PREFIX&#x3D;LLVM的安装路径</span><br></pre></td></tr></table></figure></li><li>生成之后，可以看到执行文件，用Xcode打开之后选择Scheme<code>ALL_BUILD</code>，开始编译，之后在<code>llvm_xcode/Debug/bin</code>可以看到编译后的文件。</li></ul><h3 id="十一、应用与实践"><a href="#十一、应用与实践" class="headerlink" title="十一、应用与实践"></a>十一、应用与实践</h3><h4 id="LLVM相关工具：libclang、libTooling"><a href="#LLVM相关工具：libclang、libTooling" class="headerlink" title="LLVM相关工具：libclang、libTooling"></a>LLVM相关工具：libclang、libTooling</h4><ul><li>官方参考：<a href="https://clang.llvm.org/docs/Tooling.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/Tooling.html</a></li><li>应用场景：语法树分析、语言转换等</li></ul><h4 id="Clang插件开发"><a href="#Clang插件开发" class="headerlink" title="Clang插件开发"></a>Clang插件开发</h4><ul><li>官方参考【如何开发一个Clang插件】：<ul><li><a href="https://clang.llvm.org/docs/ClangPlugins.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/ClangPlugins.html</a></li><li><a href="https://clang.llvm.org/docs/ExternalClangExamples.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/ExternalClangExamples.html</a></li><li><a href="https://clang.llvm.org/docs/RAVFrontendAction.html" target="_blank" rel="noopener">https://clang.llvm.org/docs/RAVFrontendAction.html</a></li></ul></li><li>应用场景：代码检查（命名规范，代码规范）等</li></ul><h4 id="Pass开发"><a href="#Pass开发" class="headerlink" title="Pass开发"></a>Pass开发</h4><ul><li>官方参考【如何进行代码优化】：<a href="https://llvm.org/docs/WritingAnLLVMPass.html" target="_blank" rel="noopener">https://llvm.org/docs/WritingAnLLVMPass.html</a></li><li>应用场景：代码优化，代码混淆等</li><li>开发新的编程语言<ul><li><a href="https://llvm-tutorial-cn.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://llvm-tutorial-cn.readthedocs.io/en/latest/index.html</a></li><li><a href="https://kaleidoscope-llvm-tutorial-zh-cn.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">https://kaleidoscope-llvm-tutorial-zh-cn.readthedocs.io/zh_CN/latest/index.html</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Xcode】配置包iOS13.* 、iOS12.* 、iOS11.* 、iOS10.* 、iOS9.* 等 could not find developer disk image</title>
      <link href="/2018/04/02/xcode-devicesupport-config/"/>
      <url>/2018/04/02/xcode-devicesupport-config/</url>
      
        <content type="html"><![CDATA[<p><strong>最新版本13.0</strong></p><a id="more"></a><ol><li><p>在<code>Finder</code>状态下前往文件夹，快捷键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift+command+G</span><br></pre></td></tr></table></figure></li><li><p>填写路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Platforms&#x2F;iPhoneOS.platform&#x2F;DeviceSupport</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/sfyfg.png@normal" alt=""></p></li><li><p>点击前往<br><img src="http://blog.idbeny.com/klj59.png@normal" alt=""></p></li></ol><p>这时候我们把资源包放在<code>DeviceSupport</code>文件夹下面，<strong>重启Xcode</strong>即可</p><blockquote><p>GitHub地址： <a href="https://github.com/idbeny/DeviceSupport" target="_blank" rel="noopener">https://github.com/idbeny/DeviceSupport</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Xcode】build版本号自动跟随时间变化脚本</title>
      <link href="/2018/01/04/xcode-version-script/"/>
      <url>/2018/01/04/xcode-version-script/</url>
      
        <content type="html"><![CDATA[<p>利用脚本让构建版本号自动化，再也不需要手动更改，开发效率杠杠滴~</p><a id="more"></a><h3 id="新增脚本"><a href="#新增脚本" class="headerlink" title="新增脚本"></a>新增脚本</h3><p><img src="http://blog.idbeny.com/q0z2w.png@normal" alt=""></p><h3 id="修改脚本位置和名称"><a href="#修改脚本位置和名称" class="headerlink" title="修改脚本位置和名称"></a>修改脚本位置和名称</h3><p><img src="http://blog.idbeny.com/bx07t.png@normal" alt=""></p><ul><li>如果有多个脚本执行，尽量把修改build版本号的脚本放在所有脚本的首位（优先执行，防止其他脚本或代码用到build版本号）</li><li>为了和其他脚本区分，可以双击修改脚本名称（例：<code>Run Script BuildVersion</code>）</li></ul><h3 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h3><blockquote><p>跟随时间变化（release和Debug不同情况）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">&#x2F;&#x2F; 判断是哪个configuration</span><br><span class="line">&#x2F;&#x2F; Release Debug 或者只自定义的配置</span><br><span class="line">if [ &quot;Release&quot; !&#x3D; &quot;$&#123;CONFIGURATION&#125;&quot; ]</span><br><span class="line">&#x2F;&#x2F; 如果是Release做哪些事情</span><br><span class="line">then</span><br><span class="line">&#x2F;&#x2F; 如果不是Release做哪些事情</span><br><span class="line">    &#x2F;&#x2F; exit 0 退出 不执行下面的代码</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取info.plist信息 CFBundleVersion 可以更改为想获取的信息的名字</span><br><span class="line">buildNumber&#x3D;$(&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Print :CFBundleVersion&quot; &quot;$&#123;PROJECT_DIR&#125;&#x2F;$&#123;INFOPLIST_FILE&#125;&quot;)  </span><br><span class="line">shortVersion&#x3D;$(&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Print :CFBundleShortVersionString&quot; &quot;$&#123;PROJECT_DIR&#125;&#x2F;$&#123;INFOPLIST_FILE&#125;&quot;)  </span><br><span class="line">buildNumber&#x3D;&#96;date +&quot;%Y%m%d%H%M%S&quot;&#96;  </span><br><span class="line">buildNumber&#x3D;&quot;$shortVersion.$buildNumber&quot;  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置info.plist</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Set :CFBundleVersion $buildNumber&quot; &quot;$&#123;PROJECT_DIR&#125;&#x2F;$&#123;INFOPLIST_FILE&#125;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>自动+1</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">buildNumber&#x3D;$(&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Print CFBundleVersion&quot; &quot;$INFOPLIST_FILE&quot;)</span><br><span class="line">buildNumber&#x3D;$(($buildNumber + 1))</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Set :CFBundleVersion $buildNumber&quot; &quot;$INFOPLIST_FILE&quot;</span><br></pre></td></tr></table></figure><blockquote><p>修改项目显示名称为版本号（适用于不同版本号装到一个机器里面，便于区分是哪个版本）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#&#x2F;bin&#x2F;bash</span><br><span class="line">if [ &quot;Release&quot; !&#x3D; &quot;$&#123;CONFIGURATION&#125;&quot; ]; then</span><br><span class="line"></span><br><span class="line">DisplayName&#x3D;$(&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Print CFBundleShortVersionString&quot; &quot;$INFOPLIST_FILE&quot;)</span><br><span class="line">DisplayName&#x3D;&quot;ep$&#123;DisplayName&#125;-I&quot;</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Set :CFBundleDisplayName $DisplayName&quot; &quot;$INFOPLIST_FILE&quot;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">DisplayName&#x3D;&quot;真正的项目名称&quot;</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Set :CFBundleDisplayName $DisplayName&quot; &quot;$INFOPLIST_FILE&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>贴上我用的脚本（版本号+日期）</p></blockquote><p><img src="http://blog.idbeny.com/5h8h8.png@normal" alt=""></p><p>以上完成后编译/运行即可看到效果<br><img src="http://blog.idbeny.com/evoa9.png@normal" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
            <tag> build版本号 </tag>
            
            <tag> ShellScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaScript】常用正则表达式</title>
      <link href="/2017/08/21/js-regix/"/>
      <url>/2017/08/21/js-regix/</url>
      
        <content type="html"><![CDATA[<p>验证数字：<code>^[0-9]*$</code><br>验证n位的数字：<code>^\d{n}$</code><br>验证至少n位数字：<code>^\d{n,}$</code></p><a id="more"></a><p>验证m-n位的数字：<code>^\d{m,n}$</code><br>验证零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p><p>验证有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code><br>验证有1-3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p><p>验证非零的正整数：<code>^\+?[1-9][0-9]*$</code><br>验证非零的负整数：<code>^\-[1-9][0-9]*$</code><br>验证非负整数（正整数 + 0） <code>^\d+$</code><br>验证非正整数（负整数 + 0）  <code>^((-\d+)|(0+))$</code></p><p>验证整数：<code>^-?\d+$</code><br>验证非负浮点数（正浮点数 + 0）：<code>^\d+(\.\d+)?$</code><br>验证正浮点数：  <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code><br>验证非正浮点数（负浮点数 + 0）：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code><br>验证负浮点数 ： <code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code><br>验证浮点数 ：<code>^(-?\d+)(\.\d+)?</code></p><p>验证长度为3的字符：<code>^.{3}$</code><br>验证由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code><br>验证由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code><br>验证由26个小写英文字母组成的字符串：<code>^[a-z]+$</code><br>验证由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code><br>验证由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$</code></p><p>验证用户密码(以字母开头，长度在6-18之间，只能包含字符、数字和下划线):<code>^[a-zA-Z]\w{5,17}$</code><br>验证是否含有 <code>^%&amp;’,;=?$”</code> 等字符：<code>[^%&amp;&#39;,;=?$\x22]+</code><br>验证汉字：<code>^[\u4e00-\u9fa5],{0,}$</code><br>验证Email地址：<code>^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code><br>验证InternetURL：<code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code>或<code>^[a-zA-z]+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$</code><br>验证电话号码(格式XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX)：<code>^(\(\d{3,4}\)|\d{3,4}-)?\d{7,8}$</code><br>验证身份证号（15位或18位数字）：<code>^\d{15}|\d{}18$</code></p><p>验证一年的12个月(“01”-“09”和“1”“12”)：<code>^(0?[1-9]|1[0-2])$</code><br>验证一个月的31天(01、09和1、31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p>]]></content>
      
      
      <categories>
          
          <category> H5 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】UICollectionView区头停留</title>
      <link href="/2017/07/19/ios-collection-plain/"/>
      <url>/2017/07/19/ios-collection-plain/</url>
      
        <content type="html"><![CDATA[<p><code>UITableView</code>系统提供了两种常用样式(<code>UITableViewStylePlain</code>和<code>UITableViewStyleGrouped</code>)，<code>UITableViewStylePlain</code>可以让区头停留在顶部，但是<code>UICollectionView</code>没有直接提供这样的样式，如果需要我们只能重写<code>UICollectionViewFlowLayout</code>，直接上代码：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  UICollectionPlainFlowLayout.h</span><br><span class="line">&#x2F;&#x2F;  FlowLayoutDemo</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by IDBENY on 2017&#x2F;7&#x2F;19.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 www.idbeny.com All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">@interface ShoppingCollectionPlainFlowLayout : UICollectionViewFlowLayout</span><br><span class="line"></span><br><span class="line">@property (nonatomic, assign) CGFloat navHeight;&#x2F;&#x2F;默认为64.0, default is 64.0</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;  UICollectionPlainFlowLayout.m</span><br><span class="line">&#x2F;&#x2F;  FlowLayoutDemo</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by IDBENY on 2017&#x2F;7&#x2F;19.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 www.idbeny.com All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &quot;ShoppingCollectionPlainFlowLayout.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation ShoppingCollectionPlainFlowLayout</span><br><span class="line"></span><br><span class="line">- (instancetype)init &#123;</span><br><span class="line">    self &#x3D; [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _navHeight &#x3D; 64.0;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSArray *)layoutAttributesForElementsInRect:(CGRect)rect &#123;</span><br><span class="line">    &#x2F;&#x2F;UICollectionViewLayoutAttributes：我称它为collectionView中的item（包括cell和header、footer这些）的《结构信息》</span><br><span class="line">    &#x2F;&#x2F;截取到父类所返回的数组（里面放的是当前屏幕所能展示的item的结构信息），并转化成不可变数组</span><br><span class="line">    NSMutableArray *superArray &#x3D; [[super layoutAttributesForElementsInRect:rect] mutableCopy];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;创建存索引的数组，无符号（正整数），无序（不能通过下标取值），不可重复（重复的话会自动过滤）</span><br><span class="line">    NSMutableIndexSet *noneHeaderSections &#x3D; [NSMutableIndexSet indexSet];</span><br><span class="line">    &#x2F;&#x2F;遍历superArray，得到一个当前屏幕中所有的section数组</span><br><span class="line">    for (UICollectionViewLayoutAttributes *attributes in superArray) &#123;</span><br><span class="line">        &#x2F;&#x2F;如果当前的元素分类是一个cell，将cell所在的分区section加入数组，重复的话会自动过滤</span><br><span class="line">        if (attributes.representedElementCategory &#x3D;&#x3D; UICollectionElementCategoryCell) &#123;</span><br><span class="line">            [noneHeaderSections addIndex:attributes.indexPath.section];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;遍历superArray，将当前屏幕中拥有的header的section从数组中移除，得到一个当前屏幕中没有header的section数组</span><br><span class="line">    &#x2F;&#x2F;正常情况下，随着手指往上移，header脱离屏幕会被系统回收而cell尚在，也会触发该方法</span><br><span class="line">    for (UICollectionViewLayoutAttributes *attributes in superArray) &#123;</span><br><span class="line">        &#x2F;&#x2F;如果当前的元素是一个header，将header所在的section从数组中移除</span><br><span class="line">        if ([attributes.representedElementKind isEqualToString:UICollectionElementKindSectionHeader]) &#123;</span><br><span class="line">            [noneHeaderSections removeIndex:attributes.indexPath.section];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;遍历当前屏幕中没有header的section数组</span><br><span class="line">    [noneHeaderSections enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop)&#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;取到当前section中第一个item的indexPath</span><br><span class="line">        NSIndexPath *indexPath &#x3D; [NSIndexPath indexPathForItem:0 inSection:idx];</span><br><span class="line">        &#x2F;&#x2F;获取当前section在正常情况下已经离开屏幕的header结构信息</span><br><span class="line">        UICollectionViewLayoutAttributes *attributes &#x3D; [self layoutAttributesForSupplementaryViewOfKind:UICollectionElementKindSectionHeader atIndexPath:indexPath];</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;如果当前分区确实有因为离开屏幕而被系统回收的header</span><br><span class="line">        if (attributes) &#123;</span><br><span class="line">            &#x2F;&#x2F;将该header结构信息重新加入到superArray中去</span><br><span class="line">            [superArray addObject:attributes];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;遍历superArray，改变header结构信息中的参数，使它可以在当前section还没完全离开屏幕的时候一直显示</span><br><span class="line">    for (UICollectionViewLayoutAttributes *attributes in superArray) &#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;如果当前item是header</span><br><span class="line">        if ([attributes.representedElementKind isEqualToString:UICollectionElementKindSectionHeader]) &#123;</span><br><span class="line">            &#x2F;&#x2F;得到当前header所在分区的cell的数量</span><br><span class="line">            NSInteger numberOfItemsInSection &#x3D; [self.collectionView numberOfItemsInSection:attributes.indexPath.section];</span><br><span class="line">            &#x2F;&#x2F;得到第一个item的indexPath</span><br><span class="line">            NSIndexPath *firstItemIndexPath &#x3D; [NSIndexPath indexPathForItem:0 inSection:attributes.indexPath.section];</span><br><span class="line">            &#x2F;&#x2F;得到最后一个item的indexPath</span><br><span class="line">            NSIndexPath *lastItemIndexPath &#x3D; [NSIndexPath indexPathForItem:MAX(0, numberOfItemsInSection-1) inSection:attributes.indexPath.section];</span><br><span class="line">            &#x2F;&#x2F;得到第一个item和最后一个item的结构信息</span><br><span class="line">            UICollectionViewLayoutAttributes *firstItemAttributes, *lastItemAttributes;</span><br><span class="line">            if (numberOfItemsInSection&gt;0) &#123;</span><br><span class="line">                &#x2F;&#x2F;cell有值，则获取第一个cell和最后一个cell的结构信息</span><br><span class="line">                firstItemAttributes &#x3D; [self layoutAttributesForItemAtIndexPath:firstItemIndexPath];</span><br><span class="line">                lastItemAttributes &#x3D; [self layoutAttributesForItemAtIndexPath:lastItemIndexPath];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F;cell没值,就新建一个UICollectionViewLayoutAttributes</span><br><span class="line">                firstItemAttributes &#x3D; [UICollectionViewLayoutAttributes new];</span><br><span class="line">                &#x2F;&#x2F;然后模拟出在当前分区中的唯一一个cell，cell在header的下面，高度为0，还与header隔着可能存在的sectionInset的top</span><br><span class="line">                CGFloat y &#x3D; CGRectGetMaxY(attributes.frame)+self.sectionInset.top;</span><br><span class="line">                firstItemAttributes.frame &#x3D; CGRectMake(0, y, 0, 0);</span><br><span class="line">                &#x2F;&#x2F;因为只有一个cell，所以最后一个cell等于第一个cell</span><br><span class="line">                lastItemAttributes &#x3D; firstItemAttributes;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;获取当前header的frame</span><br><span class="line">            CGRect rect &#x3D; attributes.frame;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;当前的滑动距离 + 因为导航栏产生的偏移量，默认为64（如果app需求不同，需自己设置）</span><br><span class="line">            CGFloat offset &#x3D; self.collectionView.contentOffset.y + _navHeight;</span><br><span class="line">            &#x2F;&#x2F;第一个cell的y值 - 当前header的高度 - 可能存在的sectionInset的top</span><br><span class="line">            CGFloat headerY &#x3D; firstItemAttributes.frame.origin.y - rect.size.height - self.sectionInset.top;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;哪个大取哪个，保证header悬停</span><br><span class="line">            &#x2F;&#x2F;针对当前header基本上都是offset更加大，针对下一个header则会是headerY大，各自处理</span><br><span class="line">            CGFloat maxY &#x3D; MAX(offset,headerY);</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;最后一个cell的y值 + 最后一个cell的高度 + 可能存在的sectionInset的bottom - 当前header的高度</span><br><span class="line">            &#x2F;&#x2F;当当前section的footer或者下一个section的header接触到当前header的底部，计算出的headerMissingY即为有效值</span><br><span class="line">            CGFloat headerMissingY &#x3D; CGRectGetMaxY(lastItemAttributes.frame) + self.sectionInset.bottom - rect.size.height;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;给rect的y赋新值，因为在最后消失的临界点要跟谁消失，所以取小</span><br><span class="line">            rect.origin.y &#x3D; MIN(maxY,headerMissingY);</span><br><span class="line">            &#x2F;&#x2F;给header的结构信息的frame重新赋值</span><br><span class="line">            attributes.frame &#x3D; rect;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;如果按照正常情况下,header离开屏幕被系统回收，而header的层次关系又与cell相等，如果不去理会，会出现cell在header上面的情况</span><br><span class="line">            &#x2F;&#x2F;通过打印可以知道cell的层次关系zIndex数值为0，我们可以将header的zIndex设置成1，如果不放心，也可以将它设置成非常大，这里随便填了个7</span><br><span class="line">            attributes.zIndex &#x3D; 7;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;转换回不可变数组，并返回</span><br><span class="line">    return [superArray copy];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;return YES;表示一旦滑动就实时调用上面这个layoutAttributesForElementsInRect:方法</span><br><span class="line">- (BOOL) shouldInvalidateLayoutForBoundsChange:(CGRect)newBound &#123;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UICollectionView区头停留 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】获取设备信息</title>
      <link href="/2017/07/07/ios-device-info/"/>
      <url>/2017/07/07/ios-device-info/</url>
      
        <content type="html"><![CDATA[<p>在项目中经常会遇到要向服务端提交设备相关信息的需求(设备型号、版本号、DeviceToken等等)，于是把当前用到的相关函数整理成一个工具类和大家分享</p><a id="more"></a><p>欢迎补充~~<br><a href="https://github.com/idbeny/YBDeviceManager.git" target="_blank" rel="noopener">https://github.com/idbeny/YBDeviceManager.git</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;  YBDeviceManager.h</span><br><span class="line">&#x2F;&#x2F;  SHARE</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by IDBENY on 2017&#x2F;6&#x2F;6.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 Personal:idbeny.com All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;mac</span><br><span class="line">#include &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;sysctl.h&gt;</span><br><span class="line">#include &lt;net&#x2F;if.h&gt;</span><br><span class="line">#include &lt;net&#x2F;if_dl.h&gt;</span><br><span class="line"></span><br><span class="line">#import &lt;sys&#x2F;sockio.h&gt;</span><br><span class="line">#import &lt;sys&#x2F;ioctl.h&gt;</span><br><span class="line">#import &lt;arpa&#x2F;inet.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;IP</span><br><span class="line">#include &lt;ifaddrs.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;sys&#x2F;stat.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;mount.h&gt;</span><br><span class="line">#import &lt;sys&#x2F;utsname.h&gt;</span><br><span class="line">#import &lt;Security&#x2F;Security.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;CPU</span><br><span class="line">#include &lt;mach&#x2F;mach.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;广告</span><br><span class="line">#import &lt;AdSupport&#x2F;AdSupport.h&gt;</span><br><span class="line"></span><br><span class="line">typedef enum : NSUInteger &#123;</span><br><span class="line">    MemoryTypeTotal &#x3D; 0,&#x2F;&#x2F;总的</span><br><span class="line">    MemoryTypeFree,     &#x2F;&#x2F;剩余</span><br><span class="line">    MemoryTypeUsed,     &#x2F;&#x2F;已用</span><br><span class="line">    MemoryTypeActive,   &#x2F;&#x2F;活跃</span><br><span class="line">    MemoryTypeInactive, &#x2F;&#x2F;不活跃</span><br><span class="line">    MemoryTypeWired,    &#x2F;&#x2F;存放内核和数据结构</span><br><span class="line">    MemoryTypePurgeable  &#x2F;&#x2F;可释放的</span><br><span class="line">&#125; MemoryType;</span><br><span class="line"></span><br><span class="line">static inline BOOL iOS7AndLater()&#123;</span><br><span class="line">    return [[[UIDevice currentDevice] systemVersion] floatValue] &gt;&#x3D; 7.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static inline BOOL iOS8AndLater()&#123;</span><br><span class="line">    return [[[UIDevice currentDevice] systemVersion] floatValue] &gt;&#x3D; 8.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static inline BOOL iOS9AndLater()&#123;</span><br><span class="line">    return [[[UIDevice currentDevice] systemVersion] floatValue] &gt;&#x3D; 9.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static inline BOOL iOS10AndLater()&#123;</span><br><span class="line">    return [[[UIDevice currentDevice] systemVersion] floatValue] &gt;&#x3D; 10.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static inline BOOL iOS11AndLater()&#123;</span><br><span class="line">    return [[[UIDevice currentDevice] systemVersion] floatValue] &gt;&#x3D; 11.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@interface YBDeviceManager : NSObject</span><br><span class="line"></span><br><span class="line">+ (instancetype)defaultManager;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取UUID</span><br><span class="line"></span><br><span class="line"> @return UUID</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)getDeviceUUID;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 创建UUID</span><br><span class="line"></span><br><span class="line"> @return UUID</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)createNewUUID;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取DeviceToken</span><br><span class="line"></span><br><span class="line"> @return DeviceToken</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)getDeviceToken;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取当前设备Model</span><br><span class="line"> </span><br><span class="line"> @return iPhone&#x2F;iPad&#x2F;iPod touch&#x2F;...</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)deviceModel;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取当前设备名称</span><br><span class="line"> </span><br><span class="line"> @return iPhone 6 Plus&#x2F;iPhone SE&#x2F;iPad Mini&#x2F;...</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)getDeviceName;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取广告标识符</span><br><span class="line"> </span><br><span class="line"> @return IDFA</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)getIDFA;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取设备IP地址</span><br><span class="line"> </span><br><span class="line"> @return deviceIP</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)getDeviceIPAddress;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取WiFi地址</span><br><span class="line"> </span><br><span class="line"> @return WiFiIP</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)getIPAddressForWiFi;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取移动网络IP</span><br><span class="line"> </span><br><span class="line"> @return mobileNetworkIP</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)getIPAddressForMobileNetwork;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取MAC地址</span><br><span class="line"> </span><br><span class="line"> @return MAC</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)getMACAddress;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 系统版本</span><br><span class="line"> </span><br><span class="line"> @return e.g 7.0&#x2F;8.3&#x2F;..</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)systemVersion;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 当前APP版本</span><br><span class="line"> </span><br><span class="line"> @return e.g 3.0.0&#x2F;3.0.1&#x2F;...</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)appVersion;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取区域标志符（非语言标志）</span><br><span class="line"> </span><br><span class="line"> @return e.g en_GB...</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)localeIdentifier;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 判断设备是否为iPad</span><br><span class="line"></span><br><span class="line"> @return NO:iPhone&#x2F;TV&#x2F;CarPlay YES:iPad</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (BOOL)isiPad;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 是否为视网膜屏幕</span><br><span class="line"></span><br><span class="line"> @return YES&#x2F;NO</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (BOOL)isRetina;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 判断系统版本</span><br><span class="line"></span><br><span class="line"> @return YES&#x2F;NO</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (BOOL)iOS7AndLater;</span><br><span class="line"></span><br><span class="line">- (BOOL)iOS8AndLater;</span><br><span class="line"></span><br><span class="line">- (BOOL)iOS9AndLater;</span><br><span class="line"></span><br><span class="line">- (BOOL)iOS10AndLater;</span><br><span class="line"></span><br><span class="line">- (BOOL)iOS11AndLater;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 判断相机是否可用(前置)</span><br><span class="line"> </span><br><span class="line"> @return YES&#x2F;NO</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (BOOL)isFrontCameraAvailable;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 判断相机是否可用(后置)</span><br><span class="line"> </span><br><span class="line"> @return YES&#x2F;NO</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (BOOL)isRearCameraAvailable;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 电量</span><br><span class="line"> </span><br><span class="line"> @return battery</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (float)batteryLevel;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 系统上次启动时间</span><br><span class="line"> </span><br><span class="line"> @return NSDate*</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSDate *)getSystemUptime;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取CPU总数</span><br><span class="line"></span><br><span class="line"> @return CPU数量</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSUInteger)getCPUCount;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> CPU使用总比例</span><br><span class="line"></span><br><span class="line"> @return CPU usage</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (float)getCPUUsage;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 每个CPU使用比例</span><br><span class="line"></span><br><span class="line"> @return CPU usage</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSArray *)getPerCPUUsage;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取总磁盘空间</span><br><span class="line"></span><br><span class="line"> @return total disk space</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)getTotalDiskSpace;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_totalDiskSpace;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取剩余磁盘空间</span><br><span class="line"></span><br><span class="line"> @return free disk space</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)getFreeDiskSpace;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_freeDiskSpace;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取已使用磁盘空间</span><br><span class="line"></span><br><span class="line"> @return used disk space</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)getUsedDiskSpace;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取磁盘设备号</span><br><span class="line"></span><br><span class="line"> @return NSNumber*</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSNumber *)diskNumber;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取指定目录大小</span><br><span class="line"></span><br><span class="line"> @param dir 文件地址</span><br><span class="line"> @return 文件夹大小</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)sizeOfDirectory:(NSString *)dir;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 大小转换</span><br><span class="line"></span><br><span class="line"> @param size bit</span><br><span class="line"> @return 转换结果</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (NSString *)convertFloatSizeToString:(float)size;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取系统总内存空间</span><br><span class="line"></span><br><span class="line"> @return total memory</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)getTotalMemory;</span><br><span class="line"></span><br><span class="line">- (float)c_totalMemory;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取系统活跃内存空间</span><br><span class="line"> </span><br><span class="line"> @return active memory</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)getActiveMemory;</span><br><span class="line"></span><br><span class="line">- (float)c_activeMemory;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取系统不活跃内存空间</span><br><span class="line"> </span><br><span class="line"> @return inactive memory</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)getInactiveMemory;</span><br><span class="line"></span><br><span class="line">- (float)c_inactiveMemory;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取系统空闲的内存空间</span><br><span class="line"></span><br><span class="line"> @return free memory</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)getFreeMemory;</span><br><span class="line"></span><br><span class="line">- (float)c_freeMemory;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 用户可使用内存</span><br><span class="line"></span><br><span class="line"> @return free memory</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (float)c_userMemory;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取系统已使用的内存空间</span><br><span class="line"> </span><br><span class="line"> @return used memory</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)getUsedMemory;</span><br><span class="line"></span><br><span class="line">- (float)c_usedMemory;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 获取用来存放内核和数据结构的内存</span><br><span class="line"> </span><br><span class="line"> @return wired memory</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)getWiredMemory;</span><br><span class="line"></span><br><span class="line">- (float)c_wireMemory;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 可释放的内存空间：内存吃紧自动释放</span><br><span class="line"></span><br><span class="line"> @return purgeable memory</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (int64_t)getPurgeableMemory;</span><br><span class="line"></span><br><span class="line">- (float)c_purgeableMemory;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> CPU使用频率</span><br><span class="line"></span><br><span class="line"> @return frequency</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (float)cpuFrequency;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> CPU总线频率</span><br><span class="line"></span><br><span class="line"> @return frequency</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (float)busFrequency;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 最大Socket缓存区大小</span><br><span class="line"></span><br><span class="line"> @return size</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (float)maxSocketBufferSize;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  YBDeviceManager.m</span><br><span class="line">&#x2F;&#x2F;  SHARE</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by IDBENY on 2017&#x2F;6&#x2F;6.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 Personal:idbeny.com All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &quot;YBDeviceManager.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation YBDeviceManager</span><br><span class="line">+ (instancetype)defaultManager &#123;</span><br><span class="line">    static YBDeviceManager *defaultManager &#x3D; nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        defaultManager &#x3D; [[YBDeviceManager alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    return defaultManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 获取设备UUID &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)getDeviceUUID &#123;</span><br><span class="line">    CFUUIDRef new_uuid &#x3D; CFUUIDCreate(nil);</span><br><span class="line">    CFStringRef uuidString &#x3D; CFUUIDCreateString(nil, new_uuid);</span><br><span class="line">    NSString * result &#x3D; (NSString *)CFBridgingRelease(CFStringCreateCopy( NULL, uuidString));</span><br><span class="line">    CFRelease(new_uuid);</span><br><span class="line">    CFRelease(uuidString);</span><br><span class="line">    NSString *UUID  &#x3D; [[result description] stringByReplacingOccurrencesOfString:@&quot;-&quot; withString:@&quot;&quot;];</span><br><span class="line">    return UUID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 创建新的UUID &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)createNewUUID &#123;</span><br><span class="line">    CFUUIDRef theUUID &#x3D; CFUUIDCreate(NULL);</span><br><span class="line">    CFStringRef string &#x3D; CFUUIDCreateString(NULL, theUUID);</span><br><span class="line">    CFRelease(theUUID);</span><br><span class="line">    return (__bridge NSString *)string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 获取DeviceToken &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)getDeviceToken &#123;</span><br><span class="line">    NSString  *token &#x3D; [[NSUserDefaults standardUserDefaults] objectForKey:@&quot;deviceToken&quot;];</span><br><span class="line">    return token.length &gt; 0 ? token : nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取当前设备的model</span><br><span class="line">- (NSString *)deviceModel &#123;</span><br><span class="line">    struct utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    NSString *deviceModel &#x3D; [NSString stringWithCString:systemInfo.machine encoding:NSUTF8StringEncoding];</span><br><span class="line">    return deviceModel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 获取当前设备的名称 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)getDeviceName &#123;</span><br><span class="line">    struct utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    NSString *deviceString &#x3D; [NSString stringWithCString:systemInfo.machine encoding:NSUTF8StringEncoding];</span><br><span class="line">    </span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone3,1&quot;])    return @&quot;iPhone 4&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone3,2&quot;])    return @&quot;iPhone 4&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone3,3&quot;])    return @&quot;iPhone 4&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone4,1&quot;])    return @&quot;iPhone 4S&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone5,1&quot;])    return @&quot;iPhone 5&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone5,2&quot;])    return @&quot;iPhone 5 (GSM+CDMA)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone5,3&quot;])    return @&quot;iPhone 5c (GSM)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone5,4&quot;])    return @&quot;iPhone 5c (GSM+CDMA)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone6,1&quot;])    return @&quot;iPhone 5s (GSM)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone6,2&quot;])    return @&quot;iPhone 5s (GSM+CDMA)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone7,1&quot;])    return @&quot;iPhone 6 Plus&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone7,2&quot;])    return @&quot;iPhone 6&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone8,1&quot;])    return @&quot;iPhone 6s&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone8,2&quot;])    return @&quot;iPhone 6s Plus&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone8,4&quot;])    return @&quot;iPhone SE&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone9,1&quot;])    return @&quot;国行、日版、港行iPhone 7&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone9,2&quot;])    return @&quot;港行、国行iPhone 7 Plus&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone9,3&quot;])    return @&quot;美版、台版iPhone 7&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPhone9,4&quot;])    return @&quot;美版、台版iPhone 7 Plus&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPod1,1&quot;])      return @&quot;iPod Touch 1G&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPod2,1&quot;])      return @&quot;iPod Touch 2G&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPod3,1&quot;])      return @&quot;iPod Touch 3G&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPod4,1&quot;])      return @&quot;iPod Touch 4G&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPod5,1&quot;])      return @&quot;iPod Touch (5 Gen)&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad1,1&quot;])      return @&quot;iPad&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad1,2&quot;])      return @&quot;iPad 3G&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad2,1&quot;])      return @&quot;iPad 2 (WiFi)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad2,2&quot;])      return @&quot;iPad 2&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad2,3&quot;])      return @&quot;iPad 2 (CDMA)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad2,4&quot;])      return @&quot;iPad 2&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad2,5&quot;])      return @&quot;iPad Mini (WiFi)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad2,6&quot;])      return @&quot;iPad Mini&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad2,7&quot;])      return @&quot;iPad Mini (GSM+CDMA)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad3,1&quot;])      return @&quot;iPad 3 (WiFi)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad3,2&quot;])      return @&quot;iPad 3 (GSM+CDMA)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad3,3&quot;])      return @&quot;iPad 3&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad3,4&quot;])      return @&quot;iPad 4 (WiFi)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad3,5&quot;])      return @&quot;iPad 4&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad3,6&quot;])      return @&quot;iPad 4 (GSM+CDMA)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad4,1&quot;])      return @&quot;iPad Air (WiFi)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad4,2&quot;])      return @&quot;iPad Air (Cellular)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad4,4&quot;])      return @&quot;iPad Mini 2 (WiFi)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad4,5&quot;])      return @&quot;iPad Mini 2 (Cellular)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad4,6&quot;])      return @&quot;iPad Mini 2&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad4,7&quot;])      return @&quot;iPad Mini 3&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad4,8&quot;])      return @&quot;iPad Mini 3&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad4,9&quot;])      return @&quot;iPad Mini 3&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad5,1&quot;])      return @&quot;iPad Mini 4 (WiFi)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad5,2&quot;])      return @&quot;iPad Mini 4 (LTE)&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad5,3&quot;])      return @&quot;iPad Air 2&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad5,4&quot;])      return @&quot;iPad Air 2&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad6,3&quot;])      return @&quot;iPad Pro 9.7&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad6,4&quot;])      return @&quot;iPad Pro 9.7&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad6,7&quot;])      return @&quot;iPad Pro 12.9&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;iPad6,8&quot;])      return @&quot;iPad Pro 12.9&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([deviceString isEqualToString:@&quot;AppleTV2,1&quot;])      return @&quot;Apple TV 2&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;AppleTV3,1&quot;])      return @&quot;Apple TV 3&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;AppleTV3,2&quot;])      return @&quot;Apple TV 3&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;AppleTV5,3&quot;])      return @&quot;Apple TV 4&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([deviceString isEqualToString:@&quot;i386&quot;])         return @&quot;i386Simulator&quot;;</span><br><span class="line">    if ([deviceString isEqualToString:@&quot;x86_64&quot;])       return @&quot;x86_64Simulator&quot;;</span><br><span class="line">    </span><br><span class="line">    return deviceString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 获取广告标识符 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)getIDFA &#123;</span><br><span class="line">    return [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 获取设备IP地址 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)getDeviceIPAddress &#123;</span><br><span class="line">    </span><br><span class="line">    int sockfd &#x3D; socket(AF_INET, SOCK_DGRAM, 0);</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *ips &#x3D; [NSMutableArray array];</span><br><span class="line">    </span><br><span class="line">    int BUFFERSIZE &#x3D; 4096;</span><br><span class="line">    </span><br><span class="line">    struct ifconf ifc;</span><br><span class="line">    </span><br><span class="line">    char buffer[BUFFERSIZE], *ptr, lastname[IFNAMSIZ], *cptr;</span><br><span class="line">    </span><br><span class="line">    struct ifreq *ifr, ifrcopy;</span><br><span class="line">    </span><br><span class="line">    ifc.ifc_len &#x3D; BUFFERSIZE;</span><br><span class="line">    ifc.ifc_buf &#x3D; buffer;</span><br><span class="line">    </span><br><span class="line">    if (ioctl(sockfd, SIOCGIFCONF, &amp;ifc) &gt;&#x3D; 0)&#123;</span><br><span class="line">        </span><br><span class="line">        for (ptr &#x3D; buffer; ptr &lt; buffer + ifc.ifc_len; )&#123;</span><br><span class="line">            </span><br><span class="line">            ifr &#x3D; (struct ifreq *)ptr;</span><br><span class="line">            int len &#x3D; sizeof(struct sockaddr);</span><br><span class="line">            </span><br><span class="line">            if (ifr-&gt;ifr_addr.sa_len &gt; len) &#123;</span><br><span class="line">                len &#x3D; ifr-&gt;ifr_addr.sa_len;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ptr +&#x3D; sizeof(ifr-&gt;ifr_name) + len;</span><br><span class="line">            if (ifr-&gt;ifr_addr.sa_family !&#x3D; AF_INET) continue;</span><br><span class="line">            if ((cptr &#x3D; (char *)strchr(ifr-&gt;ifr_name, &#39;:&#39;)) !&#x3D; NULL) *cptr &#x3D; 0;</span><br><span class="line">            if (strncmp(lastname, ifr-&gt;ifr_name, IFNAMSIZ) &#x3D;&#x3D; 0) continue;</span><br><span class="line">            </span><br><span class="line">            memcpy(lastname, ifr-&gt;ifr_name, IFNAMSIZ);</span><br><span class="line">            ifrcopy &#x3D; *ifr;</span><br><span class="line">            ioctl(sockfd, SIOCGIFFLAGS, &amp;ifrcopy);</span><br><span class="line">            </span><br><span class="line">            if ((ifrcopy.ifr_flags &amp; IFF_UP) &#x3D;&#x3D; 0) continue;</span><br><span class="line">            </span><br><span class="line">            NSString *ip &#x3D; [NSString  stringWithFormat:@&quot;%s&quot;, inet_ntoa(((struct sockaddr_in *)&amp;ifr-&gt;ifr_addr)-&gt;sin_addr)];</span><br><span class="line">            [ips addObject:ip];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    close(sockfd);</span><br><span class="line">    NSString *deviceIP &#x3D; @&quot;&quot;;</span><br><span class="line">    </span><br><span class="line">    for (int i&#x3D;0; i &lt; ips.count; i++) &#123;</span><br><span class="line">        if (ips.count &gt; 0) &#123;</span><br><span class="line">            deviceIP &#x3D; [NSString stringWithFormat:@&quot;%@&quot;,ips.lastObject];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return deviceIP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 获取wifi地址 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)getIPAddressForWiFi &#123;</span><br><span class="line">    return [self ipAddressWithIfaName:@&quot;en0&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 获取移动网络地址 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)getIPAddressForMobileNetwork&#123;</span><br><span class="line">    return [self ipAddressWithIfaName:@&quot;pdp_ip0&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *)ipAddressWithIfaName:(NSString *)name &#123;</span><br><span class="line">    if (name.length &#x3D;&#x3D; 0) return nil;</span><br><span class="line">    NSString *address &#x3D; nil;</span><br><span class="line">    struct ifaddrs *addrs &#x3D; NULL;</span><br><span class="line">    if (getifaddrs(&amp;addrs) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        struct ifaddrs *addr &#x3D; addrs;</span><br><span class="line">        while (addr) &#123;</span><br><span class="line">            if ([[NSString stringWithUTF8String:addr-&gt;ifa_name] isEqualToString:name]) &#123;</span><br><span class="line">                sa_family_t family &#x3D; addr-&gt;ifa_addr-&gt;sa_family;</span><br><span class="line">                switch (family) &#123;</span><br><span class="line">                    case AF_INET: &#123; &#x2F;&#x2F; IPv4</span><br><span class="line">                        char str[INET_ADDRSTRLEN] &#x3D; &#123;0&#125;;</span><br><span class="line">                        inet_ntop(family, &amp;(((struct sockaddr_in *)addr-&gt;ifa_addr)-&gt;sin_addr), str, sizeof(str));</span><br><span class="line">                        if (strlen(str) &gt; 0) &#123;</span><br><span class="line">                            address &#x3D; [NSString stringWithUTF8String:str];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; break;</span><br><span class="line">                        </span><br><span class="line">                    case AF_INET6: &#123; &#x2F;&#x2F; IPv6</span><br><span class="line">                        char str[INET6_ADDRSTRLEN] &#x3D; &#123;0&#125;;</span><br><span class="line">                        inet_ntop(family, &amp;(((struct sockaddr_in6 *)addr-&gt;ifa_addr)-&gt;sin6_addr), str, sizeof(str));</span><br><span class="line">                        if (strlen(str) &gt; 0) &#123;</span><br><span class="line">                            address &#x3D; [NSString stringWithUTF8String:str];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                        </span><br><span class="line">                    default: break;</span><br><span class="line">                &#125;</span><br><span class="line">                if (address) break;</span><br><span class="line">            &#125;</span><br><span class="line">            addr &#x3D; addr-&gt;ifa_next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    freeifaddrs(addrs);</span><br><span class="line">    return address ? address : @&quot;该设备不存在该ip地址&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 获取MAC地址(为了保护用户隐私，每次都不一样) &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)getMACAddress &#123;</span><br><span class="line">    int                    mib[6];</span><br><span class="line">    size_t                len;</span><br><span class="line">    char                *buf;</span><br><span class="line">    unsigned char        *ptr;</span><br><span class="line">    struct if_msghdr    *ifm;</span><br><span class="line">    struct sockaddr_dl    *sdl;</span><br><span class="line">    </span><br><span class="line">    mib[0] &#x3D; CTL_NET;</span><br><span class="line">    mib[1] &#x3D; AF_ROUTE;</span><br><span class="line">    mib[2] &#x3D; 0;</span><br><span class="line">    mib[3] &#x3D; AF_LINK;</span><br><span class="line">    mib[4] &#x3D; NET_RT_IFLIST;</span><br><span class="line">    </span><br><span class="line">    if ((mib[5] &#x3D; if_nametoindex(&quot;en0&quot;)) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        printf(&quot;Error: if_nametoindex error&#x2F;n&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (sysctl(mib, 6, NULL, &amp;len, NULL, 0) &lt; 0) &#123;</span><br><span class="line">        printf(&quot;Error: sysctl, take 1&#x2F;n&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ((buf &#x3D; malloc(len)) &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">        printf(&quot;Could not allocate memory. error!&#x2F;n&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (sysctl(mib, 6, buf, &amp;len, NULL, 0) &lt; 0) &#123;</span><br><span class="line">        printf(&quot;Error: sysctl, take 2&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ifm &#x3D; (struct if_msghdr *)buf;</span><br><span class="line">    sdl &#x3D; (struct sockaddr_dl *)(ifm + 1);</span><br><span class="line">    ptr &#x3D; (unsigned char *)LLADDR(sdl);</span><br><span class="line">    </span><br><span class="line">    NSString *outstring &#x3D; [NSString stringWithFormat:@&quot;%02x%02x%02x%02x%02x%02x&quot;, *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];</span><br><span class="line">    free(buf);</span><br><span class="line">    </span><br><span class="line">    return [outstring uppercaseString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 系统版本 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)systemVersion &#123;</span><br><span class="line">    UIDevice *device&#x3D;[UIDevice currentDevice];</span><br><span class="line">    return device.systemVersion;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; APP version &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSString *)appVersion &#123;</span><br><span class="line">    NSString *majorVersion &#x3D; [[[NSBundle mainBundle] infoDictionary] objectForKey:@&quot;CFBundleShortVersionString&quot;];</span><br><span class="line">    return majorVersion;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;电池量</span><br><span class="line">- (float)batteryLevel&#123;</span><br><span class="line">    return [[UIDevice currentDevice] batteryLevel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取区域标志符（非语言标志）</span><br><span class="line">- (NSString *)localeIdentifier &#123;</span><br><span class="line">    NSLocale *frLocale &#x3D; [NSLocale autoupdatingCurrentLocale];</span><br><span class="line">    return frLocale.localeIdentifier;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 系统上次启动时间 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (NSDate *)getSystemUptime &#123;</span><br><span class="line">    NSTimeInterval time &#x3D; [[NSProcessInfo processInfo] systemUptime];</span><br><span class="line">    return [[NSDate alloc] initWithTimeIntervalSinceNow:(0 - time)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 判断设备是否为iPad &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (BOOL)isiPad&#123;</span><br><span class="line">    return (UI_USER_INTERFACE_IDIOM() &#x3D;&#x3D; UIUserInterfaceIdiomPad);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 判断是否为视网膜屏幕 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (BOOL)isRetina&#123;</span><br><span class="line">    return ([UIScreen mainScreen].scale &gt; 1.0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 判断系统版本 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">- (BOOL)iOS7AndLater&#123;</span><br><span class="line">    return [[[UIDevice currentDevice] systemVersion] floatValue] &gt;&#x3D; 7.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)iOS8AndLater&#123;</span><br><span class="line">    return [[[UIDevice currentDevice] systemVersion] floatValue] &gt;&#x3D; 8.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)iOS9AndLater&#123;</span><br><span class="line">    return [[[UIDevice currentDevice] systemVersion] floatValue] &gt;&#x3D; 9.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)iOS10AndLater&#123;</span><br><span class="line">    return [[[UIDevice currentDevice] systemVersion] floatValue] &gt;&#x3D; 10.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)iOS11AndLater&#123;</span><br><span class="line">    return [[[UIDevice currentDevice] systemVersion] floatValue] &gt;&#x3D; 11.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 判断相机是否可用 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F;判断相机是否可用(前置)</span><br><span class="line">- (BOOL)isFrontCameraAvailable&#123;</span><br><span class="line">    return [UIImagePickerController isCameraDeviceAvailable: UIImagePickerControllerCameraDeviceFront];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断相机是否可用(后置)</span><br><span class="line">- (BOOL)isRearCameraAvailable&#123;</span><br><span class="line">    return [UIImagePickerController isCameraDeviceAvailable: UIImagePickerControllerCameraDeviceRear];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; CPU &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F;CPU总数</span><br><span class="line">- (NSUInteger)getCPUCount &#123;</span><br><span class="line">    return [NSProcessInfo processInfo].activeProcessorCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;CPU使用的总比例</span><br><span class="line">- (float)getCPUUsage &#123;</span><br><span class="line">    float cpu &#x3D; 0;</span><br><span class="line">    NSArray *cpus &#x3D; [self getPerCPUUsage];</span><br><span class="line">    if (cpus.count &#x3D;&#x3D; 0) return -1;</span><br><span class="line">    for (NSNumber *n in cpus) &#123;</span><br><span class="line">        cpu +&#x3D; n.floatValue;</span><br><span class="line">    &#125;</span><br><span class="line">    return cpu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;每个CPU使用比例</span><br><span class="line">- (NSArray *)getPerCPUUsage &#123;</span><br><span class="line">    processor_info_array_t _cpuInfo, _prevCPUInfo &#x3D; nil;</span><br><span class="line">    mach_msg_type_number_t _numCPUInfo, _numPrevCPUInfo &#x3D; 0;</span><br><span class="line">    unsigned _numCPUs;</span><br><span class="line">    NSLock *_cpuUsageLock;</span><br><span class="line">    </span><br><span class="line">    int _mib[2U] &#x3D; &#123; CTL_HW, HW_NCPU &#125;;</span><br><span class="line">    size_t _sizeOfNumCPUs &#x3D; sizeof(_numCPUs);</span><br><span class="line">    int _status &#x3D; sysctl(_mib, 2U, &amp;_numCPUs, &amp;_sizeOfNumCPUs, NULL, 0U);</span><br><span class="line">    if (_status)</span><br><span class="line">        _numCPUs &#x3D; 1;</span><br><span class="line">    </span><br><span class="line">    _cpuUsageLock &#x3D; [[NSLock alloc] init];</span><br><span class="line">    </span><br><span class="line">    natural_t _numCPUsU &#x3D; 0U;</span><br><span class="line">    kern_return_t err &#x3D; host_processor_info(mach_host_self(), PROCESSOR_CPU_LOAD_INFO, &amp;_numCPUsU, &amp;_cpuInfo, &amp;_numCPUInfo);</span><br><span class="line">    if (err &#x3D;&#x3D; KERN_SUCCESS) &#123;</span><br><span class="line">        [_cpuUsageLock lock];</span><br><span class="line">        </span><br><span class="line">        NSMutableArray *cpus &#x3D; [NSMutableArray new];</span><br><span class="line">        for (unsigned i &#x3D; 0U; i &lt; _numCPUs; ++i) &#123;</span><br><span class="line">            Float32 _inUse, _total;</span><br><span class="line">            if (_prevCPUInfo) &#123;</span><br><span class="line">                _inUse &#x3D; (</span><br><span class="line">                          (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_USER]   - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_USER])</span><br><span class="line">                          + (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_SYSTEM] - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_SYSTEM])</span><br><span class="line">                          + (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_NICE]   - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_NICE])</span><br><span class="line">                          );</span><br><span class="line">                _total &#x3D; _inUse + (_cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_IDLE] - _prevCPUInfo[(CPU_STATE_MAX * i) + CPU_STATE_IDLE]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                _inUse &#x3D; _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_USER] + _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_SYSTEM] + _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_NICE];</span><br><span class="line">                _total &#x3D; _inUse + _cpuInfo[(CPU_STATE_MAX * i) + CPU_STATE_IDLE];</span><br><span class="line">            &#125;</span><br><span class="line">            [cpus addObject:@(_inUse &#x2F; _total)];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [_cpuUsageLock unlock];</span><br><span class="line">        if (_prevCPUInfo) &#123;</span><br><span class="line">            size_t prevCpuInfoSize &#x3D; sizeof(integer_t) * _numPrevCPUInfo;</span><br><span class="line">            vm_deallocate(mach_task_self(), (vm_address_t)_prevCPUInfo, prevCpuInfoSize);</span><br><span class="line">        &#125;</span><br><span class="line">        return cpus;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Disk &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F;总磁盘空间</span><br><span class="line">- (int64_t)getTotalDiskSpace &#123;</span><br><span class="line">    return [self ios_getSpaceForKey:NSFileSystemSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_totalDiskSpace &#123;</span><br><span class="line">    NSString *str &#x3D; @&quot;~&#x2F;Documents&quot;;</span><br><span class="line">    </span><br><span class="line">    uint64_t size &#x3D; 0;</span><br><span class="line">    struct statfs diskInfo;</span><br><span class="line">    </span><br><span class="line">    if(statfs([[str stringByExpandingTildeInPath] fileSystemRepresentation], &amp;diskInfo) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        &#x2F;&#x2F;每个block里包含的字节数</span><br><span class="line">        uint64_t blocksize &#x3D; diskInfo.f_bsize;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;总的字节数，f_blocks为block的数目</span><br><span class="line">        uint64_t totalsize &#x3D; blocksize * diskInfo.f_blocks;</span><br><span class="line">        size &#x3D; totalsize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;剩余磁盘空间</span><br><span class="line">- (int64_t)getFreeDiskSpace &#123;</span><br><span class="line">    return [self ios_getSpaceForKey:NSFileSystemFreeSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (uint64_t)c_freeDiskSpace &#123;</span><br><span class="line">    NSString *str &#x3D; @&quot;~&#x2F;Documents&quot;;</span><br><span class="line">    </span><br><span class="line">    uint64_t size &#x3D; 0;</span><br><span class="line">    struct statfs diskInfo;</span><br><span class="line">    </span><br><span class="line">    if(statfs([[str stringByExpandingTildeInPath] fileSystemRepresentation], &amp;diskInfo) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        &#x2F;&#x2F;每个block里包含的字节数</span><br><span class="line">        uint64_t blocksize &#x3D; diskInfo.f_bsize;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;可用空间大小</span><br><span class="line">        uint64_t availableDisk &#x3D; diskInfo.f_bavail * blocksize;</span><br><span class="line">        </span><br><span class="line">        size &#x3D; availableDisk;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;已用磁盘空间</span><br><span class="line">- (int64_t)getUsedDiskSpace &#123;</span><br><span class="line">    int64_t totalDisk &#x3D; [self getTotalDiskSpace];</span><br><span class="line">    int64_t freeDisk &#x3D; [self getFreeDiskSpace];</span><br><span class="line">    if (totalDisk &lt; 0 || freeDisk &lt; 0) return -1;</span><br><span class="line">    int64_t usedDisk &#x3D; totalDisk - freeDisk;</span><br><span class="line">    if (usedDisk &lt; 0) usedDisk &#x3D; -1;</span><br><span class="line">    return usedDisk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (int64_t)ios_getSpaceForKey:(id)key &#123;</span><br><span class="line">    NSError *error &#x3D; nil;</span><br><span class="line">    NSDictionary *attrs &#x3D; [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&amp;error];</span><br><span class="line">    if (error) return -1;</span><br><span class="line">    int64_t space &#x3D;  [[attrs objectForKey:key] longLongValue];</span><br><span class="line">    if (space &lt; 0) space &#x3D; -1;</span><br><span class="line">    return space;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;磁盘号</span><br><span class="line">- (NSNumber *)diskNumber &#123;</span><br><span class="line">    NSDictionary *fattributes &#x3D; [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:nil];</span><br><span class="line">    </span><br><span class="line">    return [fattributes objectForKey:NSFileSystemNumber];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;目录下所有文件大小</span><br><span class="line">- (int64_t)sizeOfDirectory:(NSString *)dir &#123;</span><br><span class="line">    NSDirectoryEnumerator *direnum &#x3D; [[NSFileManager defaultManager] enumeratorAtPath:dir];</span><br><span class="line">    </span><br><span class="line">    NSString *pname;</span><br><span class="line">    int64_t s &#x3D; 0;</span><br><span class="line">    while (pname &#x3D; [direnum nextObject])&#123;</span><br><span class="line">        NSDictionary *currentdict&#x3D;[direnum fileAttributes];</span><br><span class="line">        NSString *filesize&#x3D;[NSString stringWithFormat:@&quot;%@&quot;,[currentdict objectForKey:NSFileSize]];</span><br><span class="line">        NSString *filetype&#x3D;[currentdict objectForKey:NSFileType];</span><br><span class="line">        </span><br><span class="line">        if([filetype isEqualToString:NSFileTypeDirectory]) continue;</span><br><span class="line">        s +&#x3D; [filesize longLongValue];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将大小转化为格式,B,L,M,G之间的转换</span><br><span class="line">- (NSString *)convertFloatSizeToString:(float)size &#123;</span><br><span class="line">    if(size &lt; 1024L) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%fB&quot;, size];</span><br><span class="line">    &#125;else if(size &lt; 1024L * 1024L) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%1.2fK&quot;, (float)size &#x2F; 1024.0];</span><br><span class="line">    &#125;else if(size &lt; 1024L * 1024L * 1024L) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%1.2fM&quot;, (float)size &#x2F; 1024.0 &#x2F; 1024.0];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%1.2fG&quot;, (float)size &#x2F; 1024.0 &#x2F; 1024.0 &#x2F; 1024.0];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Memory &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F;总内存</span><br><span class="line">- (int64_t)getTotalMemory &#123;</span><br><span class="line">    int64_t totalMemory &#x3D; [[NSProcessInfo processInfo] physicalMemory];</span><br><span class="line">    if (totalMemory &lt; -1) totalMemory &#x3D; -1;</span><br><span class="line">    return totalMemory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (float)c_totalMemory &#123;</span><br><span class="line">    return [self sysInfo:HW_PHYSMEM];</span><br><span class="line">    &#x2F;&#x2F;or</span><br><span class="line">    &#x2F;&#x2F;return NSRealMemoryAvailable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;活跃内存</span><br><span class="line">- (int64_t)getActiveMemory &#123;</span><br><span class="line">    </span><br><span class="line">    return [self ios_getMemoryWithType:MemoryTypeActive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (float)c_activeMemory &#123;</span><br><span class="line">    return [self c_memoryWithType:MemoryTypeActive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不活跃内存</span><br><span class="line">- (int64_t)getInactiveMemory &#123;</span><br><span class="line">    </span><br><span class="line">    return [self ios_getMemoryWithType:MemoryTypeInactive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (float)c_inactiveMemory &#123;</span><br><span class="line">    return [self c_memoryWithType:MemoryTypeInactive];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;剩余内存</span><br><span class="line">- (int64_t)getFreeMemory &#123;</span><br><span class="line">    return [self ios_getMemoryWithType:MemoryTypeFree];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (float)c_freeMemory &#123;</span><br><span class="line">    return [self c_memoryWithType:MemoryTypeFree];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用户可使用内存</span><br><span class="line">- (float)c_userMemory &#123;</span><br><span class="line">    return [self sysInfo:HW_USERMEM];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;已用内存</span><br><span class="line">- (int64_t)getUsedMemory &#123;</span><br><span class="line">    return [self ios_getMemoryWithType:MemoryTypeUsed];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (float)c_usedMemory &#123;</span><br><span class="line">    return [self c_memoryWithType:MemoryTypeUsed];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;存放内核和数据结构的内存</span><br><span class="line">- (int64_t)getWiredMemory &#123;</span><br><span class="line">    return [self ios_getMemoryWithType:MemoryTypeWired];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (float)c_wireMemory &#123;</span><br><span class="line">    return [self c_memoryWithType:MemoryTypeWired];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;可释放的内存</span><br><span class="line">- (int64_t)getPurgeableMemory &#123;</span><br><span class="line">    </span><br><span class="line">    return [self ios_getMemoryWithType:MemoryTypePurgeable];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (float)c_purgeableMemory &#123;</span><br><span class="line">    return [self c_memoryWithType:MemoryTypePurgeable];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (int64_t)ios_getMemoryWithType:(MemoryType)type&#123;</span><br><span class="line">    mach_port_t host_port &#x3D; mach_host_self();</span><br><span class="line">    mach_msg_type_number_t host_size &#x3D; sizeof(vm_statistics_data_t) &#x2F; sizeof(integer_t);</span><br><span class="line">    vm_size_t page_size;</span><br><span class="line">    vm_statistics_data_t vm_stat;</span><br><span class="line">    kern_return_t kern;</span><br><span class="line">    </span><br><span class="line">    kern &#x3D; host_page_size(host_port, &amp;page_size);</span><br><span class="line">    if (kern !&#x3D; KERN_SUCCESS) return -1;</span><br><span class="line">    kern &#x3D; host_statistics(host_port, HOST_VM_INFO, (host_info_t)&amp;vm_stat, &amp;host_size);</span><br><span class="line">    if (kern !&#x3D; KERN_SUCCESS) return -1;</span><br><span class="line">    </span><br><span class="line">    int64_t count &#x3D; 0;</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case MemoryTypeFree:</span><br><span class="line">            count &#x3D; vm_stat.free_count;</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        case MemoryTypePurgeable:</span><br><span class="line">            count &#x3D; vm_stat.purgeable_count;</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        case MemoryTypeActive:</span><br><span class="line">            count &#x3D; vm_stat.active_count;</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        case MemoryTypeInactive:</span><br><span class="line">            count &#x3D; vm_stat.inactive_count;</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        case MemoryTypeWired:</span><br><span class="line">            count &#x3D; vm_stat.wire_count;</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        case MemoryTypeUsed:</span><br><span class="line">            count &#x3D; vm_stat.active_count + vm_stat.inactive_count + vm_stat.wire_count;</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return count * page_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (float)c_memoryWithType:(MemoryType)type&#123;</span><br><span class="line">    vm_statistics_data_t vm_stat;</span><br><span class="line">    </span><br><span class="line">    mach_msg_type_number_t infoCount &#x3D; HOST_VM_INFO_COUNT;</span><br><span class="line">    kern_return_t kernReturn &#x3D; host_statistics(mach_host_self(), HOST_VM_INFO, (host_info_t)&amp;vm_stat, &amp;infoCount);</span><br><span class="line">    </span><br><span class="line">    if(kernReturn &#x3D;&#x3D; KERN_SUCCESS)&#123;</span><br><span class="line">        int64_t count &#x3D; 0;</span><br><span class="line">        switch (type) &#123;</span><br><span class="line">            case MemoryTypeFree:</span><br><span class="line">                count &#x3D; vm_stat.free_count;</span><br><span class="line">                break;</span><br><span class="line">                </span><br><span class="line">            case MemoryTypePurgeable:</span><br><span class="line">                count &#x3D; vm_stat.purgeable_count;</span><br><span class="line">                break;</span><br><span class="line">                </span><br><span class="line">            case MemoryTypeActive:</span><br><span class="line">                count &#x3D; vm_stat.active_count;</span><br><span class="line">                break;</span><br><span class="line">                </span><br><span class="line">            case MemoryTypeInactive:</span><br><span class="line">                count &#x3D; vm_stat.inactive_count;</span><br><span class="line">                break;</span><br><span class="line">                </span><br><span class="line">            case MemoryTypeWired:</span><br><span class="line">                count &#x3D; vm_stat.wire_count;</span><br><span class="line">                break;</span><br><span class="line">                </span><br><span class="line">            case MemoryTypeUsed:</span><br><span class="line">                count &#x3D; vm_stat.active_count + vm_stat.inactive_count + vm_stat.wire_count;</span><br><span class="line">                break;</span><br><span class="line">                </span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return count * vm_page_size * 1.0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;CPU使用频率</span><br><span class="line">- (float)cpuFrequency&#123;</span><br><span class="line">    return [self sysInfo:HW_CPU_FREQ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;CPU总线频率</span><br><span class="line">- (float)busFrequency&#123;</span><br><span class="line">    return [self sysInfo:HW_BUS_FREQ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;最大Socket缓存区大小</span><br><span class="line">- (float)maxSocketBufferSize&#123;</span><br><span class="line">    return [self sysInfo:KIPC_MAXSOCKBUF];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (float)sysInfo:(uint)typeSpecifier&#123;</span><br><span class="line">    size_t size &#x3D; sizeof(int);</span><br><span class="line">    int results;</span><br><span class="line">    int mib[2] &#x3D; &#123;CTL_HW, typeSpecifier&#125;;</span><br><span class="line">    sysctl(mib, 2, &amp;results, &amp;size, NULL, 0);</span><br><span class="line">    </span><br><span class="line">    return (NSUInteger) results * 1.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 设备信息获取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】 Build Active Architecture Only</title>
      <link href="/2017/06/23/ios-armv-config/"/>
      <url>/2017/06/23/ios-armv-config/</url>
      
        <content type="html"><![CDATA[<p>前两天运营部门提出一个问题：为什么我们的APP不支持iPhone5s以下机型(我们APP最低支持系统版本8.0)？我也是一脸懵，平时都是不支持哪个系统版本的，我还是头一次听说不支持机型的呢！直觉告诉我问题出在<code>armv64</code>、<code>armv7</code>等系统架构上面……</p><a id="more"></a><p>我在AppStore上搜索我们的APP发现兼容性描述限制了机型！！！<br><img src="http://blog.idbeny.com/eehiu.png@normal" alt=""></p><p>为什么会出现这样的问题呢？查看配置<br><img src="http://blog.idbeny.com/jfge1.png@normal" alt=""></p><ul><li>当<code>Debug</code>和<code>Release</code>属性设置为<code>YES</code>时，是为了debug的时候编译速度更快，它只编译当前连接手机的<code>architecture</code>版本;</li><li>当而设置为<code>NO</code>时，会编译所有的版本;</li><li>编译出的版本是向下兼容的，比如你设置值为<code>YES</code>，用iPhone4编译出来的是armv7版本的，iphone5也可以运行，但是armv6的设备就不能运行;</li><li>所以，一般<code>Debug</code>模式可以选择设置为<code>YES</code>，<code>Release</code>的时候要改为<code>NO</code>，以适应不同设备。</li></ul><p>目前为止Apple移动设备默认指令集：</p><ul><li>armv6：iPhone2G/3G、iPod 1G/2G</li><li>armv7：iPhone 3GS/4/4s、iPod 3G/4G、iPad 1G/2G/3G、iPad mini</li><li>armv7s：iPhone5、iPhone5c、iPad4</li><li>arm64：iPhone5s及以后、iPad Air、iPad mini2</li></ul><p><em>(Armv6、armv7、armv7s、arm64都是arm处理器的指令集，所有指令集原则上都是向下兼容的。需要注意的是iOS模拟器没有运行arm指令集，编译运行的是x86指令集，所以，只有在iOS设备上，才会执行设备对应的arm指令集。)</em></p><p>更改设置并发布版本后发现AppStore兼容性描述正常，iPhone5也可以正常下载<br><img src="http://blog.idbeny.com/4blki.png@normal" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> armv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Alcatraz】如何安装和使用Alcatraz</title>
      <link href="/2017/05/29/alcatraz-install-used/"/>
      <url>/2017/05/29/alcatraz-install-used/</url>
      
        <content type="html"><![CDATA[<p>开发过程中为了提高开发效率我们经常会使用到很多Xcode插件，有时候为了方便能不能出个像<code>cocoapods</code>那样的插件管理工具呢？</p><a id="more"></a><p>接下来就为大家介绍一下灰常牛逼的一款插件管理工具：<a href="https://link.jianshu.com/?t=https://github.com/alcatraz/Alcatraz" target="_blank" rel="noopener">Alcatraz</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;alcatraz&#x2F;Alcatraz&#x2F;master&#x2F;Scripts&#x2F;install.sh | sh</span><br></pre></td></tr></table></figure><p><img src="http://blog.idbeny.com/kwtpk.png@normal" alt=""></p></li><li><p>安装成功后重启Xcode</p></li><li><p>重新打开Xcode后提示如下：选择<code>Load Bundle</code><br><img src="http://blog.idbeny.com/586k1.png@normal" alt=""></p></li><li><p>查看是否安装成功<br>进入<code>Xcode</code>菜单导航界面选择<code>Window</code>，出现<code>Package Manager</code>即安装成功<br><img src="http://blog.idbeny.com/oytsb.png@normal" alt=""></p></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>我们可以接上一步骤直接鼠标点击打开，或快捷键：<code>command+shift+9</code></p></li><li><p>点击<code>Installed</code>以及<code>Plugins</code>可以看到之前已经安装好的插件<br><img src="http://blog.idbeny.com/fvzno.png@normal" alt=""></p></li><li><p>安装插件只需搜索相关插件即可，以<a href="https://link.jianshu.com/?t=https://github.com/ksuther/KSImageNamed-Xcode" target="_blank" rel="noopener">KSImageNamed</a>为例</p></li><li><p>点击<code>INSTALL</code>，等待安装，安装过程中<code>INSTALL</code>会变成<code>INSTALLING</code>，安装成功后显示<code>REMOVE **</code><br><img src="http://blog.idbeny.com/el25l.png@normal" alt=""></p></li><li><p>安装成功后，若想立即使用刚才下载的插件需要<strong>重启Xcode</strong>，再次打开后勾选<code>Load Bundle</code><br><img src="http://blog.idbeny.com/g6dka.png@normal" alt=""></p></li><li><p>若想移除相关插件点击<code>REMOVE</code>即可<br><img src="http://blog.idbeny.com/yl81i.png@normal" alt=""></p></li><li><p>移除所有插件，在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~&#x2F;Library&#x2F;Application\ Support&#x2F;Alcatraz&#x2F;</span><br></pre></td></tr></table></figure></li></ol><h3 id="移除工具"><a href="#移除工具" class="headerlink" title="移除工具"></a>移除工具</h3><p>删除Alcatraz 只需在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~&#x2F;Library&#x2F;Application\ Support&#x2F;Developer&#x2F;Shared&#x2F;Xcode&#x2F;Plug-ins&#x2F;Alcatraz.xcplugin</span><br></pre></td></tr></table></figure><blockquote><p>注意：目前Alcatraz仅支持Xcode7.0+</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alcatraz </tag>
            
            <tag> Xcode </tag>
            
            <tag> Plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】AVQueuePlayer讲解</title>
      <link href="/2017/05/25/ios-avplayer/"/>
      <url>/2017/05/25/ios-avplayer/</url>
      
        <content type="html"><![CDATA[<p>最近在做的项目中使用<code>AVPlayer</code>进行视频播放，因为第一次做功能点这样庞大的视频播放项目，所以在带着团队<code>review</code>代码的时候发现有些地方还是值得优化的，很经典的一块就是按照集数顺序播放，当时做的是思路如下：</p><a id="more"></a><h3 id="AVPlayer"><a href="#AVPlayer" class="headerlink" title="AVPlayer"></a>AVPlayer</h3><ol><li><p>为当前<code>AVPlayerItem</code>添加播放结束的通知<code>AVPlayerItemDidPlayToEndTimeNotification</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;监听视频是否已经播放完毕，然后实现KVO的方法：</span><br><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(mediaPlayDidEnd:) name:AVPlayerItemDidPlayToEndTimeNotification object:self.playerItem];</span><br></pre></td></tr></table></figure></li><li><p>实现监听方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;视频播放结束通知</span><br><span class="line">- (void)mediaPlayDidEnd:(NSNotification *)notification&#123;</span><br><span class="line">  &#x2F;&#x2F;在此实现切换相应集数的逻辑，例如：刷新UI、切换播放地址等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>review</code>代码的时候一不小心点到官方API里面，发现一个神奇的字眼<code>queue</code>，给我的直觉就是队列播放，仔细阅读官方文档后内心感觉这玩意简直就是为自己量身打造的，无比激动 ——<code>AVQueuePlayer</code></p><h3 id="AVQueuePlayer"><a href="#AVQueuePlayer" class="headerlink" title="AVQueuePlayer"></a>AVQueuePlayer</h3><p>下面我根据<a href="https://link.jianshu.com/?t=https%3A%2F%2Fdeveloper.apple.com%2Freference%2Favfoundation%2Favqueueplayer%3Flanguage%3Dobjc" target="_blank" rel="noopener">官方文档</a>简单进行翻译下，就不上代码了，因为文档很简单，功能很直白</p><blockquote><p>AVQueuePlayer is a subclass of <a href="https://developer.apple.com/reference/avfoundation/avplayer?language=objc" target="_blank" rel="noopener">AVPlayer</a> used to play a number of items in sequence. Using this class you can create and manage a queue of player items comprised of local or progressively downloaded file-based media, such as QuickTime movies or MP3 audio files, as well as media served using HTTP Live Streaming.</p></blockquote><p>翻译：<code>AVQueuePlayer</code>是<code>AVPlayer</code>被用来依次播放的子类。用这个类你能够创建和管理一个播放或文件下载的队列，例如<code>QuickTime</code>格式的视频或MP3音频文件，同样还支持流媒体的使用。</p><ul><li><p>创建队列对象的方法有两种，都是根据数组创建的，数组元素类型是<code>AVPlayerItem</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)queuePlayerWithItems:(NSArray&lt;AVPlayerItem *&gt; *)items;</span><br><span class="line"></span><br><span class="line">- (AVQueuePlayer *)initWithItems:(NSArray&lt;AVPlayerItem *&gt; *)items;</span><br></pre></td></tr></table></figure></li><li><p>获取当前存在于队列里元素的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (NSArray&lt;AVPlayerItem *&gt; *)items;</span><br></pre></td></tr></table></figure></li><li><p>结束当前播放并播放下一集(将当前item从队列中移除)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)advanceToNextItem;</span><br></pre></td></tr></table></figure></li><li><p>判断是否能够在队列中追加播放资源（需要注意的是，不支持队列中存在多个相同的播放资源，即<code>AVPlayerItem</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)canInsertItem:(AVPlayerItem *)item afterItem:(nullable AVPlayerItem *)afterItem;</span><br></pre></td></tr></table></figure></li><li><p>在指定位置插入一条播放资源（如果元素是空的则自动会过滤掉）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)insertItem:(AVPlayerItem *)item afterItem:(nullable AVPlayerItem *)afterItem;</span><br></pre></td></tr></table></figure></li><li><p>从队列中移除播放资源（如果移除的是当前正在播放的元素，则会自动执行advanceToNextItem播放下一集）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeItem:(AVPlayerItem *)item;</span><br></pre></td></tr></table></figure></li><li><p>清除所有播放资源（当执行这一操作后，将会暂停播放）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeAllItems;</span><br></pre></td></tr></table></figure></li></ul><p>以上就是<code>AVQueuePlayer</code>相关的介绍，使用它可以平滑的进行连续播放。</p><p>等以后有时间了，将会把播放器这块代码（含<code>FFmpeg</code>）整理下和大家共享(需要和公司申请)~~</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AVPlayer </tag>
            
            <tag> iOS </tag>
            
            <tag> 播放器 </tag>
            
            <tag> 自定义播放器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】UIImageView支持GIF动画</title>
      <link href="/2017/05/16/ios-image-gif/"/>
      <url>/2017/05/16/ios-image-gif/</url>
      
        <content type="html"><![CDATA[<p>项目中经常会用到<code>SDWebImage</code>来缓存图片，但是最新版本的<code>SDWebImage</code>似乎对<code>GIF</code>分类做出了改变，仅支持<code>NSData</code>，但把图片文件转换为<code>NSData</code>后再用<code>SDWebImage</code>提供的<code>GIF</code>方法，貌似并不管用(没有动画效果)，现在把之前的<code>GIF</code>分类贴上来，供大家参考使用：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">@interface UIImage (YBGIF)</span><br><span class="line">&#x2F;**</span><br><span class="line"> 根据图片名字创建gif图片</span><br><span class="line"></span><br><span class="line"> @param name 图片名字</span><br><span class="line"> @return UIImage*</span><br><span class="line"> *&#x2F;</span><br><span class="line">+ (UIImage *)animatedGIFNamed:(NSString *)name;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 根据NSData* 创建gif图片</span><br><span class="line"></span><br><span class="line"> @param data NSData *</span><br><span class="line"> @return UIImage *</span><br><span class="line"> *&#x2F;</span><br><span class="line">+ (UIImage *)animatedGIFWithData:(NSData *)data;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 根据大小裁剪图片</span><br><span class="line"></span><br><span class="line"> @param size 裁剪大小</span><br><span class="line"> @return UIImage*</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (UIImage *)animatedImageByScalingAndCroppingToSize:(CGSize)size;</span><br><span class="line">#import &quot;UIImage+YBGIF.h&quot;</span><br><span class="line">#import &lt;ImageIO&#x2F;ImageIO.h&gt;</span><br><span class="line"></span><br><span class="line">@implementation UIImage (YBGIF)</span><br><span class="line">+ (UIImage *)animatedGIFWithData:(NSData *)data &#123;</span><br><span class="line">   if (!data) &#123;</span><br><span class="line">       return nil;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   CGImageSourceRef source &#x3D; CGImageSourceCreateWithData((__bridge CFDataRef)data, NULL);</span><br><span class="line">   </span><br><span class="line">   size_t count &#x3D; CGImageSourceGetCount(source);</span><br><span class="line">   </span><br><span class="line">   UIImage *animatedImage;</span><br><span class="line">   </span><br><span class="line">   if (count &lt;&#x3D; 1) &#123;</span><br><span class="line">       animatedImage &#x3D; [[UIImage alloc] initWithData:data];</span><br><span class="line">   &#125;</span><br><span class="line">   else &#123;</span><br><span class="line">       NSMutableArray *images &#x3D; [NSMutableArray array];</span><br><span class="line">       </span><br><span class="line">       NSTimeInterval duration &#x3D; 0.0f;</span><br><span class="line">       </span><br><span class="line">       for (size_t i &#x3D; 0; i &lt; count; i++) &#123;</span><br><span class="line">           CGImageRef image &#x3D; CGImageSourceCreateImageAtIndex(source, i, NULL);</span><br><span class="line">           if (!image) &#123;</span><br><span class="line">               continue;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           duration +&#x3D; [self frameDurationAtIndex:i source:source];</span><br><span class="line">           </span><br><span class="line">           [images addObject:[UIImage imageWithCGImage:image scale:[UIScreen mainScreen].scale orientation:UIImageOrientationUp]];</span><br><span class="line">           </span><br><span class="line">           CGImageRelease(image);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       if (!duration) &#123;</span><br><span class="line">           duration &#x3D; (1.0f &#x2F; 10.0f) * count;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       animatedImage &#x3D; [UIImage animatedImageWithImages:images duration:duration];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   CFRelease(source);</span><br><span class="line">   </span><br><span class="line">   return animatedImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (float)frameDurationAtIndex:(NSUInteger)index source:(CGImageSourceRef)source &#123;</span><br><span class="line">   float frameDuration &#x3D; 0.1f;</span><br><span class="line">   CFDictionaryRef cfFrameProperties &#x3D; CGImageSourceCopyPropertiesAtIndex(source, index, nil);</span><br><span class="line">   NSDictionary *frameProperties &#x3D; (__bridge NSDictionary *)cfFrameProperties;</span><br><span class="line">   NSDictionary *gifProperties &#x3D; frameProperties[(NSString *)kCGImagePropertyGIFDictionary];</span><br><span class="line">   </span><br><span class="line">   NSNumber *delayTimeUnclampedProp &#x3D; gifProperties[(NSString *)kCGImagePropertyGIFUnclampedDelayTime];</span><br><span class="line">   if (delayTimeUnclampedProp) &#123;</span><br><span class="line">       frameDuration &#x3D; [delayTimeUnclampedProp floatValue];</span><br><span class="line">   &#125;</span><br><span class="line">   else &#123;</span><br><span class="line">       </span><br><span class="line">       NSNumber *delayTimeProp &#x3D; gifProperties[(NSString *)kCGImagePropertyGIFDelayTime];</span><br><span class="line">       if (delayTimeProp) &#123;</span><br><span class="line">           frameDuration &#x3D; [delayTimeProp floatValue];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   &#x2F;&#x2F; Many annoying ads specify a 0 duration to make an image flash as quickly as possible.</span><br><span class="line">   &#x2F;&#x2F; We follow Firefox&#39;s behavior and use a duration of 100 ms for any frames that specify</span><br><span class="line">   &#x2F;&#x2F; a duration of &lt;&#x3D; 10 ms. See &lt;rdar:&#x2F;&#x2F;problem&#x2F;7689300&gt; and &lt;http:&#x2F;&#x2F;webkit.org&#x2F;b&#x2F;36082&gt;</span><br><span class="line">   &#x2F;&#x2F; for more information.</span><br><span class="line">   </span><br><span class="line">   if (frameDuration &lt; 0.011f) &#123;</span><br><span class="line">       frameDuration &#x3D; 0.100f;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   CFRelease(cfFrameProperties);</span><br><span class="line">   return frameDuration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (UIImage *)animatedGIFNamed:(NSString *)name &#123;</span><br><span class="line">   CGFloat scale &#x3D; [UIScreen mainScreen].scale;</span><br><span class="line">   </span><br><span class="line">   if (scale &gt; 1.0f) &#123;</span><br><span class="line">       NSString *retinaPath &#x3D; [[NSBundle mainBundle] pathForResource:[name stringByAppendingString:@&quot;@2x&quot;] ofType:@&quot;gif&quot;];</span><br><span class="line">       </span><br><span class="line">       NSData *data &#x3D; [NSData dataWithContentsOfFile:retinaPath];</span><br><span class="line">       </span><br><span class="line">       if (data) &#123;</span><br><span class="line">           return [UIImage animatedGIFWithData:data];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       NSString *path &#x3D; [[NSBundle mainBundle] pathForResource:name ofType:@&quot;gif&quot;];</span><br><span class="line">       </span><br><span class="line">       data &#x3D; [NSData dataWithContentsOfFile:path];</span><br><span class="line">       </span><br><span class="line">       if (data) &#123;</span><br><span class="line">           return [UIImage animatedGIFWithData:data];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       return [UIImage imageNamed:name];</span><br><span class="line">   &#125;</span><br><span class="line">   else &#123;</span><br><span class="line">       NSString *path &#x3D; [[NSBundle mainBundle] pathForResource:name ofType:@&quot;gif&quot;];</span><br><span class="line">       </span><br><span class="line">       NSData *data &#x3D; [NSData dataWithContentsOfFile:path];</span><br><span class="line">       </span><br><span class="line">       if (data) &#123;</span><br><span class="line">           return [UIImage animatedGIFWithData:data];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       return [UIImage imageNamed:name];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UIImage *)animatedImageByScalingAndCroppingToSize:(CGSize)size &#123;</span><br><span class="line">   if (CGSizeEqualToSize(self.size, size) || CGSizeEqualToSize(size, CGSizeZero)) &#123;</span><br><span class="line">       return self;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   CGSize scaledSize &#x3D; size;</span><br><span class="line">   CGPoint thumbnailPoint &#x3D; CGPointZero;</span><br><span class="line">   </span><br><span class="line">   CGFloat widthFactor &#x3D; size.width &#x2F; self.size.width;</span><br><span class="line">   CGFloat heightFactor &#x3D; size.height &#x2F; self.size.height;</span><br><span class="line">   CGFloat scaleFactor &#x3D; (widthFactor &gt; heightFactor) ? widthFactor : heightFactor;</span><br><span class="line">   scaledSize.width &#x3D; self.size.width * scaleFactor;</span><br><span class="line">   scaledSize.height &#x3D; self.size.height * scaleFactor;</span><br><span class="line">   </span><br><span class="line">   if (widthFactor &gt; heightFactor) &#123;</span><br><span class="line">       thumbnailPoint.y &#x3D; (size.height - scaledSize.height) * 0.5;</span><br><span class="line">   &#125;</span><br><span class="line">   else if (widthFactor &lt; heightFactor) &#123;</span><br><span class="line">       thumbnailPoint.x &#x3D; (size.width - scaledSize.width) * 0.5;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   NSMutableArray *scaledImages &#x3D; [NSMutableArray array];</span><br><span class="line">   </span><br><span class="line">   for (UIImage *image in self.images) &#123;</span><br><span class="line">       UIGraphicsBeginImageContextWithOptions(size, NO, 0.0);</span><br><span class="line">       </span><br><span class="line">       [image drawInRect:CGRectMake(thumbnailPoint.x, thumbnailPoint.y, scaledSize.width, scaledSize.height)];</span><br><span class="line">       UIImage *newImage &#x3D; UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">       </span><br><span class="line">       [scaledImages addObject:newImage];</span><br><span class="line">       </span><br><span class="line">       UIGraphicsEndImageContext();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   return [UIImage animatedImageWithImages:scaledImages duration:self.duration];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Gif动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】微信分享描述变链接</title>
      <link href="/2017/05/15/ios-wechat-share-issues/"/>
      <url>/2017/05/15/ios-wechat-share-issues/</url>
      
        <content type="html"><![CDATA[<p>从去年开始，微信分享功能改版升级(跟随微信版本升级)，APP分享到微信的描述如果是空的，则显示的是对应的网址链接(部分微信未升级的用户不受此影响)。怎么办呢？当时我也查找了N多资料，但都未能有效的解决这个问题，最后发现用<code>Unicode</code>全角字符写一个空格就行了(普通空格都行不通)。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判段描述是否有效，如果无效则用空格代替 *\u3000表示unicode空格编码*</span><br><span class="line">if (shareDes &#x3D;&#x3D; nil || shareDes.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">    shareDes &#x3D; @&quot;\u3000&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候分享出去的描述就不是一个链接地址了，赶快去试试看看效果~</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 微信分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】过滤html标签</title>
      <link href="/2017/05/15/ios-filter-html/"/>
      <url>/2017/05/15/ios-filter-html/</url>
      
        <content type="html"><![CDATA[<p>文字(UI或分享时的标题(描述))展示给用户的时候，可能需要过滤掉html标签，有的开发团队可能把过滤操作放在后端处理，其实放在前端做相对来说比较合理(灵活性)。</p><a id="more"></a><p>那么怎样才能高效有效的过滤这些标签呢？首先想到的就是使用<strong>正则</strong>……我们我可以写一个<code>NSString</code>的分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+ (NSString *)getNormalStringFilterHTMLString:(NSString *)htmlStr&#123;</span><br><span class="line">    NSString *normalStr &#x3D; htmlStr.copy;</span><br><span class="line">    &#x2F;&#x2F;判断字符串是否有效</span><br><span class="line">    if (!normalStr || normalStr.length &#x3D;&#x3D; 0 || [normalStr isEqual:[NSNull null]]) return nil;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;过滤正常标签</span><br><span class="line">    NSRegularExpression *regularExpression&#x3D;[NSRegularExpression regularExpressionWithPattern:@&quot;&lt;[^&gt;]*&gt;&quot; options:NSRegularExpressionCaseInsensitive error:nil];</span><br><span class="line">    normalStr &#x3D; [regularExpression stringByReplacingMatchesInString:normalStr options:NSMatchingReportProgress range:NSMakeRange(0, normalStr.length) withTemplate:@&quot;&quot;];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;过滤占位符</span><br><span class="line">    NSRegularExpression *plExpression&#x3D;[NSRegularExpression regularExpressionWithPattern:@&quot;&amp;[^;]+;&quot; options:NSRegularExpressionCaseInsensitive error:nil];</span><br><span class="line">    normalStr &#x3D; [plExpression stringByReplacingMatchesInString:normalStr options:NSMatchingReportProgress range:NSMakeRange(0, normalStr.length) withTemplate:@&quot;&quot;];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;过滤空格</span><br><span class="line">    NSRegularExpression *spaceExpression&#x3D;[NSRegularExpression regularExpressionWithPattern:@&quot;^\\s*|\\s*$&quot; options:NSRegularExpressionCaseInsensitive error:nil];</span><br><span class="line">    normalStr &#x3D; [spaceExpression stringByReplacingMatchesInString:normalStr options:NSMatchingReportProgress range:NSMakeRange(0, normalStr.length) withTemplate:@&quot;&quot;];</span><br><span class="line"></span><br><span class="line">    return normalStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 过滤Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】UIWebView播放器退出继续播放</title>
      <link href="/2017/04/19/ios-webview-player-issues/"/>
      <url>/2017/04/19/ios-webview-player-issues/</url>
      
        <content type="html"><![CDATA[<p><code>UIWebView</code>加载一个带播放器的html页面的时候，当视频在播放中我们退出当前页面的时候发现还在继续播放。</p><a id="more"></a><p>解决思路网上很多说法，说的最多的一种就是退出页面的时候加载一个空页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self.webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;about:blank&quot;]]];</span><br></pre></td></tr></table></figure><p>很多人在退出页面的时候加上这样一句代码就会发现播放器确实暂停播放了，但是如果继续回到这个页面(pop形式)发现是个空白页面。即使再次加载对应的URL能够解决当前问题，但对用户来说体验很不友好，怎么办呢？</p><p>用OC调用JS方法使播放器停止播放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewWillDisappear:(BOOL)animated&#123;</span><br><span class="line">    [super viewWillDisappear:animated];</span><br><span class="line"></span><br><span class="line">    NSString *videoPauseJSStr &#x3D; @&quot;document.documentElement.getElementsByTagName(\&quot;video\&quot;)[0].pause()&quot;;</span><br><span class="line">    [self.mWebView stringByEvaluatingJavaScriptFromString:videoPauseJSStr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候发现退出当前页面就暂停播放了<del>~</del></p><blockquote><p>以上方案仅适用于前端播放器使用<code>video</code>标签</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 播放器 </tag>
            
            <tag> UIWebView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】使用UISlider实现播放器断点播放</title>
      <link href="/2017/04/14/ios-slider-play/"/>
      <url>/2017/04/14/ios-slider-play/</url>
      
        <content type="html"><![CDATA[<p>实现播放器的<strong>断点播放</strong>有两个思路：</p><ul><li>自定义进度条(使用<code>UIView</code>绘制)</li><li>在<code>UISlider</code>基础上实现断点播放</li></ul><p>在这里简单介绍下用第2中思路是怎么实现的</p><a id="more"></a><h4 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h4><p>扩展一个<code>UISlider</code>子类，在子类方法中重写开始触摸代理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(void)touchesBegan:(NSSet &lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event</span><br></pre></td></tr></table></figure><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</span><br><span class="line">    CGRect trackRect &#x3D; [self trackRectForBounds: [self bounds]];</span><br><span class="line"></span><br><span class="line">    float value &#x3D; [self minimumValue] + ([[touches anyObject] locationInView: self].x - t.origin.x - 4.0) * (([self maximumValue]-[self minimumValue]) &#x2F; (trackRect.size.width - 8.0));</span><br><span class="line">    [self setValue:value];</span><br><span class="line">    [super touchesBegan:touches withEvent:event];</span><br><span class="line"></span><br><span class="line">    double current &#x3D; value * [AudioPlayer shareInstance].player.duration;</span><br><span class="line">    [[AudioPlayer shareInstance].player setCurrentTime:current];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UISlider </tag>
            
            <tag> 自定义Slider </tag>
            
            <tag> 播放器Slider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】3D Touch</title>
      <link href="/2017/04/01/ios-3dtouch/"/>
      <url>/2017/04/01/ios-3dtouch/</url>
      
        <content type="html"><![CDATA[<p><code>3D Touch</code>是苹果<code>iOS9</code>推出的新特性，同样是iPhone6s和6sPlus的一个新功能。之前的苹果设备则不能实现这样的功能。它的出现使app更加便捷化，能够让用户快速的定位到目的页面。</p><a id="more"></a><p>实现<code>3D Touc</code>h功能有<strong>静态</strong>和<strong>动态</strong>两种：</p><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>只需要在<code>info.plist</code>文件进行简单的键值配置就行（我还是比较习惯使用代码，这样比较灵活且不易出错）<br><img src="http://blog.idbeny.com/myy8e.png@normal" alt=""></p><ul><li><code>UIApplicationShortcutItemType</code> 点击事件唯一标识符，用来判断点击的是哪个元素</li><li><code>UIApplicationShortcutItemTitle</code> 标题</li><li><code>UIApplicationShortcutItemSubtitle</code> 副标题，在标题的下方</li><li><code>UIApplicationShortcutItemIconType</code> 选取系统的图标类型（枚举）</li><li><code>UIApplicationShortcutItemIconFile</code> 自定义图标（35*35，单色图片），如果设置这个属性，那么<code>UIApplicationShortcutItemIconType</code>将失效</li></ul><p><em>注意：<code>UIApplicationShortcutItemType</code>和<code>UIApplicationShortcutItemTitle</code>为必填，其它为选填</em></p><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>在需要的时候进行创建，不需要的时候取消已经存在的。（微信的“收付款”功能就是动态的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;日历</span><br><span class="line">UIApplicationShortcutIcon *dateIcon &#x3D; [UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeDate];</span><br><span class="line">    UIApplicationShortcutItem *dateItem &#x3D; [[UIApplicationShortcutItem alloc] initWithType:@&quot;date&quot; localizedTitle:@&quot;日历&quot; localizedSubtitle:@&quot;选个日期&quot; icon:dateIcon userInfo:nil];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;收藏</span><br><span class="line">UIApplicationShortcutIcon *favoriteIcon &#x3D; [UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeFavorite];</span><br><span class="line">    UIApplicationShortcutItem *favoriteItem &#x3D; [[UIApplicationShortcutItem alloc] initWithType:@&quot;favorite&quot; localizedTitle:@&quot;收藏&quot; localizedSubtitle:@&quot;收藏喜欢的东西&quot; icon:favoriteIcon userInfo:nil];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;首页</span><br><span class="line">UIApplicationShortcutIcon *homeIcon &#x3D; [UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeHome];</span><br><span class="line">    UIApplicationShortcutItem *homeItem &#x3D; [[UIApplicationShortcutItem alloc] initWithType:@&quot;home&quot; localizedTitle:@&quot;首页&quot; localizedSubtitle:@&quot;首页图标&quot; icon:homeIcon userInfo:nil];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;显示Item</span><br><span class="line">[UIApplication sharedApplication].shortcutItems &#x3D; @[homeItem,dateItem,favoriteItem,videoItem];</span><br></pre></td></tr></table></figure><p>用力按压app图标时，上面的元素就已经能够显示出来了。</p><h3 id="Item事件"><a href="#Item事件" class="headerlink" title="Item事件"></a>Item事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void (^)(BOOL))completionHandler&#123;</span><br><span class="line">    &#x2F;&#x2F;判断每个元素设置的唯一标识</span><br><span class="line">    if([shortcutItem.type isEqualToString:@&quot;home&quot;]) &#123;&#x2F;&#x2F;首页</span><br><span class="line">        UIViewController *homeVC &#x3D; [UIViewController new];</span><br><span class="line">        homeVC.view.backgroundColor &#x3D; [UIColor redColor];</span><br><span class="line">        [self addWindowRootViewController:homeVC LabelTitle:@&quot;首页&quot;];</span><br><span class="line">    &#125;else if([shortcutItem.type isEqualToString:@&quot;favorite&quot;])&#123;&#x2F;&#x2F;收藏</span><br><span class="line">        UIViewController *favoriteVC &#x3D; [UIViewController new];</span><br><span class="line">        favoriteVC.view.backgroundColor &#x3D; [UIColor redColor];</span><br><span class="line">        [self addWindowRootViewController:favoriteVC LabelTitle:@&quot;收藏&quot;];</span><br><span class="line">    &#125;else if ([shortcutItem.type isEqualToString:@&quot;date&quot;])&#123;&#x2F;&#x2F;日历</span><br><span class="line">        UIViewController *dateVC &#x3D; [UIViewController new];</span><br><span class="line">        dateVC.view.backgroundColor &#x3D; [UIColor redColor];</span><br><span class="line">        [self addWindowRootViewController:dateVC LabelTitle:@&quot;日期&quot;];</span><br><span class="line">    &#125;else&#123;&#x2F;&#x2F;视频</span><br><span class="line">        UIViewController *videoVC &#x3D; [UIViewController new];</span><br><span class="line">        videoVC.view.backgroundColor &#x3D; [UIColor redColor];</span><br><span class="line">        [self addWindowRootViewController:videoVC LabelTitle:@&quot;视频&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;作为window的根视图显示（实际应用的跳转可根据runtime机制进行操作，此处只作为模拟使用）</span><br><span class="line">- (void)addWindowRootViewController:(UIViewController *)rootViewController LabelTitle:(NSString *)title&#123;</span><br><span class="line">    UILabel *titleLabel &#x3D; [[UILabel alloc] initWithFrame:CGRectMake(0, 250, kScreen_width, 100)];</span><br><span class="line">    titleLabel.backgroundColor &#x3D; [UIColor orangeColor];</span><br><span class="line">    titleLabel.text &#x3D; [NSString stringWithFormat:@&quot;%@&quot;,title];</span><br><span class="line">    titleLabel.font &#x3D; [UIFont systemFontOfSize:50];</span><br><span class="line">    titleLabel.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class="line">    [rootViewController.view addSubview:titleLabel];</span><br><span class="line"></span><br><span class="line">    self.window.rootViewController &#x3D; rootViewController;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>以上代码我都写在AppDelegate.m文件中，仅供参考和理解。</em></p><blockquote><p>注意：<code>kScreen_width</code>是宏定义<code>#define kScreen_width ([UIScreen mainScreen].bounds.size.width)</code></p></blockquote><p>实际效果：<br><img src="http://blog.idbeny.com/yco31.png@normal" alt=""></p><ul><li>系统限制每个App最多显示4个Item，其它无效。</li><li>静态创建和动态创建同时存在的情况下，优先显示静态创建。</li><li><code>UIApplicationShortcutIconType</code>是系统给的一个枚举类型，里面有多种图标样式供我们选择。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 3D-Touch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS】截屏、保存图片到相册</title>
      <link href="/2017/03/31/ios-image-snip/"/>
      <url>/2017/03/31/ios-image-snip/</url>
      
        <content type="html"><![CDATA[<p>为了简便我们的开发，通常会建立一个分类来处理，废话不多说，直接上代码：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">typedef enum : NSUInteger &#123;</span><br><span class="line">    ImageRotationAngleZero &#x3D; 0,&#x2F;&#x2F;逆时针旋转0°</span><br><span class="line">    ImageRotationAngleM_PI_2 &#x3D; 90,&#x2F;&#x2F;逆时针旋转90°</span><br><span class="line">    ImageRotationAngleM_PI &#x3D; 180,&#x2F;&#x2F;逆时针旋转180°</span><br><span class="line">    ImageRotationAngle3M_PI_2 &#x3D; 270&#x2F;&#x2F;逆时针旋转270°</span><br><span class="line">&#125; ImageRotationAngle;</span><br><span class="line"></span><br><span class="line">@interface UIImage (SnipImage)</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 缩放并保存图片到相册</span><br><span class="line"></span><br><span class="line"> @param imagePath 图片地址</span><br><span class="line"> *&#x2F;</span><br><span class="line">+ (void)scaleAndSaveImage:(NSString *)imagePath;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 截屏并保存</span><br><span class="line"> *&#x2F;</span><br><span class="line">+ (void)snipAndSaveImage;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;UIImage+SnipImage.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation UIImage (SnipImage)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;截屏并裁剪保存图片</span><br><span class="line">+ (void)snipAndSaveImage&#123;</span><br><span class="line">    CGSize imageSize &#x3D; [[UIScreen mainScreen] bounds].size;</span><br><span class="line">    </span><br><span class="line">    UIGraphicsBeginImageContextWithOptions(imageSize, NO, 0);</span><br><span class="line">    </span><br><span class="line">    CGContextRef context &#x3D; UIGraphicsGetCurrentContext();</span><br><span class="line">    </span><br><span class="line">    for (UIWindow *window in [[UIApplication sharedApplication] windows]) &#123;</span><br><span class="line">        if (![window respondsToSelector:@selector(screen)] || [window screen] &#x3D;&#x3D; [UIScreen mainScreen]) &#123;</span><br><span class="line">            CGContextSaveGState(context);</span><br><span class="line">            </span><br><span class="line">            CGContextTranslateCTM(context, [window center].x, [window center].y);</span><br><span class="line">            </span><br><span class="line">            CGContextConcatCTM(context, [window transform]);</span><br><span class="line">            </span><br><span class="line">            CGContextTranslateCTM(context,</span><br><span class="line">                                  -[window bounds].size.width * [[window layer] anchorPoint].x,</span><br><span class="line">                                  -[window bounds].size.height * [[window layer] anchorPoint].y);</span><br><span class="line">            </span><br><span class="line">            [[window layer] renderInContext:context];</span><br><span class="line">            </span><br><span class="line">            CGContextRestoreGState(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIImage *snipImage &#x3D; UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    </span><br><span class="line">    UIGraphicsEndImageContext();</span><br><span class="line">    </span><br><span class="line">    UIImage *saveImage &#x3D; [self scaleImage:snipImage];</span><br><span class="line">    UIImageWriteToSavedPhotosAlbum(saveImage,self, nil, nil);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据图片地址裁剪并保存图片</span><br><span class="line">+ (void)scaleAndSaveImage:(NSString *)imagePath&#123;</span><br><span class="line">    UIImage *image &#x3D; [UIImage imageWithContentsOfFile:imagePath];</span><br><span class="line">    </span><br><span class="line">    UIImage *saveImage &#x3D; [self scaleImage:image];</span><br><span class="line">    </span><br><span class="line">    UIImageWriteToSavedPhotosAlbum(saveImage,self, nil, nil);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;裁剪图片(此处容易有坑 *所有的尺寸应该是分辨率)</span><br><span class="line">+ (UIImage *)scaleImage:(UIImage *)image&#123;</span><br><span class="line">    CGFloat screenPX_width &#x3D; [UIScreen mainScreen].bounds.size.width*2;</span><br><span class="line">    CGFloat screenPX_height &#x3D; [UIScreen mainScreen].bounds.size.height*2;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;裁剪区域根据需求自己处理</span><br><span class="line">    CGFloat scaleImage_offset &#x3D; 10;</span><br><span class="line">    CGFloat scaleImage_height &#x3D; screenPX_height-30*2;</span><br><span class="line">    CGFloat scaleImage_width &#x3D; screenPX_width * 0.635;</span><br><span class="line">    CGFloat scaleImage_x &#x3D; (screenPX_width - scaleImage_width)&#x2F;2+scaleImage_offset;</span><br><span class="line">    CGFloat scaleImage_y &#x3D; 30;</span><br><span class="line">    </span><br><span class="line">    UIImage *scaleImage &#x3D; [UIImage imageWithCGImage:CGImageCreateWithImageInRect(image.CGImage, CGRectMake(scaleImage_x, scaleImage_y, scaleImage_width, scaleImage_height))];</span><br><span class="line">    UIImage *saveImage &#x3D; [self rotationImage:scaleImage angle:270];</span><br><span class="line">    return saveImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;旋转图片到指定角度</span><br><span class="line">+ (UIImage *)rotationImage:(UIImage *)image angle:(ImageRotationAngle)angle&#123;</span><br><span class="line">    long double rotate &#x3D; 0.0;</span><br><span class="line">    CGRect rect;</span><br><span class="line">    float translateX &#x3D; 0;</span><br><span class="line">    float translateY &#x3D; 0;</span><br><span class="line">    float scaleX &#x3D; 1.0;</span><br><span class="line">    float scaleY &#x3D; 1.0;</span><br><span class="line">    </span><br><span class="line">    switch (angle) &#123;</span><br><span class="line">        case ImageRotationAngleZero:</span><br><span class="line">            return image;</span><br><span class="line">            break;</span><br><span class="line">        </span><br><span class="line">        case ImageRotationAngleM_PI_2:</span><br><span class="line">            rotate &#x3D; M_PI_2;</span><br><span class="line">            rect &#x3D; CGRectMake(0, 0, image.size.height, image.size.width);</span><br><span class="line">            translateX &#x3D; 0;</span><br><span class="line">            translateY &#x3D; -rect.size.width;</span><br><span class="line">            scaleY &#x3D; rect.size.width&#x2F;rect.size.height;</span><br><span class="line">            scaleX &#x3D; rect.size.height&#x2F;rect.size.width;</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        case ImageRotationAngleM_PI:</span><br><span class="line">            rotate &#x3D; M_PI;</span><br><span class="line">            rect &#x3D; CGRectMake(0, 0, image.size.width, image.size.height);</span><br><span class="line">            translateX &#x3D; -rect.size.width;</span><br><span class="line">            translateY &#x3D; -rect.size.height;</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        case ImageRotationAngle3M_PI_2:</span><br><span class="line">            rotate &#x3D; 3 * M_PI_2;</span><br><span class="line">            rect &#x3D; CGRectMake(0, 0, image.size.height, image.size.width);</span><br><span class="line">            translateX &#x3D; -rect.size.height;</span><br><span class="line">            translateY &#x3D; 0;</span><br><span class="line">            scaleY &#x3D; rect.size.width&#x2F;rect.size.height;</span><br><span class="line">            scaleX &#x3D; rect.size.height&#x2F;rect.size.width;</span><br><span class="line">            break;</span><br><span class="line">            </span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIGraphicsBeginImageContext(rect.size);</span><br><span class="line">    CGContextRef context &#x3D; UIGraphicsGetCurrentContext();</span><br><span class="line">    CGContextTranslateCTM(context, 0.0, rect.size.height);</span><br><span class="line">    CGContextScaleCTM(context, 1.0, -1.0);</span><br><span class="line">    CGContextRotateCTM(context, rotate);</span><br><span class="line">    CGContextTranslateCTM(context, translateX, translateY);</span><br><span class="line">    </span><br><span class="line">    CGContextScaleCTM(context, scaleX, scaleY);</span><br><span class="line">    CGContextDrawImage(context, CGRectMake(0, 0, rect.size.width, rect.size.height), image.CGImage);</span><br><span class="line">    </span><br><span class="line">    UIImage *newImage &#x3D; UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    return newImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 截图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Mac】Terminal(终端)命令不能用</title>
      <link href="/2017/03/11/mac-terminal-not-work/"/>
      <url>/2017/03/11/mac-terminal-not-work/</url>
      
        <content type="html"><![CDATA[<p>最近一次在用终端敲命令的时候发现命令总是不执行(只有cd命令可以正常执行)，返回命令未识别的错误<code>-bash: source: command not found</code>，相信很多朋友也会遇到类似的问题。</p><a id="more"></a><p>解决步骤：</p><ol><li><p>命令行输入下面命令（这样可以保证命令行命令暂时能够使用。这行命令执行完后不要关闭终端）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;X11R6&#x2F;bin</span><br></pre></td></tr></table></figure></li><li><p>进入当前Home目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>bash_profile</code>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure></li><li><p>文件内容是你之前配置过的path，把全部内容删除(将自己有用的部分备份，Terminal修复后再加到里面)，加入PATH：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure></li></ol><p><em>保存文件并退出(不要退出Terminal)</em></p><ol start="5"><li>继续执行命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure></li></ol><p>重启Terminal即可，完毕！</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】Git的基本使用</title>
      <link href="/2016/01/19/git-basic/"/>
      <url>/2016/01/19/git-basic/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Git？"><a href="#什么是Git？" class="headerlink" title="什么是Git？"></a>什么是Git？</h3><p>版本控制系统（VCS：Version Control System）</p><a id="more"></a><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul><li>分布式版本控制</li><li>多个开发人员协调工作</li><li>有效监听谁做的修改</li><li>本地及远程操作</li></ul><h3 id="下载Git："><a href="#下载Git：" class="headerlink" title="下载Git："></a>下载Git：</h3><ul><li>Mac：<a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">https://git-scm.com/download/mac</a></li><li>Windows：<a href="https://git-scm.com/downloadwin" target="_blank" rel="noopener">https://git-scm.com/downloadwin</a></li></ul><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><ul><li><code>git init</code> 初始化本地git仓库</li><li><code>git add &lt;file&gt;</code> 添加文件</li><li><code>git status</code> 查看状态</li><li><code>git commit</code> 提交</li><li><code>git push</code> 推送到仓库</li><li><code>git pull</code> 从远程仓库拉取数据</li><li><code>git clone</code> 从远程仓库拷贝数据</li></ul><h3 id="初始化-amp-提交代码"><a href="#初始化-amp-提交代码" class="headerlink" title="初始化&amp;提交代码"></a>初始化&amp;提交代码</h3><ol><li><p>创建好项目后，初始化仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>全局配置用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#39;用户名&#39;</span><br></pre></td></tr></table></figure></li><li><p>全局配置邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &#39;邮箱地址&#39;</span><br></pre></td></tr></table></figure></li><li><p>添加代码到缓存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure><p>例：git add index.html</p></li></ol><ul><li>添加某一类文件： git add *.html</li><li>添加所有文件： git add .</li><li>如果文件添加缓存区后又修改了内容，再次git add 文件名即可</li></ul><ol start="5"><li>移除已缓存文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git rm –cached index.html</li></ul><ol start="6"><li>查看工作区和缓冲区文件状态<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li></ol><ul><li>添加/修改/移除等内容后，一般要配合git status使用，以便及时看到每个文件的状态</li></ul><ol start="7"><li>放弃工作区文件修改（工作区和缓存区有同一个文件时）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore &lt;file&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git restore index.html</li></ul><ol start="8"><li>提交代码到本地仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure></li></ol><ul><li>命令输完后，在新的界面填写本次提交描述，然后保存退出即可</li><li>完整命令： git commit -m ‘提交描述’</li></ul><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><ol><li><p>创建忽略文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure></li><li><p>编辑.gitignore</p></li></ol><ul><li>忽略具体文件：直接把文件全名写上即可（注意路径和扩展名），例：log.txt</li><li>忽略具体文件夹：填写文件夹路径，例：/dir</li></ul><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ol><li>新建分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git branch login</li></ul><ol start="2"><li>切换分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：git checkout login</li></ul><ol start="3"><li>合并分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 待合并的分支名</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：把login分支合并到master上，先把分支切换到master上，然后开始合并git merge login</li></ul><h3 id="推送远端仓库"><a href="#推送远端仓库" class="headerlink" title="推送远端仓库"></a>推送远端仓库</h3><ol><li>添加远程仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 远端仓库地址</span><br></pre></td></tr></table></figure></li></ol><ul><li>例：<a href="mailto:git@github.com">git@github.com</a>:idbeny/homework.git</li></ul><ol start="2"><li><p>连接远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure></li><li><p>推送到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol><ul><li>连上远程仓库后，推送只需要git push</li></ul><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库地址</span><br></pre></td></tr></table></figure><ul><li>例：git clone <a href="mailto:git@github.com">git@github.com</a>:idbeny/homework.git</li></ul><h3 id="Git和Github区别"><a href="#Git和Github区别" class="headerlink" title="Git和Github区别"></a>Git和Github区别</h3><ul><li>Git是代码管理工具</li><li>Github是基于Git实现的代码托管平台</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
